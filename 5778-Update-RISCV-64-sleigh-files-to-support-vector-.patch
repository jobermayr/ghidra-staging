From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Gary Hayward <garyhayward@gmail.com>
Date: Thu, 14 Sep 2023 13:46:58 -0400
Subject: [PATCH] 5778: Update RISCV-64 sleigh files to support vector, bit
 manipulation, and crypto extensions

update RISCV-64 sleigh files to current vector, bitmap, and crypto extensions

Add certifications thanks to @jobermayr

Fill in some scalar bit manipulation and crypto instruction extensions

Add pcode semantics for some of the vector instrinsics used in example code.

Add THead vendor-specific RISCV extensions also implemented in `objdump`.

Collect thead extensions into new language definitions RV64GCV_THEAD and RV32GCV_THEAD

Cherrypick 32 bit corrections and thead semantics provided by @madushan1000

Add placeholder pcodeops to riscv vector instructions

Update support for bit manipulation and compressed instructions; add a Readme concerning ISA extensions
---
 .../Processors/RISCV/certification.manifest   |   14 +
 .../data/languages/Readme_isa_extensions.md   |  119 +
 .../RISCV/data/languages/riscv.custom.sinc    |    2 +-
 .../data/languages/riscv.ilp32d_thead.slaspec |   31 +
 .../RISCV/data/languages/riscv.instr.sinc     |   14 +-
 .../RISCV/data/languages/riscv.ldefs          |   26 +
 .../RISCV/data/languages/riscv.lp64d.slaspec  |    2 +
 .../data/languages/riscv.lp64d_thead.slaspec  |   31 +
 .../RISCV/data/languages/riscv.priv.sinc      |   44 +-
 .../RISCV/data/languages/riscv.reg.sinc       |    6 +
 .../RISCV/data/languages/riscv.rv32b.sinc     |  258 +-
 .../RISCV/data/languages/riscv.rv32p.sinc     |   44 +-
 .../RISCV/data/languages/riscv.rv64b.sinc     |   12 +-
 .../RISCV/data/languages/riscv.rv64k.sinc     |    2 +
 .../RISCV/data/languages/riscv.rvv.sinc       | 3967 ++++++++++++++---
 .../RISCV/data/languages/riscv.table.sinc     |   26 +-
 .../RISCV/data/languages/riscv.xthead.sinc    |  712 +++
 .../RISCV/data/languages/riscv.zcb.sinc       |   71 +
 .../RISCV/data/languages/riscv.zknd.sinc      |   16 +
 .../RISCV/data/languages/riscv.zkne.sinc      |    5 +
 .../RISCV/data/languages/riscv.zknh.sinc      |   41 +
 .../RISCV/data/languages/riscv.zksed.sinc     |    5 +
 .../RISCV/data/languages/riscv.zksh.sinc      |    5 +
 .../RISCV/data/languages/riscv.zvbb.sinc      |   64 +
 .../RISCV/data/languages/riscv.zvkng.sinc     |   35 +
 .../RISCV/data/languages/riscv.zvksg.sinc     |   14 +
 26 files changed, 4800 insertions(+), 766 deletions(-)
 create mode 100644 Ghidra/Processors/RISCV/data/languages/Readme_isa_extensions.md
 create mode 100644 Ghidra/Processors/RISCV/data/languages/riscv.ilp32d_thead.slaspec
 create mode 100644 Ghidra/Processors/RISCV/data/languages/riscv.lp64d_thead.slaspec
 create mode 100644 Ghidra/Processors/RISCV/data/languages/riscv.xthead.sinc
 create mode 100644 Ghidra/Processors/RISCV/data/languages/riscv.zcb.sinc
 create mode 100644 Ghidra/Processors/RISCV/data/languages/riscv.zknd.sinc
 create mode 100644 Ghidra/Processors/RISCV/data/languages/riscv.zkne.sinc
 create mode 100644 Ghidra/Processors/RISCV/data/languages/riscv.zknh.sinc
 create mode 100644 Ghidra/Processors/RISCV/data/languages/riscv.zksed.sinc
 create mode 100644 Ghidra/Processors/RISCV/data/languages/riscv.zksh.sinc
 create mode 100644 Ghidra/Processors/RISCV/data/languages/riscv.zvbb.sinc
 create mode 100644 Ghidra/Processors/RISCV/data/languages/riscv.zvkng.sinc
 create mode 100644 Ghidra/Processors/RISCV/data/languages/riscv.zvksg.sinc

diff --git a/Ghidra/Processors/RISCV/certification.manifest b/Ghidra/Processors/RISCV/certification.manifest
index 569138783..95a6127c0 100644
--- a/Ghidra/Processors/RISCV/certification.manifest
+++ b/Ghidra/Processors/RISCV/certification.manifest
@@ -1,5 +1,6 @@
 ##VERSION: 2.0
 Module.manifest||GHIDRA||||END|
+data/languages/Readme_isa_extensions.md||GHIDRA||||END|
 data/languages/RV32G.pspec||GHIDRA||||END|
 data/languages/RV32GC.pspec||GHIDRA||||END|
 data/languages/RV32I.pspec||GHIDRA||||END|
@@ -12,9 +13,11 @@ data/languages/RV64IC.pspec||GHIDRA||||END|
 data/languages/riscv.csr.sinc||GHIDRA||||END|
 data/languages/riscv.custom.sinc||GHIDRA||||END|
 data/languages/riscv.ilp32d.slaspec||GHIDRA||||END|
+data/languages/riscv.ilp32d_thead.slaspec||GHIDRA||||END|
 data/languages/riscv.instr.sinc||GHIDRA||||END|
 data/languages/riscv.ldefs||GHIDRA||||END|
 data/languages/riscv.lp64d.slaspec||GHIDRA||||END|
+data/languages/riscv.lp64d_thead.slaspec||GHIDRA||||END|
 data/languages/riscv.opinion||GHIDRA||||END|
 data/languages/riscv.priv.sinc||GHIDRA||||END|
 data/languages/riscv.reg.sinc||GHIDRA||||END|
@@ -39,7 +42,18 @@ data/languages/riscv.rv64q.sinc||GHIDRA||||END|
 data/languages/riscv.rvc.sinc||GHIDRA||||END|
 data/languages/riscv.rvv.sinc||GHIDRA||||END|
 data/languages/riscv.table.sinc||GHIDRA||||END|
+data/languages/riscv.xthead.sinc||GHIDRA||||END|
+data/languages/riscv.zcb.sinc||GHIDRA||||END|
 data/languages/riscv.zi.sinc||GHIDRA||||END|
+data/languages/riscv.zbkx.sinc||GHIDRA||||END|
+data/languages/riscv.zknd.sinc||GHIDRA||||END|
+data/languages/riscv.zkne.sinc||GHIDRA||||END|
+data/languages/riscv.zknh.sinc||GHIDRA||||END|
+data/languages/riscv.zksed.sinc||GHIDRA||||END|
+data/languages/riscv.zksh.sinc||GHIDRA||||END|
+data/languages/riscv.zvbb.sinc||GHIDRA||||END|
+data/languages/riscv.zvkng.sinc||GHIDRA||||END|
+data/languages/riscv.zvksg.sinc||GHIDRA||||END|
 data/languages/riscv32-fp.cspec||GHIDRA||||END|
 data/languages/riscv32.cspec||GHIDRA||||END|
 data/languages/riscv32.dwarf||GHIDRA||||END|
diff --git a/Ghidra/Processors/RISCV/data/languages/Readme_isa_extensions.md b/Ghidra/Processors/RISCV/data/languages/Readme_isa_extensions.md
new file mode 100644
index 000000000..5ed347134
--- /dev/null
+++ b/Ghidra/Processors/RISCV/data/languages/Readme_isa_extensions.md
@@ -0,0 +1,119 @@
+# RISCV Instruction Set Extensions
+
+The RISCV instruction set is relatively easy to extend with new instructions.  This can challenge Ghidra to match the processor 'language' to
+any given imported binary.  This note collects information on how others manage extensions and use them in disassembly.
+
+## Fedora-39 examples
+
+The RISCV-64 `libc.so.6` library from Fedora39 explicitly describes the required processor extensions with the `Tag_RISCV_arch` Elf file attribute.
+
+```console
+readelf -a system_lib/libc.so.6|grep Tag_RISCV_arch
+  Tag_RISCV_arch: "rv64i2p1_m2p0_a2p1_f2p2_d2p2_c2p0_zicsr2p0_zifencei2p0_zmmul1p0"
+```
+
+That roughly translates to a supportted instruction set of:
+
+* RV64I version 2.1
+* m 2.0 - integer multiplication and division
+* a 2.1 - atomic instructions
+* f 2.2 - single precision floating point
+* d 2.2 - double precision floating point
+* c 2.0 - compressed instructions
+* zicsr 2.0 - privileged instructions
+* zifencei 2.0 - defines the fence.i instruction for fencing instruction memory stores
+* zmmul 1.0 - the muliplication subset of the m extension
+
+These extensions are defined in https://riscv.org/technical/specifications,
+https://wiki.riscv.org/display/HOME/Recently+Ratified+Extensions,
+https://wiki.riscv.org/display/HOME/Specification+Status,
+and https://five-embeddev.com/riscv-isa-manual/latest/zifencei.html#.
+
+For a broader summary of RISCV extensions, and how the kernel identifies available extensions, see https://research.redhat.com/blog/article/risc-v-extensions-whats-available-and-how-to-find-it.
+
+In general, ISA extensions not fully ratified are prefixed with `z`, while vendor-specific extensions are prefixed with `x`.
+The `z` extensions generally have non-conflicting opcode encodings.  Vendor-specific `x` extensions *may* have overlapping
+encodings.
+
+A Fedora 39 RISCV kernel goes into more detail on supported extensions with strings like:
+    rv64i2p1_m2p0_a2p1_f2p2_d2p2_c2p0_v1p0_zicsr2p0_zifencei2p0_zihintpause2p0_zmmul1p0_zbb1p0_zve32f1p0_zve32x1p0_zve64d1p0_zve64f1p0_zve64x1p0_zvl128b1p0_zvl32b1p0_zvl64b1p0
+
+It is *not* obvious whether these extensions are required, supported, or simply recognized by this kernel.
+
+This extension list includes `zbb1p0`, referencing the zbb version 1.0 bit processing extension.
+If this extension is found on the processor at boot time, it likely invokes the Linux kernel `ALTERNATE` macro
+to modify the `strcmp` kernel function to silently invoke `strcmp_zbb` instead.
+
+>Note: this kernel example shows extension-dependent self-modifying kernel code, something to keep in mind when analyzing RISCV binaries.
+
+## Linux kernel approach to RISCV extensions
+
+The kernel discovers at boot time which extensions are available on each of the hardware threads (aka 'harts'), making the results available internally with
+calls like `__riscv_isa_extension_available(hart_isa[cpu].isa, ext)`.  The extensions themselves are defined in `arch/riscv/include/asm/hwcap.h`.
+
+## binutils approach to RISCV extensions
+
+We can compare Ghidra's ISA extension processing with that of `binutils`, since the `objdump` utility built and tested within `binutils`
+performs roughly the same function as Ghidra's importer and disassembler.  If `gas` can assemble the instructions and `objdump` can read them,
+then we have a decent test suite for Ghidra.
+
+The source repository for `binutils` is https://sourceware.org/git/binutils-gdb.git, currently at release 2.41.  Within that repository the
+current set of RISCV instruction encodings tested is found in `gas/testsuite/gas/riscv`.  Not all RISCV instruction extensions are found there - only those someone has
+thought likely to be useful in the near future.
+
+For example, `gas/testsuite/gas/riscv/vector-insns.s` is an 1870 line file used to test the vector instruction extensions with various operands.  We can assemble this with
+a compatible `gas` utility and `-march` architecture specification, then compare the disassembly generated by `objdump` and `ghidra`.  This gives us a good start on
+a Ghidra RISCV import binary testsuite, as well as a sense of which extension instructions are likely to be found in deployment anytime soon.
+
+Binutils provides selected vendor-specific extensions, currently including:
+
+* `x-thead` extensions from [Alibaba's](https://www.scmp.com/tech/big-tech/article/3212122/alibabas-chip-unit-t-head-steps-risc-v-development-china-pushes-open-source-architecture-face-us) cpu development initiative
+* `x-ventana` extensions from Ventana
+* `xsfvcp` extensions from SI-Five
+
+Extension instructions can appear in deployed code without being supported by `binutils`.  This is especially true for kernel code, as vendors can use kernel macros to assemble highly
+specialized instructions needed for VM memory fencing and cache coherence.
+
+`objdump` for RISCV generally is built to handle all known extensions in its test suite - but these extensions must be manually enabled on the command line.
+
+## Ghidra's approach to RISCV extensions
+
+When Ghidra imports an ELF file it inspects `e_machiine` and `e_flags` to find the *basic* RISCV variant.  The known variants are defined in `riscv.opinion`.  A binary for a general purpose 64 bit RISCV
+processor with the G profile (I, M, A, and F extensions) and the C extension will get the `RV64GC` variant as the default 'language'.  If the user enables languages other than the recommended language
+they will also see variants defined in `riscv.ldefs`.  This includes `RV64GC` as well as `RV64GCV_THEAD`, where `RV64GCV_THEAD` includes the roughly 10 Alibaba THead extensions supported in the binutils gas testsuite.
+
+Each variant links to a (likely shared) `slaspec` file to include base and extension instructions for that variant.  These are short files that profide `@define` and `@include` statements to access
+specific files in this directory.  The general purpose 64 bit `RV64GC` variant uses the slaspec file (`riscv.lp64d.slaspec`) and includes three baseline `riscv.*.sinc` files and one place-holder `riscv.custom.sinc` file.
+The THead variant `RV64GCV_THEAD` slaspec file `riscv.lp64d_thead.slaspec` is similar, except for:
+
+* `riscv.custom.sinc` is excluded as these placeholder opcodes may conflict with the THead extension opcodes
+* `riscv.xthead.sinc` is included as the `sinc` file holding the 10 current THead extensions supported by binutils
+* `@define` statements enabling each of the 10 extensions, using binutils naming conventions.
+
+Ghidra scans for `slaspec` files during its sleigh compile phase, generating a new 8 MB `.sla` file for each RISCV variant found.
+That means Ghidra support for the 32 and 64 bit THead extensions adds about 16
+MB of `.sla` files to the unzipped Ghidra distribution.
+
+## Gnu Compiler Suite approach to RISCV extensions
+
+GCC can include embedded assembly instructions, passing them to the `gas` assembler.  This includes ISA extension instructions.
+For example, multiple bit manipulation instruction extensions can be enabled by appending `-march=rv64i_zba_zbb_zbc_zbs` to the gcc or gas command line.
+GCC can optimize generated code to use extension instructions, substituting cheaper extension instruction sequences for the nominal base instructions.
+This is easy for simple bit manipulation operations and harder for the vectorization of loops.
+
+The RISCV vector extension treatment by GCC is complex. Source code written explicitly for RISCV vector extensions uses *intrinsics* (see https://github.com/riscv-non-isa/rvv-intrinsic-doc).
+These instrinsic functions capture mode and execution vector instructions.  Because there are so many modes and variants in vector contexts there can be upwards of 30,000 different vector instrinsics
+known to gcc.  That's too many to name explicitly in a C header file, so GCC precompiles these intrinsics directly into the riscv compiler.  Therefore `#include <riscv_vector.h>` does not itself define
+any of the vector intrinsic functions.
+
+See https://github.com/ggerganov/whisper.cpp.git for an example of riscv vector instrinsic use, in the file `ggml_quants.c`.
+
+## Testing Ghidra implementations of RISCV extensions
+
+>Note: drafty test-driven-design suggestions follow
+
+* RISCV instruction extensions found in the main branch of the binutils gas testsuite should generally be recognized by Ghidra
+* The Ghidra default RISCV variants should track the current RISCV [profiles](https://github.com/riscv/riscv-profiles/blob/main/rva23-profile.adoc)
+* Where feasible, `binutils` and Ghidra should produce identical disassembly.  Exceptions include:
+    * immediate operands can be either hex or decimal
+    * compressed instructions need not be translated to their uncompressed equivalent
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.custom.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.custom.sinc
index 75a6ff7a2..deb5891af 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.custom.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.custom.sinc
@@ -1,4 +1,4 @@
-# custom
+# generic custom
 
 define pcodeop custom0;
 define pcodeop custom0.rs1;
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.ilp32d_thead.slaspec b/Ghidra/Processors/RISCV/data/languages/riscv.ilp32d_thead.slaspec
new file mode 100644
index 000000000..4c3e8f41c
--- /dev/null
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.ilp32d_thead.slaspec
@@ -0,0 +1,31 @@
+define endian=little;
+
+@define XLEN 4
+@define XLEN2 8
+@define FLEN 8
+
+@define MXLEN_1 31
+@define MXLEN_2 30
+
+@define ADDRSIZE "32"
+@define FPSIZE "64"
+
+@include "riscv.reg.sinc"
+@include "riscv.table.sinc"
+@include "riscv.instr.sinc"
+
+# define version specific tags for each of the currently stable THead extensions
+#  ELF binaries including these extensions should have matching tags visible with
+#  readelf -A
+@define xtheadba1p0 1
+@define xtheadbb1p0 1
+@define xtheadbs1p0 1
+@define xtheadcmo1p0 1
+@define xtheadcondmov1p0 1
+@define xtheadfmemidx1p0 1
+@define xtheadmac1p0 1
+@define xtheadmemidx1p0 1
+@define xtheadmempair1p0 1
+@define xtheadsync1p0 1
+
+@include "riscv.xthead.sinc"
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.instr.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.instr.sinc
index 743bdbaf3..a326f0d8b 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.instr.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.instr.sinc
@@ -2,9 +2,9 @@
 
 @if ADDRSIZE == "32" || ADDRSIZE == "64" || ADDRSIZE == "128"
 @include "riscv.rv32i.sinc"
+@include "riscv.rv32b.sinc"
 @include "riscv.rv32a.sinc"
 @include "riscv.rv32m.sinc"
-@include "riscv.rv32b.sinc"
 @include "riscv.rv32p.sinc"
 @include "riscv.rv32k.sinc"
 
@@ -25,7 +25,6 @@
 @include "riscv.rv64i.sinc"
 @include "riscv.rv64a.sinc"
 @include "riscv.rv64m.sinc"
-@include "riscv.rv64b.sinc"
 @include "riscv.rv64p.sinc"
 @include "riscv.rv64k.sinc"
 
@@ -46,10 +45,17 @@
 @include "riscv.priv.sinc"
 @include "riscv.rvc.sinc"
 @include "riscv.rvv.sinc"
+@include "riscv.zcb.sinc"
+@include "riscv.zknd.sinc"
+@include "riscv.zkne.sinc"
+@include "riscv.zknh.sinc"
+@include "riscv.zksed.sinc"
+@include "riscv.zksh.sinc"
+@include "riscv.zvbb.sinc"
+@include "riscv.zvkng.sinc"
+@include "riscv.zvksg.sinc"
 @include "riscv.zi.sinc"
 
-@include "riscv.custom.sinc"
-
 # todos that may be possible, mostly just artifacts from my
 # script to generate the initial SELIGH
 
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.ldefs b/Ghidra/Processors/RISCV/data/languages/riscv.ldefs
index ab3fbedb3..1406e6af1 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.ldefs
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.ldefs
@@ -54,6 +54,19 @@
     <external_name tool="gnu" name="riscv:rv64"/>
     <external_name tool="DWARF.register.mapping.file" name="riscv64.dwarf"/>
   </language>
+  <language processor="RISCV"
+            endian="little"
+            size="64"
+            variant="RV64GCV_THEAD"
+            version="1.3"
+            slafile="riscv.lp64d_thead.sla"
+            processorspec="RV64GC.pspec"
+            id="RISCV:LE:64:thead">
+    <description>RISC-V 64 little with THead ISA extensions</description>
+    <compiler name="gcc" spec="riscv64-fp.cspec" id="gcc"/>
+    <external_name tool="DWARF.register.mapping.file" name="riscv64.dwarf"/>
+    <external_name tool="gnu" name="riscv:rv64"/>
+  </language>
   <language processor="RISCV"
             endian="little"
             size="64"
@@ -145,5 +158,18 @@
     <external_name tool="gnu" name="riscv:rv32"/>
     <external_name tool="DWARF.register.mapping.file" name="riscv32.dwarf"/>
   </language>
+  <language processor="RISCV"
+            endian="little"
+            size="32"
+            variant="RV32GCV_THEAD"
+            version="1.3"
+            slafile="riscv.ilp32d_thead.sla"
+            processorspec="RV32GC.pspec"
+            id="RISCV:LE:32:thead">
+    <description>RISC-V 32 little with THead extensions</description>
+    <compiler name="gcc" spec="riscv32-fp.cspec" id="gcc"/>
+    <external_name tool="gnu" name="riscv:rv32"/>
+    <external_name tool="DWARF.register.mapping.file" name="riscv32.dwarf"/>
+  </language>
   
 </language_definitions>
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.lp64d.slaspec b/Ghidra/Processors/RISCV/data/languages/riscv.lp64d.slaspec
index c07b5382e..7dcf78cce 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.lp64d.slaspec
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.lp64d.slaspec
@@ -13,3 +13,5 @@ define endian=little;
 @include "riscv.reg.sinc"
 @include "riscv.table.sinc"
 @include "riscv.instr.sinc"
+# include placeholders for *some* custom instructions
+@include "riscv.custom.sinc"
\ No newline at end of file
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.lp64d_thead.slaspec b/Ghidra/Processors/RISCV/data/languages/riscv.lp64d_thead.slaspec
new file mode 100644
index 000000000..b139558b9
--- /dev/null
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.lp64d_thead.slaspec
@@ -0,0 +1,31 @@
+define endian=little;
+
+@define XLEN 8
+@define XLEN2 16
+@define FLEN 8
+
+@define MXLEN_1 63
+@define MXLEN_2 62
+
+@define ADDRSIZE "64"
+@define FPSIZE "64"
+
+@include "riscv.reg.sinc"
+@include "riscv.table.sinc"
+@include "riscv.instr.sinc"
+
+# define version specific tags for each of the currently stable THead extensions
+#  ELF binaries including these extensions should have matching tags visible with
+#  readelf -A
+@define xtheadba1p0 1
+@define xtheadbb1p0 1
+@define xtheadbs1p0 1
+@define xtheadcmo1p0 1
+@define xtheadcondmov1p0 1
+@define xtheadfmemidx1p0 1
+@define xtheadmac1p0 1
+@define xtheadmemidx1p0 1
+@define xtheadmempair1p0 1
+@define xtheadsync1p0 1
+
+@include "riscv.xthead.sinc"
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.priv.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.priv.sinc
index 818727a42..a5953500f 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.priv.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.priv.sinc
@@ -3,6 +3,10 @@
 define pcodeop wfi;
 define pcodeop sfence.vm;
 define pcodeop sfence.vma;
+define pcodeop sfence.w.inval;
+define pcodeop sfence.inval.ir;
+define pcodeop hfence.vvma;
+define pcodeop hfence.gvma;
 
 # Trap-Return
 
@@ -29,14 +33,12 @@ define pcodeop sfence.vma;
 	return [sepc];
 }
 
-
 # uret  00200073 ffffffff SIMPLE (0, 0) 
 :uret  is op0001=0x3 & op0204=0x4 & op0506=0x3 & funct3=0x0 & op0711=0x0 & op1531=0x40
 {
 	return [uepc];
 }
 
-
 # Interrupt-Management
 
 # wfi  10500073 ffffffff SIMPLE (0, 0) 
@@ -45,7 +47,6 @@ define pcodeop sfence.vma;
 	wfi();
 }
 
-
 # Supervisor Memory-Management
 
 # sfence.vm  10400073 ffffffff SIMPLE (0, 0) 
@@ -66,75 +67,84 @@ define pcodeop sfence.vma;
 	sfence.vma(rs1, rs2);
 }
 
+# hfence.vvma s,t 22000073 fe007fff SIMPLE (0, 0)
+:hfence.vvma rs1,rs2 is rs2 & rs1 & op0001=0x3 & op0204=0x4 & op0506=0x3 & funct3=0x0 & op0711=0x0 & op2531=0x11
+{
+	hfence.vvma(rs1, rs2);
+}
 
-
+# hfence.gvma s,t 62000073 fe007fff SIMPLE (0, 0)
+:hfence.gvma rs1,rs2 is rs2 & rs1 & op0001=0x3 & op0204=0x4 & op0506=0x3 & funct3=0x0 & op0711=0x0 & op2531=0x31
+{
+	hfence.gvma(rs1, rs2);
+}
 
 # Hypervisor Memory-Management
 #TODO  move to rv32h and rv64h?
 
-:hlv.b rd,rs1 is op0006=0x73 & funct3=0x4 & funct7=0x30 & rs1 & rd & op2024=0x0
+:hlv.b rd,(rs1) is op0006=0x73 & funct3=0x4 & funct7=0x30 & rs1 & rd & op2024=0x0
 {
 	rd = sext(*[ram]:1 rs1);
 }
 
-:hlv.bu rd,rs1 is op0006=0x73 & funct3=0x4 & funct7=0x30 & rs1 & rd & op2024=0x1
+:hlv.bu rd,(rs1) is op0006=0x73 & funct3=0x4 & funct7=0x30 & rs1 & rd & op2024=0x1
 {
 	rd = zext(*[ram]:1 rs1);
 }
 
-:hlv.h rd,rs1 is op0006=0x73 & funct3=0x4 & funct7=0x32 & rs1 & rd & op2024=0x0
+:hlv.h rd,(rs1) is op0006=0x73 & funct3=0x4 & funct7=0x32 & rs1 & rd & op2024=0x0
 {
 	rd = sext(*[ram]:2 rs1);
 }
 
-:hlv.hu rd,rs1, is op0006=0x73 & funct3=0x4 & funct7=0x32 & rs1 & rd & op2024=0x1
+:hlv.hu rd,(rs1) is op0006=0x73 & funct3=0x4 & funct7=0x32 & rs1 & rd & op2024=0x1
 {
 	rd = zext(*[ram]:2 rs1);
 }
 
-:hlvx.hu rd,rs1 is op0006=0x73 & funct3=0x4 & funct7=0x32 & rs1 & rd & op2024=0x3
+:hlvx.hu rd,(rs1) is op0006=0x73 & funct3=0x4 & funct7=0x32 & rs1 & rd & op2024=0x3
 {
 	rd = zext(*[ram]:2 rs1);
 }
 
-:hlv.w rd,rs1 is op0006=0x73 & funct3=0x4 & funct7=0x34 & rs1 & rd & op2024=0x0
+:hlv.w rd,(rs1) is op0006=0x73 & funct3=0x4 & funct7=0x34 & rs1 & rd & op2024=0x0
 {
 	assignW(rd, *[ram]:4 rs1);
 }
 
-:hlvx.wu rd,rs1 is op0006=0x73 & funct3=0x4 & funct7=0x34 & rs1 & rd & op2024=0x3
+:hlvx.wu rd,(rs1) is op0006=0x73 & funct3=0x4 & funct7=0x34 & rs1 & rd & op2024=0x3
 {
 	zassignW(rd, *[ram]:4 rs1);
 }
 
-:hsv.b rs1,rs2 is op0006=0x73 & funct3=0x4 & funct7=0x31 & op0711=0x0 & rs1 & rs2
+:hsv.b rs2,(rs1) is op0006=0x73 & funct3=0x4 & funct7=0x31 & op0711=0x0 & rs1 & rs2
 {
 	*[ram]:1 rs1 = rs2:1;
 }
 
-:hsv.h rs1,rs2 is op0006=0x73 & funct3=0x4 & funct7=0x33 & op0711=0x0 & rs1 & rs2
+:hsv.h rs2,(rs1) is op0006=0x73 & funct3=0x4 & funct7=0x33 & op0711=0x0 & rs1 & rs2
 {
 	*[ram]:2 rs1 = rs2:2;
 }
 
-:hsv.w rs1,rs2 is op0006=0x73 & funct3=0x4 & funct7=0x35 & op0711=0x0 & rs1 & rs2
+:hsv.w rs2,(rs1) is op0006=0x73 & funct3=0x4 & funct7=0x35 & op0711=0x0 & rs1 & rs2
 {
 	*[ram]:4 rs1 = rs2:4;
 }
 
 @if ADDRSIZE == "64"
 
-:hlv.wu rd,rs1 is op0006=0x73 & funct3=0x4 & funct7=0x34 & rs1 & rd & op2024=0x1
+:hlv.wu rd,(rs1) is op0006=0x73 & funct3=0x4 & funct7=0x34 & rs1 & rd & op2024=0x1
 {
 	rd = zext(*[ram]:4 rs1);
 }
 
-:hlv.d rd,rs1 is op0006=0x73 & funct3=0x4 & funct7=0x36 & rs1 & rd & op2024=0x0
+:hlv.d rd,(rs1) is op0006=0x73 & funct3=0x4 & funct7=0x36 & rs1 & rd & op2024=0x0
 {
 	rd = *[ram]:8 rs1;
 }
 
-:hsv.d rs1,rs2 is op0006=0x73 & funct3=0x4 & funct7=0x37 & op0711=0x0 & rs1 & rs2
+:hsv.d rs2,(rs1) is op0006=0x73 & funct3=0x4 & funct7=0x37 & op0711=0x0 & rs1 & rs2
 {
 	*[ram]:8 rs1 = rs2;
 }
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.reg.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.reg.sinc
index 5b09d07e4..a2a7d4cad 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.reg.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.reg.sinc
@@ -659,10 +659,12 @@ define token instr (32)
   op1527=(15,27)
   op1531=(15,31)
   op2020=(20,20)
+  imm2021=(20,21)
   op2022=(20,22)
   succ=(20,23)
   op2023=(20,23)
   op2024=(20,24)
+  sop2024=(20,24) signed
   r2024=(20,24)
   fr2024=(20,24)
   v2024=(20,24)
@@ -706,6 +708,7 @@ define token instr (32)
   csr_F0=(20,26)
   csr_F8=(20,25)
   csr_FC=(20,25)
+  op2029=(20,29)
   op2030=(20,30)
   op2031=(20,31)
   sop2031=(20,31) signed
@@ -719,6 +722,7 @@ define token instr (32)
   pred=(24,27)
   op2525=(25,25)
   op2526=(25,26)
+  sop2526=(25,26) signed
   op2527=(25,27)
   op2529=(25,29)
   op2530=(25,30)
@@ -762,7 +766,9 @@ define token cinstr (16)
   cop0404=(4,4)
   cop0406=(4,6)
   cop0505=(5,5)
+  cuimm0505=(5,5)
   cop0506=(5,6)
+  cuimm0506=(5,6)
   cop0512=(5,12)
   cop0606=(6,6)
   cop0707=(7,7)
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.rv32b.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.rv32b.sinc
index 41512c11c..42ecc252e 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.rv32b.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.rv32b.sinc
@@ -1,131 +1,247 @@
 # RV32 Bitmanip Extension
+imm2024: op2024 is op2024 {local tmp:$(XLEN) = op2024; export tmp;}
+imm2025: op2025 is op2025 {local tmp:$(XLEN) = op2025; export tmp;}
+imm2026: op2026 is op2026 {local tmp:$(XLEN) = op2026; export tmp;}
 
-:andn rd, rs1, rs2 is op0006=0x33 & op1214=0x7 & op2531=0x20 & rd & rs1 & rs2 unimpl
+define pcodeop add_uw;
+define pcodeop zext_w;
+:zext.w rd, rs1      is op0006=0x3b & op1214=0x0 & op1519=0x0 & op2531=0x04 & rd & rs1       {rd=zext_w(rs1);}
+:add.uw rd, rs1, rs2 is op0006=0x3b & op1214=0x0              & op2531=0x04 & rd & rs1 & rs2 {rd=add_uw(rs1,rs2);}
 
-:bdep rd, rs1, rs2 is op0006=0x33 & op1214=0x6 & op2531=0x24 & rd & rs1 & rs2 unimpl
+define pcodeop andn;
+:andn rd, rs1, rs2 is op0006=0x33 & op1214=0x7 & op2531=0x20 & rd & rs1 & rs2 {rd=andn(rs1,rs2);}
 
-:bext rd, rs1, rs2 is op0006=0x33 & op1214=0x6 & op2531=0x4 & rd & rs1 & rs2 unimpl
+# TODO: unaproved
+#define pcodeop bdep;
+#:bdep rd, rs1, rs2 is op0006=0x33 & op1214=0x6 & op2531=0x24 & rd & rs1 & rs2 {rd=bdep(rs1,rs2);}
+#
 
-:bfp rd, rs1, rs2 is op0006=0x33 & op1214=0x7 & op2531=0x24 & rd & rs1 & rs2 unimpl
+#efine pcodeop bext;
+#bext rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x24 & rd & rs1 & rs2 {rd=bext(rs1,rs2);}
 
-:clmul  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x5 & rd & rs1 & rs2 unimpl
+# TODO: unaproved
+#define pcodeop bfp;
+#:bfp rd, rs1, rs2 is op0006=0x33 & op1214=0x7 & op2531=0x24 & rd & rs1 & rs2 {rd=bfp(rs1,rs2);}
 
-:clmulh rd, rs1, rs2 is op0006=0x33 & op1214=0x3 & op2531=0x5 & rd & rs1 & rs2 unimpl
+define pcodeop clmul;
+:clmul  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x5 & rd & rs1 & rs2 {rd=clmul(rs1,rs2);}
 
-:clmulr rd, rs1, rs2 is op0006=0x33 & op1214=0x2 & op2531=0x5 & rd & rs1 & rs2 unimpl
+define pcodeop clmulh;
+:clmulh rd, rs1, rs2 is op0006=0x33 & op1214=0x3 & op2531=0x5 & rd & rs1 & rs2 {rd=clmulh(rs1,rs2);}
 
-:clz rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x0 & op2531=0x30 & rd & rs1 unimpl
+define pcodeop clmulr;
+:clmulr rd, rs1, rs2 is op0006=0x33 & op1214=0x2 & op2531=0x5 & rd & rs1 & rs2 {rd=clmulr(rs1,rs2);}
 
-:cmix rd, rs2, rs1, rs3 is op0006=0x33 & op1214=0x1 & op2526=0x3 & rd & rs1 & rs2 & rs3 unimpl
+define pcodeop clz;
+:clz rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x0 & op2531=0x30 & rd & rs1 {rd=clz(rs1);}
 
-:cmov rd, rs2, rs1, rs3 is op0006=0x33 & op1214=0x5 & op2526=0x3 & rd & rs1 & rs2 & rs3 unimpl
+define pcodeop clzw;
+:clzw rd, rs1 is op0006=0x1b & op1214=0x1 & op2024=0x0 & op2531=0x30 & rd & rs1 {rd=clzw(rs1);}
 
-:crc32.b rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x10 & op2531=0x30 & rd & rs1 unimpl
+# TODO: unaproved
+#define pcodeop cmix;
+#:cmix rd, rs2, rs1, rs3 is op0006=0x33 & op1214=0x1 & op2526=0x3 & rd & rs1 & rs2 & rs3 {rd=cmix(rs2,rs1,rs3);}
 
-:crc32.h rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x11 & op2531=0x30 & rd & rs1 unimpl
+# TODO: unaproved
+#define pcodeop cmov;
+#:cmov rd, rs2, rs1, rs3 is op0006=0x33 & op1214=0x5 & op2526=0x3 & rd & rs1 & rs2 & rs3 {rd=cmov(rs2,rs1,rs3);}
 
-:crc32.w rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x12 & op2531=0x30 & rd & rs1 unimpl
+# TODO: unaproved
+#define pcodeop crc32_b;
+#:crc32.b rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x10 & op2531=0x30 & rd & rs1 {rd=crc32_b(rs1);}
 
-:crc32c.b rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x18 & op2531=0x30 & rd & rs1 unimpl
+# TODO: unaproved
+#define pcodeop crc32_h;
+#:crc32.h rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x11 & op2531=0x30 & rd & rs1 {rd=crc32_h(rs1);}
 
-:crc32c.h rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x19 & op2531=0x30 & rd & rs1 unimpl
+# TODO: unaproved
+#define pcodeop crc32_w;
+#:crc32.w rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x12 & op2531=0x30 & rd & rs1 {rd=crc32_w(rs1);}
 
-:crc32c.w rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x1a & op2531=0x30 & rd & rs1 unimpl
+# TODO: unaproved
+#define pcodeop crc32c_b;
+#:crc32c.b rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x18 & op2531=0x30 & rd & rs1 {rd=crc32c_b(rs1);}
 
-:ctz rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x1 & op2531=0x30 & rd & rs1 unimpl
+# TODO: unaproved
+#define pcodeop crc32c_h;
+#:crc32c.h rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x19 & op2531=0x30 & rd & rs1 {rd=crc32c_h(rs1);}
 
-:fsl  rd, rs1, rs3, rs2 is op0006=0x33 & op1214=0x1 & op2526=0x2 & rd & rs1 & rs2 & rs3 unimpl
+# TODO: unaproved
+define pcodeop crc32c_w;
+#:crc32c.w rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x1a & op2531=0x30 & rd & rs1 {rd=crc32c_w(rs1);}
 
-:fsr  rd, rs1, rs3, rs2 is op0006=0x33 & op1214=0x5 & op2526=0x2 & rd & rs1 & rs2 & rs3 unimpl
+define pcodeop ctz;
+:ctz rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x1 & op2531=0x30 & rd & rs1 {rd=ctz(rs1);}
 
-#TODO  fix op2025
-#TODO  this looks like a typo in 0.92
-:fsri rd, rs1, rs3, op2025 is op0006=0x33 & op1214=0x5 & op2626=0x1 & op2025 & rd & rs1 & rs3 unimpl
+define pcodeop ctzw;
+:ctzw rd, rs1 is op0006=0x1b & op1214=0x1 & op2024=0x1 & op2531=0x30 & rd & rs1 {rd=ctzw(rs1);}
 
-:gorc  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x14 & rd & rs1 & rs2 unimpl
+# TODO: unaproved
+#define pcodeop fsl;
+#:fsl  rd, rs1, rs3, rs2 is op0006=0x33 & op1214=0x1 & op2526=0x2 & rd & rs1 & rs2 & rs3 {rd=fsl(rs1,rs3,rs2);}
 
-#TODO  fix op2026
-:gorci rd, rs1, op2026 is op0006=0x13 & op1214=0x5 & op2731=0x5 & op2026 & rd & rs1 unimpl
+# TODO: unaproved
+#define pcodeop fsr;
+#:fsr  rd, rs1, rs3, rs2 is op0006=0x33 & op1214=0x5 & op2526=0x2 & rd & rs1 & rs2 & rs3 {rd=fsr(rs1,rs3,rs2);}
 
-:grev  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x34 & rd & rs1 & rs2 unimpl
+# TODO: unaproved
+#define pcodeop fsri;
+#:fsri rd, rs1, rs3, imm2025 is op0006=0x33 & op1214=0x5 & op2626=0x1 & imm2025 & rd & rs1 & rs3 {rd=fsri(rs1,rs3,imm2025);}
 
-#TODO  fix op2026
-:grevi rd, rs1, op2026 is op0006=0x13 & op1214=0x5 & op2731=0xd & op2026 & rd & rs1 unimpl
+define pcodeop orc_b;
+:orc.b rd, rs1 is op0006=0x13 & rd & op1214=0x5 & rs1 & op2025=0x07 & op2631=0x0a {rd=orc_b(rs1);}
 
-:max  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x5 & rd & rs1 & rs2 unimpl
+# TODO: unaproved
+#define pcodeop grev;
+#:grev  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x34 & rd & rs1 & rs2 {rd=grev(rs1,rs2);}
 
-:maxu rd, rs1, rs2 is op0006=0x33 & op1214=0x7 & op2531=0x5 & rd & rs1 & rs2 unimpl
+define pcodeop rev8;
+define pcodeop rev_b;
+#define pcodeop grevi;
+#                   rev8 has different encodings for 32 and 64 bit CPUs
+:rev.b rd, rs1         is op0006=0x13 & op1214=0x5 & op2731=0xd & op2026=0x7  & rd & rs1 {rd=rev_b(rs1);}
+:rev8  rd, rs1         is op0006=0x13 & op1214=0x5 & op2731=0xd & op2026=0x18 & rd & rs1 {rd=rev8(rs1);}
+:rev8  rd, rs1         is op0006=0x13 & op1214=0x5 & op2731=0xd & op2026=0x38 & rd & rs1 {rd=rev8(rs1);}
+# :grevi rd, rs1, imm2026 is op0006=0x13 & op1214=0x5 & op2731=0xd & imm2026      & rd & rs1 {rd=grevi(rs1,imm2026);}
 
-:min  rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x5 & rd & rs1 & rs2 unimpl
+define pcodeop minu;
+:minu  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x5 & rd & rs1 & rs2 {rd=minu(rs1,rs2);}
 
-:minu rd, rs1, rs2 is op0006=0x33 & op1214=0x6 & op2531=0x5 & rd & rs1 & rs2 unimpl
+define pcodeop maxu;
+:maxu rd, rs1, rs2 is op0006=0x33 & op1214=0x7 & op2531=0x5 & rd & rs1 & rs2 {rd=maxu(rs1,rs2);}
 
-:orn  rd, rs1, rs2 is op0006=0x33 & op1214=0x6 & op2531=0x20 & rd & rs1 & rs2 unimpl
+define pcodeop min;
+:min  rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x5 & rd & rs1 & rs2 {rd=min(rs1,rs2);}
 
-:pack  rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x4 & rd & rs1 & rs2 unimpl
+define pcodeop max;
+:max rd, rs1, rs2 is op0006=0x33 & op1214=0x6 & op2531=0x5 & rd & rs1 & rs2 {rd=max(rs1,rs2);}
 
-:packh rd, rs1, rs2 is op0006=0x33 & op1214=0x7 & op2531=0x4 & rd & rs1 & rs2 unimpl
+define pcodeop orn;
+:orn  rd, rs1, rs2 is op0006=0x33 & op1214=0x6 & op2531=0x20 & rd & rs1 & rs2 {rd=orn(rs1,rs2);}
 
-:packu rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x24 & rd & rs1 & rs2 unimpl
+define pcodeop pack;
+:pack  rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x4 & rd & rs1 & rs2 {rd=pack(rs1,rs2);}
 
-:pcnt rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x2 & op2531=0x30 & rd & rs1 unimpl
+define pcodeop packh;
+:packh rd, rs1, rs2 is op0006=0x33 & op1214=0x7 & op2531=0x4 & rd & rs1 & rs2 {rd=packh(rs1,rs2);}
 
-:rol  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x30 & rd & rs1 & rs2 unimpl
+#TODO: remove unaproved code
+#define pcodeop packu;
+#:packu rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x24 & rd & rs1 & rs2 {rd=packu(rs1,rs2);}
 
-:ror  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x30 & rd & rs1 & rs2 unimpl
+define pcodeop packw;
+:packw rd, rs1, rs2 is op0006=0x3b & op1214=0x4 & op2531=0x04 & rd & rs1 & rs2 {rd=packw(rs1,rs2);}
 
-#TODO  fix op2026
-:rori rd, rs1, op2026 is op0006=0x13 & op1214=0x5 & op2731=0xc & op2026 & rd & rs1 unimpl
+define pcodeop zext_h;
+:zext.h rd, rs2 is op0006=0x3b & op1214=0x4 & op2531=0x04 & rd & op2024=0 & rs2 {rd=zext_h(rs2);}
 
-:sbclr  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x24 & rd & rs1 & rs2 unimpl
+define pcodeop cpop;
+:cpop rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x2 & op2531=0x30 & rd & rs1 {rd=cpop(rs1);}
 
-#TODO  fix op2026
-:sbclri rd, rs1, op2026 is op0006=0x13 & op1214=0x1 & op2731=0x9 & op2026 & rd & rs1 unimpl
+define pcodeop cpopw;
+:cpopw rd, rs1 is op0006=0x1b & op1214=0x1 & op2024=0x2 & op2531=0x30 & rd & rs1 {rd=cpopw(rs1);}
 
-:sbext  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x24 & rd & rs1 & rs2 unimpl
+define pcodeop rol;
+:rol  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x30 & rd & rs1 & rs2 {rd=rol(rs1,rs2);}
 
-#TODO  fix op2026
-:sbexti rd, rs1, op2026 is op0006=0x13 & op1214=0x5 & op2731=0x9 & op2026 & rd & rs1 unimpl
+define pcodeop rolw;
+:rolw  rd, rs1, rs2 is op0006=0x3b & op1214=0x1 & op2531=0x30 & rd & rs1 & rs2 {rd=rolw(rs1,rs2);}
 
-:sbinv  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x34 & rd & rs1 & rs2 unimpl
+define pcodeop ror;
+:ror  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x30 & rd & rs1 & rs2 {rd=ror(rs1,rs2);}
 
-#TODO  fix op2026
-:sbinvi rd, rs1, op2026 is op0006=0x13 & op1214=0x1 & op2731=0xd & op2026 & rd & rs1 unimpl
+define pcodeop rorw;
+:rorw  rd, rs1, rs2 is op0006=0x3b & op1214=0x5 & op2531=0x30 & rd & rs1 & rs2 {rd=rorw(rs1,rs2);}
 
-:sbset  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x14 & rd & rs1 & rs2 unimpl
+define pcodeop rori;
+:rori rd, rs1, imm2024 is op0006=0x13 & op1214=0x5 & op2531=0x30 & imm2024 & rd & rs1 {rd=rori(rs1,imm2024);}
 
-#TODO  fix op2026
-:sbseti rd, rs1, op2026 is op0006=0x13 & op1214=0x1 & op2731=0x5 & op2026 & rd & rs1 unimpl
+define pcodeop roriw;
+:roriw rd, rs1, imm2024 is op0006=0x1b & op1214=0x5 & op2531=0x30 & imm2024 & rd & rs1 {rd=roriw(rs1,imm2024);}
 
-:sext.b rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x4 & op2531=0x30 & rd & rs1 unimpl
+define pcodeop bclr;
+:bclr  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x24 & rd & rs1 & rs2 {rd=bclr(rs1,rs2);}
 
-:sext.h rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x5 & op2531=0x30 & rd & rs1 unimpl
+define pcodeop bclri;
+:bclri rd, rs1, imm2026 is op0006=0x13 & op1214=0x1 & op2731=0x9 & imm2026 & rd & rs1 {rd=bclri(rs1,imm2026);}
 
-:sh1add rd, rs1, rs2 is op0006=0x33 & op1214=0x2 & op2531=0x10 & rd & rs1 & rs2 unimpl
+define pcodeop bexti;
+:bexti rd, rs1, imm2026 is op0006=0x13 & op1214=0x5 & op2731=0x9 & imm2026 & rd & rs1 {rd=bexti(rs1,imm2026);}
 
-:sh2add rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x10 & rd & rs1 & rs2 unimpl
+define pcodeop binv;
+:binv  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x34 & rd & rs1 & rs2 {rd=binv(rs1,rs2);}
 
-:sh3add rd, rs1, rs2 is op0006=0x33 & op1214=0x6 & op2531=0x10 & rd & rs1 & rs2 unimpl
+define pcodeop binvi;
+:binvi rd, rs1, imm2026 is op0006=0x13 & op1214=0x1 & op2731=0xd & imm2026 & rd & rs1 {rd=binvi(rs1,imm2026);}
 
-:shfl    rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x4 & rd & rs1 & rs2 unimpl
+define pcodeop bset;
+:bset  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x14 & rd & rs1 & rs2 {rd=bset(rs1,rs2);}
 
-#TODO  fix op2025
-:shfli   rd, rs1, op2025 is op0006=0x13 & op1214=0x1 & op2631=0x2 & op2025 & rd & rs1 unimpl
+define pcodeop bseti;
+:bseti rd, rs1, imm2026 is op0006=0x13 & op1214=0x1 & op2731=0x5 & imm2026 & rd & rs1 {rd=bseti(rs1,imm2026);}
 
-:slo  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x10 & rd & rs1 & rs2 unimpl
+define pcodeop sext_b;
+:sext.b rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x4 & op2531=0x30 & rd & rs1 {rd=sext_b(rs1);}
 
-#TODO  fix op2026
-:sloi rd, rs1, op2026 is op0006=0x13 & op1214=0x1 & op2731=0x4 & op2026 & rd & rs1 unimpl
+define pcodeop sext_h;
+:sext.h rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x5 & op2531=0x30 & rd & rs1 {rd=sext_h(rs1);}
 
-:sro  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x10 & rd & rs1 & rs2 unimpl
+define pcodeop sh1add;
+:sh1add rd, rs1, rs2 is op0006=0x33 & op1214=0x2 & op2531=0x10 & rd & rs1 & rs2 {rd=sh1add(rs1,rs2);}
 
-#TODO  fix op2026
-:sroi rd, rs1, op2026 is op0006=0x13 & op1214=0x5 & op2731=0x4 & op2026 & rd & rs1 unimpl
+define pcodeop sh1add_uw;
+:sh1add.uw rd, rs1, rs2 is op0006=0x3b & op1214=0x2 & op2531=0x10 & rd & rs1 & rs2 {rd=sh1add_uw(rs1,rs2);}
 
-:unshfl  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x4 & rd & rs1 & rs2 unimpl
+define pcodeop sh2add;
+:sh2add rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x10 & rd & rs1 & rs2 {rd=sh2add(rs1,rs2);}
 
-#TODO  fix op2025
-:unshfli rd, rs1, op2025 is op0006=0x13 & op1214=0x5 & op2631=0x2 & op2025 & rd & rs1 unimpl
+define pcodeop sh2add_uw;
+:sh2add.uw rd, rs1, rs2 is op0006=0x3b & op1214=0x4 & op2531=0x10 & rd & rs1 & rs2 {rd=sh2add_uw(rs1,rs2);}
 
-:xnor rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x20 & rd & rs1 & rs2 unimpl
+define pcodeop sh3add;
+:sh3add rd, rs1, rs2 is op0006=0x33 & op1214=0x6 & op2531=0x10 & rd & rs1 & rs2 {rd=sh3add(rs1,rs2);}
 
+define pcodeop sh3add_uw;
+:sh3add.uw rd, rs1, rs2 is op0006=0x3b & op1214=0x6 & op2531=0x10 & rd & rs1 & rs2 {rd=sh3add_uw(rs1,rs2);}
+
+define pcodeop slli_uw;
+:slli.uw rd, rs1, imm2025 is op0006=0x1b & op1214=0x1 & op2631=0x2 & imm2025 & rd & rs1 {rd=slli_uw(rs1,imm2025);}
+
+# TODO: unaproved
+#define pcodeop slo;
+#:slo  rd, rs1, rs2 is op0006=0x33 & op1214=0x1 & op2531=0x10 & rd & rs1 & rs2 {rd=slo(rs1,rs2);}
+
+# TODO: unaproved
+#define pcodeop sloi;
+#:sloi rd, rs1, imm2026 is op0006=0x13 & op1214=0x1 & op2731=0x4 & imm2026 & rd & rs1 {rd=sloi(rs1,imm2026);}
+
+# TODO: unaproved
+#define pcodeop sro;
+#:sro  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x10 & rd & rs1 & rs2 {rd=sro(rs1,rs2);}
+
+# TODO: unaproved
+#define pcodeop sroi;
+#:sroi rd, rs1, imm2026 is op0006=0x13 & op1214=0x5 & op2731=0x4 & imm2026 & rd & rs1 {rd=sroi(rs1,imm2026);}
+
+# TODO: unaproved
+#define pcodeop unshfl;
+#:unshfl  rd, rs1, rs2 is op0006=0x33 & op1214=0x5 & op2531=0x4 & rd & rs1 & rs2 {rd=unshfl(rs1,rs2);}
+
+# TODO: unaproved
+#define pcodeop unshfli;
+#:unshfli rd, rs1, imm2025 is op0006=0x13 & op1214=0x5 & op2631=0x2 & imm2025 & rd & rs1 {rd=unshfli(rs1,imm2025);}
+
+define pcodeop xnor;
+:xnor rd, rs1, rs2 is op0006=0x33 & op1214=0x4 & op2531=0x20 & rd & rs1 & rs2 {rd=xnor(rs1,rs2);}
+
+define pcodeop unzip;
+:unzip rd, rs1 is op0006=0x13 & op1214=0x5 & op2024=0x1f & rd & rs1 & op2531=0x04 {rd=unzip(rs1);}
+
+define pcodeop zip;
+:zip rd, rs1 is op0006=0x13 & op1214=0x1 & op2024=0x1e & rd & rs1 & op2531=0x04 {rd=zip(rs1);}
+
+define pcodeop xperm_b;
+:xperm.b rd, rs1, rs2 is op0006=0x33 & rd & op1214=0x4 & rs1 & rs2 & op2531=0x14 {rd=xperm_b(rs1,rs2);}
+
+define pcodeop xperm_n;
+:xperm.nf rd, rs1, rs2 is op0006=0x33 & rd & op1214=0x2 & rs1 & rs2 & op2531=0x14 {rd=xperm_n(rs1,rs2);}
\ No newline at end of file
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.rv32p.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.rv32p.sinc
index 749f6b315..9872310e6 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.rv32p.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.rv32p.sinc
@@ -16,7 +16,7 @@
 
 
 # add64 rt, ra, rb 	 ; a64 = r[aU].r[aL]; b64 = r[bU].r[bL]; + ; + ; t64 = a64 + b64; + ; + ; r[tU].r[tL] = t64;
-:add64 rd,rs1,rs2 is op0006=0x3f & rd & rs1 & rs2 & funct3=0x1 & funct7=0x60
+:add64 rd,rs1,rs2 is op0006=0x77 & rd & rs1 & rs2 & funct3=0x1 & funct7=0x60
 {
 @if ADDRSIZE == "32"
 	local dst:$(XLEN) = &rd;
@@ -122,9 +122,12 @@
 # crsa16 rt, ra, rb 	 ; rt.H[_x_] = ra.H[_x_] - rb.H[_x-1_]; + ; rt.H[_x-1_] = ra.H[_x-1_] + rb.H[_x_]; ; (RV32: __x__=1, RV64: __x__=1,3)
 :crsa16 rd,rs1,rs2 is op0006=0x3f & rd & rs1 & rs2 & funct3=0x0 & funct7=0x23  unimpl
 
-
+imm2u: imm2021 is imm2021 { local tmp:$(XLEN) = imm2021; export tmp; }
 # insb rt, ra, imm3u 	 ; byte_idx = imm2u; // RV32 ; byte_idx = imm3u; // RV64 ; rt.B[byte_idx] = ra.B[0];
-:insb rd,rs1 is op0006=0x3f & rd & rs1 & funct3=0x0 & funct7=0x56 & subf5=0x00  unimpl
+define pcodeop insb;
+:insb rd,rs1,imm2u is op0006=0x77 & rd & funct3=0x0 & rs1  & imm2u & op2222=0x0 & op2324=0x0 & funct7=0x56 {
+    insb(rd, rs1, imm2u);
+}
 
 
 # kabs16 rt, ra 	 ; rt.H[_x_] = SAT.Q15(ABS(ra.H[_x_])); ; (RV32: __x__=1..0, RV64: __x__=3..0)
@@ -415,7 +418,10 @@
 
 
 # maxw rt, ra, rb 	 ; if (ra.W[0] >= rb.W[0]) \{ ; rt = SE(ra.W[0]); ; else \{ ; rt = SE(rb.W[0]); ; }
-:maxw rd,rs1,rs2 is op0006=0x3f & rd & rs1 & rs2 & funct3=0x0 & funct7=0x79  unimpl
+define pcodeop maxw;
+:maxw rd,rs1,rs2 is op0006=0x77 & rd & rs1 & rs2 & funct3=0x0 & funct7=0x79  {
+    maxw(rd, rs1, rs2);
+}
 
 
 # minw rt, ra, rb 	 ; if (ra.W[0] >= rb.W[0]) \{ ; rt = SE(rb.W[0]); ; else \{ ; rt = SE(ra.W[0]); ; }
@@ -433,7 +439,10 @@
 
 
 # mulr64 rt, ra, rb 	 ; RV32: ; mres[63:0] = ra u* rb; ; r[tU] = mres.W[1]; ; r[tL] = mres.W[0]; ; RV64: ; rt = ra.W[0] u* rb.W[0];
-:mulr64 rd,rs1,rs2 is op0006=0x3f & rd & rs1 & rs2 & funct3=0x1 & funct7=0x78  unimpl
+define pcodeop mulr64;
+:mulr64 rd,rs1,rs2 is op0006=0x77 & rd & funct3=0x1 & rs1 & rs2 &  funct7=0x78  {
+    mulr64(rd,rs1,rs2);
+}
 
 
 # mulsr64 rt, ra, rb 	 ; RV32: ; mres[63:0] = ra s* rb; ; r[tU] = mres.W[1]; ; r[tL] = mres.W[0]; ; RV64: ; rt = ra.W[0] s* rb.W[0];
@@ -455,11 +464,17 @@
 
 
 # pkbb16 rt, ra, rb 	 ; rt.W[_x_] = CONCAT(ra.W[_x_].H[0], rb.W[_x_].H[0]); ; (RV32: __x__=0, RV64: __x__=1..0)
-:pkbb16 rd,rs1,rs2 is op0006=0x3f & rd & rs1 & rs2 & funct3=0x1 & funct7=0x07  unimpl
+define pcodeop pkbb16;
+:pkbb16 rd,rs1,rs2 is op0006=0x77 & rd & rs1 & rs2 & funct3=0x1 & funct7=0x07  {
+    pkbb16(rd, rs1, rs2);
+}
 
 
 # pkbt16 rt, ra, rb 	 ; rt.W[_x_] = CONCAT(ra.W[_x_].H[0], rb.W[_x_].H[1]); ; (RV32: __x__=0, RV64: __x__=1..0)
-:pkbt16 rd,rs1,rs2 is op0006=0x3f & rd & rs1 & rs2 & funct3=0x1 & funct7=0x0f  unimpl
+define pcodeop pkbt16;
+:pkbt16 rd,rs1,rs2 is op0006=0x77 & rd & rs1 & rs2 & funct3=0x1 & funct7=0x0f {
+        pkbt16(rd, rs1, rs2);
+}
 
 
 # pktb16 rt, ra, rb 	 ; rt.W[_x_] = CONCAT(ra.W[_x_].H[1], rb.W[_x_].H[0]); ; (RV32: __x__=0, RV64: __x__=1..0)
@@ -769,7 +784,10 @@
 
 
 # sub64 rt, ra, rb 	 ; a64 = r[aU].r[aL]; b64 = r[bU].r[bL]; + ; + ; t64 = a64 - b64; + ; + ; r[tU].r[tL] = t64;
-:sub64 rd,rs1,rs2 is op0006=0x3f & rd & rs1 & rs2 & funct3=0x1 & funct7=0x61  unimpl
+define pcodeop sub64;
+:sub64 rd,rs1,rs2 is op0006=0x77 & rd & funct3=0x1 & rs1 & rs2 &  funct7=0x61  {
+    sub64(rd, rs1, rs2);
+}
 
 
 # sub8 rt, ra, rb 	 ; rt.B[_x_] = ra.B[_x_] - rb.B[_x_]; ; (RV32: __x__=3..0, RV64: __x__=7..0)
@@ -801,7 +819,10 @@
 
 
 # swap8 rt, ra 	 ; === ; <<< ; ==== 8-bit Unpacking Instructions ; There are 8 instructions here. ; .8-bit Unpacking Instructions ; [cols="^.^1,<.^2,<.^2,<.^4",options="header",]
-:swap8 rd,rs1 is op0006=0x3f & rd & rs1 & funct3=0x0 & funct7=0x56 & subf5=0x18  unimpl
+define pcodeop swap8;
+:swap8 rd,rs1 is op0006=0x77 & rd & funct3=0x0 & rs1 & op2024=0x18 & funct7=0x56 {
+    swap8(rd, rs1);
+}
 
 
 # uclip32 rt, ra, imm5u 	 ; m = imm5u; + ; rt = SAT.Um(ra.W[_x_]); ; (RV32: __x__=0, RV64: __x__=1..0)
@@ -971,7 +992,10 @@
 
 
 # wexti rt, ra, imm5u 	 ; a64 = r[aU].r[aL]; // RV32 ; a64 = ra; // RV64 ; lsb = imm5u; ; exword = a64[(31+lsb):lsb]; ; rt = SE(exword);
-:wexti rd,rs1,rs2 is op0006=0x3f & rd & rs1 & rs2 & funct3=0x0 & funct7=0x6f  unimpl
+define pcodeop wexti;
+:wexti rd,rs1,rs2 is op0006=0x77 & rd & rs1 & rs2 & funct3=0x0 & funct7=0x6f  {
+    wexti(rd, rs1, rs2);
+}
 
 
 # zunpkd810 rt, ra 	 ; rt.H[_x_] = ZE16(ra.B[_y_]); ; RV32: (_x,y_) = (1,1), (0,0) ; RV64: (_x,y_) = (3,5),(2,4),(1,1), (0,0)
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.rv64b.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.rv64b.sinc
index e836096fc..fe73f244e 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.rv64b.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.rv64b.sinc
@@ -3,7 +3,7 @@
 #TODO  fix op2031
 :addiwu rd, rs1, op2031 is op0006=0x1b & op1214=0x4 & rd & op2031 & rs1 unimpl
 
-:addu.w rd, rs1, rs2 is op0006=0x3b & op1214=0x0 & op2531=0x4 & rd & rs1 & rs2 unimpl
+:add.unshflw rd, rs1, rs2 is op0006=0x3b & op1214=0x0 & op2531=0x4 & rd & rs1 & rs2 unimpl
 
 :addwu rd, rs1, rs2 is op0006=0x3b & op1214=0x0 & op2531=0x5 & rd & rs1 & rs2 unimpl
 
@@ -52,9 +52,9 @@
 
 :packuw rd, rs1, rs2 is op0006=0x3b & op1214=0x4 & op2531=0x24 & rd & rs1 & rs2 unimpl
 
-:packw  rd, rs1, rs2 is op0006=0x3b & op1214=0x4 & op2531=0x4 & rd & rs1 & rs2 unimpl
+:zext.h  rd, rs1, rs2 is op0006=0x3b & op1214=0x4 & op2531=0x4 & rd & rs1 & rs2 unimpl
 
-:pcntw rd, rs1 is op0006=0x1b & op1214=0x1 & op2024=0x2 & op2531=0x30 & rd & rs1 unimpl
+:cpopw rd, rs1 is op0006=0x1b & op1214=0x1 & op2024=0x2 & op2531=0x30 & rd & rs1 unimpl
 
 :rolw  rd, rs1, rs2 is op0006=0x3b & op1214=0x1 & op2531=0x30 & rd & rs1 & rs2 unimpl
 
@@ -80,11 +80,11 @@
 
 :sbsetw  rd, rs1, rs2 is op0006=0x3b & op1214=0x1 & op2531=0x14 & rd & rs1 & rs2 unimpl
 
-:sh1addu.w rd, rs1, rs2 is op0006=0x3b & op1214=0x2 & op2531=0x10 & rd & rs1 & rs2 unimpl
+:sh1add.uw rd, rs1, rs2 is op0006=0x3b & op1214=0x2 & op2531=0x10 & rd & rs1 & rs2 unimpl
 
-:sh2addu.w rd, rs1, rs2 is op0006=0x3b & op1214=0x4 & op2531=0x10 & rd & rs1 & rs2 unimpl
+:sh2add.uw rd, rs1, rs2 is op0006=0x3b & op1214=0x4 & op2531=0x10 & rd & rs1 & rs2 unimpl
 
-:sh3addu.w rd, rs1, rs2 is op0006=0x3b & op1214=0x6 & op2531=0x10 & rd & rs1 & rs2 unimpl
+:sh3add.uw rd, rs1, rs2 is op0006=0x3b & op1214=0x6 & op2531=0x10 & rd & rs1 & rs2 unimpl
 
 :shflw    rd, rs1, rs2 is op0006=0x3b & op1214=0x1 & op2531=0x4 & rd & rs1 & rs2 unimpl
 
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.rv64k.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.rv64k.sinc
index fc79f408c..1f5b6af44 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.rv64k.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.rv64k.sinc
@@ -1,6 +1,8 @@
 # RV64 Crypto Extension
 # NOTE  0.6.2
 
+rcon: op2023 is op2023 { local tmp:$(XLEN) = op2023; export tmp; }
+
 # 0001010 rs2 rs1 010 rd 0101011 saes64.decs
 :saes64.decs   rd, rs1, rs2  is rd & rs1 & rs2 & op0006=0x5b & op1214=0x2 & op2531=0x0a  unimpl
 
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.rvv.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.rvv.sinc
index f21ed223f..a8c55cf57 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.rvv.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.rvv.sinc
@@ -1,4 +1,5 @@
-# Vector
+# Vector Extension
+#  See https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc
 
 # sew: "e8"    is vsew=0 {}
 # sew: "e16"   is vsew=1 {}
@@ -29,7 +30,7 @@
 # mop=0  unit-stride        VSE<EEW>
 # mop=1  indexed-unordered  VSUXEI<EEW>
 # mop=2  strided            VSSE<EEW>
-# mop=3  indexed-ordered    VSXEI<EEW>
+# mop=3  indexed-ordered    VSOXEI<EEW>
 # lumop=0  unit-stride
 # lumop=8  unit-stride,whole registers
 # lumop=16 unit-stride fault-only-first
@@ -38,1918 +39,4602 @@
 # sumop=16 unit-stride fault-only-first
 # nfields imm is nf [ imm = nf + 1; ] { export *[const]:1 imm; }
 
+# Many instructions support two modes - masked via v0 or unmasked.  The reference
+# disassembler objdump renders these explicitly, so we do too.
 
+define pcodeop vaadd_vv;
 # vaadd.vv       31..26=0x09 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vaadd.vv vd, vs2, vs1, vm   # roundoff_signed(vs2[i] + vs1[i], 1)
-:vaadd.vv  vd, vs2, vs1, vm    is op2631=0x9 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vaadd.vv  vd, vs2, vs1         is op2631=0x9 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vaadd_vv(vs2,vs1);}
+:vaadd.vv  vd, vs2, vs1, "v0.t" is op2631=0x9 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vaadd_vv(vs2,vs1,v0);}
 
+define pcodeop vaadd_vx;
 # vaadd.vx       31..26=0x09 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vaadd.vx vd, vs2, rs1, vm   # roundoff_signed(vs2[i] + x[rs1], 1)
-:vaadd.vx  vd, vs2, rs1, vm    is op2631=0x9 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vaadd.vx  vd, vs2, rs1         is op2631=0x9 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vaadd_vx(vs2,rs1);}
+:vaadd.vx  vd, vs2, rs1, "v0.t" is op2631=0x9 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vaadd_vx(vs2,rs1,v0);}
 
+define pcodeop vaaddu_vv;
 # vaaddu.vv      31..26=0x08 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vaaddu.vv vd, vs2, vs1, vm   # roundoff_unsigned(vs2[i] + vs1[i], 1)
-:vaaddu.vv  vd, vs2, vs1, vm    is op2631=0x8 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vaaddu.vv  vd, vs2, vs1         is op2631=0x8 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vaaddu_vv(vs2,vs1);}
+:vaaddu.vv  vd, vs2, vs1, "v0.t" is op2631=0x8 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vaaddu_vv(vs2,vs1,v0);}
 
+define pcodeop vaaddu_vx;
 # vaaddu.vx      31..26=0x08 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vaaddu.vx vd, vs2, rs1, vm   # roundoff_unsigned(vs2[i] + x[rs1], 1)
-:vaaddu.vx  vd, vs2, rs1, vm    is op2631=0x8 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vaaddu.vx  vd, vs2, rs1         is op2631=0x8 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vaaddu_vx(vs2,rs1);}
+:vaaddu.vx  vd, vs2, rs1, "v0.t" is op2631=0x8 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vaaddu_vx(vs2,rs1,v0);}
 
+define pcodeop vadc_vim;
 # vadc.vim       31..26=0x10 25=0 vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vadc.vim   vd, vs2, simm5, v0  # Vector-immediate
-:vadc.vim    vd, vs2, simm5, v0   is op2631=0x10 & op2525=0x0 & vs2 & simm5 & op1214=0x3 & v0 & vd & op0006=0x57  unimpl
+:vadc.vim    vd, vs2, simm5, v0  is op2631=0x10 & op2525=0x0 & vs2 & simm5 & op1214=0x3 & v0 & vd & op0006=0x57 {vd=vadc_vim(vs2,simm5);}
 
+define pcodeop vadc_vvm;
 # vadc.vvm       31..26=0x10 25=0 vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vadc.vvm   vd, vs2, vs1, v0  # Vector-vector
-:vadc.vvm    vd, vs2, vs1, v0   is op2631=0x10 & op2525=0x0 & vs2 & vs1 & op1214=0x0 & v0 & vd & op0006=0x57  unimpl
+:vadc.vvm    vd, vs2, vs1, v0 is op2631=0x10 & op2525=0x0 & vs2 & vs1 & op1214=0x0 & v0 & vd & op0006=0x57 {vd=vadc_vvm(vs2,vs1,v0);}
 
+define pcodeop vadc_vxm;
 # vadc.vxm       31..26=0x10 25=0 vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vadc.vxm   vd, vs2, rs1, v0  # Vector-scalar
-:vadc.vxm    vd, vs2, rs1, v0   is op2631=0x10 & op2525=0x0 & vs2 & rs1 & op1214=0x4 & v0 & vd & op0006=0x57  unimpl
+:vadc.vxm    vd, vs2, rs1, v0 is op2631=0x10 & op2525=0x0 & vs2 & rs1 & op1214=0x4 & v0 & vd & op0006=0x57 {vd=vadc_vxm(vs2,rs1,v0);}
 
+define pcodeop vadd_vi;
 # vadd.vi        31..26=0x00 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vadd.vi vd, vs2, simm5, vm   # vector-immediate
-:vadd.vi  vd, vs2, simm5, vm    is op2631=0x0 & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vadd.vi  vd, vs2, simm5         is op2631=0 & op2525=0x1 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vadd_vi(vs2,simm5);}
+:vadd.vi  vd, vs2, simm5, "v0.t" is op2631=0 & op2525=0x0 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vadd_vi(vs2,simm5,v0);}
 
+define pcodeop vadd_vv;
 # vadd.vv         31..26=0x00 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vadd.vv vd, vs2, vs1, vm   # Vector-vector
-:vadd.vv  vd, vs2, vs1, vm    is op2631=0x0 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vadd.vv  vd, vs2, vs1         is op2631=0 & op2525=0x1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vadd_vv(vs2,vs1);}
+:vadd.vv  vd, vs2, vs1, "v0.t" is op2631=0 & op2525=0x0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vadd_vv(vs2,vs1,v0);}
 
+define pcodeop vadd_vx;
 # vadd.vx        31..26=0x00 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vadd.vx vd, vs2, rs1, vm   # vector-scalar
-:vadd.vx  vd, vs2, rs1, vm    is op2631=0x0 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vadd.vx  vd, vs2, rs1         is op2631=0 & op2525=0x1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vadd_vx(vs2,rs1);}
+:vadd.vx  vd, vs2, rs1, "v0.t" is op2631=0 & op2525=0x0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vadd_vx(vs2,rs1,v0);}
 
+define pcodeop vamoaddei16_v;
 # vamoaddei16.v  31..27=0x00 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamoaddei16.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoaddei16.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x0 & wd=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f  unimpl
+:vamoaddei16.v  vd, (rs1), vs2, vs3         is op2731=0x0 & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamoaddei16_v(rs1,vs2,vs3);}
+:vamoaddei16.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x0 & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamoaddei16_v(rs1,vs2,vs3,v0);}
 
 # vamoaddei16.v  31..27=0x00 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamoaddei16.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoaddei16.v  zero, (rs1), vs2, vs3, vm  is op2731=0x0 & wd=0x0 & vm & vs2 & rs1 & op1214=0x5 & zero & vs3 & vd & op0006=0x2f  unimpl
+:vamoaddei16.v  zero, (rs1), vs2, vs3         is op2731=0x0 & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x5 & zero & vs3 & vd & op0006=0x2f {vamoaddei16_v(rs1,vs2,vs3);}
+:vamoaddei16.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0x0 & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x5 & zero & vs3 & vd & op0006=0x2f {vamoaddei16_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamoaddei32_v;
 # vamoaddei32.v  31..27=0x00 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamoaddei32.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoaddei32.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x0 & wd=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f  unimpl
+:vamoaddei32.v  vd, (rs1), vs2, vs3         is op2731=0x0 & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamoaddei32_v(rs1,vs2,vs3);}
+:vamoaddei32.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x0 & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamoaddei32_v(rs1,vs2,vs3,v0);}
 
 # vamoaddei32.v  31..27=0x00 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamoaddei32.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoaddei32.v  zero, (rs1), vs2, vs3, vm  is op2731=0x0 & wd=0x0 & vm & vs2 & rs1 & op1214=0x6 & zero & vs3 & vd & op0006=0x2f  unimpl
+:vamoaddei32.v  zero, (rs1), vs2, vs3         is op2731=0x0 & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x6 & zero & vs3 & vd & op0006=0x2f {vamoaddei32_v(rs1,vs2,vs3);}
+:vamoaddei32.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0x0 & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x6 & zero & vs3 & vd & op0006=0x2f {vamoaddei32_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamoaddei64_v;
 # vamoaddei64.v  31..27=0x00 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamoaddei64.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoaddei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x0 & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f  unimpl
+:vamoaddei64.v  vd, (rs1), vs2, vs3         is op2731=0x0 & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f {vd=vamoaddei64_v(rs1,vs2,vs3);}
+:vamoaddei64.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x0 & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f {vd=vamoaddei64_v(rs1,vs2,vs3,v0);}
 
 # vamoaddei64.v  31..27=0x00 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamoaddei64.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoaddei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0x0 & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & vd & op0006=0x2f  unimpl
+:vamoaddei64.v  zero, (rs1), vs2, vs3         is op2731=0x0 & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x7 & zero & vs3 & vd & op0006=0x2f {vamoaddei64_v(rs1,vs2,vs3);}
+:vamoaddei64.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0x0 & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x7 & zero & vs3 & vd & op0006=0x2f {vamoaddei64_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamoaddei8_v;
 # vamoaddei8.v   31..27=0x00 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamoaddei8.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoaddei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x0 & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f  unimpl
+:vamoaddei8.v  vd, (rs1), vs2, vs3         is op2731=0x0 & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f {vd=vamoaddei8_v(rs1,vs2,vs3);}
+:vamoaddei8.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x0 & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f {vd=vamoaddei8_v(rs1,vs2,vs3,v0);}
 
 # vamoaddei8.v   31..27=0x00 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamoaddei8.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoaddei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0x0 & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & vd & op0006=0x2f  unimpl
+:vamoaddei8.v  zero, (rs1), vs2, vs3          is op2731=0x0 & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x0 & zero & vs3 & vd & op0006=0x2f {vamoaddei8_v(rs1,vs2,vs3);}
+:vamoaddei8.v  zero, (rs1), vs2, vs3 , "v0.t" is op2731=0x0 & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x0 & zero & vs3 & vd & op0006=0x2f {vamoaddei8_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamoandei16_v;
 # vamoandei16.v  31..27=0x0c wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamoandei16.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoandei16.v  vd, (rs1), vs2, vs3,  vm  is op2731=0xc & wd=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f  unimpl
+:vamoandei16.v  vd, (rs1), vs2, vs3         is op2731=0xc & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamoandei16_v(rs1,vs2,vs3);}
+:vamoandei16.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0xc & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamoandei16_v(rs1,vs2,vs3,v0);}
 
 # vamoandei16.v  31..27=0x0c wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamoandei16.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoandei16.v  zero, (rs1), vs2, vs3, vm  is op2731=0xc & wd=0x0 & vm & vs2 & rs1 & op1214=0x5 & zero & vs3 & vd & op0006=0x2f  unimpl
+:vamoandei16.v  zero, (rs1), vs2, vs3         is op2731=0xc & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x5 & zero & vs3 & vd & op0006=0x2f {vamoandei16_v(rs1,vs2,vs3);}
+:vamoandei16.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0xc & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x5 & zero & vs3 & vd & op0006=0x2f {vamoandei16_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamoandei32_v;
 # vamoandei32.v  31..27=0x0c wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamoandei32.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoandei32.v  vd, (rs1), vs2, vs3,  vm  is op2731=0xc & wd=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f  unimpl
+:vamoandei32.v  vd, (rs1), vs2, vs3         is op2731=0xc & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamoandei32_v(rs1,vs2,vs3);}
+:vamoandei32.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0xc & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamoandei32_v(rs1,vs2,vs3,v0);}
 
 # vamoandei32.v  31..27=0x0c wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamoandei32.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoandei32.v  zero, (rs1), vs2, vs3, vm  is op2731=0xc & wd=0x0 & vm & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f  unimpl
+:vamoandei32.v  zero, (rs1), vs2, vs3         is op2731=0xc & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f {vamoandei32_v(rs1,vs2,vs3);}
+:vamoandei32.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0xc & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f {vamoandei32_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamoandei64_v;
 # vamoandei64.v  31..27=0x0c wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamoandei64.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoandei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0xc & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f  unimpl
+:vamoandei64.v  vd, (rs1), vs2, vs3         is op2731=0xc & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f {vd=vamoandei64_v(rs1,vs2,vs3);}
+:vamoandei64.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0xc & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f {vd=vamoandei64_v(rs1,vs2,vs3,v0);}
 
 # vamoandei64.v  31..27=0x0c wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamoandei64.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoandei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0xc & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f  unimpl
+:vamoandei64.v  zero, (rs1), vs2, vs3         is op2731=0xc & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f {vamoandei64_v(rs1,vs2,vs3);}
+:vamoandei64.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0xc & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f {vamoandei64_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamoandei8_v;
 # vamoandei8.v   31..27=0x0c wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamoandei8.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoandei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0xc & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f  unimpl
+:vamoandei8.v  vd, (rs1), vs2, vs3         is op2731=0xc & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f {vd=vamoandei8_v(rs1,vs2,vs3);}
+:vamoandei8.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0xc & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f {vd=vamoandei8_v(rs1,vs2,vs3,v0);}
 
 # vamoandei8.v   31..27=0x0c wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamoandei8.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoandei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0xc & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f  unimpl
+:vamoandei8.v  zero, (rs1), vs2, vs3         is op2731=0xc & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f {vamoandei8_v(rs1,vs2,vs3);}
+:vamoandei8.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0xc & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f {vamoandei8_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamomaxei16_v;
 # vamomaxei16.v  31..27=0x14 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamomaxei16.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamomaxei16.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x14 & wd=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f  unimpl
+:vamomaxei16.v  vd, (rs1), vs2, vs3         is op2731=0x14 & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamomaxei16_v(rs1,vs2,vs3);}
+:vamomaxei16.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x14 & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamomaxei16_v(rs1,vs2,vs3,v0);}
 
 # vamomaxei16.v  31..27=0x14 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamomaxei16.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamomaxei16.v  zero, (rs1), vs2, vs3, vm  is op2731=0x14 & wd=0x0 & vm & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f  unimpl
+:vamomaxei16.v  zero, (rs1), vs2, vs3         is op2731=0x14 & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f {vamomaxei16_v(rs1,vs2,vs3);}
+:vamomaxei16.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0x14 & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f {vamomaxei16_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamomaxei32_v;
 # vamomaxei32.v  31..27=0x14 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamomaxei32.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamomaxei32.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x14 & wd=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f  unimpl
+:vamomaxei32.v  vd, (rs1), vs2, vs3         is op2731=0x14 & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamomaxei32_v(rs1,vs2,vs3);}
+:vamomaxei32.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x14 & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamomaxei32_v(rs1,vs2,vs3,v0);}
 
 # vamomaxei32.v  31..27=0x14 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamomaxei32.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamomaxei32.v  zero, (rs1), vs2, vs3, vm  is op2731=0x14 & wd=0x0 & vm & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f  unimpl
+:vamomaxei32.v  zero, (rs1), vs2, vs3         is op2731=0x14 & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f {vamomaxei32_v(rs1,vs2,vs3);}
+:vamomaxei32.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0x14 & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f {vamomaxei32_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamomaxei64_v;
 # vamomaxei64.v  31..27=0x14 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamomaxei64.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamomaxei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x14 & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f  unimpl
+:vamomaxei64.v  vd, (rs1), vs2, vs3         is op2731=0x14 & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f {vd=vamomaxei64_v(rs1,vs2,vs3);}
+:vamomaxei64.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x14 & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f {vd=vamomaxei64_v(rs1,vs2,vs3,v0);}
 
 # vamomaxei64.v  31..27=0x14 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamomaxei64.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamomaxei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0x14 & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f  unimpl
+:vamomaxei64.v  zero, (rs1), vs2, vs3         is op2731=0x14 & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f {vamomaxei64_v(rs1,vs2,vs3);}
+:vamomaxei64.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0x14 & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f {vamomaxei64_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamomaxei8_v;
 # vamomaxei8.v   31..27=0x14 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamomaxei8.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamomaxei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x14 & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f  unimpl
+:vamomaxei8.v  vd, (rs1), vs2, vs3         is op2731=0x14 & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f {vd=vamomaxei8_v(rs1,vs2,vs3);}
+:vamomaxei8.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x14 & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f {vd=vamomaxei8_v(rs1,vs2,vs3,v0);}
 
 # vamomaxei8.v   31..27=0x14 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamomaxei8.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamomaxei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0x14 & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & vd & op0006=0x2f  unimpl
+:vamomaxei8.v  zero, (rs1), vs2, vs3         is op2731=0x14 & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x0 & zero & vs3 & vd & op0006=0x2f {vamomaxei8_v(rs1,vs2,vs3);}
+:vamomaxei8.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0x14 & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x0 & zero & vs3 & vd & op0006=0x2f {vamomaxei8_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamomaxuei16_v;
 # vamomaxuei16.v 31..27=0x1c wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamomaxuei16.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamomaxuei16.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x1c & wd=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f  unimpl
+:vamomaxuei16.v  vd, (rs1), vs2, vs3         is op2731=0x1c & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamomaxuei16_v(rs1,vs2,vs3);}
+:vamomaxuei16.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x1c & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamomaxuei16_v(rs1,vs2,vs3,v0);}
 
 # vamomaxuei16.v 31..27=0x1c wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamomaxuei16.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamomaxuei16.v  zero, (rs1), vs2, vs3, vm  is op2731=0x1c & wd=0x0 & vm & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f  unimpl
+:vamomaxuei16.v  zero, (rs1), vs2, vs3         is op2731=0x1c & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f {vamomaxuei16_v(rs1,vs2,vs3);}
+:vamomaxuei16.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0x1c & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f {vamomaxuei16_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamomaxuei32_v;
 # vamomaxuei32.v 31..27=0x1c wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamomaxuei32.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamomaxuei32.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x1c & wd=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f  unimpl
+:vamomaxuei32.v  vd, (rs1), vs2, vs3         is op2731=0x1c & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamomaxuei32_v(rs1,vs2,vs3);}
+:vamomaxuei32.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x1c & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamomaxuei32_v(rs1,vs2,vs3,v0);}
 
 # vamomaxuei32.v 31..27=0x1c wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamomaxuei32.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamomaxuei32.v  zero, (rs1), vs2, vs3, vm  is op2731=0x1c & wd=0x0 & vm & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f  unimpl
+:vamomaxuei32.v  zero, (rs1), vs2, vs3         is op2731=0x1c & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f {vamomaxuei32_v(rs1,vs2,vs3);}
+:vamomaxuei32.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0x1c & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f {vamomaxuei32_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamomaxuei64_v;
 # vamomaxuei64.v 31..27=0x1c wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamomaxuei64.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamomaxuei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x1c & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f  unimpl
+:vamomaxuei64.v  vd, (rs1), vs2, vs3         is op2731=0x1c & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f {vd=vamomaxuei64_v(rs1,vs2,vs3);}
+:vamomaxuei64.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x1c & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f {vd=vamomaxuei64_v(rs1,vs2,vs3,v0);}
 
 # vamomaxuei64.v 31..27=0x1c wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamomaxuei64.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamomaxuei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0x1c & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f  unimpl
+:vamomaxuei64.v  zero, (rs1), vs2, vs3         is op2731=0x1c & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f {vamomaxuei64_v(rs1,vs2,vs3);}
+:vamomaxuei64.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0x1c & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f {vamomaxuei64_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamomaxuei8_v;
 # vamomaxuei8.v  31..27=0x1c wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamomaxuei8.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamomaxuei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x1c & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f  unimpl
+:vamomaxuei8.v  vd, (rs1), vs2, vs3         is op2731=0x1c & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f {vd=vamomaxuei8_v(rs1,vs2,vs3);}
+:vamomaxuei8.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x1c & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f {vd=vamomaxuei8_v(rs1,vs2,vs3,v0);}
 
 # vamomaxuei8.v  31..27=0x1c wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamomaxuei8.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamomaxuei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0x1c & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f  unimpl
+:vamomaxuei8.v  zero, (rs1), vs2, vs3         is op2731=0x1c & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f {vamomaxuei8_v(rs1,vs2,vs3);}
+:vamomaxuei8.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0x1c & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f {vamomaxuei8_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamominei16_v;
 # vamominei16.v  31..27=0x10 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamominei16.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamominei16.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x10 & wd=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f  unimpl
+:vamominei16.v  vd, (rs1), vs2, vs3         is op2731=0x10 & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamominei16_v(rs1,vs2,vs3);}
+:vamominei16.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x10 & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamominei16_v(rs1,vs2,vs3,v0);}
 
 # vamominei16.v  31..27=0x10 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamominei16.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamominei16.v  zero, (rs1), vs2, vs3, vm  is op2731=0x10 & wd=0x0 & vm & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f  unimpl
+:vamominei16.v  zero, (rs1), vs2, vs3         is op2731=0x10 & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f {vamominei16_v(rs1,vs2,vs3);}
+:vamominei16.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0x10 & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f {vamominei16_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamominei32_v;
 # vamominei32.v  31..27=0x10 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamominei32.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamominei32.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x10 & wd=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f  unimpl
+:vamominei32.v  vd, (rs1), vs2, vs3         is op2731=0x10 & wd=0x1 & op2525=0x1 & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamominei32_v(rs1,vs2,vs3);}
+:vamominei32.v  vd, (rs1), vs2, vs3, "v0.t" is op2731=0x10 & wd=0x1 & op2525=0x0 & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamominei32_v(rs1,vs2,vs3,v0);}
 
 # vamominei32.v  31..27=0x10 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamominei32.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamominei32.v  zero, (rs1), vs2, vs3, vm  is op2731=0x10 & wd=0x0 & vm & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f  unimpl
+:vamominei32.v  zero, (rs1), vs2, vs3         is op2731=0x10 & wd=0x0 & op2525=0x1 & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f {vamominei32_v(rs1,vs2,vs3);}
+:vamominei32.v  zero, (rs1), vs2, vs3, "v0.t" is op2731=0x10 & wd=0x0 & op2525=0x0 & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f {vamominei32_v(rs1,vs2,vs3,v0);}
 
+define pcodeop vamominei64_v;
 # vamominei64.v  31..27=0x10 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamominei64.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamominei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x10 & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f  unimpl
+:vamominei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x10 & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f {vd=vamominei64_v(rs1,vs2,vs3,vm);}
 
 # vamominei64.v  31..27=0x10 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamominei64.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamominei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0x10 & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f  unimpl
+:vamominei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0x10 & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f {vamominei64_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamominei8_v;
 # vamominei8.v   31..27=0x10 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamominei8.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamominei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x10 & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f  unimpl
+:vamominei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x10 & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f {vd=vamominei8_v(rs1,vs2,vs3,vm);}
 
 # vamominei8.v   31..27=0x10 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamominei8.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamominei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0x10 & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f  unimpl
+:vamominei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0x10 & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f {vamominei8_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamominuei16_v;
 # vamominuei16.v 31..27=0x18 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamominuei16.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamominuei16.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x18 & wd=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f  unimpl
+:vamominuei16.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x18 & wd=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamominuei16_v(rs1,vs2,vs3,vm);}
 
 # vamominuei16.v 31..27=0x18 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamominuei16.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamominuei16.v  zero, (rs1), vs2, vs3, vm  is op2731=0x18 & wd=0x0 & vm & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f  unimpl
+:vamominuei16.v  zero, (rs1), vs2, vs3, vm  is op2731=0x18 & wd=0x0 & vm & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f {vamominuei16_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamominuei32_v;
 # vamominuei32.v 31..27=0x18 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamominuei32.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamominuei32.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x18 & wd=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f  unimpl
+:vamominuei32.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x18 & wd=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamominuei32_v(rs1,vs2,vs3,vm);}
 
 # vamominuei32.v 31..27=0x18 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamominuei32.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamominuei32.v  zero, (rs1), vs2, vs3, vm  is op2731=0x18 & wd=0x0 & vm & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f  unimpl
+:vamominuei32.v  zero, (rs1), vs2, vs3, vm  is op2731=0x18 & wd=0x0 & vm & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f {vamominuei32_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamominuei64_v;
 # vamominuei64.v 31..27=0x18 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamominuei64.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamominuei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x18 & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f  unimpl
+:vamominuei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x18 & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f {vd=vamominuei64_v(rs1,vs2,vs3,vm);}
 
 # vamominuei64.v 31..27=0x18 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamominuei64.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamominuei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0x18 & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f  unimpl
+:vamominuei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0x18 & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f {vamominuei64_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamominuei8_v;
 # vamominuei8.v  31..27=0x18 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamominuei8.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamominuei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x18 & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f  unimpl
+:vamominuei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x18 & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f {vd=vamominuei8_v(rs1,vs2,vs3,vm);}
 
 # vamominuei8.v  31..27=0x18 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamominuei8.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamominuei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0x18 & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f  unimpl
+:vamominuei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0x18 & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f {vamominuei8_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamoorei16_v;
 # vamoorei16.v   31..27=0x08 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamoorei16.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoorei16.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x8 & wd=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f  unimpl
+:vamoorei16.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x8 & wd=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamoorei16_v(rs1,vs2,vs3,vm);}
 
 # vamoorei16.v   31..27=0x08 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamoorei16.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoorei16.v  zero, (rs1), vs2, vs3, vm  is op2731=0x8 & wd=0x0 & vm & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f  unimpl
+:vamoorei16.v  zero, (rs1), vs2, vs3, vm  is op2731=0x8 & wd=0x0 & vm & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f {vamoorei16_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamoorei32_v;
 # vamoorei32.v   31..27=0x08 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamoorei32.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoorei32.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x8 & wd=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f  unimpl
+:vamoorei32.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x8 & wd=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamoorei32_v(rs1,vs2,vs3,vm);}
 
 # vamoorei32.v   31..27=0x08 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamoorei32.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoorei32.v  zero, (rs1), vs2, vs3, vm  is op2731=0x8 & wd=0x0 & vm & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f  unimpl
+:vamoorei32.v  zero, (rs1), vs2, vs3, vm  is op2731=0x8 & wd=0x0 & vm & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f {vamoorei32_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamoorei64_v;
 # vamoorei64.v   31..27=0x08 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamoorei64.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoorei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x8 & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f  unimpl
+:vamoorei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x8 & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f {vd=vamoorei64_v(rs1,vs2,vs3,vm);}
 
 # vamoorei64.v   31..27=0x08 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamoorei64.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoorei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0x8 & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f  unimpl
+:vamoorei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0x8 & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f {vamoorei64_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamoorei8_v;
 # vamoorei8.v    31..27=0x08 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamoorei8.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoorei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x8 & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f  unimpl
+:vamoorei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x8 & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f {vd=vamoorei8_v(rs1,vs2,vs3,vm);}
 
 # vamoorei8.v    31..27=0x08 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamoorei8.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoorei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0x8 & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f  unimpl
+:vamoorei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0x8 & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f {vamoorei8_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamoswapei16_v;
 # vamoswapei16.v 31..27=0x01 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
-# vamoswapei16.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoswapei16.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x1 & wd=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f  unimpl
+# vamoswapei16.v vd, (rs1), vs2, vs3, vm # Write original value to register, wd=1
+:vamoswapei16.v  vd, (rs1), vs2, vs3, vm  is op2731=0x1 & wd=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamoswapei16_v(rs1,vs2,vs3,vm);}
 
 # vamoswapei16.v 31..27=0x01 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamoswapei16.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoswapei16.v  zero, (rs1), vs2, vs3, vm  is op2731=0x1 & wd=0x0 & vm & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f  unimpl
+:vamoswapei16.v  zero, (rs1), vs2, vs3, vm  is op2731=0x1 & wd=0x0 & vm & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f {vamoswapei16_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamoswapei32_v;
 # vamoswapei32.v 31..27=0x01 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamoswapei32.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoswapei32.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x1 & wd=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f  unimpl
+:vamoswapei32.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x1 & wd=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamoswapei32_v(rs1,vs2,vs3,vm);}
 
 # vamoswapei32.v 31..27=0x01 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamoswapei32.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoswapei32.v  zero, (rs1), vs2, vs3, vm  is op2731=0x1 & wd=0x0 & vm & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f  unimpl
+:vamoswapei32.v  zero, (rs1), vs2, vs3, vm  is op2731=0x1 & wd=0x0 & vm & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f {vamoswapei16_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamoswapei64_v;
 # vamoswapei64.v 31..27=0x01 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamoswapei64.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoswapei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x1 & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f  unimpl
+:vamoswapei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x1 & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f {vd=vamoswapei64_v(rs1,vs2,vs3,vm);}
 
 # vamoswapei64.v 31..27=0x01 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamoswapei64.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoswapei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0x1 & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f  unimpl
+:vamoswapei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0x1 & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f {vamoswapei64_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamoswapei8_v;
 # vamoswapei8.v  31..27=0x01 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamoswapei8.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoswapei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x1 & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f  unimpl
+:vamoswapei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x1 & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f {vd=vamoswapei8_v(rs1,vs2,vs3,vm);}
 
 # vamoswapei8.v  31..27=0x01 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamoswapei8.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoswapei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0x1 & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f  unimpl
+:vamoswapei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0x1 & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & op0006=0x2f {vamoswapei8_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamoxorei16_v;
 # vamoxorei16.v  31..27=0x04 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamoxorei16.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoxorei16.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x4 & wd=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f  unimpl
+:vamoxorei16.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x4 & wd=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & vd & op0006=0x2f {vd=vamoxorei16_v(rs1,vs2,vs3,vm);}
 
 # vamoxorei16.v  31..27=0x04 wd vm vs2 rs1 14..12=0x5 vd 6..0=0x2f
 # vamoxorei16.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoxorei16.v  zero, (rs1), vs2, vs3, vm  is op2731=0x4 & wd=0x0 & vm & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f  unimpl
+:vamoxorei16.v  zero, (rs1), vs2, vs3, vm  is op2731=0x4 & wd=0x0 & vm & vs2 & rs1 & op1214=0x5 & zero & vs3 & op0006=0x2f {vamoxorei16_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamoxorei32_v;
 # vamoxorei32.v  31..27=0x04 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamoxorei32.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoxorei32.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x4 & wd=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f  unimpl
+:vamoxorei32.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x4 & wd=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & vd & op0006=0x2f {vd=vamoxorei32_v(rs1,vs2,vs3,vm);}
 
 # vamoxorei32.v  31..27=0x04 wd vm vs2 rs1 14..12=0x6 vd 6..0=0x2f
 # vamoxorei32.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoxorei32.v  zero, (rs1), vs2, vs3, vm  is op2731=0x4 & wd=0x0 & vm & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f  unimpl
+:vamoxorei32.v  zero, (rs1), vs2, vs3, vm  is op2731=0x4 & wd=0x0 & vm & vs2 & rs1 & op1214=0x6 & zero & vs3 & op0006=0x2f {vamoxorei32_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamoxorei64_v;
 # vamoxorei64.v  31..27=0x04 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamoxorei64.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoxorei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x4 & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f  unimpl
+:vamoxorei64.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x4 & wd=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & vd & op0006=0x2f {vd=vamoxorei64_v(rs1,vs2,vs3,vm);}
 
 # vamoxorei64.v  31..27=0x04 wd vm vs2 rs1 14..12=0x7 vd 6..0=0x2f
 # vamoxorei64.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoxorei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0x4 & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f  unimpl
+:vamoxorei64.v  zero, (rs1), vs2, vs3, vm  is op2731=0x4 & wd=0x0 & vm & vs2 & rs1 & op1214=0x7 & zero & vs3 & op0006=0x2f {vamoxorei64_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vamoxorei8_v;
 # vamoxorei8.v   31..27=0x04 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamoxorei8.v vd, (rs1), vs2, vs3,  vm # Write original value to register, wd=1
-:vamoxorei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x4 & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f  unimpl
+:vamoxorei8.v  vd, (rs1), vs2, vs3,  vm  is op2731=0x4 & wd=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & vd & op0006=0x2f {vd=vamoxorei8_v(rs1,vs2,vs3,vm);}
 
 # vamoxorei8.v   31..27=0x04 wd vm vs2 rs1 14..12=0x0 vd 6..0=0x2f
 # vamoxorei8.v zero, (rs1), vs2, vs3, vm # Do not write original value to register, wd=0
-:vamoxorei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0x4 & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & vd & op0006=0x2f  unimpl
+:vamoxorei8.v  zero, (rs1), vs2, vs3, vm  is op2731=0x4 & wd=0x0 & vm & vs2 & rs1 & op1214=0x0 & zero & vs3 & vd & op0006=0x2f {vamoxorei8_v(rs1,vs2,vs3,vm);}
 
+define pcodeop vand_vi;
 # vand.vi        31..26=0x09 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vand.vi vd, vs2, simm5, vm   # vector-immediate
-:vand.vi  vd, vs2, simm5, vm    is op2631=0x9 & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vand.vi  vd, vs2, simm5         is op2631=0x9 & op2525=1 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vand_vi(vs2,simm5);}
+:vand.vi  vd, vs2, simm5, "v0.t" is op2631=0x9 & op2525=0 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vand_vi(vs2,simm5,v0);}
 
+define pcodeop vand_vv;
 # vand.vv         31..26=0x09 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vand.vv vd, vs2, vs1, vm   # Vector-vector
-:vand.vv  vd, vs2, vs1, vm    is op2631=0x9 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vand.vv  vd, vs2, vs1         is op2631=0x9 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vand_vv(vs2,vs1);}
+:vand.vv  vd, vs2, vs1, "v0.t" is op2631=0x9 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vand_vv(vs2,vs1,v0);}
 
+define pcodeop vand_vx;
 # vand.vx        31..26=0x09 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vand.vx vd, vs2, rs1, vm   # vector-scalar
-:vand.vx  vd, vs2, rs1, vm    is op2631=0x9 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vand.vx  vd, vs2, rs1         is op2631=0x9 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vand_vx(vs2,rs1);}
+:vand.vx  vd, vs2, rs1, "v0.t" is op2631=0x9 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vand_vx(vs2,rs1,v0);}
 
+define pcodeop vasub_vv;
 # vasub.vv       31..26=0x0b vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vasub.vv vd, vs2, vs1, vm   # roundoff_signed(vs2[i] - vs1[i], 1)
-:vasub.vv  vd, vs2, vs1, vm    is op2631=0xb & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vasub.vv  vd, vs2, vs1         is op2631=0xb & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vasub_vv(vs2,vs1);}
+:vasub.vv  vd, vs2, vs1, "v0.t" is op2631=0xb & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vasub_vv(vs2,vs1,v0);}
 
+define pcodeop vasub_vx;
 # vasub.vx       31..26=0x0b vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vasub.vx vd, vs2, rs1, vm   # roundoff_signed(vs2[i] - x[rs1], 1)
-:vasub.vx  vd, vs2, rs1, vm    is op2631=0xb & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vasub.vx  vd, vs2, rs1         is op2631=0xb & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vasub_vx(vs2,rs1);}
+:vasub.vx  vd, vs2, rs1, "v0.t" is op2631=0xb & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vasub_vx(vs2,rs1,v0);}
 
+define pcodeop vasubu_vv;
 # vasubu.vv      31..26=0x0a vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vasubu.vv vd, vs2, vs1, vm   # roundoff_unsigned(vs2[i] - vs1[i], 1)
-:vasubu.vv  vd, vs2, vs1, vm    is op2631=0xa & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vasubu.vv  vd, vs2, vs1         is op2631=0xa & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vasubu_vv(vs2,vs1);}
+:vasubu.vv  vd, vs2, vs1, "v0.t" is op2631=0xa & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vasubu_vv(vs2,vs1,v0);}
 
+define pcodeop vasubu_vx;
 # vasubu.vx      31..26=0x0a vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vasubu.vx vd, vs2, rs1, vm   # roundoff_unsigned(vs2[i] - x[rs1], 1)
-:vasubu.vx  vd, vs2, rs1, vm    is op2631=0xa & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vasubu.vx  vd, vs2, rs1         is op2631=0xa & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vasubu_vx(vs2,rs1);}
+:vasubu.vx  vd, vs2, rs1, "v0.t" is op2631=0xa & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vasubu_vx(vs2,rs1,v0);}
 
+define pcodeop vcompress_vm;
 # vcompress.vm   31..26=0x17 25=1 vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vcompress.vm vd, vs2, vs1  # Compress into vd elements of vs2 where vs1 is enabled
-:vcompress.vm  vd, vs2, vs1   is op2631=0x17 & op2525=0x1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vcompress.vm  vd, vs2, vs1         is op2631=0x17 & op2525=0x1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vcompress_vm(vs2,vs1);}
+:vcompress.vm  vd, vs2, vs1, "v0.t" is op2631=0x17 & op2525=0x0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vcompress_vm(vs2,vs1,v0);}
 
+define pcodeop vdiv_vv;
 # vdiv.vv        31..26=0x21 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vdiv.vv vd, vs2, vs1, vm   # Vector-vector
-:vdiv.vv  vd, vs2, vs1, vm    is op2631=0x21 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vdiv.vv  vd, vs2, vs1         is op2631=0x21 & op2525=0x1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vdiv_vv(vs2,vs1);}
+:vdiv.vv  vd, vs2, vs1, "v0.t" is op2631=0x21 & op2525=0x0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vdiv_vv(vs2,vs1,v0);}
 
+define pcodeop vdiv_vx;
 # vdiv.vx        31..26=0x21 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vdiv.vx vd, vs2, rs1, vm   # vector-scalar
-:vdiv.vx  vd, vs2, rs1, vm    is op2631=0x21 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vdiv.vx  vd, vs2, rs1         is op2631=0x21 & op2525=0x1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vdiv_vx(vs2,rs1);}
+:vdiv.vx  vd, vs2, rs1, "v0.t" is op2631=0x21 & op2525=0x0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vdiv_vx(vs2,rs1,v0);}
 
+define pcodeop vdivu_vv;
 # vdivu.vv       31..26=0x20 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vdivu.vv vd, vs2, vs1, vm   # Vector-vector
-:vdivu.vv  vd, vs2, vs1, vm    is op2631=0x20 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vdivu.vv  vd, vs2, vs1         is op2631=0x20 & op2525=0x1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vdivu_vv(vs2,vs1);}
+:vdivu.vv  vd, vs2, vs1, "v0.t" is op2631=0x20 & op2525=0x0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vdivu_vv(vs2,vs1,v0);}
 
+define pcodeop vdivu_vx;
 # vdivu.vx       31..26=0x20 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vdivu.vx vd, vs2, rs1, vm   # vector-scalar
-:vdivu.vx  vd, vs2, rs1, vm    is op2631=0x20 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vdivu.vx  vd, vs2, rs1         is op2631=0x20 & op2525=0x1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vdivu_vx(vs2,rs1);}
+:vdivu.vx  vd, vs2, rs1, "v0.t" is op2631=0x20 & op2525=0x0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vdivu_vx(vs2,rs1,v0);}
 
+define pcodeop vdot_vv;
 # vdot.vv        31..26=0x39 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vdot.vv vd, vs2, vs1, vm # Vector-vector
-:vdot.vv  vd, vs2, vs1, vm  is op2631=0x39 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vdot.vv  vd, vs2, vs1         is op2631=0x39 & op2525=0x1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vdot_vv(vs2,vs1);}
+:vdot.vv  vd, vs2, vs1, "v0.t" is op2631=0x39 & op2525=0x0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vdot_vv(vs2,vs1,v0);}
 
+define pcodeop vdotu_vv;
 # vdotu.vv       31..26=0x38 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vdotu.vv vd, vs2, vs1, vm # Vector-vector
-:vdotu.vv  vd, vs2, vs1, vm  is op2631=0x38 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vdotu.vv  vd, vs2, vs1         is op2631=0x38 & op2525=0x1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vdotu_vv(vs2,vs1);}
+:vdotu.vv  vd, vs2, vs1, "v0.t" is op2631=0x38 & op2525=0x0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vdotu_vv(vs2,vs1,v0);}
 
+define pcodeop vfadd_vf;
 # vfadd.vf        31..26=0x00 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfadd.vf vd, vs2, rs1, vm   # vector-scalar
-:vfadd.vf  vd, vs2, rs1, vm    is op2631=0x0 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+# vfadd.vf vd, vs2, frs1, vm   # vector-scalar
+:vfadd.vf  vd, vs2, frs1         is op2631=0x0 & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfadd_vf(vs2,frs1);}
+:vfadd.vf  vd, vs2, frs1, "v0.t" is op2631=0x0 & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfadd_vf(vs2,frs1,v0);}
 
+define pcodeop vfadd_vv;
 # vfadd.vv       31..26=0x00 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfadd.vv vd, vs2, vs1, vm   # Vector-vector
-:vfadd.vv  vd, vs2, vs1, vm    is op2631=0x0 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfadd.vv  vd, vs2, vs1         is op2631=0x0 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfadd_vv(vs2,vs1);}
+:vfadd.vv  vd, vs2, vs1, "v0.t" is op2631=0x0 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfadd_vv(vs2,vs1,v0);}
 
+define pcodeop vfclass_v;
 # vfclass.v      31..26=0x13 vm vs2 19..15=0x10 14..12=0x1 vd 6..0=0x57
 # vfclass.v vd, vs2, vm   # Vector-vector
-:vfclass.v  vd, vs2, vm    is op2631=0x13 & vm & vs2 & op1519=0x10 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfclass.v  vd, vs2         is op2631=0x13 & op2525=0x1 & vs2 & op1519=0x10 & op1214=0x1 & vd & op0006=0x57 {vd=vfclass_v(vs2);}
+:vfclass.v  vd, vs2, "v0.t" is op2631=0x13 & op2525=0x0 & vs2 & op1519=0x10 & op1214=0x1 & vd & op0006=0x57 {vd=vfclass_v(vs2,v0);}
 
+define pcodeop vfcvt_fxv;
 # vfcvt.f.x.v      31..26=0x12 vm vs2 19..15=0x03 14..12=0x1 vd 6..0=0x57
 # vfcvt.f.x.v  vd, vs2, vm       # Convert signed integer to float.
-:vfcvt.f.x.v   vd, vs2, vm        is op2631=0x12 & vm & vs2 & op1519=0x3 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfcvt.f.x.v   vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x3 & op1214=0x1 & vd & op0006=0x57 {vd=vfcvt_fxv(vs2);}
+:vfcvt.f.x.v   vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x3 & op1214=0x1 & vd & op0006=0x57 {vd=vfcvt_fxv(vs2,v0);}
 
+define pcodeop vfcvt_fxuv;
 # vfcvt.f.xu.v     31..26=0x12 vm vs2 19..15=0x02 14..12=0x1 vd 6..0=0x57
 # vfcvt.f.xu.v vd, vs2, vm       # Convert unsigned integer to float.
-:vfcvt.f.xu.v  vd, vs2, vm        is op2631=0x12 & vm & vs2 & op1519=0x2 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfcvt.f.xu.v  vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x2 & op1214=0x1 & vd & op0006=0x57 {vd=vfcvt_fxuv(vs2);}
+:vfcvt.f.xu.v  vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x2 & op1214=0x1 & vd & op0006=0x57 {vd=vfcvt_fxuv(vs2,v0);}
 
+define pcodeop vfcvt_rtzxfv;
 # vfcvt.rtz.x.f.v  31..26=0x12 vm vs2 19..15=0x07 14..12=0x1 vd 6..0=0x57
 # vfcvt.rtz.x.f.v  vd, vs2, vm   # Convert float to signed integer, truncating.
-:vfcvt.rtz.x.f.v   vd, vs2, vm    is op2631=0x12 & vm & vs2 & op1519=0x7 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfcvt.rtz.x.f.v   vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x7 & op1214=0x1 & vd & op0006=0x57 {vd=vfcvt_rtzxfv(vs2);}
+:vfcvt.rtz.x.f.v   vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x7 & op1214=0x1 & vd & op0006=0x57 {vd=vfcvt_rtzxfv(vs2,v0);}
 
+define pcodeop vfcvt_rtzxufv;
 # vfcvt.rtz.xu.f.v 31..26=0x12 vm vs2 19..15=0x06 14..12=0x1 vd 6..0=0x57
 # vfcvt.rtz.xu.f.v vd, vs2, vm   # Convert float to unsigned integer, truncating.
-:vfcvt.rtz.xu.f.v  vd, vs2, vm    is op2631=0x12 & vm & vs2 & op1519=0x6 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfcvt.rtz.xu.f.v  vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x6 & op1214=0x1 & vd & op0006=0x57 {vd=vfcvt_rtzxufv(vs2);}
+:vfcvt.rtz.xu.f.v  vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x6 & op1214=0x1 & vd & op0006=0x57 {vd=vfcvt_rtzxufv(vs2,v0);}
 
+define pcodeop vfcvt_xfv;
 # vfcvt.x.f.v      31..26=0x12 vm vs2 19..15=0x01 14..12=0x1 vd 6..0=0x57
 # vfcvt.x.f.v  vd, vs2, vm       # Convert float to signed integer.
-:vfcvt.x.f.v   vd, vs2, vm        is op2631=0x12 & vm & vs2 & op1519=0x1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfcvt.x.f.v   vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x1 & op1214=0x1 & vd & op0006=0x57 {vd=vfcvt_xfv(vs2);}
+:vfcvt.x.f.v   vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x1 & op1214=0x1 & vd & op0006=0x57 {vd=vfcvt_xfv(vs2,v0);}
 
+define pcodeop vfcvt_xufv;
 # vfcvt.xu.f.v     31..26=0x12 vm vs2 19..15=0x00 14..12=0x1 vd 6..0=0x57
 # vfcvt.xu.f.v vd, vs2, vm       # Convert float to unsigned integer.
-:vfcvt.xu.f.v  vd, vs2, vm        is op2631=0x12 & vm & vs2 & op1519=0x0 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfcvt.xu.f.v  vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x0 & op1214=0x1 & vd & op0006=0x57 {vd=vfcvt_xufv(vs2);}
+:vfcvt.xu.f.v  vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x0 & op1214=0x1 & vd & op0006=0x57 {vd=vfcvt_xufv(vs2,v0);}
 
-# vfdiv.vf       31..26=0x20 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfdiv.vf vd, vs2, rs1, vm   # vector-scalar
-:vfdiv.vf  vd, vs2, rs1, vm    is op2631=0x20 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfdiv_vf;
+# vfdiv.vf       31..26=0x20 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfdiv.vf vd, vs2, frs1, vm   # vector-scalar
+:vfdiv.vf  vd, vs2, frs1         is op2631=0x20 & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfdiv_vf(vs2,frs1);}
+:vfdiv.vf  vd, vs2, frs1, "v0.t" is op2631=0x20 & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfdiv_vf(vs2,frs1,v0);}
 
+define pcodeop vfdiv_vv;
 # vfdiv.vv       31..26=0x20 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfdiv.vv vd, vs2, vs1, vm   # Vector-vector
-:vfdiv.vv  vd, vs2, vs1, vm    is op2631=0x20 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfdiv.vv  vd, vs2, vs1         is op2631=0x20 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfdiv_vv(vs2,vs1);}
+:vfdiv.vv  vd, vs2, vs1, "v0.t" is op2631=0x20 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfdiv_vv(vs2,vs1,v0);}
 
+define pcodeop vfdot_vv;
 # vfdot.vv       31..26=0x39 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfdot.vv vd, vs2, vs1, vm # Vector-vector
-:vfdot.vv  vd, vs2, vs1, vm  is op2631=0x39 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfdot.vv  vd, vs2, vs1          is op2631=0x39 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfdot_vv(vs2,vs1);}
+:vfdot.vv  vd, vs2, vs1, "v0.t"  is op2631=0x39 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfdot_vv(vs2,vs1,v0);}
 
+define pcodeop vfirst_m;
 # vfirst.m       31..26=0x10 vm vs2 19..15=0x11 14..12=0x2 rd 6..0=0x57
 # vfirst.m rd, vs2, vm
-:vfirst.m  rd, vs2, vm is op2631=0x10 & vm & vs2 & op1519=0x11 & op1214=0x2 & rd & op0006=0x57  unimpl
+:vfirst.m  rd, vs2         is op2631=0x10 & op2525=0x1 & vs2 & op1519=0x11 & op1214=0x2 & rd & op0006=0x57 {rd=vfirst_m(vs2);}
+:vfirst.m  rd, vs2, "v0.t" is op2631=0x10 & op2525=0x0 & vs2 & op1519=0x11 & op1214=0x2 & rd & op0006=0x57 {rd=vfirst_m(vs2,v0);}
 
-# vfmacc.vf      31..26=0x2c vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfmacc.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) + vd[i]
-:vfmacc.vf  vd, rs1, vs2, vm     is op2631=0x2c & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfmacc_vf;
+# vfmacc.vf      31..26=0x2c vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfmacc.vf vd, frs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) + vd[i]
+:vfmacc.vf  vd, frs1, vs2         is op2631=0x2c & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfirst_m(frs1,vs2);}
+:vfmacc.vf  vd, frs1, vs2, "v0.t" is op2631=0x2c & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfirst_m(frs1,vs2,v0);}
 
+define pcodeop vfmacc_vv;
 # vfmacc.vv      31..26=0x2c vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]
-:vfmacc.vv  vd, vs1, vs2, vm     is op2631=0x2c & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfmacc.vv  vd, vs1, vs2         is op2631=0x2c & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmacc_vv(vs1,vs2);}
+:vfmacc.vv  vd, vs1, vs2, "v0.t" is op2631=0x2c & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmacc_vv(vs1,vs2,v0);}
 
-# vfmadd.vf      31..26=0x28 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfmadd.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vd[i]) + vs2[i]
-:vfmadd.vf  vd, rs1, vs2, vm     is op2631=0x28 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfmadd_vf;
+# vfmadd.vf      31..26=0x28 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfmadd.vf vd, frs1, vs2, vm    # vd[i] = +(f[rs1] * vd[i]) + vs2[i]
+:vfmadd.vf  vd, frs1, vs2         is op2631=0x28 & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmadd_vf(frs1,vs2);}
+:vfmadd.vf  vd, frs1, vs2, "v0.t" is op2631=0x28 & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmadd_vf(frs1,vs2,v0);}
 
+define pcodeop vfmadd_vv;
 # vfmadd.vv      31..26=0x28 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfmadd.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vd[i]) + vs2[i]
-:vfmadd.vv  vd, vs1, vs2, vm     is op2631=0x28 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfmadd.vv  vd, vs1, vs2         is op2631=0x28 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmadd_vv(vs1,vs2);}
+:vfmadd.vv  vd, vs1, vs2, "v0.t" is op2631=0x28 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmadd_vv(vs1,vs2,v0);}
 
+define pcodeop vfmax_vf;
 # vfmax.vf        31..26=0x06 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfmax.vf vd, vs2, rs1, vm   # vector-scalar
-:vfmax.vf  vd, vs2, rs1, vm    is op2631=0x6 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+# vfmax.vf vd, vs2, frs1, vm   # vector-scalar
+:vfmax.vf  vd, vs2, frs1         is op2631=0x6 & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmax_vf(vs2,frs1);}
+:vfmax.vf  vd, vs2, frs1, "v0.t" is op2631=0x6 & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmax_vf(vs2,frs1,v0);}
 
+define pcodeop vfmax_vv;
 # vfmax.vv       31..26=0x06 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfmax.vv vd, vs2, vs1, vm   # Vector-vector
-:vfmax.vv  vd, vs2, vs1, vm    is op2631=0x6 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfmax.vv  vd, vs2, vs1         is op2631=0x6 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmax_vv(vs2,vs1);}
+:vfmax.vv  vd, vs2, vs1, "v0.t" is op2631=0x6 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmax_vv(vs2,vs1,v0);}
 
-# vfmerge.vfm    31..26=0x17 25=0 vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfmerge.vfm vd, vs2, rs1, v0  # vd[i] = v0.mask[i] ? f[rs1] : vs2[i]
-:vfmerge.vfm  vd, vs2, rs1, v0   is op2631=0x17 & op2525=0x0 & vs2 & rs1 & op1214=0x5 & v0 & vd & op0006=0x57  unimpl
+define pcodeop vfmerge_vfm;
+# vfmerge.vfm    31..26=0x17 25=0 vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfmerge.vfm vd, vs2, frs1, v0  # vd[i] = v0.mask[i] ? f[frs1] : vs2[i]
+:vfmerge.vfm  vd, vs2, frs1, v0   is op2631=0x17 & op2525=0x0 & vs2 & frs1 & op1214=0x5 & v0 & vd & op0006=0x57 {vd=vfmerge_vfm(vs2,frs1,v0);}
 
-# vfmin.vf        31..26=0x04 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfmin.vf vd, vs2, rs1, vm   # vector-scalar
-:vfmin.vf  vd, vs2, rs1, vm    is op2631=0x4 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfmin_vf;
+# vfmin.vf        31..26=0x04 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfmin.vf vd, vs2, frs1, vm   # vector-scalar
+:vfmin.vf  vd, vs2, frs1         is op2631=0x4 & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmin_vf(vs2,frs1);}
+:vfmin.vf  vd, vs2, frs1, "v0.t" is op2631=0x4 & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmin_vf(vs2,frs1,v0);}
 
+define pcodeop vfmin_vv;
 # vfmin.vv       31..26=0x04 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfmin.vv vd, vs2, vs1, vm   # Vector-vector
-:vfmin.vv  vd, vs2, vs1, vm    is op2631=0x4 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfmin.vv  vd, vs2, vs1         is op2631=0x4 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmin_vv(vs2,vs1);}
+:vfmin.vv  vd, vs2, vs1, "v0.t" is op2631=0x4 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmin_vv(vs2,vs1,v0);}
 
+define pcodeop vfmsac_vf;
 # vfmsac.vf      31..26=0x2e vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfmsac.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) - vd[i]
-:vfmsac.vf  vd, rs1, vs2, vm     is op2631=0x2e & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+# vfmsac.vf vd, frs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) - vd[i]
+:vfmsac.vf  vd, frs1, vs2         is op2631=0x2e & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmsac_vf(frs1,vs2);}
+:vfmsac.vf  vd, frs1, vs2, "v0.t" is op2631=0x2e & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmsac_vf(frs1,vs2,v0);}
 
+define pcodeop vfmsac_vv;
 # vfmsac.vv      31..26=0x2e vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfmsac.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) - vd[i]
-:vfmsac.vv  vd, vs1, vs2, vm     is op2631=0x2e & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfmsac.vv  vd, vs1, vs2         is op2631=0x2e & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmsac_vv(vs1,vs2);}
+:vfmsac.vv  vd, vs1, vs2, "v0.t" is op2631=0x2e & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmsac_vv(vs1,vs2,v0);}
 
-# vfmsub.vf      31..26=0x2a vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfmsub.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vd[i]) - vs2[i]
-:vfmsub.vf  vd, rs1, vs2, vm     is op2631=0x2a & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfmsub_vf;
+# vfmsub.vf      31..26=0x2a vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfmsub.vf vd, frs1, vs2, vm    # vd[i] = +(f[rs1] * vd[i]) - vs2[i]
+:vfmsub.vf  vd, frs1, vs2         is op2631=0x2a & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmsub_vf(frs1,vs2);}
+:vfmsub.vf  vd, frs1, vs2, "v0.t" is op2631=0x2a & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmsub_vf(frs1,vs2,v0);}
 
+define pcodeop vfmsub_vv;
 # vfmsub.vv      31..26=0x2a vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfmsub.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vd[i]) - vs2[i]
-:vfmsub.vv  vd, vs1, vs2, vm     is op2631=0x2a & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfmsub.vv  vd, vs1, vs2         is op2631=0x2a & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmsub_vv(vs1,vs2);}
+:vfmsub.vv  vd, vs1, vs2, "v0.t" is op2631=0x2a & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmsub_vv(vs1,vs2,v0);}
 
-# vfmul.vf       31..26=0x24 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
+define pcodeop vfmul_vf;
+# vfmul.vf       31..26=0x24 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
 # vfmul.vf vd, vs2, rs1, vm   # vector-scalar
-:vfmul.vf  vd, vs2, rs1, vm    is op2631=0x24 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+:vfmul.vf  vd, vs2, frs1         is op2631=0x24 & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmsub_vf(vs2,frs1);}
+:vfmul.vf  vd, vs2, frs1, "v0.t" is op2631=0x24 & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmsub_vf(vs2,frs1,v0);}
 
+define pcodeop vfmul_vv;
 # vfmul.vv       31..26=0x24 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfmul.vv vd, vs2, vs1, vm   # Vector-vector
-:vfmul.vv  vd, vs2, vs1, vm    is op2631=0x24 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfmul.vv  vd, vs2, vs1         is op2631=0x24 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmul_vv(vs2,vs1);}
+:vfmul.vv  vd, vs2, vs1, "v0.t" is op2631=0x24 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfmul_vv(vs2,vs1,v0);}
 
+define pcodeop vfmv_fs;
 # vfmv.f.s       31..26=0x10 25=1 vs2      19..15=0 14..12=0x1 rd 6..0=0x57
-# vfmv.f.s rd, vs2  # f[rd] = vs2[0] (rs1=0)
-:vfmv.f.s  rd, vs2   is op2631=0x10 & op2525=0x1 & vs2 & op1519=0x0 & op1214=0x1 & rd & op0006=0x57  unimpl
+# vfmv.f.s frd, vs2  # f[frd] = vs2[0] (rs1=0)
+:vfmv.f.s  frd, vs2 is op2631=0x10 & op2525=0x1 & vs2 & op1519=0x0 & op1214=0x1 & frd & op0006=0x57 {frd=vfmv_fs(vs2);}
 
+define pcodeop vfmv_sf;
 # vfmv.s.f        31..26=0x10 25=1 24..20=0 rs1      14..12=0x5 vd 6..0=0x57
-# vfmv.s.f vd, rs1  # vd[0] = f[rs1] (vs2=0)
-:vfmv.s.f  vd, rs1   is op2631=0x10 & op2525=0x1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+# vfmv.s.f vd, frs1  # vd[0] = f[frs1] (vs2=0)
+:vfmv.s.f  vd, frs1 is op2631=0x10 & op2525=0x1 & op2024=0x0 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmv_sf(frs1);}
 
+define pcodeop vfmv_vf;
 # vfmv.v.f       31..26=0x17 25=1 24..20=0 rs1 14..12=0x5 vd 6..0=0x57
-# vfmv.v.f vd, rs1  # vd[i] = f[rs1]
-:vfmv.v.f  vd, rs1   is op2631=0x17 & op2525=0x1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+# vfmv.v.f vd, frs1  # vd[i] = f[frs1]
+:vfmv.v.f  vd, frs1 is op2631=0x17 & op2525=0x1 & op2024=0x0 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfmv_vf(frs1);}
 
+define pcodeop vfncvt_ffw;
 # vfncvt.f.f.w      31..26=0x12 vm vs2 19..15=0x14 14..12=0x1 vd 6..0=0x57
 # vfncvt.f.f.w vd, vs2, vm        # Convert double-width float to single-width float.
-:vfncvt.f.f.w  vd, vs2, vm         is op2631=0x12 & vm & vs2 & op1519=0x14 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfncvt.f.f.w  vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x14 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_ffw(vs2);}
+:vfncvt.f.f.w  vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x14 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_ffw(vs2,v0);}
 
+define pcodeop vfncvt_fxw;
 # vfncvt.f.x.w      31..26=0x12 vm vs2 19..15=0x13 14..12=0x1 vd 6..0=0x57
 # vfncvt.f.x.w  vd, vs2, vm       # Convert double-width signed integer to float.
-:vfncvt.f.x.w   vd, vs2, vm        is op2631=0x12 & vm & vs2 & op1519=0x13 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfncvt.f.x.w   vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x13 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_fxw(vs2);}
+:vfncvt.f.x.w   vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x13 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_fxw(vs2,v0);}
 
+define pcodeop vfncvt_fxuw;
 # vfncvt.f.xu.w     31..26=0x12 vm vs2 19..15=0x12 14..12=0x1 vd 6..0=0x57
 # vfncvt.f.xu.w vd, vs2, vm       # Convert double-width unsigned integer to float.
-:vfncvt.f.xu.w  vd, vs2, vm        is op2631=0x12 & vm & vs2 & op1519=0x12 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfncvt.f.xu.w  vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x12 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_fxuw(vs2);}
+:vfncvt.f.xu.w  vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x12 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_fxuw(vs2,v0);}
 
+define pcodeop vfncvt_rod_ffw;
 # vfncvt.rod.f.f.w  31..26=0x12 vm vs2 19..15=0x15 14..12=0x1 vd 6..0=0x57
 # vfncvt.rod.f.f.w vd, vs2, vm    # Convert double-width float to single-width float,
-:vfncvt.rod.f.f.w  vd, vs2, vm     is op2631=0x12 & vm & vs2 & op1519=0x15 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfncvt.rod.f.f.w  vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x15 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_ffw(vs2);}
+:vfncvt.rod.f.f.w  vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x15 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_ffw(vs2,v0);}
 
+define pcodeop vfncvt_rtz_xfw;
 # vfncvt.rtz.x.f.w  31..26=0x12 vm vs2 19..15=0x17 14..12=0x1 vd 6..0=0x57
 # vfncvt.rtz.x.f.w  vd, vs2, vm   # Convert double-width float to signed integer, truncating.
-:vfncvt.rtz.x.f.w   vd, vs2, vm    is op2631=0x12 & vm & vs2 & op1519=0x17 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfncvt.rtz.x.f.w   vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x17 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_rtz_xfw(vs2);}
+:vfncvt.rtz.x.f.w   vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x17 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_rtz_xfw(vs2,v0);}
 
+define pcodeop vfncvt_rtz_xufw;
 # vfncvt.rtz.xu.f.w 31..26=0x12 vm vs2 19..15=0x16 14..12=0x1 vd 6..0=0x57
 # vfncvt.rtz.xu.f.w vd, vs2, vm   # Convert double-width float to unsigned integer, truncating.
-:vfncvt.rtz.xu.f.w  vd, vs2, vm    is op2631=0x12 & vm & vs2 & op1519=0x16 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfncvt.rtz.xu.f.w  vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x16 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_rtz_xufw(vs2);}
+:vfncvt.rtz.xu.f.w  vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x16 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_rtz_xufw(vs2,v0);}
 
+define pcodeop vfncvt_xfw;
 # vfncvt.x.f.w      31..26=0x12 vm vs2 19..15=0x11 14..12=0x1 vd 6..0=0x57
 # vfncvt.x.f.w  vd, vs2, vm       # Convert double-width float to signed integer.
-:vfncvt.x.f.w   vd, vs2, vm        is op2631=0x12 & vm & vs2 & op1519=0x11 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfncvt.x.f.w   vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x11 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_xfw(vs2);}
+:vfncvt.x.f.w   vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x11 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_xfw(vs2,v0);}
 
+define pcodeop vfncvt_xufw;
 # vfncvt.xu.f.w     31..26=0x12 vm vs2 19..15=0x10 14..12=0x1 vd 6..0=0x57
 # vfncvt.xu.f.w vd, vs2, vm       # Convert double-width float to unsigned integer.
-:vfncvt.xu.f.w  vd, vs2, vm        is op2631=0x12 & vm & vs2 & op1519=0x10 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfncvt.xu.f.w  vd, vs2         is op2631=0x12 & op2525=0x1 & vs2 & op1519=0x10 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_xufw(vs2);}
+:vfncvt.xu.f.w  vd, vs2, "v0.t" is op2631=0x12 & op2525=0x0 & vs2 & op1519=0x10 & op1214=0x1 & vd & op0006=0x57 {vd=vfncvt_xufw(vs2,v0);}
 
-# vfnmacc.vf     31..26=0x2d vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfnmacc.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) - vd[i]
-:vfnmacc.vf  vd, rs1, vs2, vm    is op2631=0x2d & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfnmacc_vf;
+# vfnmacc.vf     31..26=0x2d vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfnmacc.vf vd, frs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) - vd[i]
+:vfnmacc.vf  vd, frs1, vs2         is op2631=0x2d & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfnmacc_vf(frs1,vs2);}
+:vfnmacc.vf  vd, frs1, vs2, "v0.t" is op2631=0x2d & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfnmacc_vf(frs1,vs2,v0);}
 
+define pcodeop vfnmacc_vv;
 # vfnmacc.vv     31..26=0x2d vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfnmacc.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) - vd[i]
-:vfnmacc.vv  vd, vs1, vs2, vm    is op2631=0x2d & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfnmacc.vv  vd, vs1, vs2         is op2631=0x2d & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfnmacc_vv(vs1,vs2);}
+:vfnmacc.vv  vd, vs1, vs2, "v0.t" is op2631=0x2d & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfnmacc_vv(vs1,vs2,v0);}
 
-# vfnmadd.vf     31..26=0x29 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfnmadd.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vd[i]) - vs2[i]
-:vfnmadd.vf  vd, rs1, vs2, vm    is op2631=0x29 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfnmadd_vf;
+# vfnmadd.vf     31..26=0x29 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfnmadd.vf vd, frs1, vs2, vm   # vd[i] = -(f[rs1] * vd[i]) - vs2[i]
+:vfnmadd.vf  vd, frs1, vs2         is op2631=0x29 & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfnmadd_vf(frs1,vs2);}
+:vfnmadd.vf  vd, frs1, vs2, "v0.t" is op2631=0x29 & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfnmadd_vf(frs1,vs2,v0);}
 
+define pcodeop vfnmadd_vv;
 # vfnmadd.vv     31..26=0x29 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfnmadd.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vd[i]) - vs2[i]
-:vfnmadd.vv  vd, vs1, vs2, vm    is op2631=0x29 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfnmadd.vv  vd, vs1, vs2         is op2631=0x29 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfnmadd_vv(vs1,vs2);}
+:vfnmadd.vv  vd, vs1, vs2, "v0.t" is op2631=0x29 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfnmadd_vv(vs1,vs2,v0);}
 
-# vfnmsac.vf     31..26=0x2f vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfnmsac.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) + vd[i]
-:vfnmsac.vf  vd, rs1, vs2, vm    is op2631=0x2f & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfnmsac_vf;
+# vfnmsac.vf     31..26=0x2f vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfnmsac.vf vd, frs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) + vd[i]
+:vfnmsac.vf  vd, frs1, vs2         is op2631=0x2f & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfnmsac_vf(frs1,vs2);}
+:vfnmsac.vf  vd, frs1, vs2, "v0.t" is op2631=0x2f & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfnmsac_vf(frs1,vs2,v0);}
 
+define pcodeop vfnmsac_vv;
 # vfnmsac.vv     31..26=0x2f vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfnmsac.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) + vd[i]
-:vfnmsac.vv  vd, vs1, vs2, vm    is op2631=0x2f & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfnmsac.vv  vd, vs1, vs2         is op2631=0x2f & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfnmsac_vv(vs1,vs2);}
+:vfnmsac.vv  vd, vs1, vs2, "v0.t" is op2631=0x2f & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfnmsac_vv(vs1,vs2,v0);}
 
-# vfnmsub.vf     31..26=0x2b vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfnmsub.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vd[i]) + vs2[i]
-:vfnmsub.vf  vd, rs1, vs2, vm    is op2631=0x2b & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfnmsub_vf;
+# vfnmsub.vf     31..26=0x2b vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfnmsub.vf vd, frs1, vs2, vm   # vd[i] = -(f[rs1] * vd[i]) + vs2[i]
+:vfnmsub.vf  vd, frs1, vs2         is op2631=0x2b & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfnmsub_vf(frs1,vs2);}
+:vfnmsub.vf  vd, frs1, vs2, "v0.t" is op2631=0x2b & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfnmsub_vf(frs1,vs2,v0);}
 
+define pcodeop vfnmsub_vv;
 # vfnmsub.vv     31..26=0x2b vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfnmsub.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vd[i]) + vs2[i]
-:vfnmsub.vv  vd, vs1, vs2, vm    is op2631=0x2b & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfnmsub.vv  vd, vs1, vs2         is op2631=0x2b & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfnmsub_vf(vs1,vs2);}
+:vfnmsub.vv  vd, vs1, vs2, "v0.t" is op2631=0x2b & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfnmsub_vf(vs1,vs2,v0);}
 
-# vfrdiv.vf      31..26=0x21 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfrdiv.vf vd, vs2, rs1, vm  # scalar-vector, vd[i] = f[rs1]/vs2[i]
-:vfrdiv.vf  vd, vs2, rs1, vm   is op2631=0x21 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfrdiv_vf;
+# vfrdiv.vf      31..26=0x21 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfrdiv.vf vd, vs2, frs1, vm  # scalar-vector, vd[i] = f[rs1]/vs2[i]
+:vfrdiv.vf  vd, vs2, frs1         is op2631=0x21 & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfrdiv_vf(vs2,frs1);}
+:vfrdiv.vf  vd, vs2, frs1, "v0.t" is op2631=0x21 & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfrdiv_vf(vs2,frs1,v0);}
 
+define pcodeop vfredmax_vs;
 # vfredmax.vs    31..26=0x07 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfredmax.vs  vd, vs2, vs1, vm # Maximum value
-:vfredmax.vs   vd, vs2, vs1, vm  is op2631=0x7 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfredmax.vs   vd, vs2, vs1         is op2631=0x7 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfredmax_vs(vs2,vs1);}
+:vfredmax.vs   vd, vs2, vs1, "v0.t" is op2631=0x7 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfredmax_vs(vs2,vs1,v0);}
 
+define pcodeop vfredmin_vs;
 # vfredmin.vs    31..26=0x05 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfredmin.vs  vd, vs2, vs1, vm # Minimum value
-:vfredmin.vs   vd, vs2, vs1, vm  is op2631=0x5 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfredmin.vs   vd, vs2, vs1         is op2631=0x5 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfredmin_vs(vs2,vs1);}
+:vfredmin.vs   vd, vs2, vs1, "v0.t" is op2631=0x5 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfredmin_vs(vs2,vs1,v0);}
 
+define pcodeop vfredosum_vs;
 # vfredosum.vs   31..26=0x03 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfredosum.vs vd, vs2, vs1, vm # Ordered sum
-:vfredosum.vs  vd, vs2, vs1, vm  is op2631=0x3 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfredosum.vs  vd, vs2, vs1         is op2631=0x3 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfredosum_vs(vs2,vs1);}
+:vfredosum.vs  vd, vs2, vs1, "v0.t" is op2631=0x3 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfredosum_vs(vs2,vs1,v0);}
 
-# vfredsum.vs    31..26=0x01 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
-# vfredsum.vs  vd, vs2, vs1, vm # Unordered sum
-:vfredsum.vs   vd, vs2, vs1, vm  is op2631=0x1 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+define pcodeop vfredusum_vs;
+# vfredusum.vs    31..26=0x01 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
+# vfredusum.vs  vd, vs2, vs1, vm # Unordered sum
+:vfredusum.vs   vd, vs2, vs1         is op2631=0x1 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfredusum_vs(vs2,vs1);}
+:vfredusum.vs   vd, vs2, vs1, "v0.t" is op2631=0x1 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfredusum_vs(vs2,vs1,v0);}
 
+define pcodeop vfrsub_vf;
 # vfrsub.vf      31..26=0x27 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfrsub.vf vd, vs2, rs1, vm  # Scalar-vector vd[i] = f[rs1] - vs2[i]
-:vfrsub.vf  vd, vs2, rs1, vm   is op2631=0x27 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+# vfrsub.vf vd, vs2, frs1, vm  # Scalar-vector vd[i] = f[rs1] - vs2[i]
+:vfrsub.vf  vd, vs2, frs1         is op2631=0x27 & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfrsub_vf(vs2,frs1);}
+:vfrsub.vf  vd, vs2, frs1, "v0.t" is op2631=0x27 & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfrsub_vf(vs2,frs1,v0);}
 
-# vfsgnj.vf       31..26=0x08 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfsgnj.vf vd, vs2, rs1, vm   # vector-scalar
-:vfsgnj.vf  vd, vs2, rs1, vm    is op2631=0x8 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfsgnj_vf;
+# vfsgnj.vf       31..26=0x08 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfsgnj.vf vd, vs2, frs1, vm   # vector-scalar
+:vfsgnj.vf  vd, vs2, frs1         is op2631=0x8 & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfsgnj_vf(vs2,frs1);}
+:vfsgnj.vf  vd, vs2, frs1, "v0.t" is op2631=0x8 & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfsgnj_vf(vs2,frs1,v0);}
 
+define pcodeop vfsgnj_vv;
 # vfsgnj.vv      31..26=0x08 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfsgnj.vv vd, vs2, vs1, vm   # Vector-vector
-:vfsgnj.vv  vd, vs2, vs1, vm    is op2631=0x8 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfsgnj.vv  vd, vs2, vs1         is op2631=0x8 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfsgnj_vv(vs2,vs1);}
+:vfsgnj.vv  vd, vs2, vs1, "v0.t" is op2631=0x8 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfsgnj_vv(vs2,vs1,v0);}
 
-# vfsgnjn.vf      31..26=0x09 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfsgnjn.vf vd, vs2, rs1, vm   # vector-scalar
-:vfsgnjn.vf  vd, vs2, rs1, vm    is op2631=0x9 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfsgnjn_vf;
+# vfsgnjn.vf      31..26=0x09 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfsgnjn.vf vd, vs2, frs1, vm   # vector-scalar
+:vfsgnjn.vf  vd, vs2, frs1         is op2631=0x9 & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfsgnjn_vf(vs2,frs1);}
+:vfsgnjn.vf  vd, vs2, frs1, "v0.t" is op2631=0x9 & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfsgnjn_vf(vs2,frs1,v0);}
 
+define pcodeop vfsgnjn_vv;
+define pcodeop vfneg_vv;
 # vfsgnjn.vv     31..26=0x09 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfsgnjn.vv vd, vs2, vs1, vm   # Vector-vector
-:vfsgnjn.vv  vd, vs2, vs1, vm    is op2631=0x9 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+#:vfneg.v     vd, vs2              is op2631=0x9 & op2525=0x1 & vs2 & vs1=vs2 & op1214=0x1 & vd & op0006=0x57 {vd=vfneg_vv(vs2);}
+#:vfneg.v     vd, vs2, "v0.t"      is op2631=0x9 & op2525=0x0 & vs2 & vs1=vs2 & op1214=0x1 & vd & op0006=0x57 {vd=vfneg_vv(vs2,v0);}
+:vfsgnjn.vv  vd, vs2, vs1         is op2631=0x9 & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfsgnjn_vv(vs2,vs1);}
+:vfsgnjn.vv  vd, vs2, vs1, "v0.t" is op2631=0x9 & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfsgnjn_vv(vs2,vs1,v0);}
 
+define pcodeop vfsgnjx_vf;
 # vfsgnjx.vf      31..26=0x0a vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfsgnjx.vf vd, vs2, rs1, vm   # vector-scalar
-:vfsgnjx.vf  vd, vs2, rs1, vm    is op2631=0xa & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+# vfsgnjx.vf vd, vs2, frs1, vm   # vector-scalar
+:vfsgnjx.vf  vd, vs2, frs1         is op2631=0xa & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfsgnjx_vf(vs2,frs1);}
+:vfsgnjx.vf  vd, vs2, frs1, "v0.t" is op2631=0xa & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfsgnjx_vf(vs2,frs1,v0);}
 
+define pcodeop vfsgnjx_vv;
 # vfsgnjx.vv     31..26=0x0a vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfsgnjx.vv vd, vs2, vs1, vm   # Vector-vector
-:vfsgnjx.vv  vd, vs2, vs1, vm    is op2631=0xa & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
-
-# vfslide1down.vf 31..26=0x0f vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfslide1down.vf vd, vs2, rs1, vm      # vd[i] = vs2[i+1], vd[vl-1]=f[rs1]
-:vfslide1down.vf  vd, vs2, rs1, vm       is op2631=0xf & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
-
-# vfslide1up.vf   31..26=0x0e vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfslide1up.vf vd, vs2, rs1, vm        # vd[0]=f[rs1], vd[i+1] = vs2[i]
-:vfslide1up.vf  vd, vs2, rs1, vm         is op2631=0xe & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
-
+#:vfabs.v    vd, vs2              is op2631=0xa & op2525=0x1 & vs2 & vs1=vs2 & op1214=0x1 & vd & op0006=0x57 unimpl
+#:vfabs.v    vd, vs2, "v0.t"      is op2631=0xa & op2525=0x0 & vs2 & vs1=vs2 & op1214=0x1 & vd & op0006=0x57 unimpl
+:vfsgnjx.vv  vd, vs2, vs1         is op2631=0xa & op2525=0x1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfsgnjx_vv(vs2,vs1);}
+:vfsgnjx.vv  vd, vs2, vs1, "v0.t" is op2631=0xa & op2525=0x0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfsgnjx_vv(vs2,vs1,v0);}
+
+define pcodeop vfslide1down_vf;
+# vfslide1down.vf 31..26=0x0f vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfslide1down.vf vd, vs2, frs1, vm      # vd[i] = vs2[i+1], vd[vl-1]=f[rs1]
+:vfslide1down.vf  vd, vs2, frs1         is op2631=0xf & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfslide1down_vf(vs2,frs1);}
+:vfslide1down.vf  vd, vs2, frs1, "v0.t" is op2631=0xf & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfslide1down_vf(vs2,frs1,v0);}
+
+define pcodeop vfslide1up_vf;
+# vfslide1up.vf   31..26=0x0e vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfslide1up.vf vd, vs2, frs1, vm        # vd[0]=f[rs1], vd[i+1] = vs2[i]
+:vfslide1up.vf  vd, vs2, frs1         is op2631=0xe & op2525=0x1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfslide1up_vf(vs2,frs1);}
+:vfslide1up.vf  vd, vs2, frs1, "v0.t" is op2631=0xe & op2525=0x0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfslide1up_vf(vs2,frs1,v0);}
+
+define pcodeop vfsqrt_v;
 # vfsqrt.v       31..26=0x13 vm vs2 19..15=0x00 14..12=0x1 vd 6..0=0x57
 # vfsqrt.v vd, vs2, vm   # Vector-vector square root
-:vfsqrt.v  vd, vs2, vm    is op2631=0x13 & vm & vs2 & op1519=0x0 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfsqrt.v   vd, vs2         is op2631=0x13 & op2525=1 & vs2 & op1519=0x0 & op1214=0x1 & vd & op0006=0x57 {vd=vfsqrt_v(vs2);}
+:vfsqrt.v   vd, vs2, "v0.t" is op2631=0x13 & op2525=0 & vs2 & op1519=0x0 & op1214=0x1 & vd & op0006=0x57 {vd=vfsqrt_v(vs2,v0);}
+
+define pcodeop vfsqrt7_v;
+:vfrsqrt7.v vd, vs2         is op2631=0x13 & op2525=1 & vs2 & op1519=0x4 & op1214=0x1 & vd & op0006=0x57 {vd=vfsqrt7_v(vs2);}
+:vfrsqrt7.v vd, vs2, "v0.t" is op2631=0x13 & op2525=0 & vs2 & op1519=0x4 & op1214=0x1 & vd & op0006=0x57 {vd=vfsqrt7_v(vs2,v0);}
 
-# vfsub.vf        31..26=0x02 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfsub.vf vd, vs2, rs1, vm   # Vector-scalar vd[i] = vs2[i] - f[rs1]
-:vfsub.vf  vd, vs2, rs1, vm    is op2631=0x2 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfrec7_v;
+:vfrec7.v   vd, vs2         is op2631=0x13 & op2525=1 & vs2 & op1519=0x5 & op1214=0x1 & vd & op0006=0x57 {vd=vfrec7_v(vs2);}
+:vfrec7.v   vd, vs2, "v0.t" is op2631=0x13 & op2525=0 & vs2 & op1519=0x5 & op1214=0x1 & vd & op0006=0x57 {vd=vfrec7_v(vs2,v0);}
 
+define pcodeop vfsub_vf;
+# vfsub.vf        31..26=0x02 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfsub.vf vd, vs2, frs1, vm   # Vector-scalar vd[i] = vs2[i] - f[rs1]
+:vfsub.vf  vd, vs2, frs1         is op2631=0x2 & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfsub_vf(vs2,frs1);}
+:vfsub.vf  vd, vs2, frs1, "v0.t" is op2631=0x2 & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfsub_vf(vs2,frs1,v0);}
+
+define pcodeop vfsub_vv;
 # vfsub.vv       31..26=0x02 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfsub.vv vd, vs2, vs1, vm   # Vector-vector
-:vfsub.vv  vd, vs2, vs1, vm    is op2631=0x2 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfsub.vv  vd, vs2, vs1         is op2631=0x2 & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfsub_vv(vs2,vs1);}
+:vfsub.vv  vd, vs2, vs1, "v0.t" is op2631=0x2 & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfsub_vv(vs2,vs1,v0);}
 
-# vfwadd.vf      31..26=0x30 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfwadd.vf vd, vs2, rs1, vm  # vector-scalar
-:vfwadd.vf  vd, vs2, rs1, vm   is op2631=0x30 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfwadd_vf;
+# vfwadd.vf      31..26=0x30 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfwadd.vf vd, vs2, frs1, vm  # vector-scalar
+:vfwadd.vf  vd, vs2, frs1         is op2631=0x30 & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwadd_vf(vs2,frs1);}
+:vfwadd.vf  vd, vs2, frs1, "v0.t" is op2631=0x30 & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwadd_vf(vs2,frs1,v0);}
 
+define pcodeop vfwadd_vv;
 # vfwadd.vv      31..26=0x30 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfwadd.vv vd, vs2, vs1, vm  # vector-vector
-:vfwadd.vv  vd, vs2, vs1, vm   is op2631=0x30 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwadd.vv  vd, vs2, vs1         is op2631=0x30 & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwadd_vv(vs2,vs1);}
+:vfwadd.vv  vd, vs2, vs1, "v0.t" is op2631=0x30 & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwadd_vv(vs2,vs1,v0);}
 
+define pcodeop vfwadd_wf;
 # vfwadd.wf      31..26=0x34 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfwadd.wf  vd, vs2, rs1, vm  # vector-scalar
-:vfwadd.wf   vd, vs2, rs1, vm   is op2631=0x34 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+# vfwadd.wf  vd, vs2, frs1, vm  # vector-scalar
+:vfwadd.wf   vd, vs2, frs1         is op2631=0x34 & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwadd_wf(vs2,frs1);}
+:vfwadd.wf   vd, vs2, frs1, "v0.t" is op2631=0x34 & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwadd_wf(vs2,frs1,v0);}
 
+define pcodeop vfwadd_wv;
 # vfwadd.wv      31..26=0x34 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfwadd.wv  vd, vs2, vs1, vm  # vector-vector
-:vfwadd.wv   vd, vs2, vs1, vm   is op2631=0x34 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwadd.wv   vd, vs2, vs1         is op2631=0x34 & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwadd_wv(vs2,vs1);}
+:vfwadd.wv   vd, vs2, vs1, "v0.t" is op2631=0x34 & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwadd_wv(vs2,vs1,v0);}
 
+define pcodeop vfwcvt_f_f_v;
 # vfwcvt.f.f.v      31..26=0x12 vm vs2 19..15=0x0C 14..12=0x1 vd 6..0=0x57
 # vfwcvt.f.f.v vd, vs2, vm        # Convert single-width float to double-width float.
-:vfwcvt.f.f.v  vd, vs2, vm         is op2631=0x12 & vm & vs2 & op1519=0xc & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwcvt.f.f.v  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0xc & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_f_f_v(vs2);}
+:vfwcvt.f.f.v  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0xc & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_f_f_v(vs2,v0);}
 
+define pcodeop vfwcvt_f_x_v;
 # vfwcvt.f.x.v      31..26=0x12 vm vs2 19..15=0x0B 14..12=0x1 vd 6..0=0x57
 # vfwcvt.f.x.v  vd, vs2, vm       # Convert signed integer to double-width float.
-:vfwcvt.f.x.v   vd, vs2, vm        is op2631=0x12 & vm & vs2 & op1519=0xb & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwcvt.f.x.v   vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0xb & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_f_x_v(vs2);}
+:vfwcvt.f.x.v   vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0xb & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_f_x_v(vs2,v0);}
 
+define pcodeop vfwcvt_f_xu_v;
 # vfwcvt.f.xu.v     31..26=0x12 vm vs2 19..15=0x0A 14..12=0x1 vd 6..0=0x57
 # vfwcvt.f.xu.v vd, vs2, vm       # Convert unsigned integer to double-width float.
-:vfwcvt.f.xu.v  vd, vs2, vm        is op2631=0x12 & vm & vs2 & op1519=0xa & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwcvt.f.xu.v  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0xa & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_f_xu_v(vs2);}
+:vfwcvt.f.xu.v  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0xa & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_f_xu_v(vs2,v0);}
 
+define pcodeop vfwcvt_rtz_x_f_v;
 # vfwcvt.rtz.x.f.v  31..26=0x12 vm vs2 19..15=0x0F 14..12=0x1 vd 6..0=0x57
 # vfwcvt.rtz.x.f.v  vd, vs2, vm   # Convert float to double-width signed integer, truncating.
-:vfwcvt.rtz.x.f.v   vd, vs2, vm    is op2631=0x12 & vm & vs2 & op1519=0xf & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwcvt.rtz.x.f.v   vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0xf & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_rtz_x_f_v(vs2);}
+:vfwcvt.rtz.x.f.v   vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0xf & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_rtz_x_f_v(vs2,v0);}
 
+define pcodeop vfwcvt_rtz_xu_f_v;
 # vfwcvt.rtz.xu.f.v 31..26=0x12 vm vs2 19..15=0x0E 14..12=0x1 vd 6..0=0x57
 # vfwcvt.rtz.xu.f.v vd, vs2, vm   # Convert float to double-width unsigned integer, truncating.
-:vfwcvt.rtz.xu.f.v  vd, vs2, vm    is op2631=0x12 & vm & vs2 & op1519=0xe & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwcvt.rtz.xu.f.v  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0xe & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_rtz_xu_f_v(vs2);}
+:vfwcvt.rtz.xu.f.v  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0xe & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_rtz_xu_f_v(vs2,v0);}
 
+define pcodeop vfwcvt_x_f_v;
 # vfwcvt.x.f.v      31..26=0x12 vm vs2 19..15=0x09 14..12=0x1 vd 6..0=0x57
 # vfwcvt.x.f.v  vd, vs2, vm       # Convert float to double-width signed integer.
-:vfwcvt.x.f.v   vd, vs2, vm        is op2631=0x12 & vm & vs2 & op1519=0x9 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwcvt.x.f.v   vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0x9 & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_x_f_v(vs2);}
+:vfwcvt.x.f.v   vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0x9 & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_x_f_v(vs2,v0);}
 
+define pcodeop vfwcvt_xu_f_v;
 # vfwcvt.xu.f.v     31..26=0x12 vm vs2 19..15=0x08 14..12=0x1 vd 6..0=0x57
 # vfwcvt.xu.f.v vd, vs2, vm       # Convert float to double-width unsigned integer.
-:vfwcvt.xu.f.v  vd, vs2, vm        is op2631=0x12 & vm & vs2 & op1519=0x8 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwcvt.xu.f.v  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0x8 & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_xu_f_v(vs2);}
+:vfwcvt.xu.f.v  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0x8 & op1214=0x1 & vd & op0006=0x57 {vd=vfwcvt_xu_f_v(vs2,v0);}
 
-# vfwmacc.vf     31..26=0x3c vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfwmacc.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) + vd[i]
-:vfwmacc.vf  vd, rs1, vs2, vm     is op2631=0x3c & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfwmacc_vf;
+# vfwmacc.vf     31..26=0x3c vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfwmacc.vf vd, frs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) + vd[i]
+:vfwmacc.vf  vd, frs1, vs2         is op2631=0x3c & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwmacc_vf(frs1,vs2);}
+:vfwmacc.vf  vd, frs1, vs2, "v0.t" is op2631=0x3c & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwmacc_vf(frs1,vs2,v0);}
 
+define pcodeop vfwmacc_vv;
 # vfwmacc.vv     31..26=0x3c vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfwmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]
-:vfwmacc.vv  vd, vs1, vs2, vm     is op2631=0x3c & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwmacc.vv  vd, vs1, vs2         is op2631=0x3c & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwmacc_vv(vs1,vs2);}
+:vfwmacc.vv  vd, vs1, vs2, "v0.t" is op2631=0x3c & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwmacc_vv(vs1,vs2,v0);}
 
-# vfwmsac.vf     31..26=0x3e vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfwmsac.vf vd, rs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) - vd[i]
-:vfwmsac.vf  vd, rs1, vs2, vm     is op2631=0x3e & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfwmsac_vf;
+# vfwmsac.vf     31..26=0x3e vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfwmsac.vf vd, frs1, vs2, vm    # vd[i] = +(f[rs1] * vs2[i]) - vd[i]
+:vfwmsac.vf  vd, frs1, vs2         is op2631=0x3e & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwmsac_vf(frs1,vs2);}
+:vfwmsac.vf  vd, frs1, vs2, "v0.t" is op2631=0x3e & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwmsac_vf(frs1,vs2,v0);}
 
+define pcodeop vfwmsac_vv;
 # vfwmsac.vv     31..26=0x3e vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfwmsac.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) - vd[i]
-:vfwmsac.vv  vd, vs1, vs2, vm     is op2631=0x3e & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwmsac.vv  vd, vs1, vs2         is op2631=0x3e & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwmsac_vv(vs1,vs2);}
+:vfwmsac.vv  vd, vs1, vs2, "v0.t" is op2631=0x3e & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwmsac_vv(vs1,vs2,v0);}
 
-# vfwmul.vf      31..26=0x38 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfwmul.vf    vd, vs2, rs1, vm # vector-scalar
-:vfwmul.vf     vd, vs2, rs1, vm  is op2631=0x38 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfwmul_vf;
+# vfwmul.vf      31..26=0x38 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfwmul.vf    vd, vs2, frs1, vm # vector-scalar
+:vfwmul.vf     vd, vs2, frs1         is op2631=0x38 & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwmul_vf(vs2,frs1);}
+:vfwmul.vf     vd, vs2, frs1, "v0.t" is op2631=0x38 & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwmul_vf(vs2,frs1,v0);}
 
+define pcodeop vfwmul_vv;
 # vfwmul.vv      31..26=0x38 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfwmul.vv    vd, vs2, vs1, vm # vector-vector
-:vfwmul.vv     vd, vs2, vs1, vm  is op2631=0x38 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwmul.vv     vd, vs2, vs1         is op2631=0x38 & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwmul_vv(vs2,vs1);}
+:vfwmul.vv     vd, vs2, vs1, "v0.t" is op2631=0x38 & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwmul_vv(vs2,vs1,v0);}
 
-# vfwnmacc.vf    31..26=0x3d vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfwnmacc.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) - vd[i]
-:vfwnmacc.vf  vd, rs1, vs2, vm    is op2631=0x3d & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfwnmacc_vf;
+# vfwnmacc.vf    31..26=0x3d vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfwnmacc.vf vd, frs1, vs2, vm   # vd[i] = -(f[frs1] * vs2[i]) - vd[i]
+:vfwnmacc.vf  vd, frs1, vs2         is op2631=0x3d & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwnmacc_vf(frs1,vs2);}
+:vfwnmacc.vf  vd, frs1, vs2, "v0.t" is op2631=0x3d & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwnmacc_vf(frs1,vs2,v0);}
 
+define pcodeop vfwnmacc_vv;
 # vfwnmacc.vv    31..26=0x3d vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfwnmacc.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) - vd[i]
-:vfwnmacc.vv  vd, vs1, vs2, vm    is op2631=0x3d & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwnmacc.vv  vd, vs1, vs2         is op2631=0x3d & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwnmacc_vv(vs1,vs2);}
+:vfwnmacc.vv  vd, vs1, vs2, "v0.t" is op2631=0x3d & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwnmacc_vv(vs1,vs2,v0);}
 
-# vfwnmsac.vf    31..26=0x3f vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfwnmsac.vf vd, rs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) + vd[i]
-:vfwnmsac.vf  vd, rs1, vs2, vm    is op2631=0x3f & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfwnmsac_vf;
+# vfwnmsac.vf    31..26=0x3f vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfwnmsac.vf vd, frs1, vs2, vm   # vd[i] = -(f[rs1] * vs2[i]) + vd[i]
+:vfwnmsac.vf  vd, frs1, vs2         is op2631=0x3f & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwnmsac_vf(frs1,vs2);}
+:vfwnmsac.vf  vd, frs1, vs2, "v0.t" is op2631=0x3f & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwnmsac_vf(frs1,vs2,v0);}
 
+define pcodeop vfwnmsac_vv;
 # vfwnmsac.vv    31..26=0x3f vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfwnmsac.vv vd, vs1, vs2, vm   # vd[i] = -(vs1[i] * vs2[i]) + vd[i]
-:vfwnmsac.vv  vd, vs1, vs2, vm    is op2631=0x3f & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwnmsac.vv  vd, vs1, vs2         is op2631=0x3f & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwnmsac_vv(vs1,vs2);}
+:vfwnmsac.vv  vd, vs1, vs2, "v0.t" is op2631=0x3f & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwnmsac_vv(vs1,vs2,v0);}
 
+define pcodeop vfwredosum_vs;
 # vfwredosum.vs  31..26=0x33 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfwredosum.vs vd, vs2, vs1, vm # Ordered sum
-:vfwredosum.vs  vd, vs2, vs1, vm  is op2631=0x33 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwredosum.vs  vd, vs2, vs1         is op2631=0x33 & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwredosum_vs(vs2,vs1);}
+:vfwredosum.vs  vd, vs2, vs1, "v0.t" is op2631=0x33 & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwredosum_vs(vs2,vs1,v0);}
 
-# vfwredsum.vs   31..26=0x31 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
-# vfwredsum.vs vd, vs2, vs1, vm  # Unordered sum
-:vfwredsum.vs  vd, vs2, vs1, vm   is op2631=0x31 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+define pcodeop vfwredusum_vs;
+# vfwredusum.vs   31..26=0x31 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
+# vfwredusum.vs vd, vs2, vs1, vm  # Unordered sum
+:vfwredusum.vs  vd, vs2, vs1         is op2631=0x31 & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwredusum_vs(vs2,vs1);}
+:vfwredusum.vs  vd, vs2, vs1, "v0.t" is op2631=0x31 & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwredusum_vs(vs2,vs1,v0);}
 
+define pcodeop vfwsub_vf;
 # vfwsub.vf      31..26=0x32 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfwsub.vf vd, vs2, rs1, vm  # vector-scalar
-:vfwsub.vf  vd, vs2, rs1, vm   is op2631=0x32 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+# vfwsub.vf vd, vs2, frs1, vm  # vector-scalar
+:vfwsub.vf  vd, vs2, frs1         is op2631=0x32 & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwsub_vf(vs2,frs1);}
+:vfwsub.vf  vd, vs2, frs1, "v0.t" is op2631=0x32 & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwsub_vf(vs2,frs1,v0);}
 
+define pcodeop vfwsub_vv;
 # vfwsub.vv      31..26=0x32 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfwsub.vv vd, vs2, vs1, vm  # vector-vector
-:vfwsub.vv  vd, vs2, vs1, vm   is op2631=0x32 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwsub.vv  vd, vs2, vs1         is op2631=0x32 & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwsub_vv(vs2,vs1);}
+:vfwsub.vv  vd, vs2, vs1, "v0.t" is op2631=0x32 & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwsub_vv(vs2,vs1,v0);}
 
-# vfwsub.wf      31..26=0x36 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vfwsub.wf  vd, vs2, rs1, vm  # vector-scalar
-:vfwsub.wf   vd, vs2, rs1, vm   is op2631=0x36 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vfwsub_wf;
+# vfwsub.wf      31..26=0x36 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vfwsub.wf  vd, vs2, frs1, vm  # vector-scalar
+:vfwsub.wf   vd, vs2, frs1         is op2631=0x36 & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwsub_wf(vs2,frs1);}
+:vfwsub.wf   vd, vs2, frs1, "v0.t" is op2631=0x36 & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vfwsub_wf(vs2,frs1,v0);}
 
+define pcodeop vfwsub_wv;
 # vfwsub.wv      31..26=0x36 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vfwsub.wv  vd, vs2, vs1, vm  # vector-vector
-:vfwsub.wv   vd, vs2, vs1, vm   is op2631=0x36 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vfwsub.wv   vd, vs2, vs1         is op2631=0x36 & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwsub_wv(vs2,vs1);}
+:vfwsub.wv   vd, vs2, vs1, "v0.t" is op2631=0x36 & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vfwsub_wv(vs2,vs1,v0);}
 
+define pcodeop vid_v;
 # vid.v          31..26=0x14 vm 24..20=0 19..15=0x11 14..12=0x2 vd 6..0=0x57
 # vid.v vd, vm  # Write element ID to destination.
-:vid.v  vd, vm   is op2631=0x14 & vm & op2024=0x0 & op1519=0x11 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vid.v  vd         is op2631=0x14 & op2525=1 & op2024=0x0 & op1519=0x11 & op1214=0x2 & vd & op0006=0x57 {vd=vid_v();}
+:vid.v  vd, "v0.t" is op2631=0x14 & op2525=0 & op2024=0x0 & op1519=0x11 & op1214=0x2 & vd & op0006=0x57 {vd=vid_v(v0);}
 
+define pcodeop viota_m;
 # viota.m        31..26=0x14 vm vs2 19..15=0x10 14..12=0x2 vd 6..0=0x57
 # viota.m vd, vs2, vm
-:viota.m  vd, vs2, vm is op2631=0x14 & vm & vs2 & op1519=0x10 & op1214=0x2 & vd & op0006=0x57  unimpl
+:viota.m  vd, vs2         is op2631=0x14 & op2525=1 & vs2 & op1519=0x10 & op1214=0x2 & vd & op0006=0x57 {vd=viota_m(vs2);}
+:viota.m  vd, vs2, "v0.t" is op2631=0x14 & op2525=0 & vs2 & op1519=0x10 & op1214=0x2 & vd & op0006=0x57 {vd=viota_m(vs2,v0);}
 
+define pcodeop vl1re16_v;
 # vl1re16.v      31..29=0 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x5 vd  6..0=0x07
 # vl1re16.v  vd, (rs1)
-:vl1re16.v   vd, (rs1) is op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x5 & vd & op0006=0x7  unimpl
+:vl1re16.v   vd, (rs1) is op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vl1re16_v(rs1);}
 
+define pcodeop vl1re32_v;
 # vl1re32.v      31..29=0 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x6 vd  6..0=0x07
 # vl1re32.v  vd, (rs1)
-:vl1re32.v   vd, (rs1) is op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x6 & vd & op0006=0x7  unimpl
+:vl1re32.v   vd, (rs1) is op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vl1re32_v(rs1);}
 
+define pcodeop vl1re64_v;
 # vl1re64.v      31..29=0 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x7 vd  6..0=0x07
 # vl1re64.v  vd, (rs1)
-:vl1re64.v   vd, (rs1) is op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x7 & vd & op0006=0x7  unimpl
+:vl1re64.v   vd, (rs1) is op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vl1re64_v(rs1);}
 
-# vl1re8.v       31..29=0 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vd  6..0=0x07
-# vl1re8.v   vd, (rs1)
-:vl1re8.v    vd, (rs1) is op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vd & op0006=0x7  unimpl
+define pcodeop vl1r_v;
+# vl1r.v       31..29=0 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vd  6..0=0x07
+# vl1r.v   vd, (rs1)
+:vl1r.v    vd, (rs1) is op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vl1r_v(rs1);}
 
+define pcodeop vl2re16_v;
 # vl2re16.v      31..29=1 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x5 vd  6..0=0x07
 # vl2re16.v  vd, (rs1)
-:vl2re16.v   vd, (rs1) is op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x5 & vd & op0006=0x7  unimpl
+:vl2re16.v   vd, (rs1) is op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vl2re16_v(rs1);}
 
+define pcodeop vl2re32_v;
 # vl2re32.v      31..29=1 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x6 vd  6..0=0x07
 # vl2re32.v  vd, (rs1)
-:vl2re32.v   vd, (rs1) is op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x6 & vd & op0006=0x7  unimpl
+:vl2re32.v   vd, (rs1) is op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vl2re32_v(rs1);}
 
+define pcodeop vl2re64_v;
 # vl2re64.v      31..29=1 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x7 vd  6..0=0x07
 # vl2re64.v  vd, (rs1)
-:vl2re64.v   vd, (rs1) is op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x7 & vd & op0006=0x7  unimpl
+:vl2re64.v   vd, (rs1) is op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vl2re64_v(rs1);}
 
-# vl2re8.v       31..29=1 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vd  6..0=0x07
-# vl2re8.v   vd, (rs1)
-:vl2re8.v    vd, (rs1) is op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vd & op0006=0x7  unimpl
+define pcodeop vl2r_v;
+# vl2r.v       31..29=1 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vd  6..0=0x07
+# vl2r.v   vd, (rs1)
+:vl2r.v    vd, (rs1) is op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vl2r_v(rs1);}
 
+define pcodeop vl4re16_v;
 # vl4re16.v      31..29=3 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x5 vd  6..0=0x07
 # vl4re16.v  vd, (rs1)
-:vl4re16.v   vd, (rs1) is op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x5 & vd & op0006=0x7  unimpl
+:vl4re16.v   vd, (rs1) is op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vl4re16_v(rs1);}
 
+define pcodeop vl4re32_v;
 # vl4re32.v      31..29=3 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x6 vd  6..0=0x07
 # vl4re32.v  vd, (rs1)
-:vl4re32.v   vd, (rs1) is op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x6 & vd & op0006=0x7  unimpl
+:vl4re32.v   vd, (rs1) is op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vl4re32_v(rs1);}
 
+define pcodeop vl4re64_v;
 # vl4re64.v      31..29=3 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x7 vd  6..0=0x07
 # vl4re64.v  vd, (rs1)
-:vl4re64.v   vd, (rs1) is op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x7 & vd & op0006=0x7  unimpl
+:vl4re64.v   vd, (rs1) is op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vl4re64_v(rs1);}
 
-# vl4re8.v       31..29=3 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vd  6..0=0x07
-# vl4re8.v   vd, (rs1)
-:vl4re8.v    vd, (rs1) is op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vd & op0006=0x7  unimpl
+define pcodeop vl4r_v;
+# vl4r.v       31..29=3 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vd  6..0=0x07
+# vl4r.v   vd, (rs1)
+:vl4r.v    vd, (rs1) is op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vl4r_v(rs1);}
 
+define pcodeop vl8re16_v;
 # vl8re16.v      31..29=7 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x5 vd  6..0=0x07
 # vl8re16.v  vd, (rs1)
-:vl8re16.v   vd, (rs1) is op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x5 & vd & op0006=0x7  unimpl
+:vl8re16.v   vd, (rs1) is op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vl8re16_v(rs1);}
 
+define pcodeop vl8re32_v;
 # vl8re32.v      31..29=7 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x6 vd  6..0=0x07
 # vl8re32.v  vd, (rs1)
-:vl8re32.v   vd, (rs1) is op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x6 & vd & op0006=0x7  unimpl
+:vl8re32.v   vd, (rs1) is op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vl8re32_v(rs1);}
 
+define pcodeop vl8re64_v;
 # vl8re64.v      31..29=7 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x7 vd  6..0=0x07
 # vl8re64.v  vd, (rs1)
-:vl8re64.v   vd, (rs1) is op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x7 & vd & op0006=0x7  unimpl
+:vl8re64.v   vd, (rs1) is op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vl8re64_v(rs1);}
 
-# vl8re8.v       31..29=7 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vd  6..0=0x07
-# vl8re8.v   vd, (rs1)
-:vl8re8.v    vd, (rs1) is op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vd & op0006=0x7  unimpl
+define pcodeop vl8r_v;
+# vl8r.v       31..29=7 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vd  6..0=0x07
+# vl8r.v   vd, (rs1)
+:vl8r.v    vd, (rs1) is op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vl8r_v(rs1);}
 
+define pcodeop vle1024_v;
 # vle1024.v      nf 28=1 27..26=0 vm 24..20=0 rs1 14..12=0x7  vd 6..0=0x07
 # vle1024.v vd, (rs1), vm  # 1024-bit unit-stride load
-:vle1024.v  vd, (rs1), vm   is nf & op2828=0x1 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7  unimpl
+:vle1024.v  vd, (rs1)         is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vle1024_v(rs1);}
+:vle1024.v  vd, (rs1), "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vle1024_v(rs1,v0);}
+
+define pcodeop vlseg2e1024_v;
+:vlseg2e1024.v  vd, (rs1)         is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg2e1024_v(rs1);}
+:vlseg2e1024.v  vd, (rs1), "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg2e1024_v(rs1,v0);}
+
+define pcodeop vlseg3e1024_v;
+:vlseg3e1024.v  vd, (rs1)         is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg3e1024_v(rs1);}
+:vlseg3e1024.v  vd, (rs1), "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg3e1024_v(rs1,v0);}
 
+define pcodeop vlseg4e1024_v;
+:vlseg4e1024.v  vd, (rs1)         is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg4e1024_v(rs1);}
+:vlseg4e1024.v  vd, (rs1), "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg4e1024_v(rs1,v0);}
+
+define pcodeop vlseg5e1024_v;
+:vlseg5e1024.v  vd, (rs1)         is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg5e1024_v(rs1);}
+:vlseg5e1024.v  vd, (rs1), "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg5e1024_v(rs1,v0);}
+
+define pcodeop vlseg6e1024_v;
+:vlseg6e1024.v  vd, (rs1)         is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg6e1024_v(rs1);}
+:vlseg6e1024.v  vd, (rs1), "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg6e1024_v(rs1,v0);}
+
+define pcodeop vlseg7e1024_v;
+:vlseg7e1024.v  vd, (rs1)         is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg7e1024_v(rs1);}
+:vlseg7e1024.v  vd, (rs1), "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg7e1024_v(rs1,v0);}
+
+define pcodeop vlseg8e1024_v;
+:vlseg8e1024.v  vd, (rs1)         is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg8e1024_v(rs1);}
+:vlseg8e1024.v  vd, (rs1), "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg8e1024_v(rs1,v0);}
+
+define pcodeop vle1024ff_v;
 # vle1024ff.v      nf 28=1 27..26=0 vm 24..20=0x10 rs1 14..12=0x7  vd 6..0=0x07
 # vle1024ff.v vd, (rs1), vm  # 1024-bit unit-stride fault-only-first load
-:vle1024ff.v  vd, (rs1), vm   is nf & op2828=0x1 & op2627=0x0 & vm & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7  unimpl
+:vle1024ff.v  vd, (rs1)         is nf & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vle1024ff_v(rs1);}
+:vle1024ff.v  vd, (rs1), "v0.t" is nf & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vle1024ff_v(rs1,v0);}
 
 # vle128.v       nf 28=1 27..26=0 vm 24..20=0 rs1 14..12=0x0  vd 6..0=0x07
 # vle128.v  vd, (rs1), vm  #  128-bit unit-stride load
-:vle128.v   vd, (rs1), vm   is nf & op2828=0x1 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7  unimpl
+define pcodeop vle128_v;
+:vle128.v   vd, (rs1)         is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vle128_v(rs1);}
+:vle128.v   vd, (rs1), "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vle128_v(rs1,v0);}
+
+define pcodeop vlseg2e128_v;
+:vlseg2e128.v   vd, (rs1)         is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg2e128_v(rs1);}
+:vlseg2e128.v   vd, (rs1), "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg2e128_v(rs1,v0);}
 
+define pcodeop vlseg3e128_v;
+:vlseg3e128.v   vd, (rs1)         is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg3e128_v(rs1);}
+:vlseg3e128.v   vd, (rs1), "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg3e128_v(rs1,v0);}
+
+define pcodeop vlseg4e128_v;
+:vlseg4e128.v   vd, (rs1)         is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg3e128_v(rs1);}
+:vlseg4e128.v   vd, (rs1), "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg3e128_v(rs1,v0);}
+
+define pcodeop vlseg5e128_v;
+:vlseg5e128.v   vd, (rs1)         is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg5e128_v(rs1);}
+:vlseg5e128.v   vd, (rs1), "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg5e128_v(rs1,v0);}
+
+define pcodeop vlseg6e128_v;
+:vlseg6e128.v   vd, (rs1)         is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg6e128_v(rs1);}
+:vlseg6e128.v   vd, (rs1), "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg6e128_v(rs1,v0);}
+
+define pcodeop vlseg7e128_v;
+:vlseg7e128.v   vd, (rs1)         is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg7e128_v(rs1);}
+:vlseg7e128.v   vd, (rs1), "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg7e128_v(rs1,v0);}
+
+define pcodeop vlseg8e128_v;
+:vlseg8e128.v   vd, (rs1)         is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg8e128_v(rs1);}
+:vlseg8e128.v   vd, (rs1), "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg8e128_v(rs1,v0);}
+
+define pcodeop vle128ff_v;
 # vle128ff.v       nf 28=1 27..26=0 vm 24..20=0x10 rs1 14..12=0x0  vd 6..0=0x07
 # vle128ff.v  vd, (rs1), vm  #  128-bit unit-stride fault-only-first load
-:vle128ff.v   vd, (rs1), vm   is nf & op2828=0x1 & op2627=0x0 & vm & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7  unimpl
+:vle128ff.v   vd, (rs1)         is nf & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vle128ff_v(rs1);}
+:vle128ff.v   vd, (rs1), "v0.t" is nf & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vle128ff_v(rs1,v0);}
 
+define pcodeop vle16_v;
 # vle16.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x5  vd 6..0=0x07
-# vle16.v   vd, (rs1), vm  #   16-bit unit-stride load
-:vle16.v    vd, (rs1), vm   is nf & op2828=0x0 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7  unimpl
+# vle16.v   vd, (rs1), vm  #   16-bit unit-stride load into 1 to 8 registers
+:vle16.v    vd, (rs1)          is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vle16_v(rs1);}
+:vle16.v    vd, (rs1), "v0.t"  is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vle16_v(rs1,v0);}
+
+define pcodeop vlseg2e16_v;
+:vlseg2e16.v vd, (rs1)         is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg2e16_v(rs1);}
+:vlseg2e16.v vd, (rs1), "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg2e16_v(rs1,v0);}
+
+define pcodeop vlseg3e16_v;
+:vlseg3e16.v vd, (rs1)         is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg3e16_v(rs1);}
+:vlseg3e16.v vd, (rs1), "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg3e16_v(rs1,v0);}
+
+define pcodeop vlseg4e16_v;
+:vlseg4e16.v vd, (rs1)         is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg4e16_v(rs1);}
+:vlseg4e16.v vd, (rs1), "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg4e16_v(rs1,v0);}
+
+define pcodeop vlseg5e16_v;
+:vlseg5e16.v vd, (rs1)         is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg5e16_v(rs1);}
+:vlseg5e16.v vd, (rs1), "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg5e16_v(rs1,v0);}
+
+define pcodeop vlseg6e16_v;
+:vlseg6e16.v vd, (rs1)         is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg6e16_v(rs1);}
+:vlseg6e16.v vd, (rs1), "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg6e16_v(rs1,v0);}
+
+define pcodeop vlseg7e16_v;
+:vlseg7e16.v vd, (rs1)         is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg7e16_v(rs1);}
+:vlseg7e16.v vd, (rs1), "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg7e16_v(rs1,v0);}
+
+define pcodeop vlseg8e16_v;
+:vlseg8e16.v vd, (rs1)         is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg8e16_v(rs1);}
+:vlseg8e16.v vd, (rs1), "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg8e16_v(rs1,v0);}
 
+define pcodeop vle16ff_v;
 # vle16ff.v        nf 28=0 27..26=0 vm 24..20=0x10 rs1 14..12=0x5  vd 6..0=0x07
 # vle16ff.v   vd, (rs1), vm  #   16-bit unit-stride fault-only-first load
-:vle16ff.v    vd, (rs1), vm   is nf & op2828=0x0 & op2627=0x0 & vm & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7  unimpl
+:vle16ff.v     vd, (rs1)         is nf &  op2931=0 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vle16ff_v(rs1);}
+:vle16ff.v     vd, (rs1), "v0.t" is nf &  op2931=0 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vle16ff_v(rs1,v0);}
 
+define pcodeop vlseg2e16ff_v;
+:vlseg2e16ff.v vd, (rs1)         is nf &  op2931=1 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg2e16ff_v(rs1);}
+:vlseg2e16ff.v vd, (rs1), "v0.t" is nf &  op2931=1 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg2e16ff_v(rs1,v0);}
+
+define pcodeop vlseg3e16ff_v;
+:vlseg3e16ff.v vd, (rs1)         is nf &  op2931=2 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg3e16ff_v(rs1);}
+:vlseg3e16ff.v vd, (rs1), "v0.t" is nf &  op2931=2 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg3e16ff_v(rs1,v0);}
+
+define pcodeop vlseg4e16ff_v;
+:vlseg4e16ff.v vd, (rs1)         is nf &  op2931=3 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg4e16ff_v(rs1);}
+:vlseg4e16ff.v vd, (rs1), "v0.t" is nf &  op2931=3 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg4e16ff_v(rs1,v0);}
+
+define pcodeop vlseg5e16ff_v;
+:vlseg5e16ff.v vd, (rs1)         is nf &  op2931=4 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg5e16ff_v(rs1);}
+:vlseg5e16ff.v vd, (rs1), "v0.t" is nf &  op2931=4 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg5e16ff_v(rs1,v0);}
+
+define pcodeop vlseg6e16ff_v;
+:vlseg6e16ff.v vd, (rs1)         is nf &  op2931=5 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg6e16ff_v(rs1);}
+:vlseg6e16ff.v vd, (rs1), "v0.t" is nf &  op2931=5 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg6e16ff_v(rs1,v0);}
+
+define pcodeop vlseg7e16ff_v;
+:vlseg7e16ff.v vd, (rs1)         is nf &  op2931=6 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg7e16ff_v(rs1);}
+:vlseg7e16ff.v vd, (rs1), "v0.t" is nf &  op2931=6 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg7e16ff_v(rs1,v0);}
+
+define pcodeop vlseg8e16ff_v;
+:vlseg8e16ff.v vd, (rs1)         is nf &  op2931=7 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg8e16ff_v(rs1);}
+:vlseg8e16ff.v vd, (rs1), "v0.t" is nf &  op2931=7 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg8e16ff_v(rs1,v0);}
+
+define pcodeop vle256_v;
 # vle256.v       nf 28=1 27..26=0 vm 24..20=0 rs1 14..12=0x5  vd 6..0=0x07
 # vle256.v  vd, (rs1), vm  #  256-bit unit-stride load
-:vle256.v   vd, (rs1), vm   is nf & op2828=0x1 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7  unimpl
+:vle256.v       vd, (rs1),         is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vle256_v(rs1);}
+:vle256.v       vd, (rs1), "v0.t"  is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vle256_v(rs1,v0);}
+
+define pcodeop vlseg2e256_v;
+:vlseg2e256.v   vd, (rs1),         is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg2e256_v(rs1);}
+:vlseg2e256.v   vd, (rs1), "v0.t"  is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg2e256_v(rs1,v0);}
+
+define pcodeop vlseg3e256_v;
+:vlseg3e256.v   vd, (rs1),         is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg3e256_v(rs1);}
+:vlseg3e256.v   vd, (rs1), "v0.t"  is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg3e256_v(rs1,v0);}
+
+define pcodeop vlseg4e256_v;
+:vlseg4e256.v   vd, (rs1),         is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg4e256_v(rs1);}
+:vlseg4e256.v   vd, (rs1), "v0.t"  is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg4e256_v(rs1,v0);}
+
+define pcodeop vlseg5e256_v;
+:vlseg5e256.v   vd, (rs1),         is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg5e256_v(rs1);}
+:vlseg5e256.v   vd, (rs1), "v0.t"  is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg5e256_v(rs1,v0);}
+
+define pcodeop vlseg6e256_v;
+:vlseg6e256.v   vd, (rs1),         is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg6e256_v(rs1);}
+:vlseg6e256.v   vd, (rs1), "v0.t"  is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg6e256_v(rs1,v0);}
+
+define pcodeop vlseg7e256_v;
+:vlseg7e256.v   vd, (rs1),         is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg7e256_v(rs1);}
+:vlseg7e256.v   vd, (rs1), "v0.t"  is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg7e256_v(rs1,v0);}
 
+define pcodeop vlseg8e256_v;
+:vlseg8e256.v   vd, (rs1),         is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg8e256_v(rs1);}
+:vlseg8e256.v   vd, (rs1), "v0.t"  is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg8e256_v(rs1,v0);}
+
+define pcodeop vle256ff_v;
 # vle256ff.v       nf 28=1 27..26=0 vm 24..20=0x10 rs1 14..12=0x5  vd 6..0=0x07
 # vle256ff.v  vd, (rs1), vm  #  256-bit unit-stride fault-only-first load
-:vle256ff.v   vd, (rs1), vm   is nf & op2828=0x1 & op2627=0x0 & vm & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7  unimpl
+:vle256ff.v     vd, (rs1)         is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vle256ff_v(rs1);}
+:vle256ff.v     vd, (rs1), "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vle256ff_v(rs1,v0);}
+
+define pcodeop vlseg2e256ff_v;
+:vlseg2e256ff.v vd, (rs1)         is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg2e256ff_v(rs1);}
+:vlseg2e256ff.v vd, (rs1), "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg2e256ff_v(rs1,v0);}
+
+define pcodeop vlseg3e256ff_v;
+:vlseg3e256ff.v vd, (rs1)         is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg3e256ff_v(rs1);}
+:vlseg3e256ff.v vd, (rs1), "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg3e256ff_v(rs1,v0);}
+
+define pcodeop vlseg4e256ff_v;
+:vlseg4e256ff.v vd, (rs1)         is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg4e256ff_v(rs1);}
+:vlseg4e256ff.v vd, (rs1), "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg4e256ff_v(rs1,v0);}
+
+define pcodeop vlseg5e256ff_v;
+:vlseg5e256ff.v vd, (rs1)         is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg5e256ff_v(rs1);}
+:vlseg5e256ff.v vd, (rs1), "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg5e256ff_v(rs1,v0);}
+
+define pcodeop vlseg6e256ff_v;
+:vlseg6e256ff.v vd, (rs1)         is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg6e256ff_v(rs1);}
+:vlseg6e256ff.v vd, (rs1), "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg6e256ff_v(rs1,v0);}
+
+define pcodeop vlseg7e256ff_v;
+:vlseg7e256ff.v vd, (rs1)         is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg7e256ff_v(rs1);}
+:vlseg7e256ff.v vd, (rs1), "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg7e256ff_v(rs1,v0);}
 
+define pcodeop vlseg8e256ff_v;
+:vlseg8e256ff.v vd, (rs1)         is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg8e256ff_v(rs1);}
+:vlseg8e256ff.v vd, (rs1), "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlseg8e256ff_v(rs1,v0);}
+
+define pcodeop vle32_v;
 # vle32.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x6  vd 6..0=0x07
-# vle32.v   vd, (rs1), vm  #   32-bit unit-stride load
-:vle32.v    vd, (rs1), vm   is nf & op2828=0x0 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7  unimpl
+# vle32.v  vd, (rs1), vm  #   32-bit unit-stride load
+:vle32.v     vd, (rs1)          is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vle32_v(rs1);}
+:vle32.v     vd, (rs1), "v0.t"  is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vle32_v(rs1,v0);}
+
+define pcodeop vlseg2e32_v;
+:vlseg2e32.v vd, (rs1)          is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg2e32_v(rs1);}
+:vlseg2e32.v vd, (rs1), "v0.t"  is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg2e32_v(rs1,v0);}
+
+define pcodeop vlseg3e32_v;
+:vlseg3e32.v vd, (rs1)          is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg3e32_v(rs1);}
+:vlseg3e32.v vd, (rs1), "v0.t"  is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg3e32_v(rs1,v0);}
+
+define pcodeop vlseg4e32_v;
+:vlseg4e32.v vd, (rs1)          is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg4e32_v(rs1);}
+:vlseg4e32.v vd, (rs1), "v0.t"  is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg4e32_v(rs1,v0);}
+
+define pcodeop vlseg5e32_v;
+:vlseg5e32.v vd, (rs1)          is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg5e32_v(rs1);}
+:vlseg5e32.v vd, (rs1), "v0.t"  is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg5e32_v(rs1,v0);}
+
+define pcodeop vlseg6e32_v;
+:vlseg6e32.v vd, (rs1)          is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg6e32_v(rs1);}
+:vlseg6e32.v vd, (rs1), "v0.t"  is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg6e32_v(rs1,v0);}
 
+define pcodeop vlseg7e32_v;
+:vlseg7e32.v vd, (rs1)          is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg7e32_v(rs1);}
+:vlseg7e32.v vd, (rs1), "v0.t"  is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg7e32_v(rs1,v0);}
+
+define pcodeop vlseg8e32_v;
+:vlseg8e32.v vd, (rs1)          is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg8e32_v(rs1);}
+:vlseg8e32.v vd, (rs1), "v0.t"  is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg8e32_v(rs1,v0);}
+
+define pcodeop vle32ff_v;
 # vle32ff.v        nf 28=0 27..26=0 vm 24..20=0x10 rs1 14..12=0x6  vd 6..0=0x07
 # vle32ff.v   vd, (rs1), vm  #   32-bit unit-stride fault-only-first load
-:vle32ff.v    vd, (rs1), vm   is nf & op2828=0x0 & op2627=0x0 & vm & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7  unimpl
+:vle32ff.v     vd, (rs1)         is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vle32ff_v(rs1);}
+:vle32ff.v     vd, (rs1), "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vle32ff_v(rs1,v0);}
+
+define pcodeop vlseq2e32ff_v;
+:vlseg2e32ff.v vd, (rs1)         is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq2e32ff_v(rs1);}
+:vlseg2e32ff.v vd, (rs1), "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq2e32ff_v(rs1,v0);}
+
+define pcodeop vlseq3e32ff_v;
+:vlseg3e32ff.v vd, (rs1)         is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq3e32ff_v(rs1);}
+:vlseg3e32ff.v vd, (rs1), "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq3e32ff_v(rs1,v0);}
+
+define pcodeop vlseq4e32ff_v;
+:vlseg4e32ff.v vd, (rs1)         is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq4e32ff_v(rs1);}
+:vlseg4e32ff.v vd, (rs1), "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq4e32ff_v(rs1,v0);}
+
+define pcodeop vlseq5e32ff_v;
+:vlseg5e32ff.v vd, (rs1)         is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq5e32ff_v(rs1);}
+:vlseg5e32ff.v vd, (rs1), "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq5e32ff_v(rs1,v0);}
+
+define pcodeop vlseq6e32ff_v;
+:vlseg6e32ff.v vd, (rs1)         is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq6e32ff_v(rs1);}
+:vlseg6e32ff.v vd, (rs1), "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq6e32ff_v(rs1,v0);}
 
+define pcodeop vlseq7e32ff_v;
+:vlseg7e32ff.v vd, (rs1)         is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq7e32ff_v(rs1);}
+:vlseg7e32ff.v vd, (rs1), "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq7e32ff_v(rs1,v0);}
+
+define pcodeop vlseq8e32ff_v;
+:vlseg8e32ff.v vd, (rs1)         is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq8e32ff_v(rs1);}
+:vlseg8e32ff.v vd, (rs1), "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseq8e32ff_v(rs1,v0);}
+
+define pcodeop vle512_v;
 # vle512.v       nf 28=1 27..26=0 vm 24..20=0 rs1 14..12=0x6  vd 6..0=0x07
 # vle512.v  vd, (rs1), vm  #  512-bit unit-stride load
-:vle512.v   vd, (rs1), vm   is nf & op2828=0x1 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7  unimpl
+:vle512.v   vd, (rs1)         is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vle512_v(rs1);}
+:vle512.v   vd, (rs1), "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vle512_v(rs1,v0);}
+
+define pcodeop vlseg2e512_v;
+:vlseg2e512.v   vd, (rs1)         is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg2e512_v(rs1);}
+:vlseg2e512.v   vd, (rs1), "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg2e512_v(rs1,v0);}
+
+define pcodeop vlseg3e512_v;
+:vlseg3e512.v   vd, (rs1)         is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg3e512_v(rs1);}
+:vlseg3e512.v   vd, (rs1), "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg3e512_v(rs1,v0);}
+
+define pcodeop vlseg4e512_v;
+:vlseg4e512.v   vd, (rs1)         is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg4e512_v(rs1);}
+:vlseg4e512.v   vd, (rs1), "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg4e512_v(rs1,v0);}
+
+define pcodeop vlseg5e512_v;
+:vlseg5e512.v   vd, (rs1)         is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg5e512_v(rs1);}
+:vlseg5e512.v   vd, (rs1), "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg5e512_v(rs1,v0);}
 
+define pcodeop vlseg6e512_v;
+:vlseg6e512.v   vd, (rs1)         is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg6e512_v(rs1);}
+:vlseg6e512.v   vd, (rs1), "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg6e512_v(rs1,v0);}
+
+define pcodeop vlseg7e512_v;
+:vlseg7e512.v   vd, (rs1)         is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg7e512_v(rs1);}
+:vlseg7e512.v   vd, (rs1), "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg7e512_v(rs1,v0);}
+
+define pcodeop vlseg8e512_v;
+:vlseg8e512.v   vd, (rs1)         is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg8e512_v(rs1);}
+:vlseg8e512.v   vd, (rs1), "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg8e512_v(rs1,v0);}
+
+define pcodeop vle512ff_v;
 # vle512ff.v       nf 28=1 27..26=0 vm 24..20=0x10 rs1 14..12=0x6  vd 6..0=0x07
 # vle512ff.v  vd, (rs1), vm  #  512-bit unit-stride fault-only-first load
-:vle512ff.v   vd, (rs1), vm   is nf & op2828=0x1 & op2627=0x0 & vm & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7  unimpl
+:vle512ff.v     vd, (rs1)         is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vle512ff_v(rs1);}
+:vle512ff.v     vd, (rs1), "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vle512ff_v(rs1,v0);}
+
+define pcodeop vlseg2e512ff_v;
+:vlseg2e512ff.v vd, (rs1)         is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg2e512ff_v(rs1);}
+:vlseg2e512ff.v vd, (rs1), "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg2e512ff_v(rs1,v0);}
+
+define pcodeop vlseg3e512ff_v;
+:vlseg3e512ff.v vd, (rs1)         is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg3e512ff_v(rs1);}
+:vlseg3e512ff.v vd, (rs1), "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg3e512ff_v(rs1,v0);}
+
+define pcodeop vlseg4e512ff_v;
+:vlseg4e512ff.v vd, (rs1)         is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg4e512ff_v(rs1);}
+:vlseg4e512ff.v vd, (rs1), "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg4e512ff_v(rs1,v0);}
+
+define pcodeop vlseg5e512ff_v;
+:vlseg5e512ff.v vd, (rs1)         is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg5e512ff_v(rs1);}
+:vlseg5e512ff.v vd, (rs1), "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg5e512ff_v(rs1,v0);}
 
+define pcodeop vlseg6e512ff_v;
+:vlseg6e512ff.v vd, (rs1)         is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg6e512ff_v(rs1);}
+:vlseg6e512ff.v vd, (rs1), "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg6e512ff_v(rs1,v0);}
+
+define pcodeop vlseg7e512ff_v;
+:vlseg7e512ff.v vd, (rs1)         is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg7e512ff_v(rs1);}
+:vlseg7e512ff.v vd, (rs1), "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg7e512ff_v(rs1,v0);}
+
+define pcodeop vlseg8e512ff_v;
+:vlseg8e512ff.v vd, (rs1)         is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg8e512ff_v(rs1);}
+:vlseg8e512ff.v vd, (rs1), "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlseg8e512ff_v(rs1,v0);}
+
+define pcodeop vle64_v;
 # vle64.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x7  vd 6..0=0x07
 # vle64.v   vd, (rs1), vm  #   64-bit unit-stride load
-:vle64.v    vd, (rs1), vm   is nf & op2828=0x0 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7  unimpl
+:vle64.v    vd, (rs1)          is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vle64_v(rs1);}
+:vle64.v    vd, (rs1), "v0.t"  is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vle64_v(rs1,v0);}
+
+define pcodeop vlseg2e64_v;
+:vlseg2e64.v    vd, (rs1)          is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg2e64_v(rs1);}
+:vlseg2e64.v    vd, (rs1), "v0.t"  is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg2e64_v(rs1,v0);}
+
+define pcodeop vlseg3e64_v;
+:vlseg3e64.v    vd, (rs1)          is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg3e64_v(rs1);}
+:vlseg3e64.v    vd, (rs1), "v0.t"  is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg3e64_v(rs1,v0);}
+
+define pcodeop vlseg4e64_v;
+:vlseg4e64.v    vd, (rs1)          is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg4e64_v(rs1);}
+:vlseg4e64.v    vd, (rs1), "v0.t"  is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg4e64_v(rs1,v0);}
 
+define pcodeop vlseg5e64_v;
+:vlseg5e64.v    vd, (rs1)          is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg5e64_v(rs1);}
+:vlseg5e64.v    vd, (rs1), "v0.t"  is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg5e64_v(rs1,v0);}
+
+define pcodeop vlseg6e64_v;
+:vlseg6e64.v    vd, (rs1)          is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg6e64_v(rs1);}
+:vlseg6e64.v    vd, (rs1), "v0.t"  is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg6e64_v(rs1,v0);}
+
+define pcodeop vlseg7e64_v;
+:vlseg7e64.v    vd, (rs1)          is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg7e64_v(rs1);}
+:vlseg7e64.v    vd, (rs1), "v0.t"  is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg7e64_v(rs1,v0);}
+
+define pcodeop vlseg8e64_v;
+:vlseg8e64.v    vd, (rs1)          is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg8e64_v(rs1);}
+:vlseg8e64.v    vd, (rs1), "v0.t"  is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg8e64_v(rs1,v0);}
+
+define pcodeop vle64ff_v;
 # vle64ff.v        nf 28=0 27..26=0 vm 24..20=0x10 rs1 14..12=0x7  vd 6..0=0x07
 # vle64ff.v   vd, (rs1), vm  #   64-bit unit-stride fault-only-first load
-:vle64ff.v    vd, (rs1), vm   is nf & op2828=0x0 & op2627=0x0 & vm & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7  unimpl
+:vle64ff.v     vd, (rs1)         is nf & op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vle64ff_v(rs1);}
+:vle64ff.v     vd, (rs1), "v0.t" is nf & op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vle64ff_v(rs1,v0);}
+
+define pcodeop vlseg2e64ff_v;
+:vlseg2e64ff.v vd, (rs1)         is nf & op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg2e64ff_v(rs1);}
+:vlseg2e64ff.v vd, (rs1), "v0.t" is nf & op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg2e64ff_v(rs1,v0);}
+
+define pcodeop vlseg3e64ff_v;
+:vlseg3e64ff.v vd, (rs1)         is nf & op2931=0x2 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg3e64ff_v(rs1);}
+:vlseg3e64ff.v vd, (rs1), "v0.t" is nf & op2931=0x2 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg3e64ff_v(rs1,v0);}
+
+define pcodeop vlseg4e64ff_v;
+:vlseg4e64ff.v vd, (rs1)         is nf & op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg4e64ff_v(rs1);}
+:vlseg4e64ff.v vd, (rs1), "v0.t" is nf & op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg4e64ff_v(rs1,v0);}
 
+define pcodeop vlseg5e64ff_v;
+:vlseg5e64ff.v vd, (rs1)         is nf & op2931=0x4 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg5e64ff_v(rs1);}
+:vlseg5e64ff.v vd, (rs1), "v0.t" is nf & op2931=0x4 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg5e64ff_v(rs1,v0);}
+
+define pcodeop vlseg6e64ff_v;
+:vlseg6e64ff.v vd, (rs1)         is nf & op2931=0x5 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg6e64ff_v(rs1);}
+:vlseg6e64ff.v vd, (rs1), "v0.t" is nf & op2931=0x5 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg6e64ff_v(rs1,v0);}
+
+define pcodeop vlseg7e64ff_v;
+:vlseg7e64ff.v vd, (rs1)         is nf & op2931=0x6 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg7e64ff_v(rs1);}
+:vlseg7e64ff.v vd, (rs1), "v0.t" is nf & op2931=0x6 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg7e64ff_v(rs1,v0);}
+
+define pcodeop vlseg8e64ff_v;
+:vlseg8e64ff.v vd, (rs1)         is nf & op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg8e64ff_v(rs1);}
+:vlseg8e64ff.v vd, (rs1), "v0.t" is nf & op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x10 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlseg8e64ff_v(rs1,v0);}
+
+define pcodeop vle8_v;
 # vle8.v         nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x0  vd 6..0=0x07
-# vle8.v    vd, (rs1), vm  #    8-bit unit-stride load
-:vle8.v     vd, (rs1), vm   is nf & op2828=0x0 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7  unimpl
+# vle8.v    vd, (rs1), vm  #    8-bit unit-stride load, optionally segmented
+:vle8.v     vd, (rs1)         is nf & op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vle8_v(rs1);}
+:vle8.v     vd, (rs1), "v0.t" is nf & op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vle8_v(rs1,v0);}
+
+define pcodeop vlseg2e8_v;
+:vlseg2e8.v vd, (rs1)         is nf & op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg2e8_v(rs1);}
+:vlseg2e8.v vd, (rs1), "v0.t" is nf & op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg2e8_v(rs1,v0);}
+
+define pcodeop vlseg3e8_v;
+:vlseg3e8.v vd, (rs1)         is nf & op2931=0x2 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg3e8_v(rs1);}
+:vlseg3e8.v vd, (rs1), "v0.t" is nf & op2931=0x2 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg3e8_v(rs1,v0);}
+
+define pcodeop vlseg4e8_v;
+:vlseg4e8.v vd, (rs1)         is nf & op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg4e8_v(rs1);}
+:vlseg4e8.v vd, (rs1), "v0.t" is nf & op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg4e8_v(rs1,v0);}
+
+define pcodeop vlseg5e8_v;
+:vlseg5e8.v vd, (rs1)         is nf & op2931=0x4 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg5e8_v(rs1);}
+:vlseg5e8.v vd, (rs1), "v0.t" is nf & op2931=0x4 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg5e8_v(rs1,v0);}
+
+define pcodeop vlseg6e8_v;
+:vlseg6e8.v vd, (rs1)         is nf & op2931=0x5 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg6e8_v(rs1);}
+:vlseg6e8.v vd, (rs1), "v0.t" is nf & op2931=0x5 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg6e8_v(rs1,v0);}
+
+define pcodeop vlseg7e8_v;
+:vlseg7e8.v vd, (rs1)         is nf & op2931=0x6 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg7e8_v(rs1);}
+:vlseg7e8.v vd, (rs1), "v0.t" is nf & op2931=0x6 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg7e8_v(rs1,v0);}
+
+define pcodeop vlseg8e8_v;
+:vlseg8e8.v vd, (rs1)         is nf & op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg8e8_v(rs1);}
+:vlseg8e8.v vd, (rs1), "v0.t" is nf & op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg8e8_v(rs1,v0);}
+
+define pcodeop vlm8_v;
+# vlm8.v    vd, (rs1)        # Load byte vector of length ceil(vl/8)
+:vlm.v      vd, (rs1)         is nf & op2828=0x0 & op2627=0x0 & vm & op2024=0x0b & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlm8_v(rs1);}
+
+# vloxei8.v Vector indexed-ordered load instructions
+
+define pcodeop vloxei8_v;
+:vloxei8.v  vd, (rs1),vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxei8_v(rs1);}
+:vloxei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxei8_v(rs1,v0);}
+
+define pcodeop vloxseg2ei8_v;
+:vloxseg2ei8.v  vd, (rs1),vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg2ei8_v(rs1);}
+:vloxseg2ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg2ei8_v(rs1,v0);}
+
+define pcodeop vloxseg3ei8_v;
+:vloxseg3ei8.v  vd, (rs1),vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg3ei8_v(rs1);}
+:vloxseg3ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg3ei8_v(rs1,v0);}
+
+define pcodeop vloxseg4ei8_v;
+:vloxseg4ei8.v  vd, (rs1),vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg4ei8_v(rs1);}
+:vloxseg4ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg4ei8_v(rs1,v0);}
+
+define pcodeop vloxseg5ei8_v;
+:vloxseg5ei8.v  vd, (rs1),vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg5ei8_v(rs1);}
+:vloxseg5ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg5ei8_v(rs1,v0);}
 
+define pcodeop vloxseg6ei8_v;
+:vloxseg6ei8.v  vd, (rs1),vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg6ei8_v(rs1);}
+:vloxseg6ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg6ei8_v(rs1,v0);}
+
+define pcodeop vloxseg7ei8_v;
+:vloxseg7ei8.v  vd, (rs1),vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg7ei8_v(rs1);}
+:vloxseg7ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg7ei8_v(rs1,v0);}
+
+define pcodeop vloxseg8ei8_v;
+:vloxseg8ei8.v  vd, (rs1),vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg8ei8_v(rs1);}
+:vloxseg8ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vloxseg8ei8_v(rs1,v0);}
+
+# vloxei16.v Vector indexed-ordered load instructions
+
+define pcodeop vloxei16_v;
+:vloxei16.v     vd, (rs1),vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxei16_v(rs1);}
+:vloxei16.v     vd, (rs1),vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxei16_v(rs1,v0);}
+
+define pcodeop vloxseg2ei16_v;
+:vloxseg2ei16.v vd, (rs1),vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg2ei16_v(rs1);}
+:vloxseg2ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg2ei16_v(rs1,v0);}
+
+define pcodeop vloxseg3ei16_v;
+:vloxseg3ei16.v vd, (rs1),vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg3ei16_v(rs1);}
+:vloxseg3ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg3ei16_v(rs1,v0);}
+
+define pcodeop vloxseg4ei16_v;
+:vloxseg4ei16.v vd, (rs1),vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg4ei16_v(rs1);}
+:vloxseg4ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg4ei16_v(rs1,v0);}
+
+define pcodeop vloxseg5ei16_v;
+:vloxseg5ei16.v vd, (rs1),vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg5ei16_v(rs1);}
+:vloxseg5ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg5ei16_v(rs1,v0);}
+
+define pcodeop vloxseg6ei16_v;
+:vloxseg6ei16.v vd, (rs1),vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg6ei16_v(rs1);}
+:vloxseg6ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg6ei16_v(rs1,v0);}
+
+define pcodeop vloxseg7ei16_v;
+:vloxseg7ei16.v vd, (rs1),vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg7ei16_v(rs1);}
+:vloxseg7ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg7ei16_v(rs1,v0);}
+
+define pcodeop vloxseg8ei16_v;
+:vloxseg8ei16.v vd, (rs1),vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg8ei16_v(rs1);}
+:vloxseg8ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vloxseg8ei16_v(rs1,v0);}
+
+# vloxei32.v Vector indexed-ordered load instructions
+
+define pcodeop vloxei32_v;
+:vloxei32.v     vd, (rs1),vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxei32_v(rs1);}
+:vloxei32.v     vd, (rs1),vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxei32_v(rs1,v0);}
+
+define pcodeop vloxseg2ei32_v;
+:vloxseg2ei32.v vd, (rs1),vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg2ei32_v(rs1);}
+:vloxseg2ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg2ei32_v(rs1,v0);}
+
+define pcodeop vloxseg3ei32_v;
+:vloxseg3ei32.v vd, (rs1),vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg3ei32_v(rs1);}
+:vloxseg3ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg3ei32_v(rs1,v0);}
+
+define pcodeop vloxseg4ei32_v;
+:vloxseg4ei32.v vd, (rs1),vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg4ei32_v(rs1);}
+:vloxseg4ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg4ei32_v(rs1,v0);}
+
+define pcodeop vloxseg5ei32_v;
+:vloxseg5ei32.v vd, (rs1),vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg5ei32_v(rs1);}
+:vloxseg5ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg5ei32_v(rs1,v0);}
+
+define pcodeop vloxseg6ei32_v;
+:vloxseg6ei32.v vd, (rs1),vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg6ei32_v(rs1);}
+:vloxseg6ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg6ei32_v(rs1,v0);}
+
+define pcodeop vloxseg7ei32_v;
+:vloxseg7ei32.v vd, (rs1),vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg7ei32_v(rs1);}
+:vloxseg7ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg7ei32_v(rs1,v0);}
+
+define pcodeop vloxseg8ei32_v;
+:vloxseg8ei32.v vd, (rs1),vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg8ei32_v(rs1);}
+:vloxseg8ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vloxseg8ei32_v(rs1,v0);}
+
+# vloxei64.v Vector indexed-ordered load instructions
+
+define pcodeop vloxei64_v;
+:vloxei64.v     vd, (rs1),vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxei64_v(rs1);}
+:vloxei64.v     vd, (rs1),vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxei64_v(rs1,v0);}
+
+define pcodeop vloxseg2ei64_v;
+:vloxseg2ei64.v vd, (rs1),vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg2ei64_v(rs1);}
+:vloxseg2ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg2ei64_v(rs1,v0);}
+
+define pcodeop vloxseg3ei64_v;
+:vloxseg3ei64.v vd, (rs1),vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg3ei64_v(rs1);}
+:vloxseg3ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg3ei64_v(rs1,v0);}
+
+define pcodeop vloxseg4ei64_v;
+:vloxseg4ei64.v vd, (rs1),vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg4ei64_v(rs1);}
+:vloxseg4ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg4ei64_v(rs1,v0);}
+
+define pcodeop vloxseg5ei64_v;
+:vloxseg5ei64.v vd, (rs1),vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg5ei64_v(rs1);}
+:vloxseg5ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg5ei64_v(rs1,v0);}
+
+define pcodeop vloxseg6ei64_v;
+:vloxseg6ei64.v vd, (rs1),vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg6ei64_v(rs1);}
+:vloxseg6ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg6ei64_v(rs1,v0);}
+
+define pcodeop vloxseg7ei64_v;
+:vloxseg7ei64.v vd, (rs1),vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg7ei64_v(rs1);}
+:vloxseg7ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg7ei64_v(rs1,v0);}
+
+define pcodeop vloxseg8ei64_v;
+:vloxseg8ei64.v vd, (rs1),vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg8ei64_v(rs1);}
+:vloxseg8ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vloxseg8ei64_v(rs1,v0);}
+
+# vluxei8.v Vector indexed-ordered load instructions
+
+define pcodeop vluxei8_v;
+:vluxei8.v      vd, (rs1),vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxei8_v(rs1);}
+:vluxei8.v      vd, (rs1),vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxei8_v(rs1,v0);}
+
+define pcodeop vluxseg2ei8_v;
+:vluxseg2ei8.v  vd, (rs1),vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg2ei8_v(rs1);}
+:vluxseg2ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg2ei8_v(rs1,v0);}
+
+define pcodeop vluxseg3ei8_v;
+:vluxseg3ei8.v  vd, (rs1),vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg3ei8_v(rs1);}
+:vluxseg3ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg3ei8_v(rs1,v0);}
+
+define pcodeop vluxseg4ei8_v;
+:vluxseg4ei8.v  vd, (rs1),vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg4ei8_v(rs1);}
+:vluxseg4ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg4ei8_v(rs1,v0);}
+
+define pcodeop vluxseg5ei8_v;
+:vluxseg5ei8.v  vd, (rs1),vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg5ei8_v(rs1);}
+:vluxseg5ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg5ei8_v(rs1,v0);}
+
+define pcodeop vluxseg6ei8_v;
+:vluxseg6ei8.v  vd, (rs1),vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg6ei8_v(rs1);}
+:vluxseg6ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg6ei8_v(rs1,v0);}
+
+define pcodeop vluxseg7ei8_v;
+:vluxseg7ei8.v  vd, (rs1),vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg7ei8_v(rs1);}
+:vluxseg7ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg7ei8_v(rs1,v0);}
+
+define pcodeop vluxseg8ei8_v;
+:vluxseg8ei8.v  vd, (rs1),vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg8ei8_v(rs1);}
+:vluxseg8ei8.v  vd, (rs1),vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vluxseg8ei8_v(rs1,v0);}
+
+# vluxei16.v Vector indexed-ordered load instructions
+
+define pcodeop vluxei16_v;
+:vluxei16.v  vd, (rs1),vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxei16_v(rs1);}
+:vluxei16.v  vd, (rs1),vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxei16_v(rs1,v0);}
+
+define pcodeop vluxseg2ei16_v;
+:vluxseg2ei16.v vd, (rs1),vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg2ei16_v(rs1);}
+:vluxseg2ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg2ei16_v(rs1,v0);}
+
+define pcodeop vluxseg3ei16_v;
+:vluxseg3ei16.v vd, (rs1),vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg3ei16_v(rs1);}
+:vluxseg3ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg3ei16_v(rs1,v0);}
+
+define pcodeop vluxseg4ei16_v;
+:vluxseg4ei16.v vd, (rs1),vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg4ei16_v(rs1);}
+:vluxseg4ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg4ei16_v(rs1,v0);}
+
+define pcodeop vluxseg5ei16_v;
+:vluxseg5ei16.v vd, (rs1),vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg5ei16_v(rs1);}
+:vluxseg5ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg5ei16_v(rs1,v0);}
+
+define pcodeop vluxseg6ei16_v;
+:vluxseg6ei16.v vd, (rs1),vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg6ei16_v(rs1);}
+:vluxseg6ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg6ei16_v(rs1,v0);}
+
+define pcodeop vluxseg7ei16_v;
+:vluxseg7ei16.v vd, (rs1),vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg7ei16_v(rs1);}
+:vluxseg7ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg7ei16_v(rs1,v0);}
+
+define pcodeop vluxseg8ei16_v;
+:vluxseg8ei16.v vd, (rs1),vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg8ei16_v(rs1);}
+:vluxseg8ei16.v vd, (rs1),vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vluxseg8ei16_v(rs1,v0);}
+
+# vluxei32.v Vector indexed-ordered load instructions
+
+define pcodeop vluxei32_v;
+:vluxei32.v     vd, (rs1),vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxei32_v(rs1);}
+:vluxei32.v     vd, (rs1),vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxei32_v(rs1,v0);}
+
+define pcodeop vluxseg2ei32_v;
+:vluxseg2ei32.v vd, (rs1),vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg2ei32_v(rs1);}
+:vluxseg2ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg2ei32_v(rs1,v0);}
+
+define pcodeop vluxseg3ei32_v;
+:vluxseg3ei32.v vd, (rs1),vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg3ei32_v(rs1);}
+:vluxseg3ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg3ei32_v(rs1,v0);}
+
+define pcodeop vluxseg4ei32_v;
+:vluxseg4ei32.v vd, (rs1),vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg4ei32_v(rs1);}
+:vluxseg4ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg4ei32_v(rs1,v0);}
+
+define pcodeop vluxseg5ei32_v;
+:vluxseg5ei32.v vd, (rs1),vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg5ei32_v(rs1);}
+:vluxseg5ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg5ei32_v(rs1,v0);}
+
+define pcodeop vluxseg6ei32_v;
+:vluxseg6ei32.v vd, (rs1),vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg6ei32_v(rs1);}
+:vluxseg6ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg6ei32_v(rs1,v0);}
+
+define pcodeop vluxseg7ei32_v;
+:vluxseg7ei32.v vd, (rs1),vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg7ei32_v(rs1);}
+:vluxseg7ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg7ei32_v(rs1,v0);}
+
+define pcodeop vluxseg8ei32_v;
+:vluxseg8ei32.v vd, (rs1),vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg8ei32_v(rs1);}
+:vluxseg8ei32.v vd, (rs1),vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vluxseg8ei32_v(rs1,v0);}
+
+# vluxei64.v Vector indexed-ordered load instructions
+
+define pcodeop vluxei64_v;
+:vluxei64.v     vd, (rs1),vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxei64_v(rs1);}
+:vluxei64.v     vd, (rs1),vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxei64_v(rs1,v0);}
+
+define pcodeop vluxseg2ei64_v;
+:vluxseg2ei64.v vd, (rs1),vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg2ei64_v(rs1);}
+:vluxseg2ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg2ei64_v(rs1,v0);}
+
+define pcodeop vluxseg3ei64_v;
+:vluxseg3ei64.v vd, (rs1),vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg3ei64_v(rs1);}
+:vluxseg3ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg3ei64_v(rs1,v0);}
+
+define pcodeop vluxseg4ei64_v;
+:vluxseg4ei64.v vd, (rs1),vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg4ei64_v(rs1);}
+:vluxseg4ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg4ei64_v(rs1,v0);}
+
+define pcodeop vluxseg5ei64_v;
+:vluxseg5ei64.v vd, (rs1),vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg5ei64_v(rs1);}
+:vluxseg5ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg5ei64_v(rs1,v0);}
+
+define pcodeop vluxseg6ei64_v;
+:vluxseg6ei64.v vd, (rs1),vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg6ei64_v(rs1);}
+:vluxseg6ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg6ei64_v(rs1,v0);}
+
+define pcodeop vluxseg7ei64_v;
+:vluxseg7ei64.v vd, (rs1),vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg7ei64_v(rs1);}
+:vluxseg7ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg7ei64_v(rs1,v0);}
+
+define pcodeop vluxseg8ei64_v;
+:vluxseg8ei64.v vd, (rs1),vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg8ei64_v(rs1);}
+:vluxseg8ei64.v vd, (rs1),vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vluxseg8ei64_v(rs1,v0);}
+
+define pcodeop vle8ff_v;
 # vle8ff.v         nf 28=0 27..26=0 vm 24..20=0x10 rs1 14..12=0x0  vd 6..0=0x07
-# vle8ff.v    vd, (rs1), vm  #    8-bit unit-stride fault-only-first load
-:vle8ff.v     vd, (rs1), vm   is nf & op2828=0x0 & op2627=0x0 & vm & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7  unimpl
+# vle8ff.v    vd, (rs1), vm  #  8-bit unit-stride fault-only-first load
+:vle8ff.v     vd, (rs1)         is nf & op2931=0 & op2828=0x0 & op2627=0x0 &  op2525=1 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vle8ff_v(rs1);}
+:vle8ff.v     vd, (rs1), "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x0 &  op2525=0 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vle8ff_v(rs1,v0);}
+
+define pcodeop vlseg2e8ff_v;
+:vlseg2e8ff.v vd, (rs1)         is nf & op2931=1 & op2828=0x0 & op2627=0x0 &  op2525=1 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg2e8ff_v(rs1);}
+:vlseg2e8ff.v vd, (rs1), "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x0 &  op2525=0 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg2e8ff_v(rs1,v0);}
+
+define pcodeop vlseg3e8ff_v;
+:vlseg3e8ff.v vd, (rs1)         is nf & op2931=2 & op2828=0x0 & op2627=0x0 &  op2525=1 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg3e8ff_v(rs1);}
+:vlseg3e8ff.v vd, (rs1), "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x0 &  op2525=0 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg3e8ff_v(rs1,v0);}
+
+define pcodeop vlseg4e8ff_v;
+:vlseg4e8ff.v vd, (rs1)         is nf & op2931=3 & op2828=0x0 & op2627=0x0 &  op2525=1 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg4e8ff_v(rs1);}
+:vlseg4e8ff.v vd, (rs1), "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x0 &  op2525=0 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg4e8ff_v(rs1,v0);}
+
+define pcodeop vlseg5e8ff_v;
+:vlseg5e8ff.v vd, (rs1)         is nf & op2931=4 & op2828=0x0 & op2627=0x0 &  op2525=1 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg5e8ff_v(rs1);}
+:vlseg5e8ff.v vd, (rs1), "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x0 &  op2525=0 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg5e8ff_v(rs1,v0);}
+
+define pcodeop vlseg6e8ff_v;
+:vlseg6e8ff.v vd, (rs1)         is nf & op2931=5 & op2828=0x0 & op2627=0x0 &  op2525=1 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg6e8ff_v(rs1);}
+:vlseg6e8ff.v vd, (rs1), "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x0 &  op2525=0 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg6e8ff_v(rs1,v0);}
 
+define pcodeop vlseg7e8ff_v;
+:vlseg7e8ff.v vd, (rs1)         is nf & op2931=6 & op2828=0x0 & op2627=0x0 &  op2525=1 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg7e8ff_v(rs1);}
+:vlseg7e8ff.v vd, (rs1), "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x0 &  op2525=0 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg7e8ff_v(rs1,v0);}
+
+define pcodeop vlseg8e8ff_v;
+:vlseg8e8ff.v vd, (rs1)         is nf & op2931=7 & op2828=0x0 & op2627=0x0 &  op2525=1 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg8e8ff_v(rs1);}
+:vlseg8e8ff.v vd, (rs1), "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x0 &  op2525=0 & op2024=0x10 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg8e8ff_v(rs1,v0);}
+
+define pcodeop vlse1024_v;
 # vlse1024.v      nf 28=1 27..26=2 vm rs2 rs1 14..12=0x7  vd 6..0=0x07
 # vlse1024.v vd, (rs1), rs2, vm  # 1024-bit strided load
-:vlse1024.v  vd, (rs1), rs2, vm   is nf & op2828=0x1 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7  unimpl
+:vlse1024.v      vd, (rs1), rs2         is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlse1024_v(rs1);}
+:vlse1024.v      vd, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlse1024_v(rs1,v0);}
+
+define pcodeop vlsseg2e1024_v;
+:vlsseg2e1024.v  vd, (rs1), rs2         is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg2e1024_v(rs1);}
+:vlsseg2e1024.v  vd, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg2e1024_v(rs1,v0);}
+
+define pcodeop vlsseg3e1024_v;
+:vlsseg3e1024.v  vd, (rs1), rs2         is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg3e1024_v(rs1);}
+:vlsseg3e1024.v  vd, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg3e1024_v(rs1,v0);}
+
+define pcodeop vlsseg4e1024_v;
+:vlsseg4e1024.v  vd, (rs1), rs2         is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg4e1024_v(rs1);}
+:vlsseg4e1024.v  vd, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg4e1024_v(rs1,v0);}
+
+define pcodeop vlsseg5e1024_v;
+:vlsseg5e1024.v  vd, (rs1), rs2         is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg5e1024_v(rs1);}
+:vlsseg5e1024.v  vd, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg5e1024_v(rs1,v0);}
 
+define pcodeop vlsseg6e1024_v;
+:vlsseg6e1024.v  vd, (rs1), rs2         is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg6e1024_v(rs1);}
+:vlsseg6e1024.v  vd, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg6e1024_v(rs1,v0);}
+
+define pcodeop vlsseg7e1024_v;
+:vlsseg7e1024.v  vd, (rs1), rs2         is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg7e1024_v(rs1);}
+:vlsseg7e1024.v  vd, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg7e1024_v(rs1,v0);}
+
+define pcodeop vlsseg8e1024_v;
+:vlsseg8e1024.v  vd, (rs1), rs2         is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg8e1024_v(rs1);}
+:vlsseg8e1024.v  vd, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg8e1024_v(rs1,v0);}
+
+define pcodeop vlse128_v;
 # vlse128.v       nf 28=1 27..26=2 vm rs2 rs1 14..12=0x0  vd 6..0=0x07
 # vlse128.v  vd, (rs1), rs2, vm  #  128-bit strided load
-:vlse128.v   vd, (rs1), rs2, vm   is nf & op2828=0x1 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7  unimpl
+:vlse128.v     vd, (rs1), rs2         is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlse128_v(rs1);}
+:vlse128.v     vd, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlse128_v(rs1,v0);}
+
+define pcodeop vlsseg2e128_v;
+:vlsseg2e128.v vd, (rs1), rs2         is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg2e128_v(rs1);}
+:vlsseg2e128.v vd, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg2e128_v(rs1,v0);}
+
+define pcodeop vlsseg3e128_v;
+:vlsseg3e128.v vd, (rs1), rs2         is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg3e128_v(rs1);}
+:vlsseg3e128.v vd, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg3e128_v(rs1,v0);}
+
+define pcodeop vlsseg4e128_v;
+:vlsseg4e128.v vd, (rs1), rs2         is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg4e128_v(rs1);}
+:vlsseg4e128.v vd, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg4e128_v(rs1,v0);}
+
+define pcodeop vlsseg5e128_v;
+:vlsseg5e128.v vd, (rs1), rs2         is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg5e128_v(rs1);}
+:vlsseg5e128.v vd, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg5e128_v(rs1,v0);}
 
+define pcodeop vlsseg6e128_v;
+:vlsseg6e128.v vd, (rs1), rs2         is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg6e128_v(rs1);}
+:vlsseg6e128.v vd, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg6e128_v(rs1,v0);}
+
+define pcodeop vlsseg7e128_v;
+:vlsseg7e128.v vd, (rs1), rs2         is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg7e128_v(rs1);}
+:vlsseg7e128.v vd, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg7e128_v(rs1,v0);}
+
+define pcodeop vlsseg8e128_v;
+:vlsseg8e128.v vd, (rs1), rs2         is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg8e128_v(rs1);}
+:vlsseg8e128.v vd, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlsseg8e128_v(rs1,v0);}
+
+define pcodeop vlse16_v;
 # vlse16.v        nf 28=0 27..26=2 vm rs2 rs1 14..12=0x5  vd 6..0=0x07
-# vlse16.v   vd, (rs1), rs2, vm  #   16-bit strided load
-:vlse16.v    vd, (rs1), rs2, vm   is nf & op2828=0x0 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7  unimpl
+# vlse16.v    vd, (rs1), rs2, vm  #   16-bit strided load
+:vlse16.v     vd, (rs1), rs2         is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlse16_v(rs1);}
+:vlse16.v     vd, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlse16_v(rs1,v0);}
+
+define pcodeop vlsseg2e16_v;
+:vlsseg2e16.v vd, (rs1), rs2         is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg2e16_v(rs1);}
+:vlsseg2e16.v vd, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg2e16_v(rs1,v0);}
+
+define pcodeop vlsseg3e16_v;
+:vlsseg3e16.v vd, (rs1), rs2         is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg3e16_v(rs1);}
+:vlsseg3e16.v vd, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg3e16_v(rs1,v0);}
+
+define pcodeop vlsseg4e16_v;
+:vlsseg4e16.v vd, (rs1), rs2         is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg4e16_v(rs1);}
+:vlsseg4e16.v vd, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg4e16_v(rs1,v0);}
 
+define pcodeop vlsseg5e16_v;
+:vlsseg5e16.v vd, (rs1), rs2         is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg5e16_v(rs1);}
+:vlsseg5e16.v vd, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg5e16_v(rs1,v0);}
+
+define pcodeop vlsseg6e16_v;
+:vlsseg6e16.v vd, (rs1), rs2         is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg6e16_v(rs1);}
+:vlsseg6e16.v vd, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg6e16_v(rs1,v0);}
+
+define pcodeop vlsseg7e16_v;
+:vlsseg7e16.v vd, (rs1), rs2         is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg7e16_v(rs1);}
+:vlsseg7e16.v vd, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg7e16_v(rs1,v0);}
+
+define pcodeop vlsseg8e16_v;
+:vlsseg8e16.v vd, (rs1), rs2         is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg8e16_v(rs1);}
+:vlsseg8e16.v vd, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg8e16_v(rs1,v0);}
+
+define pcodeop vlse256_v;
 # vlse256.v       nf 28=1 27..26=2 vm rs2 rs1 14..12=0x5  vd 6..0=0x07
 # vlse256.v  vd, (rs1), rs2, vm  #  256-bit strided load
-:vlse256.v   vd, (rs1), rs2, vm   is nf & op2828=0x1 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7  unimpl
+:vlse256.v     vd, (rs1), rs2         is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlse256_v(rs1);}
+:vlse256.v     vd, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlse256_v(rs1,v0);}
+
+define pcodeop vlsseg2e256_v;
+:vlsseg2e256.v vd, (rs1), rs2         is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg2e256_v(rs1);}
+:vlsseg2e256.v vd, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg2e256_v(rs1,v0);}
+
+define pcodeop vlsseg3e256_v;
+:vlsseg3e256.v vd, (rs1), rs2         is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg3e256_v(rs1);}
+:vlsseg3e256.v vd, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg3e256_v(rs1,v0);}
 
+define pcodeop vlsseg4e256_v;
+:vlsseg4e256.v vd, (rs1), rs2         is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg4e256_v(rs1);}
+:vlsseg4e256.v vd, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg4e256_v(rs1,v0);}
+
+define pcodeop vlsseg5e256_v;
+:vlsseg5e256.v vd, (rs1), rs2         is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg5e256_v(rs1);}
+:vlsseg5e256.v vd, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg5e256_v(rs1,v0);}
+
+define pcodeop vlsseg6e256_v;
+:vlsseg6e256.v vd, (rs1), rs2         is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg6e256_v(rs1);}
+:vlsseg6e256.v vd, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg6e256_v(rs1,v0);}
+
+define pcodeop vlsseg7e256_v;
+:vlsseg7e256.v vd, (rs1), rs2         is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg7e256_v(rs1);}
+:vlsseg7e256.v vd, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg7e256_v(rs1,v0);}
+
+define pcodeop vlsseg8e256_v;
+:vlsseg8e256.v vd, (rs1), rs2         is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg8e256_v(rs1);}
+:vlsseg8e256.v vd, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlsseg8e256_v(rs1,v0);}
+
+define pcodeop vlse32_v;
 # vlse32.v        nf 28=0 27..26=2 vm rs2 rs1 14..12=0x6  vd 6..0=0x07
 # vlse32.v   vd, (rs1), rs2, vm  #   32-bit strided load
-:vlse32.v    vd, (rs1), rs2, vm   is nf & op2828=0x0 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7  unimpl
+:vlse32.v     vd, (rs1), rs2         is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlse32_v(rs1);}
+:vlse32.v     vd, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlse32_v(rs1,v0);}
+
+define pcodeop vlsseg2e32_v;
+:vlsseg2e32.v vd, (rs1), rs2         is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg2e32_v(rs1);}
+:vlsseg2e32.v vd, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg2e32_v(rs1,v0);}
 
+define pcodeop vlsseg3e32_v;
+:vlsseg3e32.v vd, (rs1), rs2         is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg3e32_v(rs1);}
+:vlsseg3e32.v vd, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg3e32_v(rs1,v0);}
+
+define pcodeop vlsseg4e32_v;
+:vlsseg4e32.v vd, (rs1), rs2         is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg4e32_v(rs1);}
+:vlsseg4e32.v vd, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg4e32_v(rs1,v0);}
+
+define pcodeop vlsseg5e32_v;
+:vlsseg5e32.v vd, (rs1), rs2         is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg5e32_v(rs1);}
+:vlsseg5e32.v vd, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg5e32_v(rs1,v0);}
+
+define pcodeop vlsseg6e32_v;
+:vlsseg6e32.v vd, (rs1), rs2         is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg6e32_v(rs1);}
+:vlsseg6e32.v vd, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg6e32_v(rs1,v0);}
+
+define pcodeop vlsseg7e32_v;
+:vlsseg7e32.v vd, (rs1), rs2         is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg7e32_v(rs1);}
+:vlsseg7e32.v vd, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg7e32_v(rs1,v0);}
+
+define pcodeop vlsseg8e32_v;
+:vlsseg8e32.v vd, (rs1), rs2         is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg8e32_v(rs1);}
+:vlsseg8e32.v vd, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg8e32_v(rs1,v0);}
+
+define pcodeop vlse512_v;
 # vlse512.v       nf 28=1 27..26=2 vm rs2 rs1 14..12=0x6  vd 6..0=0x07
 # vlse512.v  vd, (rs1), rs2, vm  #  512-bit strided load
-:vlse512.v   vd, (rs1), rs2, vm   is nf & op2828=0x1 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7  unimpl
+:vlse512.v     vd, (rs1), rs2,        is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlse512_v(rs1);}
+:vlse512.v     vd, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlse512_v(rs1,v0);}
+
+define pcodeop vlsseg2e512_v;
+:vlsseg2e512.v vd, (rs1), rs2,        is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg2e512_v(rs1);}
+:vlsseg2e512.v vd, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg2e512_v(rs1,v0);}
+
+define pcodeop vlsseg3e512_v;
+:vlsseg3e512.v vd, (rs1), rs2,        is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg3e512_v(rs1);}
+:vlsseg3e512.v vd, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg3e512_v(rs1,v0);}
+
+define pcodeop vlsseg4e512_v;
+:vlsseg4e512.v vd, (rs1), rs2,        is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg4e512_v(rs1);}
+:vlsseg4e512.v vd, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg4e512_v(rs1,v0);}
+
+define pcodeop vlsseg5e512_v;
+:vlsseg5e512.v vd, (rs1), rs2,        is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg5e512_v(rs1);}
+:vlsseg5e512.v vd, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg5e512_v(rs1,v0);}
+
+define pcodeop vlsseg6e512_v;
+:vlsseg6e512.v vd, (rs1), rs2,        is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg6e512_v(rs1);}
+:vlsseg6e512.v vd, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg6e512_v(rs1,v0);}
+
+define pcodeop vlsseg7e512_v;
+:vlsseg7e512.v vd, (rs1), rs2,        is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg7e512_v(rs1);}
+:vlsseg7e512.v vd, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg7e512_v(rs1,v0);}
+
+define pcodeop vlsseg8e512_v;
+:vlsseg8e512.v vd, (rs1), rs2,        is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg8e512_v(rs1);}
+:vlsseg8e512.v vd, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlsseg8e512_v(rs1,v0);}
 
+define pcodeop vlse64_v;
 # vlse64.v        nf 28=0 27..26=2 vm rs2 rs1 14..12=0x7  vd 6..0=0x07
 # vlse64.v   vd, (rs1), rs2, vm  #   64-bit strided load
-:vlse64.v    vd, (rs1), rs2, vm   is nf & op2828=0x0 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7  unimpl
+:vlse64.v    vd, (rs1), rs2         is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlse64_v(rs1);}
+:vlse64.v    vd, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlse64_v(rs1,v0);}
 
+define pcodeop vlsseg2e64_v;
+:vlsseg2e64.v vd, (rs1), rs2         is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg2e64_v(rs1);}
+:vlsseg2e64.v vd, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg2e64_v(rs1,v0);}
+
+define pcodeop vlsseg3e64_v;
+:vlsseg3e64.v vd, (rs1), rs2         is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg3e64_v(rs1);}
+:vlsseg3e64.v vd, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg3e64_v(rs1,v0);}
+
+define pcodeop vlsseg4e64_v;
+:vlsseg4e64.v vd, (rs1), rs2         is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg4e64_v(rs1);}
+:vlsseg4e64.v vd, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg4e64_v(rs1,v0);}
+
+define pcodeop vlsseg5e64_v;
+:vlsseg5e64.v vd, (rs1), rs2         is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg5e64_v(rs1);}
+:vlsseg5e64.v vd, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg5e64_v(rs1,v0);}
+
+define pcodeop vlsseg6e64_v;
+:vlsseg6e64.v vd, (rs1), rs2         is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg6e64_v(rs1);}
+:vlsseg6e64.v vd, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg6e64_v(rs1,v0);}
+
+define pcodeop vlsseg7e64_v;
+:vlsseg7e64.v vd, (rs1), rs2         is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg7e64_v(rs1);}
+:vlsseg7e64.v vd, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg7e64_v(rs1,v0);}
+
+define pcodeop vlsseg8e64_v;
+:vlsseg8e64.v vd, (rs1), rs2         is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg8e64_v(rs1);}
+:vlsseg8e64.v vd, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlsseg8e64_v(rs1,v0);}
+
+define pcodeop vlse8_v;
 # vlse8.v         nf 28=0 27..26=2 vm rs2 rs1 14..12=0x0  vd 6..0=0x07
-# vlse8.v    vd, (rs1), rs2, vm  #    8-bit strided load
-:vlse8.v     vd, (rs1), rs2, vm   is nf & op2828=0x0 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7  unimpl
+# vlse8.v    vd, (rs1), rs2, vm  #   8-bit strided load
+:vlse8.v     vd, (rs1), rs2          is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlse8_v(rs1);}
+:vlse8.v     vd, (rs1), rs2, "v0.t"  is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlse8_v(rs1,v0);}
+
+define pcodeop vlseg2se8_v;
+:vlsseg2e8.v vd, (rs1), rs2          is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg2se8_v(rs1);}
+:vlsseg2e8.v vd, (rs1), rs2, "v0.t"  is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg2se8_v(rs1,v0);}
+
+define pcodeop vlseg3se8_v;
+:vlsseg3e8.v vd, (rs1), rs2          is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg3se8_v(rs1);}
+:vlsseg3e8.v vd, (rs1), rs2, "v0.t"  is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg3se8_v(rs1,v0);}
+
+define pcodeop vlseg4se8_v;
+:vlsseg4e8.v vd, (rs1), rs2          is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg4se8_v(rs1);}
+:vlsseg4e8.v vd, (rs1), rs2, "v0.t"  is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg4se8_v(rs1,v0);}
+
+define pcodeop vlseg5se8_v;
+:vlsseg5e8.v vd, (rs1), rs2          is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg5se8_v(rs1);}
+:vlsseg5e8.v vd, (rs1), rs2, "v0.t"  is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg5se8_v(rs1,v0);}
+
+define pcodeop vlseg6se8_v;
+:vlsseg6e8.v vd, (rs1), rs2          is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg6se8_v(rs1);}
+:vlsseg6e8.v vd, (rs1), rs2, "v0.t"  is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg6se8_v(rs1,v0);}
+
+define pcodeop vlseg7se8_v;
+:vlsseg7e8.v vd, (rs1), rs2          is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg7se8_v(rs1);}
+:vlsseg7e8.v vd, (rs1), rs2, "v0.t"  is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg7se8_v(rs1,v0);}
 
+define pcodeop vlseg8se8_v;
+:vlsseg8e8.v vd, (rs1), rs2          is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg8se8_v(rs1);}
+:vlsseg8e8.v vd, (rs1), rs2, "v0.t"  is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlseg8se8_v(rs1,v0);}
+
+define pcodeop vlxei1024_v;
 # vlxei1024.v      nf 28=1 27..26=3 vm vs2 rs1 14..12=0x7  vd 6..0=0x07
 # vlxei1024.v   vd, (rs1), vs2, vm  #   1024-bit indexed load of SEW data
-:vlxei1024.v    vd, (rs1), vs2, vm   is nf & op2828=0x1 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7  unimpl
+:vlxei1024.v    vd, (rs1), vs2, vm   is nf & op2828=0x1 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlxei1024_v(rs1,vs2,vm);}
 
+define pcodeop vlxei128_v;
 # vlxei128.v       nf 28=1 27..26=3 vm vs2 rs1 14..12=0x0  vd 6..0=0x07
 # vlxei128.v   vd, (rs1), vs2, vm  #   128-bit indexed load of SEW data
-:vlxei128.v    vd, (rs1), vs2, vm   is nf & op2828=0x1 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7  unimpl
+:vlxei128.v    vd, (rs1), vs2, vm   is nf & op2828=0x1 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlxei128_v(rs1,vs2,vm);}
 
+define pcodeop vlxei16_v;
 # vlxei16.v        nf 28=0 27..26=3 vm vs2 rs1 14..12=0x5  vd 6..0=0x07
 # vlxei16.v   vd, (rs1), vs2, vm  #   16-bit indexed load of SEW data
-:vlxei16.v    vd, (rs1), vs2, vm   is nf & op2828=0x0 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7  unimpl
+:vlxei16.v    vd, (rs1), vs2, vm   is nf & op2828=0x0 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7  {vd=vlxei16_v(rs1,vs2,vm);}
 
+define pcodeop vlxei256_v;
 # vlxei256.v       nf 28=1 27..26=3 vm vs2 rs1 14..12=0x5  vd 6..0=0x07
 # vlxei256.v   vd, (rs1), vs2, vm  #   256-bit indexed load of SEW data
-:vlxei256.v    vd, (rs1), vs2, vm   is nf & op2828=0x1 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7  unimpl
+:vlxei256.v    vd, (rs1), vs2, vm   is nf & op2828=0x1 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x7 {vd=vlxei256_v(rs1,vs2,vm);}
 
+define pcodeop vlxei32_v;
 # vlxei32.v        nf 28=0 27..26=3 vm vs2 rs1 14..12=0x6  vd 6..0=0x07
 # vlxei32.v   vd, (rs1), vs2, vm  #   32-bit indexed load of SEW data
-:vlxei32.v    vd, (rs1), vs2, vm   is nf & op2828=0x0 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7  unimpl
+:vlxei32.v    vd, (rs1), vs2, vm   is nf & op2828=0x0 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlxei32_v(rs1,vs2,vm);}
 
+define pcodeop vlxei512_v;
 # vlxei512.v       nf 28=1 27..26=3 vm vs2 rs1 14..12=0x6  vd 6..0=0x07
 # vlxei512.v   vd, (rs1), vs2, vm  #   512-bit indexed load of SEW data
-:vlxei512.v    vd, (rs1), vs2, vm   is nf & op2828=0x1 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7  unimpl
+:vlxei512.v    vd, (rs1), vs2, vm   is nf & op2828=0x1 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x7 {vd=vlxei512_v(rs1,vs2,vm);}
 
+define pcodeop vlxei64_v;
 # vlxei64.v        nf 28=0 27..26=3 vm vs2 rs1 14..12=0x7  vd 6..0=0x07
 # vlxei64.v   vd, (rs1), vs2, vm  #   64-bit indexed load of SEW data
-:vlxei64.v    vd, (rs1), vs2, vm   is nf & op2828=0x0 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7  unimpl
+:vlxei64.v    vd, (rs1), vs2, vm   is nf & op2828=0x0 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x7 & vd & op0006=0x7 {vd=vlxei64_v(rs1,vs2,vm);}
 
+define pcodeop vlxei8_v;
 # vlxei8.v         nf 28=0 27..26=3 vm vs2 rs1 14..12=0x0  vd 6..0=0x07
 # vlxei8.v    vd, (rs1), vs2, vm  #    8-bit indexed load of SEW data
-:vlxei8.v     vd, (rs1), vs2, vm   is nf & op2828=0x0 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7  unimpl
+:vlxei8.v     vd, (rs1), vs2, vm   is nf & op2828=0x0 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x0 & vd & op0006=0x7 {vd=vlxei8_v(rs1,vs2,vm);}
 
+define pcodeop vmacc_vv;
 # vmacc.vv       31..26=0x2d vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]
-:vmacc.vv  vd, vs1, vs2, vm     is op2631=0x2d & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmacc.vv  vd, vs1, vs2         is op2631=0x2d & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmacc_vv(vs1,vs2);}
+:vmacc.vv  vd, vs1, vs2, "v0.t" is op2631=0x2d & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmacc_vv(vs1,vs2,v0);}
 
+define pcodeop vmacc_vx;
 # vmacc.vx       31..26=0x2d vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vmacc.vx vd, rs1, vs2, vm    # vd[i] = +(x[rs1] * vs2[i]) + vd[i]
-:vmacc.vx  vd, rs1, vs2, vm     is op2631=0x2d & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vmacc.vx  vd, rs1, vs2         is op2631=0x2d & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vmacc_vx(rs1,vs2);}
+:vmacc.vx  vd, rs1, vs2, "v0.t" is op2631=0x2d & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vmacc_vx(rs1,vs2,v0);}
 
+define pcodeop vmadc_vim;
 # vmadc.vim      31..26=0x11 vm   vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vmadc.vim   vd, vs2, simm5, v0  # Vector-immediate
-:vmadc.vim    vd, vs2, simm5, v0   is op2631=0x11 & vm & vs2 & simm5 & op1214=0x3 & v0 & vd & op0006=0x57  unimpl
+:vmadc.vi     vd, vs2, simm5     is op2631=0x11 & op2525=1 & vs2 & simm5 & op1214=0x3 &      vd & op0006=0x57 {vd=vmadc_vim(vs2,simm5);}
+:vmadc.vim    vd, vs2, simm5, v0 is op2631=0x11 & op2525=0 & vs2 & simm5 & op1214=0x3 & v0 & vd & op0006=0x57 {vd=vmadc_vim(vs2,simm5,v0);}
 
+define pcodeop vmadc_vv;
+define pcodeop vmadc_vvm;
 # vmadc.vvm      31..26=0x11 vm   vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vmadc.vvm   vd, vs2, vs1, v0  # Vector-vector
-:vmadc.vvm    vd, vs2, vs1, v0   is op2631=0x11 & vm & vs2 & vs1 & op1214=0x0 & v0 & vd & op0006=0x57  unimpl
+:vmadc.vv    vd, vs2, vs1      is op2631=0x11 & op2525=1 & vs2 & vs1 & op1214=0x0      & vd & op0006=0x57 {vd=vmadc_vv(vs2,vs1);}
+:vmadc.vvm   vd, vs2, vs1, v0  is op2631=0x11 & op2525=0 & vs2 & vs1 & op1214=0x0 & v0 & vd & op0006=0x57 {vd=vmadc_vvm(vs2,vs1,v0);}
 
+define pcodeop vmadc_vx;
+define pcodeop vmadc_vxm;
 # vmadc.vxm      31..26=0x11 vm   vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmadc.vxm   vd, vs2, rs1, v0  # Vector-scalar
-:vmadc.vxm    vd, vs2, rs1, v0   is op2631=0x11 & vm & vs2 & rs1 & op1214=0x4 & v0 & vd & op0006=0x57  unimpl
+:vmadc.vx     vd, vs2, rs1     is op2631=0x11 & op2525=1 & vm & vs2 & rs1 & op1214=0x4      & vd & op0006=0x57 {vd=vmadc_vx(vs2,rs1);}
+:vmadc.vxm    vd, vs2, rs1, v0 is op2631=0x11 & op2525=0 & vm & vs2 & rs1 & op1214=0x4 & v0 & vd & op0006=0x57 {vd=vmadc_vxm(vs2,rs1,v0);}
 
+define pcodeop vmadd_vv;
 # vmadd.vv       31..26=0x29 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vmadd.vv vd, vs1, vs2, vm    # vd[i] = (vs1[i] * vd[i]) + vs2[i]
-:vmadd.vv  vd, vs1, vs2, vm     is op2631=0x29 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmadd.vv  vd, vs1, vs2, vm     is op2631=0x29 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmadd_vv(vs1,vs2,vm);}
+:vmadd.vv  vd, vs1, vs2         is op2631=0x29 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmadd_vv(vs1,vs2);}
+:vmadd.vv  vd, vs1, vs2, "v0.t" is op2631=0x29 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmadd_vv(vs1,vs2,v0);}
 
+define pcodeop vmadd_vx;
 # vmadd.vx       31..26=0x29 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vmadd.vx vd, rs1, vs2, vm    # vd[i] = (x[rs1] * vd[i]) + vs2[i]
-:vmadd.vx  vd, rs1, vs2, vm     is op2631=0x29 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vmadd.vx  vd, rs1, vs2         is op2631=0x29 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vmadd_vx(rs1,vs2);}
+:vmadd.vx  vd, rs1, vs2, "v0.t" is op2631=0x29 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vmadd_vx(rs1,vs2,v0);}
 
+define pcodeop vmand_mm;
 # vmand.mm       31..26=0x19 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vmand.mm vd, vs2, vs1     # vd[i] =   vs2.mask[i] &amp;&amp;  vs1.mask[i]
-:vmand.mm  vd, vs2, vs1      is op2631=0x19 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmand.mm  vd, vs2, vs1         is op2631=0x19 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmand_mm(vs2,vs1);}
+:vmand.mm  vd, vs2, vs1, "v0.t" is op2631=0x19 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmand_mm(vs2,vs1,v0);}
 
-# vmandnot.mm    31..26=0x18 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
-# vmandnot.mm vd, vs2, vs1  # vd[i] =   vs2.mask[i] &amp;&amp; !vs1.mask[i]
-:vmandnot.mm  vd, vs2, vs1   is op2631=0x18 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+define pcodeop vmandn_mm;
+# vmandn.mm    31..26=0x18 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
+# vmandn.mm vd, vs2, vs1  # vd[i] =   vs2.mask[i] &amp;&amp; !vs1.mask[i]
+:vmandn.mm  vd, vs2, vs1         is op2631=0x18 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmandn_mm(vs2,vs1);}
+:vmandn.mm  vd, vs2, vs1, "v0.t" is op2631=0x18 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmandn_mm(vs2,vs1,v0);}
 
+define pcodeop vmax_vv;
 # vmax.vv         31..26=0x07 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vmax.vv vd, vs2, vs1, vm   # Vector-vector
-:vmax.vv  vd, vs2, vs1, vm    is op2631=0x7 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vmax.vv  vd, vs2, vs1         is op2631=0x7 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmax_vv(vs2,vs1);}
+:vmax.vv  vd, vs2, vs1, "v0.t" is op2631=0x7 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmax_vv(vs2,vs1,v0);}
 
+define pcodeop vmax_vx;
 # vmax.vx        31..26=0x07 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmax.vx vd, vs2, rs1, vm   # vector-scalar
-:vmax.vx  vd, vs2, rs1, vm    is op2631=0x7 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vmax.vx  vd, vs2, rs1         is op2631=0x7 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmax_vx(vs2,rs1);}
+:vmax.vx  vd, vs2, rs1, "v0.t" is op2631=0x7 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmax_vx(vs2,rs1,v0);}
 
+define pcodeop vmaxu_vv;
 # vmaxu.vv        31..26=0x06 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vmaxu.vv vd, vs2, vs1, vm   # Vector-vector
-:vmaxu.vv  vd, vs2, vs1, vm    is op2631=0x6 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vmaxu.vv  vd, vs2, vs1         is op2631=0x6 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmaxu_vv(vs2,vs1);}
+:vmaxu.vv  vd, vs2, vs1, "v0.t" is op2631=0x6 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmaxu_vv(vs2,vs1,v0);}
 
+define pcodeop vmaxu_vx;
 # vmaxu.vx       31..26=0x06 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmaxu.vx vd, vs2, rs1, vm   # vector-scalar
-:vmaxu.vx  vd, vs2, rs1, vm    is op2631=0x6 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vmaxu.vx  vd, vs2, rs1         is op2631=0x6 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmaxu_vx(vs2,rs1);}
+:vmaxu.vx  vd, vs2, rs1, "v0.t" is op2631=0x6 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmaxu_vx(vs2,rs1,v0);}
 
+define pcodeop vmerge_vim;
 # vmerge.vim     31..26=0x17 25=0 vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vmerge.vim vd, vs2, simm5, v0  # vd[i] = v0.mask[i] ? imm    : vs2[i]
-:vmerge.vim  vd, vs2, simm5, v0   is op2631=0x17 & op2525=0x0 & vs2 & simm5 & op1214=0x3 & v0 & vd & op0006=0x57  unimpl
+:vmerge.vim  vd, vs2, simm5, v0   is op2631=0x17 & op2525=0x0 & vs2 & simm5 & op1214=0x3 & v0 & vd & op0006=0x57 {vd=vmerge_vim(vs2,simm5,v0);}
 
+define pcodeop vmerge_vvm;
 # vmerge.vvm     31..26=0x17 25=0 vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vmerge.vvm vd, vs2, vs1, v0  # vd[i] = v0.mask[i] ? vs1[i] : vs2[i]
-:vmerge.vvm  vd, vs2, vs1, v0   is op2631=0x17 & op2525=0x0 & vs2 & vs1 & op1214=0x0 & v0 & vd & op0006=0x57  unimpl
+:vmerge.vvm  vd, vs2, vs1, v0   is op2631=0x17 & op2525=0x0 & vs2 & vs1 & op1214=0x0 & v0 & vd & op0006=0x57 {vd=vmerge_vvm(vs2,vs1,v0);}
 
+define pcodeop vmerge_vxm;
 # vmerge.vxm     31..26=0x17 25=0 vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmerge.vxm vd, vs2, rs1, v0  # vd[i] = v0.mask[i] ? x[rs1] : vs2[i]
-:vmerge.vxm  vd, vs2, rs1, v0   is op2631=0x17 & op2525=0x0 & vs2 & rs1 & op1214=0x4 & v0 & vd & op0006=0x57  unimpl
+:vmerge.vxm  vd, vs2, rs1, v0   is op2631=0x17 & op2525=0x0 & vs2 & rs1 & op1214=0x4 & v0 & vd & op0006=0x57 {vd=vmerge_vxm(vs2,rs1,v0);}
 
-# vmfeq.vf       31..26=0x18 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vmfeq.vf vd, vs2, rs1, vm  # vector-scalar
-:vmfeq.vf  vd, vs2, rs1, vm   is op2631=0x18 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vmfeq_vf;
+# vmfeq.vf       31..26=0x18 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vmfeq.vf vd, vs2, frs1, vm  # vector-scalar
+:vmfeq.vf  vd, vs2, frs1         is op2631=0x18 & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vmfeq_vf(vs2,frs1);}
+:vmfeq.vf  vd, vs2, frs1, "v0.t" is op2631=0x18 & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vmfeq_vf(vs2,frs1,v0);}
 
+define pcodeop vmfeq_vv;
 # vmfeq.vv       31..26=0x18 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vmfeq.vv vd, vs2, vs1, vm  # Vector-vector
-:vmfeq.vv  vd, vs2, vs1, vm   is op2631=0x18 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
-
-# vmfge.vf       31..26=0x1f vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vmfge.vf vd, vs2, rs1, vm  # vector-scalar
-:vmfge.vf  vd, vs2, rs1, vm   is op2631=0x1f & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
-
-# vmfgt.vf       31..26=0x1d vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vmfgt.vf vd, vs2, rs1, vm  # vector-scalar
-:vmfgt.vf  vd, vs2, rs1, vm   is op2631=0x1d & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
-
-# vmfle.vf       31..26=0x19 vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vmfle.vf vd, vs2, rs1, vm  # vector-scalar
-:vmfle.vf  vd, vs2, rs1, vm   is op2631=0x19 & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
-
+:vmfeq.vv  vd, vs2, vs1         is op2631=0x18 & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vmfeq_vv(vs2,vs1);}
+:vmfeq.vv  vd, vs2, vs1, "v0.t" is op2631=0x18 & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vmfeq_vv(vs2,vs1,v0);}
+
+define pcodeop vmfge_vf;
+# vmfge.vf       31..26=0x1f vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vmfge.vf vd, vs2, frs1, vm  # vector-scalar
+:vmfge.vf  vd, vs2, frs1         is op2631=0x1f & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vmfge_vf(vs2,frs1);}
+:vmfge.vf  vd, vs2, frs1, "v0.t" is op2631=0x1f & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vmfge_vf(vs2,frs1,v0);}
+
+define pcodeop vmfgt_vf;
+# vmfgt.vf       31..26=0x1d vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vmfgt.vf vd, vs2, frs1, vm  # vector-scalar
+:vmfgt.vf  vd, vs2, frs1         is op2631=0x1d & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vmfgt_vf(vs2,frs1);}
+:vmfgt.vf  vd, vs2, frs1, "v0.t" is op2631=0x1d & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vmfgt_vf(vs2,frs1,v0);}
+
+define pcodeop vmfle_vf;
+# vmfle.vf       31..26=0x19 vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vmfle.vf vd, vs2, frs1, vm  # vector-scalar
+:vmfle.vf  vd, vs2, frs1         is op2631=0x19 & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vmfle_vf(vs2,frs1);}
+:vmfle.vf  vd, vs2, frs1, "v0.t" is op2631=0x19 & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vmfle_vf(vs2,frs1,v0);}
+
+define pcodeop vmfle_vv;
 # vmfle.vv       31..26=0x19 vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vmfle.vv vd, vs2, vs1, vm  # Vector-vector
-:vmfle.vv  vd, vs2, vs1, vm   is op2631=0x19 & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vmfle.vv  vd, vs2, vs1         is op2631=0x19 & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vmfle_vv(vs2,vs1);}
+:vmfle.vv  vd, vs2, vs1, "v0.t" is op2631=0x19 & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vmfle_vv(vs2,vs1,v0);}
 
-# vmflt.vf       31..26=0x1b vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vmflt.vf vd, vs2, rs1, vm  # vector-scalar
-:vmflt.vf  vd, vs2, rs1, vm   is op2631=0x1b & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vmflt_vf;
+# vmflt.vf       31..26=0x1b vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vmflt.vf vd, vs2, frs1, vm  # vector-scalar
+:vmflt.vf  vd, vs2, frs1         is op2631=0x1b & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vmflt_vf(vs2,frs1);}
+:vmflt.vf  vd, vs2, frs1, "v0.t" is op2631=0x1b & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vmflt_vf(vs2,frs1,v0);}
 
+define pcodeop vmflt_vv;
 # vmflt.vv       31..26=0x1b vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vmflt.vv vd, vs2, vs1, vm  # Vector-vector
-:vmflt.vv  vd, vs2, vs1, vm   is op2631=0x1b & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vmflt.vv  vd, vs2, vs1         is op2631=0x1b & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vmflt_vf(vs2,vs1);}
+:vmflt.vv  vd, vs2, vs1, "v0.t" is op2631=0x1b & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vmflt_vf(vs2,vs1,v0);}
 
-# vmfne.vf       31..26=0x1c vm vs2 rs1 14..12=0x5 vd 6..0=0x57
-# vmfne.vf vd, vs2, rs1, vm  # vector-scalar
-:vmfne.vf  vd, vs2, rs1, vm   is op2631=0x1c & vm & vs2 & rs1 & op1214=0x5 & vd & op0006=0x57  unimpl
+define pcodeop vmfne_vf;
+# vmfne.vf       31..26=0x1c vm vs2 frs1 14..12=0x5 vd 6..0=0x57
+# vmfne.vf vd, vs2, frs1, vm  # vector-scalar
+:vmfne.vf  vd, vs2, frs1         is op2631=0x1c & op2525=1 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vmfne_vf(vs2,frs1);}
+:vmfne.vf  vd, vs2, frs1, "v0.t" is op2631=0x1c & op2525=0 & vs2 & frs1 & op1214=0x5 & vd & op0006=0x57 {vd=vmfne_vf(vs2,frs1,v0);}
 
+define pcodeop vmfne_vv;
 # vmfne.vv       31..26=0x1c vm vs2 vs1 14..12=0x1 vd 6..0=0x57
 # vmfne.vv vd, vs2, vs1, vm  # Vector-vector
-:vmfne.vv  vd, vs2, vs1, vm   is op2631=0x1c & vm & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57  unimpl
+:vmfne.vv  vd, vs2, vs1         is op2631=0x1c & op2525=1 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vmfne_vv(vs2,vs1);}
+:vmfne.vv  vd, vs2, vs1, "v0.t" is op2631=0x1c & op2525=0 & vs2 & vs1 & op1214=0x1 & vd & op0006=0x57 {vd=vmfne_vv(vs2,vs1,v0);}
 
+define pcodeop vmin_vv;
 # vmin.vv         31..26=0x05 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vmin.vv vd, vs2, vs1, vm   # Vector-vector
-:vmin.vv  vd, vs2, vs1, vm    is op2631=0x5 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vmin.vv  vd, vs2, vs1         is op2631=0x5 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmin_vv(vs2,vs1);}
+:vmin.vv  vd, vs2, vs1, "v0.t" is op2631=0x5 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmin_vv(vs2,vs1,v0);}
 
+define pcodeop vmin_vx;
 # vmin.vx        31..26=0x05 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmin.vx vd, vs2, rs1, vm   # vector-scalar
-:vmin.vx  vd, vs2, rs1, vm    is op2631=0x5 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vmin.vx  vd, vs2, rs1         is op2631=0x5 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmin_vx(vs2,rs1);}
+:vmin.vx  vd, vs2, rs1, "v0.t" is op2631=0x5 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmin_vx(vs2,rs1,v0);}
 
+define pcodeop vminu_vv;
 # vminu.vv        31..26=0x04 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vminu.vv vd, vs2, vs1, vm   # Vector-vector
-:vminu.vv  vd, vs2, vs1, vm    is op2631=0x4 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vminu.vv  vd, vs2, vs1         is op2631=0x4 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vminu_vv(vs2,vs1);}
+:vminu.vv  vd, vs2, vs1, "v0.t" is op2631=0x4 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vminu_vv(vs2,vs1,v0);}
 
+define pcodeop vminu_vx;
 # vminu.vx       31..26=0x04 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vminu.vx vd, vs2, rs1, vm   # vector-scalar
-:vminu.vx  vd, vs2, rs1, vm    is op2631=0x4 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vminu.vx  vd, vs2, rs1         is op2631=0x4 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vminu_vx(vs2,rs1);}
+:vminu.vx  vd, vs2, rs1, "v0.t" is op2631=0x4 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vminu_vx(vs2,rs1,v0);}
 
+define pcodeop vmnand_mm;
 # vmnand.mm      31..26=0x1d vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vmnand.mm vd, vs2, vs1    # vd[i] = !(vs2.mask[i] &amp;&amp;  vs1.mask[i])
-:vmnand.mm  vd, vs2, vs1     is op2631=0x1d & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmnand.mm  vd, vs2, vs1         is op2631=0x1d & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmnand_mm(vs2,vs1);}
+:vmnand.mm  vd, vs2, vs1, "v0.t" is op2631=0x1d & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmnand_mm(vs2,vs1,v0);}
 
+define pcodeop vmnor_mm;
 # vmnor.mm       31..26=0x1e vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vmnor.mm  vd, vs2, vs1    # vd[i] = !(vs2.mask[i] ||  vs1.mask[i])
-:vmnor.mm   vd, vs2, vs1     is op2631=0x1e & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmnor.mm   vd, vs2, vs1         is op2631=0x1e & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmnor_mm(vs2,vs1);}
+:vmnor.mm   vd, vs2, vs1, "v0.t" is op2631=0x1e & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmnor_mm(vs2,vs1,v0);}
 
+define pcodeop vmor_mm;
 # vmor.mm        31..26=0x1a vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vmor.mm  vd, vs2, vs1     # vd[i] =   vs2.mask[i] ||  vs1.mask[i]
-:vmor.mm   vd, vs2, vs1      is op2631=0x1a & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmor.mm   vd, vs2, vs1         is op2631=0x1a & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmor_mm(vs2,vs1);}
+:vmor.mm   vd, vs2, vs1, "v0.t" is op2631=0x1a & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmor_mm(vs2,vs1,v0);}
 
-# vmornot.mm     31..26=0x1c vm vs2 vs1 14..12=0x2 vd 6..0=0x57
-# vmornot.mm  vd, vs2, vs1  # vd[i] =   vs2.mask[i] || !vs1.mask[i]
-:vmornot.mm   vd, vs2, vs1   is op2631=0x1c & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+define pcodeop vmorn_mm;
+# vmorn.mm     31..26=0x1c vm vs2 vs1 14..12=0x2 vd 6..0=0x57
+# vmorn.mm  vd, vs2, vs1  # vd[i] =   vs2.mask[i] || !vs1.mask[i]
+:vmorn.mm   vd, vs2, vs1         is op2631=0x1c & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmorn_mm(vs2,vs1);}
+:vmorn.mm   vd, vs2, vs1, "v0.t" is op2631=0x1c & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmorn_mm(vs2,vs1,v0);}
 
+define pcodeop vmsbc_vvm;
+define pcodeop vmsbc_vv;
 # vmsbc.vvm      31..26=0x13 vm   vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vmsbc.vvm   vd, vs2, vs1, v0  # Vector-vector
-:vmsbc.vvm    vd, vs2, vs1, v0   is op2631=0x13 & vm & vs2 & vs1 & op1214=0x0 & v0 & vd & op0006=0x57  unimpl
+:vmsbc.vv     vd, vs2, vs1      is op2631=0x13 & op2525=1 & vs2 & vs1 & op1214=0x0      & vd & op0006=0x57 {vd=vmsbc_vv(vs2,vs1);}
+:vmsbc.vvm    vd, vs2, vs1, v0  is op2631=0x13 & op2525=0 & vs2 & vs1 & op1214=0x0 & v0 & vd & op0006=0x57 {vd=vmsbc_vvm(vs2,vs1,v0);}
 
+define pcodeop vmsbc_vx;
+define pcodeop vmsbc_vxm;
 # vmsbc.vxm      31..26=0x13 vm   vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmsbc.vxm   vd, vs2, rs1, v0  # Vector-scalar
-:vmsbc.vxm    vd, vs2, rs1, v0   is op2631=0x13 & vm & vs2 & rs1 & op1214=0x4 & v0 & vd & op0006=0x57  unimpl
+:vmsbc.vx     vd, vs2, rs1     is op2631=0x13 & op2525=1 & vs2 & rs1 & op1214=0x4      & vd & op0006=0x57 {vd=vmsbc_vx(vs2,rs1);}
+:vmsbc.vxm    vd, vs2, rs1, v0 is op2631=0x13 & op2525=0 & vs2 & rs1 & op1214=0x4 & v0 & vd & op0006=0x57 {vd=vmsbc_vx(vs2,rs1,v0);}
 
+define pcodeop vmsbf_m;
 # vmsbf.m        31..26=0x14 vm vs2 19..15=0x01 14..12=0x2 vd 6..0=0x57
 # vmsbf.m vd, vs2, vm
-:vmsbf.m  vd, vs2, vm is op2631=0x14 & vm & vs2 & op1519=0x1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmsbf.m  vd, vs2         is op2631=0x14 & op2525=1 & vs2 & op1519=0x1 & op1214=0x2 & vd & op0006=0x57 {vd=vmsbf_m(vs2);}
+:vmsbf.m  vd, vs2, "v0.t" is op2631=0x14 & op2525=0 & vs2 & op1519=0x1 & op1214=0x2 & vd & op0006=0x57 {vd=vmsbf_m(vs2,v0);}
 
+define pcodeop vmseq_vi;
 # vmseq.vi       31..26=0x18 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vmseq.vi vd, vs2, simm5, vm  # vector-immediate
-:vmseq.vi  vd, vs2, simm5, vm   is op2631=0x18 & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vmseq.vi  vd, vs2, simm5         is op2631=0x18 & op2525=1 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vmseq_vi(vs2,simm5);}
+:vmseq.vi  vd, vs2, simm5, "v0.t" is op2631=0x18 & op2525=0 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vmseq_vi(vs2,simm5,v0);}
 
+define pcodeop vmseq_vv;
 # vmseq.vv       31..26=0x18 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vmseq.vv vd, vs2, vs1, vm  # Vector-vector
-:vmseq.vv  vd, vs2, vs1, vm   is op2631=0x18 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vmseq.vv  vd, vs2, vs1         is op2631=0x18 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmseq_vv(vs2,vs1);}
+:vmseq.vv  vd, vs2, vs1, "v0.t" is op2631=0x18 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmseq_vv(vs2,vs1,v0);}
 
+define pcodeop vmseq_vx;
 # vmseq.vx       31..26=0x18 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmseq.vx vd, vs2, rs1, vm  # vector-scalar
-:vmseq.vx  vd, vs2, rs1, vm   is op2631=0x18 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vmseq.vx  vd, vs2, rs1         is op2631=0x18 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmseq_vx(vs2,rs1);}
+:vmseq.vx  vd, vs2, rs1, "v0.t" is op2631=0x18 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmseq_vx(vs2,rs1,v0);}
 
+define pcodeop vmsgt_vi;
 # vmsgt.vi       31..26=0x1f vm vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vmsgt.vi vd, vs2, simm5, vm    # Vector-immediate
-:vmsgt.vi  vd, vs2, simm5, vm     is op2631=0x1f & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vmsgt.vi  vd, vs2, simm5         is op2631=0x1f & op2525=1 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vmseq_vx(vs2,simm5);}
+:vmsgt.vi  vd, vs2, simm5, "v0.t" is op2631=0x1f & op2525=0 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vmseq_vx(vs2,simm5,v0);}
 
+define pcodeop vmsgt_vx;
 # vmsgt.vx       31..26=0x1f vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmsgt.vx vd, vs2, rs1, vm    # Vector-scalar
-:vmsgt.vx  vd, vs2, rs1, vm     is op2631=0x1f & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vmsgt.vx  vd, vs2, rs1         is op2631=0x1f & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmsgt_vx(vs2,rs1);}
+:vmsgt.vx  vd, vs2, rs1, "v0.t" is op2631=0x1f & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmsgt_vx(vs2,rs1,v0);}
 
+define pcodeop vmsgtu_vi;
 # vmsgtu.vi      31..26=0x1e vm vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vmsgtu.vi vd, vs2, simm5, vm   # Vector-immediate
-:vmsgtu.vi  vd, vs2, simm5, vm    is op2631=0x1e & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vmsgtu.vi  vd, vs2, simm5         is op2631=0x1e & op2525=1 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vmsgtu_vi(vs2,simm5);}
+:vmsgtu.vi  vd, vs2, simm5, "v0.t" is op2631=0x1e & op2525=0 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vmsgtu_vi(vs2,simm5,v0);}
 
+define pcodeop vmsgtu_vx;
 # vmsgtu.vx      31..26=0x1e vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmsgtu.vx vd, vs2, rs1, vm   # Vector-scalar
-:vmsgtu.vx  vd, vs2, rs1, vm    is op2631=0x1e & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vmsgtu.vx  vd, vs2, rs1         is op2631=0x1e & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmsgtu_vx(vs2,rs1);}
+:vmsgtu.vx  vd, vs2, rs1, "v0.t" is op2631=0x1e & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmsgtu_vx(vs2,rs1,v0);}
 
+define pcodeop vmsif_m;
 # vmsif.m        31..26=0x14 vm vs2 19..15=0x03 14..12=0x2 vd 6..0=0x57
 # vmsif.m vd, vs2, vm
-:vmsif.m  vd, vs2, vm is op2631=0x14 & vm & vs2 & op1519=0x3 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmsif.m  vd, vs2         is op2631=0x14 & op2525=1 & vs2 & op1519=0x3 & op1214=0x2 & vd & op0006=0x57 {vd=vmsif_m(vs2);}
+:vmsif.m  vd, vs2, "v0.t" is op2631=0x14 & op2525=0 & vs2 & op1519=0x3 & op1214=0x2 & vd & op0006=0x57 {vd=vmsif_m(vs2,v0);}
 
+define pcodeop vmsle_vi;
 # vmsle.vi       31..26=0x1d vm vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vmsle.vi vd, vs2, simm5, vm  # vector-immediate
-:vmsle.vi  vd, vs2, simm5, vm   is op2631=0x1d & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vmsle.vi  vd, vs2, simm5         is op2631=0x1d & op2525=1 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vmsle_vi(vs2,simm5);}
+:vmsle.vi  vd, vs2, simm5, "v0.t" is op2631=0x1d & op2525=0 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vmsle_vi(vs2,simm5,v0);}
 
+define pcodeop vmsle_vv;
 # vmsle.vv       31..26=0x1d vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vmsle.vv vd, vs2, vs1, vm  # Vector-vector
-:vmsle.vv  vd, vs2, vs1, vm   is op2631=0x1d & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vmsle.vv  vd, vs2, vs1         is op2631=0x1d & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmsle_vv(vs2,vs1);}
+:vmsle.vv  vd, vs2, vs1, "v0.t" is op2631=0x1d & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmsle_vv(vs2,vs1,v0);}
 
+define pcodeop vmsle_vx;
 # vmsle.vx       31..26=0x1d vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmsle.vx vd, vs2, rs1, vm  # vector-scalar
-:vmsle.vx  vd, vs2, rs1, vm   is op2631=0x1d & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vmsle.vx  vd, vs2, rs1         is op2631=0x1d & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmsle_vx(vs2,rs1);}
+:vmsle.vx  vd, vs2, rs1, "v0.t" is op2631=0x1d & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmsle_vx(vs2,rs1,v0);}
 
+define pcodeop vmsleu_vi;
 # vmsleu.vi      31..26=0x1c vm vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vmsleu.vi vd, vs2, simm5, vm   # Vector-immediate
-:vmsleu.vi  vd, vs2, simm5, vm    is op2631=0x1c & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vmsleu.vi  vd, vs2, simm5         is op2631=0x1c & op2525=1 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vmsleu_vi(vs2,simm5);}
+:vmsleu.vi  vd, vs2, simm5, "v0.t" is op2631=0x1c & op2525=0 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vmsleu_vi(vs2,simm5,v0);}
 
+define pcodeop vmsleu_vv;
 # vmsleu.vv      31..26=0x1c vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vmsleu.vv vd, vs2, vs1, vm   # Vector-vector
-:vmsleu.vv  vd, vs2, vs1, vm    is op2631=0x1c & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vmsleu.vv  vd, vs2, vs1         is op2631=0x1c & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmsleu_vv(vs2,vs1);}
+:vmsleu.vv  vd, vs2, vs1, "v0.t" is op2631=0x1c & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmsleu_vv(vs2,vs1,v0);}
 
+define pcodeop vmsleu_vx;
 # vmsleu.vx      31..26=0x1c vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmsleu.vx vd, vs2, rs1, vm   # vector-scalar
-:vmsleu.vx  vd, vs2, rs1, vm    is op2631=0x1c & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vmsleu.vx  vd, vs2, rs1         is op2631=0x1c & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmsleu_vx(vs2,rs1);}
+:vmsleu.vx  vd, vs2, rs1, "v0.t" is op2631=0x1c & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmsleu_vx(vs2,rs1,v0);}
 
+define pcodeop vmslt_vv;
 # vmslt.vv       31..26=0x1b vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vmslt.vv vd, vs2, vs1, vm  # Vector-vector
-:vmslt.vv  vd, vs2, vs1, vm   is op2631=0x1b & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vmslt.vv  vd, vs2, vs1         is op2631=0x1b & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmslt_vv(vs2,vs1);}
+:vmslt.vv  vd, vs2, vs1, "v0.t" is op2631=0x1b & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmslt_vv(vs2,vs1,v0);}
 
+define pcodeop vmslt_vx;
 # vmslt.vx       31..26=0x1b vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmslt.vx vd, vs2, rs1, vm  # vector-scalar
-:vmslt.vx  vd, vs2, rs1, vm   is op2631=0x1b & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vmslt.vx  vd, vs2, rs1         is op2631=0x1b & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmslt_vx(vs2,rs1);}
+:vmslt.vx  vd, vs2, rs1, "v0.t" is op2631=0x1b & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmslt_vx(vs2,rs1,v0);}
 
+define pcodeop vmsltu_vv;
 # vmsltu.vv      31..26=0x1a vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vmsltu.vv vd, vs2, vs1, vm  # Vector-vector
-:vmsltu.vv  vd, vs2, vs1, vm   is op2631=0x1a & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vmsltu.vv  vd, vs2, vs1         is op2631=0x1a & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmsltu_vv(vs2,vs1);}
+:vmsltu.vv  vd, vs2, vs1, "v0.t" is op2631=0x1a & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmsltu_vv(vs2,vs1,v0);}
 
+define pcodeop vmsltu_vx;
 # vmsltu.vx      31..26=0x1a vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmsltu.vx vd, vs2, rs1, vm  # Vector-scalar
-:vmsltu.vx  vd, vs2, rs1, vm   is op2631=0x1a & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vmsltu.vx  vd, vs2, rs1         is op2631=0x1a & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmsltu_vx(vs2,rs1);}
+:vmsltu.vx  vd, vs2, rs1, "v0.t" is op2631=0x1a & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmsltu_vx(vs2,rs1,v0);}
 
+define pcodeop vmsne_vi;
 # vmsne.vi       31..26=0x19 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vmsne.vi vd, vs2, simm5, vm  # vector-immediate
-:vmsne.vi  vd, vs2, simm5, vm   is op2631=0x19 & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vmsne.vi  vd, vs2, simm5         is op2631=0x19 & op2525=1 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vmsne_vi(vs2,simm5);}
+:vmsne.vi  vd, vs2, simm5, "v0.t" is op2631=0x19 & op2525=0 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vmsne_vi(vs2,simm5,v0);}
 
+define pcodeop vmsne_vv;
 # vmsne.vv       31..26=0x19 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vmsne.vv vd, vs2, vs1, vm  # Vector-vector
-:vmsne.vv  vd, vs2, vs1, vm   is op2631=0x19 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vmsne.vv  vd, vs2, vs1         is op2631=0x19 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmsne_vv(vs2,vs1);}
+:vmsne.vv  vd, vs2, vs1, "v0.t" is op2631=0x19 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmsne_vv(vs2,vs1,v0);}
 
+define pcodeop vmsne_vx;
 # vmsne.vx       31..26=0x19 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vmsne.vx vd, vs2, rs1, vm  # vector-scalar
-:vmsne.vx  vd, vs2, rs1, vm   is op2631=0x19 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vmsne.vx  vd, vs2, rs1         is op2631=0x19 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmsne_vx(vs2,rs1);}
+:vmsne.vx  vd, vs2, rs1, "v0.t" is op2631=0x19 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmsne_vx(vs2,rs1,v0);}
 
+define pcodeop vmsof_m;
 # vmsof.m        31..26=0x14 vm vs2 19..15=0x02 14..12=0x2 vd 6..0=0x57
 # vmsof.m vd, vs2, vm
-:vmsof.m  vd, vs2, vm is op2631=0x14 & vm & vs2 & op1519=0x2 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmsof.m  vd, vs2         is op2631=0x14 & op2525=1 & vs2 & op1519=0x2 & op1214=0x2 & vd & op0006=0x57 {vd=vmsof_m(vs2);}
+:vmsof.m  vd, vs2, "v0.t" is op2631=0x14 & op2525=0 & vs2 & op1519=0x2 & op1214=0x2 & vd & op0006=0x57 {vd=vmsof_m(vs2,v0);}
 
+define pcodeop vmul_vv;
 # vmul.vv        31..26=0x25 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vmul.vv vd, vs2, vs1, vm   # Vector-vector
-:vmul.vv  vd, vs2, vs1, vm    is op2631=0x25 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmul.vv  vd, vs2, vs1         is op2631=0x25 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmul_vv(vs2,vs1);}
+:vmul.vv  vd, vs2, vs1, "v0.t" is op2631=0x25 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmul_vv(vs2,vs1,v0);}
 
+define pcodeop vmul_vx;
 # vmul.vx        31..26=0x25 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vmul.vx vd, vs2, rs1, vm   # vector-scalar
-:vmul.vx  vd, vs2, rs1, vm    is op2631=0x25 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vmul.vx  vd, vs2, rs1         is op2631=0x25 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vmul_vx(vs2,rs1);}
+:vmul.vx  vd, vs2, rs1, "v0.t" is op2631=0x25 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vmul_vx(vs2,rs1,v0);}
 
+define pcodeop vmulh_vv;
 # vmulh.vv       31..26=0x27 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vmulh.vv vd, vs2, vs1, vm   # Vector-vector
-:vmulh.vv  vd, vs2, vs1, vm    is op2631=0x27 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmulh.vv  vd, vs2, vs1         is op2631=0x27 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmulh_vv(vs2,vs1);}
+:vmulh.vv  vd, vs2, vs1, "v0.t" is op2631=0x27 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmulh_vv(vs2,vs1,v0);}
 
+define pcodeop vmulh_vx;
 # vmulh.vx       31..26=0x27 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vmulh.vx vd, vs2, rs1, vm   # vector-scalar
-:vmulh.vx  vd, vs2, rs1, vm    is op2631=0x27 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vmulh.vx  vd, vs2, rs1         is op2631=0x27 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vmulh_vx(vs2,rs1);}
+:vmulh.vx  vd, vs2, rs1, "v0.t" is op2631=0x27 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vmulh_vx(vs2,rs1,v0);}
 
+define pcodeop vmulhsu_vv;
 # vmulhsu.vv     31..26=0x26 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vmulhsu.vv vd, vs2, vs1, vm   # Vector-vector
-:vmulhsu.vv  vd, vs2, vs1, vm    is op2631=0x26 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmulhsu.vv  vd, vs2, vs1         is op2631=0x26 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmulhsu_vv(vs2,vs1);}
+:vmulhsu.vv  vd, vs2, vs1, "v0.t" is op2631=0x26 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmulhsu_vv(vs2,vs1,v0);}
 
+define pcodeop vmulhsu_vx;
 # vmulhsu.vx     31..26=0x26 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vmulhsu.vx vd, vs2, rs1, vm   # vector-scalar
-:vmulhsu.vx  vd, vs2, rs1, vm    is op2631=0x26 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vmulhsu.vx  vd, vs2, rs1         is op2631=0x26 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vmulhsu_vx(vs2,rs1);}
+:vmulhsu.vx  vd, vs2, rs1, "v0.t" is op2631=0x26 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vmulhsu_vx(vs2,rs1,v0);}
 
+define pcodeop vmulhu_vv;
 # vmulhu.vv      31..26=0x24 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vmulhu.vv vd, vs2, vs1, vm   # Vector-vector
-:vmulhu.vv  vd, vs2, vs1, vm    is op2631=0x24 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmulhu.vv  vd, vs2, vs1         is op2631=0x24 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmulhu_vv(vs2,vs1);}
+:vmulhu.vv  vd, vs2, vs1, "v0.t" is op2631=0x24 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmulhu_vv(vs2,vs1,v0);}
 
+define pcodeop vmulhu_vx;
 # vmulhu.vx      31..26=0x24 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vmulhu.vx vd, vs2, rs1, vm   # vector-scalar
-:vmulhu.vx  vd, vs2, rs1, vm    is op2631=0x24 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vmulhu.vx  vd, vs2, rs1         is op2631=0x24 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vmulhu_vx(vs2,rs1);}
+:vmulhu.vx  vd, vs2, rs1, "v0.t" is op2631=0x24 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vmulhu_vx(vs2,rs1,v0);}
 
+define pcodeop vmv_sx;
 # vmv.s.x        31..26=0x10 25=1 24..20=0 rs1 14..12=0x6 vd 6..0=0x57
 # vmv.s.x vd, rs1  # vd[0] = x[rs1] (vs2=0)
-:vmv.s.x  vd, rs1   is op2631=0x10 & op2525=0x1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vmv.s.x  vd, rs1   is op2631=0x10 & op2525=0x1 & op2024=0x0 & rs1 & op1214=0x6 & vd & op0006=0x57  {vd=vmv_sx(rs1);}
 
+define pcodeop vmv_v_i;
 # vmv.v.i        31..26=0x17 25=1 24..20=0 simm5 14..12=0x3 vd 6..0=0x57
 # vmv.v.i vd, simm5 # vd[i] = imm
-:vmv.v.i  vd, simm5  is op2631=0x17 & op2525=0x1 & op2024=0x0 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vmv.v.i  vd, simm5  is op2631=0x17 & op2525=0x1 & op2024=0x0 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vmv_v_i(simm5);}
 
+define pcodeop vmv_v_v;
 # vmv.v.v        31..26=0x17 25=1 24..20=0 vs1 14..12=0x0 vd 6..0=0x57
 # vmv.v.v vd, vs1 # vd[i] = vs1[i]
-:vmv.v.v  vd, vs1  is op2631=0x17 & op2525=0x1 & op2024=0x0 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vmv.v.v  vd, vs1  is op2631=0x17 & op2525=0x1 & op2024=0x0 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vmv_v_v(vs1);}
 
+define pcodeop vmv_v_x;
 # vmv.v.x        31..26=0x17 25=1 24..20=0 rs1 14..12=0x4 vd 6..0=0x57
 # vmv.v.x vd, rs1 # vd[i] = rs1
-:vmv.v.x  vd, rs1  is op2631=0x17 & op2525=0x1 & op2024=0x0 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vmv.v.x  vd, rs1  is op2631=0x17 & op2525=0x1 & op2024=0x0 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vmv_v_x(rs1);}
 
 #TODO  this is broken
+define pcodeop vmv_x_s;
 # vmv.x.s        31..26=0x10 25=1 vs2 19..15=0 14..12=0x2 vd 6..0=0x57
 # vmv.x.s rd, vs2  # x[rd] = vs2[0] (rs1=0)
-:vmv.x.s  rd, vs2   is op2631=0x10 & op2525=0x1 & vs2 & op1519=0x0 & op1214=0x2 & rd & vd & op0006=0x57  unimpl
+:vmv.x.s  rd, vs2   is op2631=0x10 & op2525=0x1 & vs2 & op1519=0x0 & op1214=0x2 & rd & vd & op0006=0x57 {vd=vmv_x_s(vs2);}
 
+define pcodeop vmv1r_v;
 # vmv1r.v        31..26=0x27 25=1 vs2 19..15=0 14..12=0x3 vd 6..0=0x57
 # vmv1r.v  vd, vs2
-:vmv1r.v   vd, vs2 is op2631=0x27 & op2525=0x1 & vs2 & op1519=0x0 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vmv1r.v   vd, vs2 is op2631=0x27 & op2525=0x1 & vs2 & op1519=0x0 & op1214=0x3 & vd & op0006=0x57 {vd=vmv1r_v(vs2);}
 
+define pcodeop vmv2r_v;
 # vmv2r.v        31..26=0x27 25=1 vs2 19..15=1 14..12=0x3 vd 6..0=0x57
 # vmv2r.v  vd, vs2
-:vmv2r.v   vd, vs2 is op2631=0x27 & op2525=0x1 & vs2 & op1519=0x1 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vmv2r.v   vd, vs2 is op2631=0x27 & op2525=0x1 & vs2 & op1519=0x1 & op1214=0x3 & vd & op0006=0x57 {vd=vmv2r_v(vs2);}
 
+define pcodeop vmv4r_v;
 # vmv4r.v        31..26=0x27 25=1 vs2 19..15=3 14..12=0x3 vd 6..0=0x57
 # vmv4r.v  vd, vs2
-:vmv4r.v   vd, vs2 is op2631=0x27 & op2525=0x1 & vs2 & op1519=0x3 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vmv4r.v   vd, vs2 is op2631=0x27 & op2525=0x1 & vs2 & op1519=0x3 & op1214=0x3 & vd & op0006=0x57 {vd=vmv4r_v(vs2);}
 
+define pcodeop vmv8r_v;
 # vmv8r.v        31..26=0x27 25=1 vs2 19..15=7 14..12=0x3 vd 6..0=0x57
 # vmv8r.v  vd, vs2
-:vmv8r.v   vd, vs2 is op2631=0x27 & op2525=0x1 & vs2 & op1519=0x7 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vmv8r.v   vd, vs2 is op2631=0x27 & op2525=0x1 & vs2 & op1519=0x7 & op1214=0x3 & vd & op0006=0x57 {vd=vmv8r_v(vs2);}
 
+define pcodeop vmxnor_mm;
 # vmxnor.mm      31..26=0x1f vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vmxnor.mm vd, vs2, vs1    # vd[i] = !(vs2.mask[i] ^^  vs1.mask[i])
-:vmxnor.mm  vd, vs2, vs1     is op2631=0x1f & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmxnor.mm  vd, vs2, vs1     is op2631=0x1f & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmxnor_mm(vs2,vs1);}
 
+define pcodeop vmxor_mm;
 # vmxor.mm       31..26=0x1b vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vmxor.mm  vd, vs2, vs1    # vd[i] =   vs2.mask[i] ^^  vs1.mask[i]
-:vmxor.mm   vd, vs2, vs1     is op2631=0x1b & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vmxor.mm   vd, vs2, vs1     is op2631=0x1b & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vmxor_mm(vs2,vs1);}
 
-#TODO  this is broken
-# vnclip.wi      31..26=0x2f vm vs2 simm5 14..12=0x3 vd 6..0=0x57
-# vnclip.wi vd, vs2, simm5, vm  # vd[i] = clip(roundoff_signed(vs2[i], uimm5))
-:vnclip.wi  vd, vs2, simm5, vm   is op2631=0x2f & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+define pcodeop vnclip_wi;
+# vnclip.wi      31..26=0x2f vm vs2 uimm5 14..12=0x3 vd 6..0=0x57
+# vnclip.wi vd, vs2, uimm5, vm  # vd[i] = clip(roundoff_signed(vs2[i], uimm5))
+:vnclip.wi  vd, vs2, uimm5         is op2631=0x2f & op2525=1 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vnclip_wi(vs2,uimm5);}
+:vnclip.wi  vd, vs2, uimm5, "v0.t" is op2631=0x2f & op2525=0 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vnclip_wi(vs2,uimm5,v0);}
 
+define pcodeop vnclip_wv;
 # vnclip.wv      31..26=0x2f vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vnclip.wv vd, vs2, vs1, vm   # vd[i] = clip(roundoff_signed(vs2[i], vs1[i]))
-:vnclip.wv  vd, vs2, vs1, vm    is op2631=0x2f & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vnclip.wv  vd, vs2, vs1         is op2631=0x2f & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vnclip_wv(vs2,vs1);}
+:vnclip.wv  vd, vs2, vs1, "v0.t" is op2631=0x2f & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vnclip_wv(vs2,vs1,v0);}
 
+define pcodeop vnclip_wx;
 # vnclip.wx      31..26=0x2f vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vnclip.wx vd, vs2, rs1, vm   # vd[i] = clip(roundoff_signed(vs2[i], x[rs1]))
-:vnclip.wx  vd, vs2, rs1, vm    is op2631=0x2f & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vnclip.wx  vd, vs2, rs1         is op2631=0x2f & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vnclip_wx(vs2,rs1);}
+:vnclip.wx  vd, vs2, rs1, "v0.t" is op2631=0x2f & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vnclip_wx(vs2,rs1,v0);}
 
-#TODO  this is broken
-# vnclipu.wi     31..26=0x2e vm vs2 simm5 14..12=0x3 vd 6..0=0x57
-# vnclipu.wi vd, vs2, simm5, vm  # vd[i] = clip(roundoff_unsigned(vs2[i], uimm5))
-:vnclipu.wi  vd, vs2, simm5, vm   is op2631=0x2e & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+define pcodeop vnclipu_wi;
+# vnclipu.wi     31..26=0x2e vm vs2 uimm5 14..12=0x3 vd 6..0=0x57
+# vnclipu.wi vd, vs2, uimm5, vm  # vd[i] = clip(roundoff_unsigned(vs2[i], uimm5))
+:vnclipu.wi  vd, vs2, uimm5         is op2631=0x2e & op2525=1 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vnclipu_wi(vs2,uimm5);}
+:vnclipu.wi  vd, vs2, uimm5, "v0.t" is op2631=0x2e & op2525=0 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vnclipu_wi(vs2,uimm5,v0);}
 
+define pcodeop vnclipu_wv;
 # vnclipu.wv     31..26=0x2e vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vnclipu.wv vd, vs2, vs1, vm   # vd[i] = clip(roundoff_unsigned(vs2[i], vs1[i]))
-:vnclipu.wv  vd, vs2, vs1, vm    is op2631=0x2e & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vnclipu.wv  vd, vs2, vs1         is op2631=0x2e & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vnclipu_wv(vs2,vs1);}
+:vnclipu.wv  vd, vs2, vs1, "v0.t" is op2631=0x2e & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vnclipu_wv(vs2,vs1,v0);}
 
+define pcodeop vnclipu_wx;
 # vnclipu.wx     31..26=0x2e vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vnclipu.wx vd, vs2, rs1, vm   # vd[i] = clip(roundoff_unsigned(vs2[i], x[rs1]))
-:vnclipu.wx  vd, vs2, rs1, vm    is op2631=0x2e & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vnclipu.wx  vd, vs2, rs1         is op2631=0x2e & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vnclipu_wx(vs2,rs1);}
+:vnclipu.wx  vd, vs2, rs1, "v0.t" is op2631=0x2e & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vnclipu_wx(vs2,rs1,v0);}
 
+define pcodeop vnmsac_vv;
 # vnmsac.vv      31..26=0x2f vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vnmsac.vv vd, vs1, vs2, vm    # vd[i] = -(vs1[i] * vs2[i]) + vd[i]
-:vnmsac.vv  vd, vs1, vs2, vm     is op2631=0x2f & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vnmsac.vv  vd, vs1, vs2         is op2631=0x2f & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vnmsac_vv(vs1,vs2);}
+:vnmsac.vv  vd, vs1, vs2, "v0.t" is op2631=0x2f & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vnmsac_vv(vs1,vs2,v0);}
 
+define pcodeop vnmsac_vx;
 # vnmsac.vx      31..26=0x2f vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vnmsac.vx vd, rs1, vs2, vm    # vd[i] = -(x[rs1] * vs2[i]) + vd[i]
-:vnmsac.vx  vd, rs1, vs2, vm     is op2631=0x2f & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vnmsac.vx  vd, rs1, vs2         is op2631=0x2f & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vnmsac_vx(rs1,vs2);}
+:vnmsac.vx  vd, rs1, vs2, "v0.t" is op2631=0x2f & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vnmsac_vx(rs1,vs2,v0);}
 
+define pcodeop vnmsub_vv;
 # vnmsub.vv      31..26=0x2b vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vnmsub.vv vd, vs1, vs2, vm    # vd[i] = -(vs1[i] * vd[i]) + vs2[i]
-:vnmsub.vv  vd, vs1, vs2, vm     is op2631=0x2b & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vnmsub.vv  vd, vs1, vs2         is op2631=0x2b & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vnmsub_vv(vs1,vs2);}
+:vnmsub.vv  vd, vs1, vs2, "v0.t" is op2631=0x2b & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vnmsub_vv(vs1,vs2,v0);}
 
+define pcodeop vnmsub_vx;
 # vnmsub.vx      31..26=0x2b vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vnmsub.vx vd, rs1, vs2, vm    # vd[i] = -(x[rs1] * vd[i]) + vs2[i]
-:vnmsub.vx  vd, rs1, vs2, vm     is op2631=0x2b & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vnmsub.vx  vd, rs1, vs2         is op2631=0x2b & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vnmsub_vx(rs1,vs2);}
+:vnmsub.vx  vd, rs1, vs2, "v0.t" is op2631=0x2b & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vnmsub_vx(rs1,vs2,v0);}
 
-#TODO  this is broken
-# vnsra.wi       31..26=0x2d vm vs2 simm5 14..12=0x3 vd 6..0=0x57
-# vnsra.wi vd, vs2, simm5, vm   # vector-immediate
-:vnsra.wi  vd, vs2, simm5, vm    is op2631=0x2d & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+define pcodeop vnsra_wi;
+# vnsra.wi       31..26=0x2d vm vs2 uimm5 14..12=0x3 vd 6..0=0x57
+# vnsra.wi vd, vs2, uimm5, vm   # vector-immediate
+:vnsra.wi  vd, vs2, uimm5         is op2631=0x2d & op2525=1 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vnsra_wi(vs2,uimm5);}
+:vnsra.wi  vd, vs2, uimm5, "v0.t" is op2631=0x2d & op2525=0 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vnsra_wi(vs2,uimm5,v0);}
 
+define pcodeop vnsra_wv;
 # vnsra.wv       31..26=0x2d vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vnsra.wv vd, vs2, vs1, vm   # vector-vector
-:vnsra.wv  vd, vs2, vs1, vm    is op2631=0x2d & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vnsra.wv  vd, vs2, vs1         is op2631=0x2d & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vnsra_wv(vs2,vs1);}
+:vnsra.wv  vd, vs2, vs1, "v0.t" is op2631=0x2d & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vnsra_wv(vs2,vs1,v0);}
 
+define pcodeop vnsra_wx;
 # vnsra.wx       31..26=0x2d vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vnsra.wx vd, vs2, rs1, vm   # vector-scalar
-:vnsra.wx  vd, vs2, rs1, vm    is op2631=0x2d & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vnsra.wx  vd, vs2, rs1         is op2631=0x2d & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vnsra_wx(vs2,rs1);}
+:vnsra.wx  vd, vs2, rs1, "v0.t" is op2631=0x2d & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vnsra_wx(vs2,rs1,v0);}
 
-#TODO  this is broken
-# vnsrl.wi       31..26=0x2c vm vs2 simm5 14..12=0x3 vd 6..0=0x57
-# vnsrl.wi vd, vs2, simm5, vm   # vector-immediate
-:vnsrl.wi  vd, vs2, simm5, vm    is op2631=0x2c & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+define pcodeop vnsrl_wi;
+# vnsrl.wi       31..26=0x2c vm vs2 uimm5 14..12=0x3 vd 6..0=0x57
+# vnsrl.wi vd, vs2, uimm5, vm   # vector-immediate
+:vnsrl.wi  vd, vs2, uimm5         is op2631=0x2c & op2525=1 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vnsrl_wi(vs2,uimm5);}
+:vnsrl.wi  vd, vs2, uimm5, "v0.t" is op2631=0x2c & op2525=0 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vnsrl_wi(vs2,uimm5,v0);}
 
+define pcodeop vnsrl_wv;
 # vnsrl.wv       31..26=0x2c vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vnsrl.wv vd, vs2, vs1, vm   # vector-vector
-:vnsrl.wv  vd, vs2, vs1, vm    is op2631=0x2c & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vnsrl.wv  vd, vs2, vs1         is op2631=0x2c & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vnsrl_wv(vs2,vs1);}
+:vnsrl.wv  vd, vs2, vs1, "v0.t" is op2631=0x2c & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vnsrl_wv(vs2,vs1,v0);}
 
+define pcodeop vnsrl_wx;
+define pcodeop vncvt_xxw;
 # vnsrl.wx       31..26=0x2c vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vnsrl.wx vd, vs2, rs1, vm   # vector-scalar
-:vnsrl.wx  vd, vs2, rs1, vm    is op2631=0x2c & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vncvt.x.x.w  vd, vs2              is op2631=0x2c & op2525=1 & vs2 & op1519=0 & op1214=0x4 & vd & op0006=0x57 {vd=vncvt_xxw(vs2);}
+:vncvt.x.x.w  vd, vs2, "v0.t"      is op2631=0x2c & op2525=0 & vs2 & op1519=0 & op1214=0x4 & vd & op0006=0x57 {vd=vncvt_xxw(vs2,v0);}
+:vnsrl.wx     vd, vs2, rs1         is op2631=0x2c & op2525=1 & vs2 & rs1      & op1214=0x4 & vd & op0006=0x57 {vd=vnsrl_wx(vs2,rs1);}
+:vnsrl.wx     vd, vs2, rs1, "v0.t" is op2631=0x2c & op2525=0 & vs2 & rs1      & op1214=0x4 & vd & op0006=0x57 {vd=vnsrl_wx(vs2,rs1,v0);}
 
+define pcodeop vor_vi;
 # vor.vi         31..26=0x0a vm vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vor.vi vd, vs2, simm5, vm    # vector-immediate
-:vor.vi  vd, vs2, simm5, vm     is op2631=0xa & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vor.vi  vd, vs2, simm5         is op2631=0xa & op2525=1 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vor_vi(vs2,simm5);}
+:vor.vi  vd, vs2, simm5, "v0.t" is op2631=0xa & op2525=0 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vor_vi(vs2,simm5,v0);}
 
+define pcodeop vor_vv;
 # vor.vv          31..26=0x0a vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vor.vv vd, vs2, vs1, vm    # Vector-vector
-:vor.vv  vd, vs2, vs1, vm     is op2631=0xa & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vor.vv  vd, vs2, vs1         is op2631=0xa & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vor_vv(vs2,vs1);}
+:vor.vv  vd, vs2, vs1, "v0.t" is op2631=0xa & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vor_vv(vs2,vs1,v0);}
 
+define pcodeop vor_vx;
 # vor.vx         31..26=0x0a vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vor.vx vd, vs2, rs1, vm    # vector-scalar
-:vor.vx  vd, vs2, rs1, vm     is op2631=0xa & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vor.vx  vd, vs2, rs1         is op2631=0xa & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vor_vx(vs2,rs1);}
+:vor.vx  vd, vs2, rs1, "v0.t" is op2631=0xa & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vor_vx(vs2,rs1,v0);}
 
-# vpopc.m        31..26=0x10 vm vs2 19..15=0x10 14..12=0x2 rd 6..0=0x57
-# vpopc.m rd, vs2, vm # x[rd] = sum_i ( vs2.mask[i] &amp;&amp; v0.mask[i] )
-:vpopc.m  rd, vs2, vm is op2631=0x10 & vm & vs2 & op1519=0x10 & op1214=0x2 & rd & op0006=0x57  unimpl
+define pcodeop vcpop_m;
+# vcpop.m        31..26=0x10 vm vs2 19..15=0x10 14..12=0x2 rd 6..0=0x57
+# vcpop.m rd, vs2, vm # x[rd] = sum_i ( vs2.mask[i] &amp;&amp; v0.mask[i] )
+:vcpop.m  rd, vs2         is op2631=0x10 & op2525=1 & vs2 & op1519=0x10 & op1214=0x2 & rd & op0006=0x57 {rd=vcpop_m(vs2);}
+:vcpop.m  rd, vs2, "v0.t" is op2631=0x10 & op2525=0 & vs2 & op1519=0x10 & op1214=0x2 & rd & op0006=0x57 {rd=vcpop_m(vs2,v0);}
 
+define pcodeop vqmacc_vv;
 # vqmacc.vv      31..26=0x3d vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vqmacc.vv vd, vs1, vs2, vm # vd[i] = +(vs1[i] * vs2[i]) + vd[i]
-:vqmacc.vv  vd, vs1, vs2, vm  is op2631=0x3d & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vqmacc.vv  vd, vs1, vs2         is op2631=0x3d & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vqmacc_vv(vs1,vs2);}
+:vqmacc.vv  vd, vs1, vs2, "v0.t" is op2631=0x3d & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vqmacc_vv(vs1,vs2,v0);}
 
+define pcodeop vqmacc_vx;
 # vqmacc.vx      31..26=0x3d vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vqmacc.vx vd, rs1, vs2, vm # vd[i] = +(x[rs1] * vs2[i]) + vd[i]
-:vqmacc.vx  vd, rs1, vs2, vm  is op2631=0x3d & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vqmacc.vx  vd, rs1, vs2          is op2631=0x3d & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vqmacc_vx(rs1,vs2);}
+:vqmacc.vx  vd, rs1, vs2, "v0.t"  is op2631=0x3d & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vqmacc_vx(rs1,vs2,v0);}
 
+define pcodeop vqmaccsu_vv;
 # vqmaccsu.vv    31..26=0x3f vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vqmaccsu.vv vd, vs1, vs2, vm # vd[i] = +(signed(vs1[i]) * unsigned(vs2[i])) + vd[i]
-:vqmaccsu.vv  vd, vs1, vs2, vm  is op2631=0x3f & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vqmaccsu.vv  vd, vs1, vs2         is op2631=0x3f & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vqmaccsu_vv(vs1,vs2);}
+:vqmaccsu.vv  vd, vs1, vs2, "v0.t" is op2631=0x3f & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vqmaccsu_vv(vs1,vs2,v0);}
 
+define pcodeop vqmaccsu_vx;
 # vqmaccsu.vx    31..26=0x3f vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vqmaccsu.vx vd, rs1, vs2, vm # vd[i] = +(signed(x[rs1]) * unsigned(vs2[i])) + vd[i]
-:vqmaccsu.vx  vd, rs1, vs2, vm  is op2631=0x3f & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vqmaccsu.vx  vd, rs1, vs2         is op2631=0x3f & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vqmaccsu_vx(rs1,vs2);}
+:vqmaccsu.vx  vd, rs1, vs2, "v0.t" is op2631=0x3f & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vqmaccsu_vx(rs1,vs2,v0);}
 
+define pcodeop vqmaccu_vv;
 # vqmaccu.vv     31..26=0x3c vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vqmaccu.vv vd, vs1, vs2, vm # vd[i] = +(vs1[i] * vs2[i]) + vd[i]
-:vqmaccu.vv  vd, vs1, vs2, vm  is op2631=0x3c & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vqmaccu.vv  vd, vs1, vs2         is op2631=0x3c & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vqmaccu_vv(vs1,vs2);}
+:vqmaccu.vv  vd, vs1, vs2, "v0.t" is op2631=0x3c & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vqmaccu_vv(vs1,vs2,v0);}
 
+define pcodeop vqmaccu_vx;
 # vqmaccu.vx     31..26=0x3c vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vqmaccu.vx vd, rs1, vs2, vm # vd[i] = +(x[rs1] * vs2[i]) + vd[i]
-:vqmaccu.vx  vd, rs1, vs2, vm  is op2631=0x3c & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vqmaccu.vx  vd, rs1, vs2         is op2631=0x3c & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vqmaccu_vx(rs1,vs2);}
+:vqmaccu.vx  vd, rs1, vs2, "v0.t" is op2631=0x3c & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vqmaccu_vx(rs1,vs2,v0);}
 
+define pcodeop vqmaccus_vx;
 # vqmaccus.vx    31..26=0x3e vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vqmaccus.vx vd, rs1, vs2, vm # vd[i] = +(unsigned(x[rs1]) * signed(vs2[i])) + vd[i]
-:vqmaccus.vx  vd, rs1, vs2, vm  is op2631=0x3e & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vqmaccus.vx  vd, rs1, vs2         is op2631=0x3e & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vqmaccus_vx(rs1,vs2);}
+:vqmaccus.vx  vd, rs1, vs2, "v0.t" is op2631=0x3e & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vqmaccus_vx(rs1,vs2,v0);}
 
+define pcodeop vredand_vs;
 # vredand.vs     31..26=0x01 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vredand.vs  vd, vs2, vs1, vm   # vd[0] =  and( vs1[0] , vs2[*] )
-:vredand.vs   vd, vs2, vs1, vm    is op2631=0x1 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vredand.vs   vd, vs2, vs1         is op2631=0x1 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredand_vs(vs2,vs1);}
+:vredand.vs   vd, vs2, vs1, "v0.t" is op2631=0x1 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredand_vs(vs2,vs1,v0);}
 
+define pcodeop vredmax_vs;
 # vredmax.vs     31..26=0x07 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vredmax.vs  vd, vs2, vs1, vm   # vd[0] =  max( vs1[0] , vs2[*] )
-:vredmax.vs   vd, vs2, vs1, vm    is op2631=0x7 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vredmax.vs   vd, vs2, vs1         is op2631=0x7 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredmax_vs(vs2,vs1);}
+:vredmax.vs   vd, vs2, vs1, "v0.t" is op2631=0x7 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredmax_vs(vs2,vs1,v0);}
 
+define pcodeop vredmaxu_vs;
 # vredmaxu.vs    31..26=0x06 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vredmaxu.vs vd, vs2, vs1, vm   # vd[0] = maxu( vs1[0] , vs2[*] )
-:vredmaxu.vs  vd, vs2, vs1, vm    is op2631=0x6 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vredmaxu.vs  vd, vs2, vs1         is op2631=0x6 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredmaxu_vs(vs2,vs1);}
+:vredmaxu.vs  vd, vs2, vs1, "v0.t" is op2631=0x6 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredmaxu_vs(vs2,vs1,v0);}
 
+define pcodeop vredmin_vs;
 # vredmin.vs     31..26=0x05 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vredmin.vs  vd, vs2, vs1, vm   # vd[0] =  min( vs1[0] , vs2[*] )
-:vredmin.vs   vd, vs2, vs1, vm    is op2631=0x5 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vredmin.vs  vd, vs2, vs1         is op2631=0x5 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredmin_vs(vs2,vs1);}
+:vredmin.vs  vd, vs2, vs1, "v0.t" is op2631=0x5 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredmin_vs(vs2,vs1,v0);}
 
-# vredminu.vs    31..26=0x04 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
+define pcodeop vredminu_vs;
 # vredminu.vs vd, vs2, vs1, vm   # vd[0] = minu( vs1[0] , vs2[*] )
-:vredminu.vs  vd, vs2, vs1, vm    is op2631=0x4 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+#:vredminu.vs  vd, vs2, vs1, vm    is op2631=0x4 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57
+:vredminu.vs  vd, vs2, vs1         is op2631=0x4 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredminu_vs(vs2,vs1);}
+:vredminu.vs  vd, vs2, vs1, "v0.t" is op2631=0x4 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredminu_vs(vs2,vs1,v0);}
 
+define pcodeop vredor_vs;
 # vredor.vs      31..26=0x02 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vredor.vs   vd, vs2, vs1, vm   # vd[0] =   or( vs1[0] , vs2[*] )
-:vredor.vs    vd, vs2, vs1, vm    is op2631=0x2 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vredor.vs  vd, vs2, vs1         is op2631=0x2 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredor_vs(vs2,vs1);}
+:vredor.vs  vd, vs2, vs1, "v0.t" is op2631=0x2 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredor_vs(vs2,vs1,v0);}
 
+define pcodeop vredsum_vs;
 # vredsum.vs     31..26=0x00 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vredsum.vs  vd, vs2, vs1, vm   # vd[0] =  sum( vs1[0] , vs2[*] )
-:vredsum.vs   vd, vs2, vs1, vm    is op2631=0x0 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vredsum.vs   vd, vs2, vs1         is op2631=0x0 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredsum_vs(vs2,vs1);}
+:vredsum.vs   vd, vs2, vs1, "v0.t" is op2631=0x0 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredsum_vs(vs2,vs1,v0);}
 
+define pcodeop vredxor_vs;
 # vredxor.vs     31..26=0x03 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vredxor.vs  vd, vs2, vs1, vm   # vd[0] =  xor( vs1[0] , vs2[*] )
-:vredxor.vs   vd, vs2, vs1, vm    is op2631=0x3 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vredxor.vs   vd, vs2, vs1         is op2631=0x3 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredxor_vs(vs2,vs1);}
+:vredxor.vs   vd, vs2, vs1, "v0.t" is op2631=0x3 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vredxor_vs(vs2,vs1,v0);}
 
+define pcodeop vrem_vv;
 # vrem.vv        31..26=0x23 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vrem.vv vd, vs2, vs1, vm   # Vector-vector
-:vrem.vv  vd, vs2, vs1, vm    is op2631=0x23 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vrem.vv  vd, vs2, vs1         is op2631=0x23 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vrem_vv(vs2,vs1);}
+:vrem.vv  vd, vs2, vs1, "v0.t" is op2631=0x23 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vrem_vv(vs2,vs1,v0);}
 
+define pcodeop vrem_vx;
 # vrem.vx        31..26=0x23 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vrem.vx vd, vs2, rs1, vm   # vector-scalar
-:vrem.vx  vd, vs2, rs1, vm    is op2631=0x23 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vrem.vx  vd, vs2, rs1         is op2631=0x23 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vrem_vx(vs2,rs1);}
+:vrem.vx  vd, vs2, rs1, "v0.t" is op2631=0x23 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vrem_vx(vs2,rs1,v0);}
 
+define pcodeop vremu_vv;
 # vremu.vv       31..26=0x22 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vremu.vv vd, vs2, vs1, vm   # Vector-vector
-:vremu.vv  vd, vs2, vs1, vm    is op2631=0x22 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vremu.vv  vd, vs2, vs1         is op2631=0x22 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vremu_vv(vs2,vs1);}
+:vremu.vv  vd, vs2, vs1, "v0.t" is op2631=0x22 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vremu_vv(vs2,vs1,v0);}
 
+define pcodeop vremu_vx;
 # vremu.vx       31..26=0x22 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vremu.vx vd, vs2, rs1, vm   # vector-scalar
-:vremu.vx  vd, vs2, rs1, vm    is op2631=0x22 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vremu.vx  vd, vs2, rs1         is op2631=0x22 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vremu_vx(vs2,rs1);}
+:vremu.vx  vd, vs2, rs1, "v0.t" is op2631=0x22 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vremu_vx(vs2,rs1,v0);}
 
-#TODO  this is broken
-# vrgather.vi    31..26=0x0c vm vs2 simm5 14..12=0x3 vd 6..0=0x57
-# vrgather.vi vd, vs2, simm5, vm # vd[i] = (uimm &gt;= VLMAX) ? 0 : vs2[uimm]
-:vrgather.vi  vd, vs2, simm5, vm  is op2631=0xc & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+define pcodeop vrgather_vi;
+# vrgather.vi    31..26=0x0c vm vs2 uimm5 14..12=0x3 vd 6..0=0x57
+# vrgather.vi vd, vs2, uimm5, vm # vd[i] = (uimm &gt;= VLMAX) ? 0 : vs2[uimm]
+:vrgather.vi  vd, vs2, uimm5         is op2631=0xc & op2525=1 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vrgather_vi(vs2,uimm5);}
+:vrgather.vi  vd, vs2, uimm5, "v0.t" is op2631=0xc & op2525=0 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vrgather_vi(vs2,uimm5,v0);}
 
+define pcodeop vrgather_vv;
 # vrgather.vv     31..26=0x0c vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vrgather.vv vd, vs2, vs1, vm # vd[i] = (vs1[i] &gt;= VLMAX) ? 0 : vs2[vs1[i]];
-:vrgather.vv  vd, vs2, vs1, vm  is op2631=0xc & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vrgather.vv  vd, vs2, vs1         is op2631=0xc & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vrgather_vv(vs2,vs1);}
+:vrgather.vv  vd, vs2, vs1, "v0.t" is op2631=0xc & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vrgather_vv(vs2,vs1,v0);}
 
+define pcodeop vrgather_vx;
 # vrgather.vx    31..26=0x0c vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vrgather.vx vd, vs2, rs1, vm # vd[i] = (x[rs1] &gt;= VLMAX) ? 0 : vs2[x[rs1]]
-:vrgather.vx  vd, vs2, rs1, vm  is op2631=0xc & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vrgather.vx  vd, vs2, rs1         is op2631=0xc & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vrgather_vx(vs2,rs1);}
+:vrgather.vx  vd, vs2, rs1, "v0.t" is op2631=0xc & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vrgather_vx(vs2,rs1,v0);}
 
+define pcodeop vrgatherei16_vv;
 # vrgatherei16.vv 31..26=0x0e vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vrgatherei16.vv vd, vs2, vs1, vm # vd[i] = (vs1[i] &gt;= VLMAX) ? 0 : vs2[vs1[i]];
-:vrgatherei16.vv  vd, vs2, vs1, vm  is op2631=0xe & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vrgatherei16.vv  vd, vs2, vs1         is op2631=0xe & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vrgatherei16_vv(vs2,vs1);}
+:vrgatherei16.vv  vd, vs2, vs1, "v0.t" is op2631=0xe & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vrgatherei16_vv(vs2,vs1,v0);}
 
+define pcodeop vrsub_vi;
 # vrsub.vi       31..26=0x03 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vrsub.vi vd, vs2, simm5, vm   # vd[i] = imm - vs2[i]
-:vrsub.vi  vd, vs2, simm5, vm    is op2631=0x3 & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vrsub.vi  vd, vs2, simm5         is op2631=0x3 & op2525=1 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vrsub_vi(vs2,simm5);}
+:vrsub.vi  vd, vs2, simm5, "v0.t" is op2631=0x3 & op2525=0 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vrsub_vi(vs2,simm5,v0);}
 
+define pcodeop vneg_v;
+define pcodeop vrsub_vx;
 # vrsub.vx       31..26=0x03 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vrsub.vx vd, vs2, rs1, vm   # vd[i] = rs1 - vs2[i]
-:vrsub.vx  vd, vs2, rs1, vm    is op2631=0x3 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vneg.v    vd, vs2               is op2631=0x3 & op2525=1 & vs2 & op1519=0 & op1214=0x4 & vd & op0006=0x57 {vd=vneg_v(vs2);}
+:vneg.v    vd, vs2, "v0.t"       is op2631=0x3 & op2525=0 & vs2 & op1519=0 & op1214=0x4 & vd & op0006=0x57 {vd=vneg_v(vs2,v0);}
+:vrsub.vx  vd, vs2, rs1          is op2631=0x3 & op2525=1 & vs2 & rs1      & op1214=0x4 & vd & op0006=0x57 {vd=vrsub_vx(vs2,rs1);}
+:vrsub.vx  vd, vs2, rs1, "v0.t"  is op2631=0x3 & op2525=0 & vs2 & rs1      & op1214=0x4 & vd & op0006=0x57 {vd=vrsub_vx(vs2,rs1,v0);}
 
+define pcodeop vs1r_v;
 # vs1r.v         31..29=0 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vs3 6..0=0x27
 # vs1r.v   vs3, (rs1)
-:vs1r.v    vs3, (rs1) is op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vs3 & op0006=0x27  unimpl
+:vs1r.v    vs3, (rs1) is op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vs1r_v(vs3,rs1);}
 
+define pcodeop vs2r_v;
 # vs2r.v         31..29=1 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vs3 6..0=0x27
 # vs2r.v   vs3, (rs1)
-:vs2r.v    vs3, (rs1) is op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vs3 & op0006=0x27  unimpl
+:vs2r.v    vs3, (rs1) is op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vs2r_v(vs3,rs1);}
 
+define pcodeop vs4r_v;
 # vs4r.v         31..29=3 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vs3 6..0=0x27
 # vs4r.v   vs3, (rs1)
-:vs4r.v    vs3, (rs1) is op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vs3 & op0006=0x27  unimpl
+:vs4r.v    vs3, (rs1) is op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vs4r_v(vs3,rs1);}
 
+define pcodeop vs8r_v;
 # vs8r.v         31..29=7 28=0 27..26=0 25=1 24..20=0x08 rs1 14..12=0x0 vs3 6..0=0x27
 # vs8r.v   vs3, (rs1)
-:vs8r.v    vs3, (rs1) is op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vs3 & op0006=0x27  unimpl
+:vs8r.v    vs3, (rs1) is op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=0x1 & op2024=0x8 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vs8r_v(vs3,rs1);}
 
+define pcodeop vsadd_vi;
 # vsadd.vi       31..26=0x21 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vsadd.vi vd, vs2, simm5, vm   # vector-immediate
-:vsadd.vi  vd, vs2, simm5, vm    is op2631=0x21 & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vsadd.vi  vd, vs2, simm5         is op2631=0x21 & op2525=1 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vsadd_vi(vs2,simm5);}
+:vsadd.vi  vd, vs2, simm5, "v0.t" is op2631=0x21 & op2525=0 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vsadd_vi(vs2,simm5,v0);}
 
+define pcodeop vsadd_vv;
 # vsadd.vv       31..26=0x21 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vsadd.vv vd, vs2, vs1, vm   # Vector-vector
-:vsadd.vv  vd, vs2, vs1, vm    is op2631=0x21 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vsadd.vv  vd, vs2, vs1         is op2631=0x21 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsadd_vv(vs2,vs1);}
+:vsadd.vv  vd, vs2, vs1, "v0.t" is op2631=0x21 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsadd_vv(vs2,vs1,v0);}
 
+define pcodeop vsadd_vx;
 # vsadd.vx       31..26=0x21 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vsadd.vx vd, vs2, rs1, vm   # vector-scalar
-:vsadd.vx  vd, vs2, rs1, vm    is op2631=0x21 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vsadd.vx  vd, vs2, rs1         is op2631=0x21 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsadd_vx(vs2,rs1);}
+:vsadd.vx  vd, vs2, rs1, "v0.t" is op2631=0x21 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsadd_vx(vs2,rs1,v0);}
 
+define pcodeop vsaddu_vi;
 # vsaddu.vi      31..26=0x20 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vsaddu.vi vd, vs2, simm5, vm   # vector-immediate
-:vsaddu.vi  vd, vs2, simm5, vm    is op2631=0x20 & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vsaddu.vi  vd, vs2, simm5         is op2631=0x20 & op2525=1 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vsaddu_vi(vs2,simm5);}
+:vsaddu.vi  vd, vs2, simm5, "v0.t" is op2631=0x20 & op2525=0 & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57 {vd=vsaddu_vi(vs2,simm5,v0);}
 
+define pcodeop vsaddu_vv;
 # vsaddu.vv      31..26=0x20 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vsaddu.vv vd, vs2, vs1, vm   # Vector-vector
-:vsaddu.vv  vd, vs2, vs1, vm    is op2631=0x20 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vsaddu.vv  vd, vs2, vs1         is op2631=0x20 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsaddu_vv(vs2,vs1);}
+:vsaddu.vv  vd, vs2, vs1, "v0.t" is op2631=0x20 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsaddu_vv(vs2,vs1,v0);}
 
+define pcodeop vsaddu_vx;
 # vsaddu.vx      31..26=0x20 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vsaddu.vx vd, vs2, rs1, vm   # vector-scalar
-:vsaddu.vx  vd, vs2, rs1, vm    is op2631=0x20 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vsaddu.vx  vd, vs2, rs1         is op2631=0x20 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsaddu_vx(vs2,rs1);}
+:vsaddu.vx  vd, vs2, rs1, "v0.t" is op2631=0x20 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsaddu_vx(vs2,rs1,v0);}
 
+define pcodeop vsbc_vvm;
 # vsbc.vvm       31..26=0x12 25=0 vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vsbc.vvm   vd, vs2, vs1, v0  # Vector-vector
-:vsbc.vvm    vd, vs2, vs1, v0   is op2631=0x12 & op2525=0x0 & vs2 & vs1 & op1214=0x0 & v0 & vd & op0006=0x57  unimpl
+:vsbc.vvm    vd, vs2, vs1, v0   is op2631=0x12 & op2525=0x0 & vs2 & vs1 & op1214=0x0 & v0 & vd & op0006=0x57 {vd=vsbc_vvm(vs2,vs1,v0);}
 
+define pcodeop vsbc_vxm;
 # vsbc.vxm       31..26=0x12 25=0 vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vsbc.vxm   vd, vs2, rs1, v0  # Vector-scalar
-:vsbc.vxm    vd, vs2, rs1, v0   is op2631=0x12 & op2525=0x0 & vs2 & rs1 & op1214=0x4 & v0 & vd & op0006=0x57  unimpl
+:vsbc.vxm    vd, vs2, rs1, v0   is op2631=0x12 & op2525=0x0 & vs2 & rs1 & op1214=0x4 & v0 & vd & op0006=0x57  {vd=vsbc_vvm(vs2,rs1,v0);}
 
+define pcodeop vse1024_v;
 # vse1024.v      nf 28=1 27..26=0 vm 24..20=0 rs1 14..12=0x7 vs3 6..0=0x27
 # vse1024.v vs3, (rs1), vm  # 1024-bit unit-stride store
-:vse1024.v  vs3, (rs1), vm   is nf & op2828=0x1 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27  unimpl
+:vse1024.v      vs3, (rs1),          is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vse1024_v(vs3,rs1);}
+:vse1024.v      vs3, (rs1), "v0.t"   is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vse1024_v(vs3,rs1,v0);}
+
+define pcodeop vsseq2e1024_v;
+:vsseg2e1024.v  vs3, (rs1),          is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq2e1024_v(vs3,rs1);}
+:vsseg2e1024.v  vs3, (rs1), "v0.t"   is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq2e1024_v(vs3,rs1,v0);}
+
+define pcodeop vsseq3e1024_v;
+:vsseg3e1024.v  vs3, (rs1),          is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq3e1024_v(vs3,rs1);}
+:vsseg3e1024.v  vs3, (rs1), "v0.t"   is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq3e1024_v(vs3,rs1,v0);}
+
+define pcodeop vsseq4e1024_v;
+:vsseg4e1024.v  vs3, (rs1),          is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq4e1024_v(vs3,rs1);}
+:vsseg4e1024.v  vs3, (rs1), "v0.t"   is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq4e1024_v(vs3,rs1,v0);}
 
+define pcodeop vsseq5e1024_v;
+:vsseg5e1024.v  vs3, (rs1),          is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq5e1024_v(vs3,rs1);}
+:vsseg5e1024.v  vs3, (rs1), "v0.t"   is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq5e1024_v(vs3,rs1,v0);}
+
+define pcodeop vsseq6e1024_v;
+:vsseg6e1024.v  vs3, (rs1),          is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq6e1024_v(vs3,rs1);}
+:vsseg6e1024.v  vs3, (rs1), "v0.t"   is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq6e1024_v(vs3,rs1,v0);}
+
+define pcodeop vsseq7e1024_v;
+:vsseg7e1024.v  vs3, (rs1),          is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq7e1024_v(vs3,rs1);}
+:vsseg7e1024.v  vs3, (rs1), "v0.t"   is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq7e1024_v(vs3,rs1,v0);}
+
+define pcodeop vsseq8e1024_v;
+:vsseg8e1024.v  vs3, (rs1),          is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq8e1024_v(vs3,rs1);}
+:vsseg8e1024.v  vs3, (rs1), "v0.t"   is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseq8e1024_v(vs3,rs1,v0);}
+
+define pcodeop vse128_v;
 # vse128.v       nf 28=1 27..26=0 vm 24..20=0 rs1 14..12=0x0 vs3 6..0=0x27
 # vse128.v  vs3, (rs1), vm  #  128-bit unit-stride store
-:vse128.v   vs3, (rs1), vm   is nf & op2828=0x1 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27  unimpl
+:vse128.v       vs3, (rs1)           is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vse128_v(vs3,rs1);}
+:vse128.v       vs3, (rs1), "v0.t"   is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vse128_v(vs3,rs1,v0);}
+
+define pcodeop vsseg2e128_v;
+:vsseg2e128.v   vs3, (rs1)           is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg2e128_v(vs3,rs1);}
+:vsseg2e128.v   vs3, (rs1), "v0.t"   is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg2e128_v(vs3,rs1,v0);}
+
+define pcodeop vsseg3e128_v;
+:vsseg3e128.v   vs3, (rs1)           is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg3e128_v(vs3,rs1);}
+:vsseg3e128.v   vs3, (rs1), "v0.t"   is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg3e128_v(vs3,rs1,v0);}
+
+define pcodeop vsseg4e128_v;
+:vsseg4e128.v   vs3, (rs1)           is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg4e128_v(vs3,rs1);}
+:vsseg4e128.v   vs3, (rs1), "v0.t"   is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg4e128_v(vs3,rs1,v0);}
 
+define pcodeop vsseg5e128_v;
+:vsseg5e128.v   vs3, (rs1)           is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg5e128_v(vs3,rs1);}
+:vsseg5e128.v   vs3, (rs1), "v0.t"   is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg5e128_v(vs3,rs1,v0);}
+
+define pcodeop vsseg6e128_v;
+:vsseg6e128.v   vs3, (rs1)           is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg6e128_v(vs3,rs1);}
+:vsseg6e128.v   vs3, (rs1), "v0.t"   is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg6e128_v(vs3,rs1,v0);}
+
+define pcodeop vsseg7e128_v;
+:vsseg7e128.v   vs3, (rs1)           is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg7e128_v(vs3,rs1);}
+:vsseg7e128.v   vs3, (rs1), "v0.t"   is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg7e128_v(vs3,rs1,v0);}
+
+define pcodeop vsseg8e128_v;
+:vsseg8e128.v   vs3, (rs1)           is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg8e128_v(vs3,rs1);}
+:vsseg8e128.v   vs3, (rs1), "v0.t"   is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg8e128_v(vs3,rs1,v0);}
+
+define pcodeop vse16_v;
 # vse16.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x5 vs3 6..0=0x27
-# vse16.v   vs3, (rs1), vm  #   16-bit unit-stride store
-:vse16.v    vs3, (rs1), vm   is nf & op2828=0x0 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27  unimpl
+# vse16.v       vs3, (rs1), vm  #   16-bit unit-stride store
+:vse16.v        vs3, (rs1)           is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vse16_v(vs3,rs1);}
+:vse16.v        vs3, (rs1), "v0.t"   is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vse16_v(vs3,rs1,v0);}
+
+define pcodeop vsseg2e16_v;
+:vsseg2e16.v    vs3, (rs1)           is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg2e16_v(vs3,rs1);}
+:vsseg2e16.v    vs3, (rs1), "v0.t"   is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg2e16_v(vs3,rs1,v0);}
+
+define pcodeop vsseg3e16_v;
+:vsseg3e16.v    vs3, (rs1)           is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg3e16_v(vs3,rs1);}
+:vsseg3e16.v    vs3, (rs1), "v0.t"   is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg3e16_v(vs3,rs1,v0);}
 
+define pcodeop vsseg4e16_v;
+:vsseg4e16.v    vs3, (rs1)           is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg4e16_v(vs3,rs1);}
+:vsseg4e16.v    vs3, (rs1), "v0.t"   is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg4e16_v(vs3,rs1,v0);}
+
+define pcodeop vsseg5e16_v;
+:vsseg5e16.v    vs3, (rs1)           is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg5e16_v(vs3,rs1);}
+:vsseg5e16.v    vs3, (rs1), "v0.t"   is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg5e16_v(vs3,rs1,v0);}
+
+define pcodeop vsseg6e16_v;
+:vsseg6e16.v    vs3, (rs1)           is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg6e16_v(vs3,rs1);}
+:vsseg6e16.v    vs3, (rs1), "v0.t"   is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg6e16_v(vs3,rs1,v0);}
+
+define pcodeop vsseg7e16_v;
+:vsseg7e16.v    vs3, (rs1)           is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg7e16_v(vs3,rs1);}
+:vsseg7e16.v    vs3, (rs1), "v0.t"   is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg7e16_v(vs3,rs1,v0);}
+
+define pcodeop vsseg8e16_v;
+:vsseg8e16.v    vs3, (rs1)           is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg8e16_v(vs3,rs1);}
+:vsseg8e16.v    vs3, (rs1), "v0.t"   is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg8e16_v(vs3,rs1,v0);}
+
+define pcodeop vse256_v;
 # vse256.v       nf 28=1 27..26=0 vm 24..20=0 rs1 14..12=0x5 vs3 6..0=0x27
 # vse256.v  vs3, (rs1), vm  #  256-bit unit-stride store
-:vse256.v   vs3, (rs1), vm   is nf & op2828=0x1 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27  unimpl
+:vse256.v       vs3, (rs1)           is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vse256_v(vs3,rs1);}
+:vse256.v       vs3, (rs1), "v0.t"   is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vse256_v(vs3,rs1,v0);}
+
+define pcodeop vsseg2e256_v;
+:vsseg2e256.v   vs3, (rs1)           is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg2e256_v(vs3,rs1);}
+:vsseg2e256.v   vs3, (rs1), "v0.t"   is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg2e256_v(vs3,rs1,v0);}
+
+define pcodeop vsseg3e256_v;
+:vsseg3e256.v   vs3, (rs1)           is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg3e256_v(vs3,rs1);}
+:vsseg3e256.v   vs3, (rs1), "v0.t"   is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg3e256_v(vs3,rs1,v0);}
 
+define pcodeop vsseg4e256_v;
+:vsseg4e256.v   vs3, (rs1)           is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg4e256_v(vs3,rs1);}
+:vsseg4e256.v   vs3, (rs1), "v0.t"   is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg4e256_v(vs3,rs1,v0);}
+
+define pcodeop vsseg5e256_v;
+:vsseg5e256.v   vs3, (rs1)           is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg5e256_v(vs3,rs1);}
+:vsseg5e256.v   vs3, (rs1), "v0.t"   is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg5e256_v(vs3,rs1,v0);}
+
+define pcodeop vsseg6e256_v;
+:vsseg6e256.v   vs3, (rs1)           is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg6e256_v(vs3,rs1);}
+:vsseg6e256.v   vs3, (rs1), "v0.t"   is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg6e256_v(vs3,rs1,v0);}
+
+define pcodeop vsseg7e256_v;
+:vsseg7e256.v   vs3, (rs1)           is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg7e256_v(vs3,rs1);}
+:vsseg7e256.v   vs3, (rs1), "v0.t"   is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg7e256_v(vs3,rs1,v0);}
+
+define pcodeop vsseg8e256_v;
+:vsseg8e256.v   vs3, (rs1)           is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg8e256_v(vs3,rs1);}
+:vsseg8e256.v   vs3, (rs1), "v0.t"   is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsseg8e256_v(vs3,rs1,v0);}
+
+define pcodeop vse32_v;
 # vse32.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x6 vs3 6..0=0x27
 # vse32.v   vs3, (rs1), vm  #   32-bit unit-stride store
-:vse32.v    vs3, (rs1), vm   is nf & op2828=0x0 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27  unimpl
+:vse32.v        vs3, (rs1)           is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vse32_v(vs3,rs1);}
+:vse32.v        vs3, (rs1), "v0.t"   is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vse32_v(vs3,rs1,v0);}
+
+define pcodeop vsseg2e32_v;
+:vsseg2e32.v    vs3, (rs1)           is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg2e32_v(vs3,rs1);}
+:vsseg2e32.v    vs3, (rs1), "v0.t"   is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg2e32_v(vs3,rs1,v0);}
 
+define pcodeop vsseg3e32_v;
+:vsseg3e32.v    vs3, (rs1)           is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg3e32_v(vs3,rs1);}
+:vsseg3e32.v    vs3, (rs1), "v0.t"   is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg3e32_v(vs3,rs1,v0);}
+
+define pcodeop vsseg4e32_v;
+:vsseg4e32.v    vs3, (rs1)           is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg4e32_v(vs3,rs1);}
+:vsseg4e32.v    vs3, (rs1), "v0.t"   is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg4e32_v(vs3,rs1,v0);}
+
+define pcodeop vsseg5e32_v;
+:vsseg5e32.v    vs3, (rs1)           is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg5e32_v(vs3,rs1);}
+:vsseg5e32.v    vs3, (rs1), "v0.t"   is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg5e32_v(vs3,rs1,v0);}
+
+define pcodeop vsseg6e32_v;
+:vsseg6e32.v    vs3, (rs1)           is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg6e32_v(vs3,rs1);}
+:vsseg6e32.v    vs3, (rs1), "v0.t"   is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg6e32_v(vs3,rs1,v0);}
+
+define pcodeop vsseg7e32_v;
+:vsseg7e32.v    vs3, (rs1)           is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg7e32_v(vs3,rs1);}
+:vsseg7e32.v    vs3, (rs1), "v0.t"   is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg7e32_v(vs3,rs1,v0);}
+
+define pcodeop vsseg8e32_v;
+:vsseg8e32.v    vs3, (rs1)           is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg8e32_v(vs3,rs1);}
+:vsseg8e32.v    vs3, (rs1), "v0.t"   is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg8e32_v(vs3,rs1,v0);}
+
+define pcodeop vse512_v;
 # vse512.v       nf 28=1 27..26=0 vm 24..20=0 rs1 14..12=0x6 vs3 6..0=0x27
 # vse512.v  vs3, (rs1), vm  #  512-bit unit-stride store
-:vse512.v   vs3, (rs1), vm   is nf & op2828=0x1 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27  unimpl
+:vse512.v   vs3, (rs1)           is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vse512_v(vs3,rs1);}
+:vse512.v   vs3, (rs1), "v0.t"   is nf & op2931=0 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vse512_v(vs3,rs1,v0);}
+
+define pcodeop vsseg2e512_v;
+:vsseg2e512.v   vs3, (rs1)           is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg2e512_v(vs3,rs1);}
+:vsseg2e512.v   vs3, (rs1), "v0.t"   is nf & op2931=1 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg2e512_v(vs3,rs1,v0);}
+
+define pcodeop vsseg3e512_v;
+:vsseg3e512.v   vs3, (rs1)           is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg3e512_v(vs3,rs1);}
+:vsseg3e512.v   vs3, (rs1), "v0.t"   is nf & op2931=2 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg3e512_v(vs3,rs1,v0);}
+
+define pcodeop vsseg4e512_v;
+:vsseg4e512.v   vs3, (rs1)           is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg4e512_v(vs3,rs1);}
+:vsseg4e512.v   vs3, (rs1), "v0.t"   is nf & op2931=3 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg4e512_v(vs3,rs1,v0);}
+
+define pcodeop vsseg5e512_v;
+:vsseg5e512.v   vs3, (rs1)           is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg5e512_v(vs3,rs1);}
+:vsseg5e512.v   vs3, (rs1), "v0.t"   is nf & op2931=4 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg5e512_v(vs3,rs1,v0);}
+
+define pcodeop vsseg6e512_v;
+:vsseg6e512.v   vs3, (rs1)           is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg6e512_v(vs3,rs1);}
+:vsseg6e512.v   vs3, (rs1), "v0.t"   is nf & op2931=5 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg6e512_v(vs3,rs1,v0);}
+
+define pcodeop vsseg7e512_v;
+:vsseg7e512.v   vs3, (rs1)           is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg7e512_v(vs3,rs1);}
+:vsseg7e512.v   vs3, (rs1), "v0.t"   is nf & op2931=6 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg7e512_v(vs3,rs1,v0);}
+
+define pcodeop vsseg8e512_v;
+:vsseg8e512.v   vs3, (rs1)           is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg8e512_v(vs3,rs1);}
+:vsseg8e512.v   vs3, (rs1), "v0.t"   is nf & op2931=7 & op2828=0x1 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsseg8e512_v(vs3,rs1,v0);}
 
+define pcodeop vse64_v;
 # vse64.v        nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x7 vs3 6..0=0x27
 # vse64.v   vs3, (rs1), vm  #   64-bit unit-stride store
-:vse64.v    vs3, (rs1), vm   is nf & op2828=0x0 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27  unimpl
+:vse64.v    vs3, (rs1)           is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {*:64 rs1=vse64_v(vs3);}
+:vse64.v    vs3, (rs1), "v0.t"   is nf & op2931=0 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {*:64 rs1=vse64_v(vs3,v0);}
 
+define pcodeop vsseg2e64_v;
+:vsseg2e64.v    vs3, (rs1)           is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg2e64_v(vs3,rs1);}
+:vsseg2e64.v    vs3, (rs1), "v0.t"   is nf & op2931=1 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg2e64_v(vs3,rs1,v0);}
+
+define pcodeop vsseg3e64_v;
+:vsseg3e64.v    vs3, (rs1)           is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg3e64_v(vs3,rs1);}
+:vsseg3e64.v    vs3, (rs1), "v0.t"   is nf & op2931=2 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg3e64_v(vs3,rs1,v0);}
+
+define pcodeop vsseg4e64_v;
+:vsseg4e64.v    vs3, (rs1)           is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg4e64_v(vs3,rs1);}
+:vsseg4e64.v    vs3, (rs1), "v0.t"   is nf & op2931=3 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg4e64_v(vs3,rs1,v0);}
+
+define pcodeop vsseg5e64_v;
+:vsseg5e64.v    vs3, (rs1)           is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg5e64_v(vs3,rs1);}
+:vsseg5e64.v    vs3, (rs1), "v0.t"   is nf & op2931=4 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg5e64_v(vs3,rs1,v0);}
+
+define pcodeop vsseg6e64_v;
+:vsseg6e64.v    vs3, (rs1)           is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg6e64_v(vs3,rs1);}
+:vsseg6e64.v    vs3, (rs1), "v0.t"   is nf & op2931=5 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg6e64_v(vs3,rs1,v0);}
+
+define pcodeop vsseg7e64_v;
+:vsseg7e64.v    vs3, (rs1)           is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg7e64_v(vs3,rs1);}
+:vsseg7e64.v    vs3, (rs1), "v0.t"   is nf & op2931=6 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg7e64_v(vs3,rs1,v0);}
+
+define pcodeop vsseg8e64_v;
+:vsseg8e64.v    vs3, (rs1)           is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg8e64_v(vs3,rs1);}
+:vsseg8e64.v    vs3, (rs1), "v0.t"   is nf & op2931=7 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsseg8e64_v(vs3,rs1,v0);}
+
+define pcodeop vse8_v;
+# fake destination vector width as 64 bits for semantics
 # vse8.v         nf 28=0 27..26=0 vm 24..20=0 rs1 14..12=0x0 vs3 6..0=0x27
 # vse8.v    vs3, (rs1), vm  #    8-bit unit-stride store
-:vse8.v     vs3, (rs1), vm   is nf & op2828=0x0 & op2627=0x0 & vm & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27  unimpl
+:vse8.v     vs3, (rs1)           is nf & op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {*:64 rs1=vse8_v(vs3);}
+:vse8.v     vs3, (rs1), "v0.t"   is nf & op2931=0x0 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {*:64 rs1=vse8_v(vs3,v0);}
+
+define pcodeop vsseg2e8_v;
+:vsseg2e8.v vs3, (rs1)           is nf & op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg2e8_v(vs3,rs1);}
+:vsseg2e8.v vs3, (rs1), "v0.t"   is nf & op2931=0x1 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg2e8_v(vs3,rs1,v0);}
+
+define pcodeop vsseg3e8_v;
+:vsseg3e8.v vs3, (rs1)           is nf & op2931=0x2 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg3e8_v(vs3,rs1);}
+:vsseg3e8.v vs3, (rs1), "v0.t"   is nf & op2931=0x2 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg3e8_v(vs3,rs1,v0);}
+
+define pcodeop vsseg4e8_v;
+:vsseg4e8.v vs3, (rs1)           is nf & op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg4e8_v(vs3,rs1);}
+:vsseg4e8.v vs3, (rs1), "v0.t"   is nf & op2931=0x3 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg4e8_v(vs3,rs1,v0);}
+
+define pcodeop vsseg5e8_v;
+:vsseg5e8.v vs3, (rs1)           is nf & op2931=0x4 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg5e8_v(vs3,rs1);}
+:vsseg5e8.v vs3, (rs1), "v0.t"   is nf & op2931=0x4 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg5e8_v(vs3,rs1,v0);}
+
+define pcodeop vsseg6e8_v;
+:vsseg6e8.v vs3, (rs1)           is nf & op2931=0x5 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg6e8_v(vs3,rs1);}
+:vsseg6e8.v vs3, (rs1), "v0.t"   is nf & op2931=0x5 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg6e8_v(vs3,rs1,v0);}
+
+define pcodeop vsseg7e8_v;
+:vsseg7e8.v vs3, (rs1)           is nf & op2931=0x6 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg7e8_v(vs3,rs1);}
+:vsseg7e8.v vs3, (rs1), "v0.t"   is nf & op2931=0x6 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg7e8_v(vs3,rs1,v0);}
 
+define pcodeop vsseg8e8_v;
+:vsseg8e8.v vs3, (rs1)           is nf & op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=1 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg8e8_v(vs3,rs1);}
+:vsseg8e8.v vs3, (rs1), "v0.t"   is nf & op2931=0x7 & op2828=0x0 & op2627=0x0 & op2525=0 & op2024=0x0 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsseg8e8_v(vs3,rs1,v0);}
+
+define pcodeop vsm_v;
+:vsm.v      vs3, (rs1)  is nf & op2828=0x0 & op2627=0x0 & op2024=0x0b & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsm_v(vs3,rs1);}
+
+define pcodeop vsetvl;
 # vsetvl       31=1 30..25=0x0 rs2 rs1 14..12=0x7 rd 6..0=0x57
 # vsetvl  rd, rs1, rs2    # rd = new vl, rs1 = AVL, rs2 = new vtype value
-:vsetvl   rd, rs1, rs2     is op3131=0x1 & op2530=0x0 & rs2 & rs1 & op1214=0x7 & rd & op0006=0x57  unimpl
+:vsetvl   rd, rs1, rs2     is op3131=0x1 & op2530=0x0 & rs2 & rs1 & op1214=0x7 & rd & op0006=0x57 {rd=vsetvl(rs1,rs2);}
+
+define pcodeop vsetvli;
+define pcodeop vsetvli_e8m1tumu;
+define pcodeop vsetvli_e8m1tama;
+define pcodeop vsetvli_e8m2tumu;
+define pcodeop vsetvli_e16m4tamu;
+define pcodeop vsetvli_e32mf4tumu;
+define pcodeop vsetvli_e64mf8tuma;
+define pcodeop vsetvli_e64m1tama;
+define pcodeop vsetvli_e8m8tama;
+define pcodeop vsetvli_e8mf8tama;
+define pcodeop vsetvli_e8m2tama;
+define pcodeop vsetvli_e32m1tama;
+define pcodeop vsetvli_e64m2tama;
+define pcodeop vsetvli_e64m1tumu;
 
-#TODO  huh
 # vsetvli      31=0 vtypei         rs1 14..12=0x7 rd 6..0=0x57
 # vsetvli rd, rs1, vtypei # rd = new vl, rs1 = AVL, vtypei = new vtype setting
-:vsetvli  rd, rs1, vtypei  is op3131=0x0 & vtypei & rs1 & op1214=0x7 & rd & op0006=0x57  unimpl
-
+:vsetvli   rd, rs1, "e8,m1,tu,mu"     is op2030=0x000 & op3131=0x0 & rs1 & op1214=0x7 & rd & op0006=0x57 {rd=vsetvli_e8m1tumu(rs1);}
+:vsetvli   rd, rs1, "e8,m2,tu,mu"     is op2030=0x001 & op3131=0x0 & rs1 & op1214=0x7 & rd & op0006=0x57 {rd=vsetvli_e8m2tumu(rs1);}
+:vsetvli   rd, rs1, "e16,m4,ta,mu"    is op2030=0x04a & op3131=0x0 & rs1 & op1214=0x7 & rd & op0006=0x57 {rd=vsetvli_e16m4tamu(rs1);}
+:vsetvli   rd, rs1, "e32,mf4,tu,mu"   is op2030=0x016 & op3131=0x0 & rs1 & op1214=0x7 & rd & op0006=0x57 {rd=vsetvli_e32mf4tumu(rs1);}
+:vsetvli   rd, rs1, "e32,mf8,tu,ma"   is op2030=0x09d & op3131=0x0 & rs1 & op1214=0x7 & rd & op0006=0x57 {rd=vsetvli_e64mf8tuma(rs1);}
+:vsetvli   rd, rs1, "e8,m1,ta,ma"     is op2030=0x0c0 & op3131=0x0 & rs1 & op1214=0x7 & rd & op0006=0x57 {rd=vsetvli_e8m1tama(rs1);}
+:vsetvli   rd, rs1, "e8,m8,ta,ma"     is op2030=0x0c3 & op3131=0x0 & rs1 & op1214=0x7 & rd & op0006=0x57 {rd=vsetvli_e8m8tama(rs1);}
+:vsetvli   rd, rs1, "e8,m2,ta,ma"     is op2030=0x0c1 & op3131=0x0 & rs1 & op1214=0x7 & rd & op0006=0x57 {rd=vsetvli_e8m2tama(rs1);}
+:vsetvli   rd, rs1, "e32,m1,ta,ma"    is op2030=0x0d0 & op3131=0x0 & rs1 & op1214=0x7 & rd & op0006=0x57 {rd=vsetvli_e32m1tama(rs1);}
+:vsetvli   rd, rs1, "e64,m1,ta,ma"    is op2030=0x0d8 & op3131=0x0 & rs1 & op1214=0x7 & rd & op0006=0x57 {rd=vsetvli_e64m1tama(rs1);}
+:vsetvli   rd, rs1, "e64,m2,ta,ma"    is op2030=0x0d9 & op3131=0x0 & rs1 & op1214=0x7 & rd & op0006=0x57 {rd=vsetvli_e64m2tama(rs1);}
+:vsetvli   rd, rs1, vtypei            is op3131=0x0 & vtypei & rs1 & op1214=0x7 & rd & op0006=0x57       {rd=vsetvli(rs1,vtypei);}
+
+define pcodeop vsetivli;
+define pcodeop vsetivli_e8m1tumu;
+define pcodeop vsetivli_e8m2tumu;
+define pcodeop vsetivli_e16m4tamu;
+define pcodeop vsetivli_e32mf4tumu;
+define pcodeop vsetivli_e64mf8tuma;
+define pcodeop vsetivli_e8m8tama;
+define pcodeop vsetivli_e8m2tama;
+
+# vsetivli      31=1 vtypei         rs1 14..12=0x7 rd 6..0=0x57
+:vsetivli  rd, op1519, "e8,m1,tu,mu"    is op3031=0x3 & op2029=0x000 & op1519 & op1214=0x7 & rd & op0006=0x57 {rd=vsetivli_e8m1tumu(op1519:5);}
+:vsetivli  rd, op1519, "e8,m2,tu,mu"    is op3031=0x3 & op2029=0x001 & op1519 & op1214=0x7 & rd & op0006=0x57 {rd=vsetivli_e8m2tumu(op1519:5);}
+:vsetivli  rd, op1519, "e16,m4,ta,mu"   is op3031=0x3 & op2029=0x04a & op1519 & op1214=0x7 & rd & op0006=0x57 {rd=vsetivli_e16m4tamu(op1519:5);}
+:vsetivli  rd, op1519, "e32,mf4,tu,mu"  is op3031=0x3 & op2029=0x016 & op1519 & op1214=0x7 & rd & op0006=0x57 {rd=vsetivli_e32mf4tumu(op1519:5);}
+:vsetivli  rd, op1519, "e64,mf8,tu,ma"  is op3031=0x3 & op2029=0x09d & op1519 & op1214=0x7 & rd & op0006=0x57 {rd=vsetivli_e64mf8tuma(op1519:5);}
+:vsetivli  rd, op1519, "e8,m8,ta,ma"    is op3031=0x3 & op2029=0x0c3 & op1519 & op1214=0x7 & rd & op0006=0x57 {rd=vsetivli_e8m8tama(op1519:5);}
+:vsetivli  rd, op1519, "e8,m2,ta,ma"    is op3031=0x3 & op2029=0x0c1 & op1519 & op1214=0x7 & rd & op0006=0x57 {rd=vsetivli_e8m2tama(op1519:5);}
+:vsetivli  rd, op1519, op2029           is op3031=0x3 & op2029 &       op1519 & op1214=0x7 & rd & op0006=0x57 {rd=vsetivli(op1519:5,op2029:10);}
+
+define pcodeop vsext_vf2;
 # vsext.vf2      31..26=0x12 vm vs2 19..15=7 14..12=0x2 vd 6..0=0x57
 # vsext.vf2 vd, vs2, vm  # Sign-extend SEW/2 source to SEW destination
-:vsext.vf2  vd, vs2, vm   is op2631=0x12 & vm & vs2 & op1519=0x7 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vsext.vf2  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0x7 & op1214=0x2 & vd & op0006=0x57 {vd=vsext_vf2(vs2);}
+:vsext.vf2  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0x7 & op1214=0x2 & vd & op0006=0x57 {vd=vsext_vf2(vs2,v0);}
 
+define pcodeop vsext_vf4;
 # vsext.vf4      31..26=0x12 vm vs2 19..15=5 14..12=0x2 vd 6..0=0x57
 # vsext.vf4 vd, vs2, vm  # Sign-extend SEW/4 source to SEW destination
-:vsext.vf4  vd, vs2, vm   is op2631=0x12 & vm & vs2 & op1519=0x5 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vsext.vf4  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0x5 & op1214=0x2 & vd & op0006=0x57 {vd=vsext_vf4(vs2);}
+:vsext.vf4  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0x5 & op1214=0x2 & vd & op0006=0x57 {vd=vsext_vf4(vs2,v0);}
 
+define pcodeop vsext_vf8;
 # vsext.vf8      31..26=0x12 vm vs2 19..15=3 14..12=0x2 vd 6..0=0x57
 # vsext.vf8 vd, vs2, vm  # Sign-extend SEW/8 source to SEW destination
-:vsext.vf8  vd, vs2, vm   is op2631=0x12 & vm & vs2 & op1519=0x3 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vsext.vf8  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0x3 & op1214=0x2 & vd & op0006=0x57 {vd=vsext_vf8(vs2);}
+:vsext.vf8  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0x3 & op1214=0x2 & vd & op0006=0x57 {vd=vsext_vf8(vs2,v0);}
 
+define pcodeop vslide1down_vx;
 # vslide1down.vx 31..26=0x0f vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vslide1down.vx  vd, vs2, rs1, vm      # vd[i] = vs2[i+1], vd[vl-1]=x[rs1]
-:vslide1down.vx   vd, vs2, rs1, vm       is op2631=0xf & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vslide1down.vx   vd, vs2, rs1         is op2631=0xf & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vslide1down_vx(vs2,rs1);}
+:vslide1down.vx   vd, vs2, rs1, "v0.t" is op2631=0xf & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vslide1down_vx(vs2,rs1,v0);}
 
+define pcodeop vslide1up_vx;
 # vslide1up.vx   31..26=0x0e vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vslide1up.vx  vd, vs2, rs1, vm        # vd[0]=x[rs1], vd[i+1] = vs2[i]
-:vslide1up.vx   vd, vs2, rs1, vm         is op2631=0xe & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vslide1up.vx   vd, vs2, rs1         is op2631=0xe & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vslide1up_vx(vs2,rs1);}
+:vslide1up.vx   vd, vs2, rs1, "v0.t" is op2631=0xe & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vslide1up_vx(vs2,rs1,v0);}
 
-#TODO  this is broken
-# vslidedown.vi  31..26=0x0f vm vs2 simm5 14..12=0x3 vd 6..0=0x57
-# vslidedown.vi vd, vs2, simm5[4:0], vm # vd[i] = vs2[i+uimm]
-:vslidedown.vi  vd, vs2, simm5[4:0], vm  is op2631=0xf & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+define pcodeop vslidedown_vi;
+# vslidedown.vi  31..26=0x0f vm vs2 uimm5 14..12=0x3 vd 6..0=0x57
+# vslidedown.vi vd, vs2, uimm5, vm # vd[i] = vs2[i+uimm]
+:vslidedown.vi  vd, vs2, uimm5         is op2631=0xf & op2525=1 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vslidedown_vi(vs2,uimm5);}
+:vslidedown.vi  vd, vs2, uimm5, "v0.t" is op2631=0xf & op2525=0 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vslidedown_vi(vs2,uimm5,v0);}
 
+define pcodeop vslidedown_vx;
 # vslidedown.vx  31..26=0x0f vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vslidedown.vx vd, vs2, rs1, vm       # vd[i] = vs2[i+rs1]
-:vslidedown.vx  vd, vs2, rs1, vm        is op2631=0xf & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vslidedown.vx  vd, vs2, rs1         is op2631=0xf & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vslidedown_vi(vs2,rs1);}
+:vslidedown.vx  vd, vs2, rs1, "v0.t" is op2631=0xf & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vslidedown_vi(vs2,rs1,v0);}
 
-#TODO  this is broken
-# vslideup.vi    31..26=0x0e vm vs2 simm5 14..12=0x3 vd 6..0=0x57
-# vslideup.vi vd, vs2, simm5[4:0], vm  # vd[i+uimm] = vs2[i]
-:vslideup.vi  vd, vs2, simm5[4:0], vm   is op2631=0xe & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+define pcodeop vslideup_vi;
+# vslideup.vi    31..26=0x0e vm vs2 uimm5 14..12=0x3 vd 6..0=0x57
+# vslideup.vi vd, vs2, uimm5, vm  # vd[i+uimm] = vs2[i]
+:vslideup.vi  vd, vs2, uimm5         is op2631=0xe & op2525=1 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vslideup_vi(vs2,uimm5);}
+:vslideup.vi  vd, vs2, uimm5, "v0.t" is op2631=0xe & op2525=0 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vslideup_vi(vs2,uimm5,v0);}
 
+define pcodeop vslideup_vx;
 # vslideup.vx    31..26=0x0e vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vslideup.vx vd, vs2, rs1, vm        # vd[i+rs1] = vs2[i]
-:vslideup.vx  vd, vs2, rs1, vm         is op2631=0xe & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vslideup.vx  vd, vs2, rs1         is op2631=0xe & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vslideup_vi(vs2,rs1);}
+:vslideup.vx  vd, vs2, rs1, "v0.t" is op2631=0xe & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vslideup_vi(vs2,rs1,v0);}
 
-#TODO  this is broken
-# vsll.vi        31..26=0x25 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
-# vsll.vi vd, vs2, simm5, vm   # vector-immediate
-:vsll.vi  vd, vs2, simm5, vm    is op2631=0x25 & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+define pcodeop vsll_vi;
+# vsll.vi        31..26=0x25 vm vs2 uimm5 14..12=0x3 vd 6..0=0x57
+# vsll.vi vd, vs2, uimm5, vm   # vector-immediate
+:vsll.vi  vd, vs2, uimm5         is op2631=0x25 & op2525=1 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vsll_vi(vs2,uimm5);}
+:vsll.vi  vd, vs2, uimm5, "v0.t" is op2631=0x25 & op2525=0 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vsll_vi(vs2,uimm5,v0);}
 
+define pcodeop vsll_vv;
 # vsll.vv        31..26=0x25 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vsll.vv vd, vs2, vs1, vm   # Vector-vector
-:vsll.vv  vd, vs2, vs1, vm    is op2631=0x25 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vsll.vv  vd, vs2, vs1         is op2631=0x25 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsll_vv(vs2,vs1);}
+:vsll.vv  vd, vs2, vs1, "v0.t" is op2631=0x25 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsll_vv(vs2,vs1,v0);}
 
+define pcodeop vsll_vx;
 # vsll.vx        31..26=0x25 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vsll.vx vd, vs2, rs1, vm   # vector-scalar
-:vsll.vx  vd, vs2, rs1, vm    is op2631=0x25 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vsll.vx  vd, vs2, rs1         is op2631=0x25 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsll_vx(vs2,rs1);}
+:vsll.vx  vd, vs2, rs1, "v0.t" is op2631=0x25 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsll_vx(vs2,rs1,v0);}
 
+define pcodeop vsmul_vv;
 # vsmul.vv       31..26=0x27 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vsmul.vv vd, vs2, vs1, vm  # vd[i] = clip(roundoff_signed(vs2[i]*vs1[i], SEW-1))
-:vsmul.vv  vd, vs2, vs1, vm   is op2631=0x27 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vsmul.vv  vd, vs2, vs1         is op2631=0x27 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsmul_vv(vs2,vs1);}
+:vsmul.vv  vd, vs2, vs1, "v0.t" is op2631=0x27 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsmul_vv(vs2,vs1,v0);}
 
+define pcodeop vsmul_vx;
 # vsmul.vx       31..26=0x27 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vsmul.vx vd, vs2, rs1, vm  # vd[i] = clip(roundoff_signed(vs2[i]*x[rs1], SEW-1))
-:vsmul.vx  vd, vs2, rs1, vm   is op2631=0x27 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vsmul.vx  vd, vs2, rs1         is op2631=0x27 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsmul_vx(vs2,rs1);}
+:vsmul.vx  vd, vs2, rs1, "v0.t" is op2631=0x27 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsmul_vx(vs2,rs1,v0);}
 
-#OTOD  this is broken
-# vsra.vi        31..26=0x29 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
-# vsra.vi vd, vs2, simm5, vm   # vector-immediate
-:vsra.vi  vd, vs2, simm5, vm    is op2631=0x29 & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+define pcodeop vsra_vi;
+# vsra.vi        31..26=0x29 vm vs2 uimm5 14..12=0x3 vd 6..0=0x57
+# vsra.vi vd, vs2, uimm5, vm   # vector-immediate
+:vsra.vi  vd, vs2, uimm5         is op2631=0x29 & op2525=1 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vsra_vi(vs2,uimm5);}
+:vsra.vi  vd, vs2, uimm5, "v0.t" is op2631=0x29 & op2525=0 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vsra_vi(vs2,uimm5,v0);}
 
+define pcodeop vsra_vv;
 # vsra.vv        31..26=0x29 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vsra.vv vd, vs2, vs1, vm   # Vector-vector
-:vsra.vv  vd, vs2, vs1, vm    is op2631=0x29 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vsra.vv  vd, vs2, vs1         is op2631=0x29 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsra_vv(vs2,vs1);}
+:vsra.vv  vd, vs2, vs1, "v0.t" is op2631=0x29 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsra_vv(vs2,vs1,v0);}
 
+define pcodeop vsra_vx;
 # vsra.vx        31..26=0x29 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vsra.vx vd, vs2, rs1, vm   # vector-scalar
-:vsra.vx  vd, vs2, rs1, vm    is op2631=0x29 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vsra.vx  vd, vs2, rs1         is op2631=0x29 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsra_vx(vs2,rs1);}
+:vsra.vx  vd, vs2, rs1, "v0.t" is op2631=0x29 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsra_vx(vs2,rs1,v0);}
 
-#TODO  this is broken
-# vsrl.vi        31..26=0x28 vm vs2 simm5 14..12=0x3 vd 6..0=0x57
-# vsrl.vi vd, vs2, simm5, vm   # vector-immediate
-:vsrl.vi  vd, vs2, simm5, vm    is op2631=0x28 & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+define pcodeop vsrl_vi;
+# vsrl.vi        31..26=0x28 vm vs2 uimm5 14..12=0x3 vd 6..0=0x57
+# vsrl.vi vd, vs2, uimm5, vm   # vector-immediate
+:vsrl.vi  vd, vs2, uimm5         is op2631=0x28 & op2525=1 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vsrl_vi(vs2,uimm5);}
+:vsrl.vi  vd, vs2, uimm5, "v0.t" is op2631=0x28 & op2525=0 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vsrl_vi(vs2,uimm5,v0);}
 
+define pcodeop vsrl_vv;
 # vsrl.vv        31..26=0x28 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vsrl.vv vd, vs2, vs1, vm   # Vector-vector
-:vsrl.vv  vd, vs2, vs1, vm    is op2631=0x28 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vsrl.vv  vd, vs2, vs1         is op2631=0x28 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsrl_vv(vs2,vs1);}
+:vsrl.vv  vd, vs2, vs1, "v0.t" is op2631=0x28 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsrl_vv(vs2,vs1,v0);}
 
+define pcodeop vsrl_vx;
 # vsrl.vx        31..26=0x28 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vsrl.vx vd, vs2, rs1, vm   # vector-scalar
-:vsrl.vx  vd, vs2, rs1, vm    is op2631=0x28 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vsrl.vx  vd, vs2, rs1         is op2631=0x28 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsrl_vx(vs2,rs1);}
+:vsrl.vx  vd, vs2, rs1, "v0.t" is op2631=0x28 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsrl_vx(vs2,rs1,v0);}
 
+define pcodeop vsse1024_v;
 # vsse1024.v      nf 28=1 27..26=2 vm rs2 rs1 14..12=0x7 vs3 6..0=0x27
 # vsse1024.v vs3, (rs1), rs2, vm  # 1024-bit strided store
-:vsse1024.v  vs3, (rs1), rs2, vm   is nf & op2828=0x1 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27  unimpl
+:vsse1024.v     vs3, (rs1), rs2         is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsse1024_v(vs3,rs1,rs2);}
+:vsse1024.v     vs3, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsse1024_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseq2e1024_v;
+:vssseg2e1024.v vs3, (rs1), rs2         is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq2e1024_v(vs3,rs1,rs2);}
+:vssseg2e1024.v vs3, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq2e1024_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseq3e1024_v;
+:vssseg3e1024.v vs3, (rs1), rs2         is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq3e1024_v(vs3,rs1,rs2);}
+:vssseg3e1024.v vs3, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq3e1024_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseq4e1024_v;
+:vssseg4e1024.v vs3, (rs1), rs2         is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq4e1024_v(vs3,rs1,rs2);}
+:vssseg4e1024.v vs3, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq4e1024_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseq5e1024_v;
+:vssseg5e1024.v vs3, (rs1), rs2         is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq5e1024_v(vs3,rs1,rs2);}
+:vssseg5e1024.v vs3, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq5e1024_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseq6e1024_v;
+:vssseg6e1024.v vs3, (rs1), rs2         is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq6e1024_v(vs3,rs1,rs2);}
+:vssseg6e1024.v vs3, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq6e1024_v(vs3,rs1,rs2,v0);}
 
+define pcodeop vssseq7e1024_v;
+:vssseg7e1024.v vs3, (rs1), rs2         is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq7e1024_v(vs3,rs1,rs2);}
+:vssseg7e1024.v vs3, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq7e1024_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseq8e1024_v;
+:vssseg8e1024.v vs3, (rs1), rs2         is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq8e1024_v(vs3,rs1,rs2);}
+:vssseg8e1024.v vs3, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseq8e1024_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vsse128_v;
 # vsse128.v       nf 28=1 27..26=2 vm rs2 rs1 14..12=0x0 vs3 6..0=0x27
 # vsse128.v  vs3, (rs1), rs2, vm  #  128-bit strided store
-:vsse128.v   vs3, (rs1), rs2, vm   is nf & op2828=0x1 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27  unimpl
+:vsse128.v     vs3, (rs1), rs2         is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsse128_v(vs3,rs1,rs2);}
+:vsse128.v     vs3, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsse128_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg2e128_v;
+:vssseg2e128.v vs3, (rs1), rs2         is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg2e128_v(vs3,rs1,rs2);}
+:vssseg2e128.v vs3, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg2e128_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg3e128_v;
+:vssseg3e128.v vs3, (rs1), rs2         is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg3e128_v(vs3,rs1,rs2);}
+:vssseg3e128.v vs3, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg3e128_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg4e128_v;
+:vssseg4e128.v vs3, (rs1), rs2         is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg4e128_v(vs3,rs1,rs2);}
+:vssseg4e128.v vs3, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg4e128_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg5e128_v;
+:vssseg5e128.v vs3, (rs1), rs2         is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg5e128_v(vs3,rs1,rs2);}
+:vssseg5e128.v vs3, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg5e128_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg6e128_v;
+:vssseg6e128.v vs3, (rs1), rs2         is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg6e128_v(vs3,rs1,rs2);}
+:vssseg6e128.v vs3, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg6e128_v(vs3,rs1,rs2,v0);}
 
+define pcodeop vssseg7e128_v;
+:vssseg7e128.v vs3, (rs1), rs2         is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg7e128_v(vs3,rs1,rs2);}
+:vssseg7e128.v vs3, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg7e128_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg8e128_v;
+:vssseg8e128.v vs3, (rs1), rs2         is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg8e128_v(vs3,rs1,rs2);}
+:vssseg8e128.v vs3, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg8e128_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vsse16_v;
 # vsse16.v        nf 28=0 27..26=2 vm rs2 rs1 14..12=0x5 vs3 6..0=0x27
 # vsse16.v   vs3, (rs1), rs2, vm  #   16-bit strided store
-:vsse16.v    vs3, (rs1), rs2, vm   is nf & op2828=0x0 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27  unimpl
+:vsse16.v     vs3, (rs1), rs2         is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsse16_v(vs3,rs1,rs2);}
+:vsse16.v     vs3, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsse16_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg2e16_v;
+:vssseg2e16.v vs3, (rs1), rs2         is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg2e16_v(vs3,rs1,rs2);}
+:vssseg2e16.v vs3, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg2e16_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg3e16_v;
+:vssseg3e16.v vs3, (rs1), rs2         is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg3e16_v(vs3,rs1,rs2);}
+:vssseg3e16.v vs3, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg3e16_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg4e16_v;
+:vssseg4e16.v vs3, (rs1), rs2         is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg4e16_v(vs3,rs1,rs2);}
+:vssseg4e16.v vs3, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg4e16_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg5e16_v;
+:vssseg5e16.v vs3, (rs1), rs2         is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg5e16_v(vs3,rs1,rs2);}
+:vssseg5e16.v vs3, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg5e16_v(vs3,rs1,rs2,v0);}
 
+define pcodeop vssseg6e16_v;
+:vssseg6e16.v vs3, (rs1), rs2         is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg6e16_v(vs3,rs1,rs2);}
+:vssseg6e16.v vs3, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg6e16_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg7e16_v;
+:vssseg7e16.v vs3, (rs1), rs2         is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg7e16_v(vs3,rs1,rs2);}
+:vssseg7e16.v vs3, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg7e16_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg8e16_v;
+:vssseg8e16.v vs3, (rs1), rs2         is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg8e16_v(vs3,rs1,rs2);}
+:vssseg8e16.v vs3, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg8e16_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vsse256_v;
 # vsse256.v       nf 28=1 27..26=2 vm rs2 rs1 14..12=0x5 vs3 6..0=0x27
 # vsse256.v  vs3, (rs1), rs2, vm  #  256-bit strided store
-:vsse256.v   vs3, (rs1), rs2, vm   is nf & op2828=0x1 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27  unimpl
+:vsse256.v     vs3, (rs1), rs2         is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsse256_v(vs3,rs1,rs2);}
+:vsse256.v     vs3, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsse256_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg2e256_v;
+:vssseg2e256.v vs3, (rs1), rs2         is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg2e256_v(vs3,rs1,rs2);}
+:vssseg2e256.v vs3, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg2e256_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg3e256_v;
+:vssseg3e256.v vs3, (rs1), rs2         is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg3e256_v(vs3,rs1,rs2);}
+:vssseg3e256.v vs3, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg3e256_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg4e256_v;
+:vssseg4e256.v vs3, (rs1), rs2         is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg4e256_v(vs3,rs1,rs2);}
+:vssseg4e256.v vs3, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg4e256_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg5e256_v;
+:vssseg5e256.v vs3, (rs1), rs2         is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg5e256_v(vs3,rs1,rs2);}
+:vssseg5e256.v vs3, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg5e256_v(vs3,rs1,rs2,v0);}
 
+define pcodeop vssseg6e256_v;
+:vssseg6e256.v vs3, (rs1), rs2         is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg6e256_v(vs3,rs1,rs2);}
+:vssseg6e256.v vs3, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg6e256_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg7e256_v;
+:vssseg7e256.v vs3, (rs1), rs2         is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg7e256_v(vs3,rs1,rs2);}
+:vssseg7e256.v vs3, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg7e256_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg8e256_v;
+:vssseg8e256.v vs3, (rs1), rs2         is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg8e256_v(vs3,rs1,rs2);}
+:vssseg8e256.v vs3, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vssseg8e256_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vsse32_v;
 # vsse32.v        nf 28=0 27..26=2 vm rs2 rs1 14..12=0x6 vs3 6..0=0x27
 # vsse32.v   vs3, (rs1), rs2, vm  #   32-bit strided store
-:vsse32.v    vs3, (rs1), rs2, vm   is nf & op2828=0x0 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27  unimpl
+:vsse32.v     vs3, (rs1), rs2         is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsse32_v(vs3,rs1,rs2);}
+:vsse32.v     vs3, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsse32_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg2e32_v;
+:vssseg2e32.v vs3, (rs1), rs2         is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg2e32_v(vs3,rs1,rs2);}
+:vssseg2e32.v vs3, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg2e32_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg3e32_v;
+:vssseg3e32.v vs3, (rs1), rs2         is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg3e32_v(vs3,rs1,rs2);}
+:vssseg3e32.v vs3, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg3e32_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg4e32_v;
+:vssseg4e32.v vs3, (rs1), rs2         is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg4e32_v(vs3,rs1,rs2);}
+:vssseg4e32.v vs3, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg4e32_v(vs3,rs1,rs2,v0);}
 
+define pcodeop vssseg5e32_v;
+:vssseg5e32.v vs3, (rs1), rs2         is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg5e32_v(vs3,rs1,rs2);}
+:vssseg5e32.v vs3, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg5e32_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg6e32_v;
+:vssseg6e32.v vs3, (rs1), rs2         is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg6e32_v(vs3,rs1,rs2);}
+:vssseg6e32.v vs3, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg6e32_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg7e32_v;
+:vssseg7e32.v vs3, (rs1), rs2         is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg7e32_v(vs3,rs1,rs2);}
+:vssseg7e32.v vs3, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg7e32_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg8e32_v;
+:vssseg8e32.v vs3, (rs1), rs2         is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg8e32_v(vs3,rs1,rs2);}
+:vssseg8e32.v vs3, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg8e32_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vsse512_v;
 # vsse512.v       nf 28=1 27..26=2 vm rs2 rs1 14..12=0x6 vs3 6..0=0x27
-# vsse512.v  vs3, (rs1), rs2, vm  #  512-bit strided store
-:vsse512.v   vs3, (rs1), rs2, vm   is nf & op2828=0x1 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27  unimpl
+# vsse512.v  vs3, (rs1), rs2  #  512-bit strided store
+:vsse512.v     vs3, (rs1), rs2         is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsse512_v(vs3,rs1,rs2);}
+:vsse512.v     vs3, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsse512_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg2e512_v;
+:vssseg2e512.v vs3, (rs1), rs2         is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg2e512_v(vs3,rs1,rs2);}
+:vssseg2e512.v vs3, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg2e512_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg3e512_v;
+:vssseg3e512.v vs3, (rs1), rs2         is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg3e512_v(vs3,rs1,rs2);}
+:vssseg3e512.v vs3, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg3e512_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg4e512_v;
+:vssseg4e512.v vs3, (rs1), rs2         is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg4e512_v(vs3,rs1,rs2);}
+:vssseg4e512.v vs3, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg4e512_v(vs3,rs1,rs2,v0);}
 
+define pcodeop vssseg5e512_v;
+:vssseg5e512.v vs3, (rs1), rs2         is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg5e512_v(vs3,rs1,rs2);}
+:vssseg5e512.v vs3, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg5e512_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg6e512_v;
+:vssseg6e512.v vs3, (rs1), rs2         is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg6e512_v(vs3,rs1,rs2);}
+:vssseg6e512.v vs3, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg6e512_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg7e512_v;
+:vssseg7e512.v vs3, (rs1), rs2         is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg7e512_v(vs3,rs1,rs2);}
+:vssseg7e512.v vs3, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg7e512_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg8e512_v;
+:vssseg8e512.v vs3, (rs1), rs2         is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg8e512_v(vs3,rs1,rs2);}
+:vssseg8e512.v vs3, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vssseg8e512_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vsse64_v;
 # vsse64.v        nf 28=0 27..26=2 vm rs2 rs1 14..12=0x7 vs3 6..0=0x27
 # vsse64.v   vs3, (rs1), rs2, vm  #   64-bit strided store
-:vsse64.v    vs3, (rs1), rs2, vm   is nf & op2828=0x0 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27  unimpl
+:vsse64.v     vs3, (rs1), rs2         is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsse64_v(vs3,rs1,rs2);}
+:vsse64.v     vs3, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsse64_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg2e64_v;
+:vssseg2e64.v vs3, (rs1), rs2         is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg2e64_v(vs3,rs1,rs2);}
+:vssseg2e64.v vs3, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg2e64_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg3e64_v;
+:vssseg3e64.v vs3, (rs1), rs2         is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg3e64_v(vs3,rs1,rs2);}
+:vssseg3e64.v vs3, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg3e64_v(vs3,rs1,rs2,v0);}
 
+define pcodeop vssseg4e64_v;
+:vssseg4e64.v vs3, (rs1), rs2         is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg4e64_v(vs3,rs1,rs2);}
+:vssseg4e64.v vs3, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg4e64_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg5e64_v;
+:vssseg5e64.v vs3, (rs1), rs2         is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg5e64_v(vs3,rs1,rs2);}
+:vssseg5e64.v vs3, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg5e64_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg6e64_v;
+:vssseg6e64.v vs3, (rs1), rs2         is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg6e64_v(vs3,rs1,rs2);}
+:vssseg6e64.v vs3, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg6e64_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg7e64_v;
+:vssseg7e64.v vs3, (rs1), rs2         is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg7e64_v(vs3,rs1,rs2);}
+:vssseg7e64.v vs3, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg7e64_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg8e64_v;
+:vssseg8e64.v vs3, (rs1), rs2         is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg8e64_v(vs3,rs1,rs2);}
+:vssseg8e64.v vs3, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vssseg8e64_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vsse8_v;
 # vsse8.v         nf 28=0 27..26=2 vm rs2 rs1 14..12=0x0 vs3 6..0=0x27
 # vsse8.v    vs3, (rs1), rs2, vm  #    8-bit strided store
-:vsse8.v     vs3, (rs1), rs2, vm   is nf & op2828=0x0 & op2627=0x2 & vm & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27  unimpl
+:vsse8.v     vs3, (rs1), rs2         is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsse8_v(vs3,rs1,rs2);}
+:vsse8.v     vs3, (rs1), rs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsse8_v(vs3,rs1,rs2,v0);}
 
-#TODO  this is broken
-# vssra.vi       31..26=0x2b vm vs2 simm5 14..12=0x3 vd 6..0=0x57
-# vssra.vi vd, vs2, simm5, vm   # vd[i] = roundoff_signed(vs2[i], uimm)
-:vssra.vi  vd, vs2, simm5, vm    is op2631=0x2b & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+define pcodeop vssseg2e8_v;
+:vssseg2e8.v vs3, (rs1), rs2         is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg2e8_v(vs3,rs1,rs2);}
+:vssseg2e8.v vs3, (rs1), rs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg2e8_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg3e8_v;
+:vssseg3e8.v vs3, (rs1), rs2         is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg3e8_v(vs3,rs1,rs2);}
+:vssseg3e8.v vs3, (rs1), rs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg3e8_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg4e8_v;
+:vssseg4e8.v vs3, (rs1), rs2         is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg4e8_v(vs3,rs1,rs2);}
+:vssseg4e8.v vs3, (rs1), rs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg4e8_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg5e8_v;
+:vssseg5e8.v vs3, (rs1), rs2         is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg5e8_v(vs3,rs1,rs2);}
+:vssseg5e8.v vs3, (rs1), rs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg5e8_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg6e8_v;
+:vssseg6e8.v vs3, (rs1), rs2         is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg6e8_v(vs3,rs1,rs2);}
+:vssseg6e8.v vs3, (rs1), rs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg6e8_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg7e8_v;
+:vssseg7e8.v vs3, (rs1), rs2         is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg7e8_v(vs3,rs1,rs2);}
+:vssseg7e8.v vs3, (rs1), rs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg7e8_v(vs3,rs1,rs2,v0);}
+
+define pcodeop vssseg8e8_v;
+:vssseg8e8.v vs3, (rs1), rs2         is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=1 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg8e8_v(vs3,rs1,rs2);}
+:vssseg8e8.v vs3, (rs1), rs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x2 & op2525=0 & rs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vssseg8e8_v(vs3,rs1,rs2,v0);}
 
+define pcodeop vssra_vi;
+# vssra.vi       31..26=0x2b vm vs2 uimm5 14..12=0x3 vd 6..0=0x57
+# vssra.vi vd, vs2, uimm5, vm   # vd[i] = roundoff_signed(vs2[i], uimm)
+:vssra.vi  vd, vs2, uimm5         is op2631=0x2b & op2525=1 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vssra_vi(vs2,uimm5);}
+:vssra.vi  vd, vs2, uimm5, "v0.t" is op2631=0x2b & op2525=0 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vssra_vi(vs2,uimm5,v0);}
+
+define pcodeop vssra_vv;
 # vssra.vv       31..26=0x2b vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vssra.vv vd, vs2, vs1, vm   # vd[i] = roundoff_signed(vs2[i],vs1[i])
-:vssra.vv  vd, vs2, vs1, vm    is op2631=0x2b & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vssra.vv  vd, vs2, vs1         is op2631=0x2b & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vssra_vv(vs2,vs1);}
+:vssra.vv  vd, vs2, vs1, "v0.t" is op2631=0x2b & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vssra_vv(vs2,vs1,v0);}
 
+define pcodeop vssra_vx;
 # vssra.vx       31..26=0x2b vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vssra.vx vd, vs2, rs1, vm   # vd[i] = roundoff_signed(vs2[i], x[rs1])
-:vssra.vx  vd, vs2, rs1, vm    is op2631=0x2b & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vssra.vx  vd, vs2, rs1         is op2631=0x2b & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vssra_vx(vs2,rs1);}
+:vssra.vx  vd, vs2, rs1, "v0.t" is op2631=0x2b & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vssra_vx(vs2,rs1,v0);}
 
-#TODO  this is broken
-# vssrl.vi       31..26=0x2a vm vs2 simm5 14..12=0x3 vd 6..0=0x57
-# vssrl.vi vd, vs2, simm5, vm   # vd[i] = roundoff_unsigned(vs2[i], uimm)
-:vssrl.vi  vd, vs2, simm5, vm    is op2631=0x2a & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+define pcodeop vssrl_vi;
+# vssrl.vi       31..26=0x2a vm vs2 uimm5 14..12=0x3 vd 6..0=0x57
+# vssrl.vi vd, vs2, uimm5, vm   # vd[i] = roundoff_unsigned(vs2[i], uimm)
+:vssrl.vi  vd, vs2, uimm5         is op2631=0x2a & op2525=1 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vssrl_vi(vs2,uimm5);}
+:vssrl.vi  vd, vs2, uimm5, "v0.t" is op2631=0x2a & op2525=0 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 {vd=vssrl_vi(vs2,uimm5,v0);}
 
+define pcodeop vssrl_vv;
 # vssrl.vv       31..26=0x2a vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vssrl.vv vd, vs2, vs1, vm   # vd[i] = roundoff_unsigned(vs2[i], vs1[i])
-:vssrl.vv  vd, vs2, vs1, vm    is op2631=0x2a & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vssrl.vv  vd, vs2, vs1         is op2631=0x2a & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vssrl_vv(vs2,vs1);}
+:vssrl.vv  vd, vs2, vs1, "v0.t" is op2631=0x2a & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vssrl_vv(vs2,vs1,v0);}
 
+define pcodeop vssrl_vx;
 # vssrl.vx       31..26=0x2a vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vssrl.vx vd, vs2, rs1, vm   # vd[i] = roundoff_unsigned(vs2[i], x[rs1])
-:vssrl.vx  vd, vs2, rs1, vm    is op2631=0x2a & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vssrl.vx  vd, vs2, rs1         is op2631=0x2a & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vssra_vx(vs2,rs1);}
+:vssrl.vx  vd, vs2, rs1, "v0.t" is op2631=0x2a & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vssrl_vx(vs2,rs1,v0);}
 
+define pcodeop vssub_vv;
 # vssub.vv       31..26=0x23 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vssub.vv vd, vs2, vs1, vm   # Vector-vector
-:vssub.vv  vd, vs2, vs1, vm    is op2631=0x23 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vssub.vv  vd, vs2, vs1         is op2631=0x23 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vssub_vv(vs2,vs1);}
+:vssub.vv  vd, vs2, vs1, "v0.t" is op2631=0x23 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vssub_vv(vs2,vs1,v0);}
 
+define pcodeop vssub_vx;
 # vssub.vx       31..26=0x23 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vssub.vx vd, vs2, rs1, vm   # vector-scalar
-:vssub.vx  vd, vs2, rs1, vm    is op2631=0x23 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vssub.vx  vd, vs2, rs1         is op2631=0x23 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vssub_vx(vs2,rs1);}
+:vssub.vx  vd, vs2, rs1, "v0.t" is op2631=0x23 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vssub_vx(vs2,rs1,v0);}
 
+define pcodeop vssubu_vv;
 # vssubu.vv      31..26=0x22 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vssubu.vv vd, vs2, vs1, vm   # Vector-vector
-:vssubu.vv  vd, vs2, vs1, vm    is op2631=0x22 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vssubu.vv  vd, vs2, vs1         is op2631=0x22 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vssubu_vv(vs2,vs1);}
+:vssubu.vv  vd, vs2, vs1, "v0.t" is op2631=0x22 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vssubu_vv(vs2,vs1,v0);}
 
+define pcodeop vssubu_vx;
 # vssubu.vx      31..26=0x22 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vssubu.vx vd, vs2, rs1, vm   # vector-scalar
-:vssubu.vx  vd, vs2, rs1, vm    is op2631=0x22 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vssubu.vx  vd, vs2, rs1         is op2631=0x22 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vssubu_vx(vs2,rs1);}
+:vssubu.vx  vd, vs2, rs1, "v0.t" is op2631=0x22 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vssubu_vx(vs2,rs1,v0);}
 
+define pcodeop vsub_vv;
 # vsub.vv         31..26=0x02 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vsub.vv vd, vs2, vs1, vm   # Vector-vector
-:vsub.vv  vd, vs2, vs1, vm    is op2631=0x2 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vsub.vv  vd, vs2, vs1         is op2631=0x2 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsub_vv(vs2,vs1);}
+:vsub.vv  vd, vs2, vs1, "v0.t" is op2631=0x2 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vsub_vv(vs2,vs1,v0);}
 
+define pcodeop vsub_vx;
 # vsub.vx        31..26=0x02 vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vsub.vx vd, vs2, rs1, vm   # vector-scalar
-:vsub.vx  vd, vs2, rs1, vm    is op2631=0x2 & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vsub.vx  vd, vs2, rs1         is op2631=0x2 & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsub_vx(vs2,rs1);}
+:vsub.vx  vd, vs2, rs1, "v0.t" is op2631=0x2 & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vsub_vx(vs2,rs1,v0);}
 
+define pcodeop vsuxei1024_v;
 # vsuxei1024.v     nf 28=1 27..26=1 vm vs2 rs1 14..12=0x7 vs3 6..0=0x27
 # vsuxei1024.v  vs3, (rs1), vs2, vm # unordered 1024-bit indexed store of SEW data
-:vsuxei1024.v   vs3, (rs1), vs2, vm  is nf & op2828=0x1 & op2627=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27  unimpl
+:vsuxei1024.v     vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxei1024_v(vs3,rs1,vs2);}
+:vsuxei1024.v     vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg2ei1024_v;
+:vsuxseg2ei1024.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg2ei1024_v(vs3,rs1,vs2);}
+:vsuxseg2ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg2ei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg3ei1024_v;
+:vsuxseg3ei1024.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg3ei1024_v(vs3,rs1,vs2);}
+:vsuxseg3ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg3ei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg4ei1024_v;
+:vsuxseg4ei1024.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg4ei1024_v(vs3,rs1,vs2);}
+:vsuxseg4ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg4ei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg5ei1024_v;
+:vsuxseg5ei1024.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg5ei1024_v(vs3,rs1,vs2);}
+:vsuxseg5ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg5ei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg6ei1024_v;
+:vsuxseg6ei1024.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg6ei1024_v(vs3,rs1,vs2);}
+:vsuxseg6ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg6ei1024_v(vs3,rs1,vs2,v0);}
 
+define pcodeop vsuxseg7ei1024_v;
+:vsuxseg7ei1024.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg7ei1024_v(vs3,rs1,vs2);}
+:vsuxseg7ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg7ei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg8ei1024_v;
+:vsuxseg8ei1024.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg8ei1024_v(vs3,rs1,vs2);}
+:vsuxseg8ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg8ei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxei128_v;
 # vsuxei128.v      nf 28=1 27..26=1 vm vs2 rs1 14..12=0x0 vs3 6..0=0x27
 # vsuxei128.v  vs3, (rs1), vs2, vm # unordered 128-bit indexed store of SEW data
-:vsuxei128.v   vs3, (rs1), vs2, vm  is nf & op2828=0x1 & op2627=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27  unimpl
+:vsuxei128.v     vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxei128_v(vs3,rs1,vs2);}
+:vsuxei128.v     vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg2ei128_v;
+:vsuxseg2ei128.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg2ei128_v(vs3,rs1,vs2);}
+:vsuxseg2ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg2ei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg3ei128_v;
+:vsuxseg3ei128.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg3ei128_v(vs3,rs1,vs2);}
+:vsuxseg3ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg3ei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg4ei128_v;
+:vsuxseg4ei128.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg4ei128_v(vs3,rs1,vs2);}
+:vsuxseg4ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg4ei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg5ei128_v;
+:vsuxseg5ei128.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg5ei128_v(vs3,rs1,vs2);}
+:vsuxseg5ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg5ei128_v(vs3,rs1,vs2,v0);}
 
+define pcodeop vsuxseg6ei128_v;
+:vsuxseg6ei128.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg6ei128_v(vs3,rs1,vs2);}
+:vsuxseg6ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg6ei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg7ei128_v;
+:vsuxseg7ei128.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg7ei128_v(vs3,rs1,vs2);}
+:vsuxseg7ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg7ei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg8ei128_v;
+:vsuxseg8ei128.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg8ei128_v(vs3,rs1,vs2);}
+:vsuxseg8ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg8ei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxei16_v;
 # vsuxei16.v       nf 28=0 27..26=1 vm vs2 rs1 14..12=0x5 vs3 6..0=0x27
 # vsuxei16.v  vs3, (rs1), vs2, vm # unordered 16-bit indexed store of SEW data
-:vsuxei16.v   vs3, (rs1), vs2, vm  is nf & op2828=0x0 & op2627=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27  unimpl
+:vsuxei16.v     vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxei16_v(vs3,rs1,vs2);}
+:vsuxei16.v     vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg2ei16_v;
+:vsuxseg2ei16.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg2ei16_v(vs3,rs1,vs2);}
+:vsuxseg2ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg2ei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg3ei16_v;
+:vsuxseg3ei16.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg3ei16_v(vs3,rs1,vs2);}
+:vsuxseg3ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg3ei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg4ei16_v;
+:vsuxseg4ei16.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg4ei16_v(vs3,rs1,vs2);}
+:vsuxseg4ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg4ei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg5ei16_v;
+:vsuxseg5ei16.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg5ei16_v(vs3,rs1,vs2);}
+:vsuxseg5ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg5ei16_v(vs3,rs1,vs2,v0);}
 
+define pcodeop vsuxseg6ei16_v;
+:vsuxseg6ei16.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg6ei16_v(vs3,rs1,vs2);}
+:vsuxseg6ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg6ei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg7ei16_v;
+:vsuxseg7ei16.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg7ei16_v(vs3,rs1,vs2);}
+:vsuxseg7ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg7ei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg8ei16_v;
+:vsuxseg8ei16.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg8ei16_v(vs3,rs1,vs2);}
+:vsuxseg8ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg8ei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxei256_v;
 # vsuxei256.v      nf 28=1 27..26=1 vm vs2 rs1 14..12=0x5 vs3 6..0=0x27
 # vsuxei256.v  vs3, (rs1), vs2, vm # unordered 256-bit indexed store of SEW data
-:vsuxei256.v   vs3, (rs1), vs2, vm  is nf & op2828=0x1 & op2627=0x1 & vm & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27  unimpl
+:vsuxei256.v   vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxei256_v(vs3,rs1,vs2);}
+:vsuxei256.v   vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg2ei256_v;
+:vsuxseg2ei256.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg2ei256_v(vs3,rs1,vs2);}
+:vsuxseg2ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg2ei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg3ei256_v;
+:vsuxseg3ei256.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg3ei256_v(vs3,rs1,vs2);}
+:vsuxseg3ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg3ei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg4ei256_v;
+:vsuxseg4ei256.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg4ei256_v(vs3,rs1,vs2);}
+:vsuxseg4ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg4ei256_v(vs3,rs1,vs2,v0);}
 
+define pcodeop vsuxseg5ei256_v;
+:vsuxseg5ei256.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg5ei256_v(vs3,rs1,vs2);}
+:vsuxseg5ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg5ei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg6ei256_v;
+:vsuxseg6ei256.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg6ei256_v(vs3,rs1,vs2);}
+:vsuxseg6ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg6ei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg7ei256_v;
+:vsuxseg7ei256.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg7ei256_v(vs3,rs1,vs2);}
+:vsuxseg7ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg7ei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg8ei256_v;
+:vsuxseg8ei256.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg8ei256_v(vs3,rs1,vs2);}
+:vsuxseg8ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsuxseg8ei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxei32_v;
 # vsuxei32.v       nf 28=0 27..26=1 vm vs2 rs1 14..12=0x6 vs3 6..0=0x27
 # vsuxei32.v  vs3, (rs1), vs2, vm # unordered 32-bit indexed store of SEW data
-:vsuxei32.v   vs3, (rs1), vs2, vm  is nf & op2828=0x0 & op2627=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27  unimpl
+:vsuxei32.v   vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxei32_v(vs3,rs1,vs2);}
+:vsuxei32.v   vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg2ei32_v;
+:vsuxseg2ei32.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg2ei32_v(vs3,rs1,vs2);}
+:vsuxseg2ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg2ei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg3ei32_v;
+:vsuxseg3ei32.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg3ei32_v(vs3,rs1,vs2);}
+:vsuxseg3ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg3ei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg4ei32_v;
+:vsuxseg4ei32.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg4ei32_v(vs3,rs1,vs2);}
+:vsuxseg4ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg4ei32_v(vs3,rs1,vs2,v0);}
 
+define pcodeop vsuxseg5ei32_v;
+:vsuxseg5ei32.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg5ei32_v(vs3,rs1,vs2);}
+:vsuxseg5ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg5ei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg6ei32_v;
+:vsuxseg6ei32.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg6ei32_v(vs3,rs1,vs2);}
+:vsuxseg6ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg6ei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg7ei32_v;
+:vsuxseg7ei32.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg7ei32_v(vs3,rs1,vs2);}
+:vsuxseg7ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg7ei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg8ei32_v;
+:vsuxseg8ei32.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg8ei32_v(vs3,rs1,vs2);}
+:vsuxseg8ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg8ei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxei512_v;
 # vsuxei512.v      nf 28=1 27..26=1 vm vs2 rs1 14..12=0x6 vs3 6..0=0x27
 # vsuxei512.v  vs3, (rs1), vs2, vm # unordered 512-bit indexed store of SEW data
-:vsuxei512.v   vs3, (rs1), vs2, vm  is nf & op2828=0x1 & op2627=0x1 & vm & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27  unimpl
+:vsuxei512.v     vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxei512_v(vs3,rs1,vs2);}
+:vsuxei512.v     vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxei512_v(vs3,rs1,vs2,v0);}
 
-# vsuxei64.v       nf 28=0 27..26=1 vm vs2 rs1 14..12=0x7 vs3 6..0=0x27
-# vsuxei64.v  vs3, (rs1), vs2, vm # unordered 64-bit indexed store of SEW data
-:vsuxei64.v   vs3, (rs1), vs2, vm  is nf & op2828=0x0 & op2627=0x1 & vm & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27  unimpl
+define pcodeop vsuxseg2ei512_v;
+:vsuxseg2ei512.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg2ei512_v(vs3,rs1,vs2);}
+:vsuxseg2ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg2ei512_v(vs3,rs1,vs2,v0);}
 
-# vsuxei8.v        nf 28=0 27..26=1 vm vs2 rs1 14..12=0x0 vs3 6..0=0x27
-# vsuxei8.v   vs3, (rs1), vs2, vm # unordered  8-bit indexed store of SEW data
-:vsuxei8.v    vs3, (rs1), vs2, vm  is nf & op2828=0x0 & op2627=0x1 & vm & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27  unimpl
+define pcodeop vsuxseg3ei512_v;
+:vsuxseg3ei512.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg3ei512_v(vs3,rs1,vs2);}
+:vsuxseg3ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg3ei512_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg4ei512_v;
+:vsuxseg4ei512.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg4ei512_v(vs3,rs1,vs2);}
+:vsuxseg4ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg4ei512_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg5ei512_v;
+:vsuxseg5ei512.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg5ei512_v(vs3,rs1,vs2);}
+:vsuxseg5ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg5ei512_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg6ei512_v;
+:vsuxseg6ei512.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg6ei512_v(vs3,rs1,vs2);}
+:vsuxseg6ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg6ei512_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg7ei512_v;
+:vsuxseg7ei512.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg7ei512_v(vs3,rs1,vs2);}
+:vsuxseg7ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg7ei512_v(vs3,rs1,vs2,v0);}
 
-# vsxei1024.v      nf 28=1 27..26=3 vm vs2 rs1 14..12=0x7 vs3 6..0=0x27
-# vsxei1024.v   vs3, (rs1), vs2, vm  # ordered 1024-bit indexed store of SEW data
-:vsxei1024.v    vs3, (rs1), vs2, vm   is nf & op2828=0x1 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27  unimpl
+define pcodeop vsuxseg8ei512_v;
+:vsuxseg8ei512.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x1 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg8ei512_v(vs3,rs1,vs2);}
+:vsuxseg8ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsuxseg8ei512_v(vs3,rs1,vs2,v0);}
 
-# vsxei128.v       nf 28=1 27..26=3 vm vs2 rs1 14..12=0x0 vs3 6..0=0x27
-# vsxei128.v   vs3, (rs1), vs2, vm  # ordered 128-bit indexed store of SEW data
-:vsxei128.v    vs3, (rs1), vs2, vm   is nf & op2828=0x1 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27  unimpl
+define pcodeop vsuxei64_v;
+# vsuxei64.v       nf 28=0 27..26=1 vm vs2 rs1 14..12=0x7 vs3 6..0=0x27
+# vsuxei64.v  vs3, (rs1), vs2, vm # unordered 64-bit indexed store of SEW data
+:vsuxei64.v     vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxei64_v(vs3,rs1,vs2);}
+:vsuxei64.v     vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxei64_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg2ei64_v;
+:vsuxseg2ei64.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg2ei64_v(vs3,rs1,vs2);}
+:vsuxseg2ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg2ei64_v(vs3,rs1,vs2,v0);}
 
-# vsxei16.v        nf 28=0 27..26=3 vm vs2 rs1 14..12=0x5 vs3 6..0=0x27
-# vsxei16.v   vs3, (rs1), vs2, vm  # ordered 16-bit indexed store of SEW data
-:vsxei16.v    vs3, (rs1), vs2, vm   is nf & op2828=0x0 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27  unimpl
+define pcodeop vsuxseg3ei64_v;
+:vsuxseg3ei64.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg3ei64_v(vs3,rs1,vs2);}
+:vsuxseg3ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg3ei64_v(vs3,rs1,vs2,v0);}
 
-# vsxei256.v       nf 28=1 27..26=3 vm vs2 rs1 14..12=0x5 vs3 6..0=0x27
-# vsxei256.v   vs3, (rs1), vs2, vm  # ordered 256-bit indexed store of SEW data
-:vsxei256.v    vs3, (rs1), vs2, vm   is nf & op2828=0x1 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27  unimpl
+define pcodeop vsuxseg4ei64_v;
+:vsuxseg4ei64.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg4ei64_v(vs3,rs1,vs2);}
+:vsuxseg4ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg4ei64_v(vs3,rs1,vs2,v0);}
 
-# vsxei32.v        nf 28=0 27..26=3 vm vs2 rs1 14..12=0x6 vs3 6..0=0x27
-# vsxei32.v   vs3, (rs1), vs2, vm  # ordered 32-bit indexed store of SEW data
-:vsxei32.v    vs3, (rs1), vs2, vm   is nf & op2828=0x0 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27  unimpl
+define pcodeop vsuxseg5ei64_v;
+:vsuxseg5ei64.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg5ei64_v(vs3,rs1,vs2);}
+:vsuxseg5ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg5ei64_v(vs3,rs1,vs2,v0);}
 
-# vsxei512.v       nf 28=1 27..26=3 vm vs2 rs1 14..12=0x6 vs3 6..0=0x27
-# vsxei512.v   vs3, (rs1), vs2, vm  # ordered 512-bit indexed store of SEW data
-:vsxei512.v    vs3, (rs1), vs2, vm   is nf & op2828=0x1 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27  unimpl
+define pcodeop vsuxseg6ei64_v;
+:vsuxseg6ei64.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg6ei64_v(vs3,rs1,vs2);}
+:vsuxseg6ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg6ei64_v(vs3,rs1,vs2,v0);}
 
-# vsxei64.v        nf 28=0 27..26=3 vm vs2 rs1 14..12=0x7 vs3 6..0=0x27
-# vsxei64.v   vs3, (rs1), vs2, vm  # ordered 64-bit indexed store of SEW data
-:vsxei64.v    vs3, (rs1), vs2, vm   is nf & op2828=0x0 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27  unimpl
+define pcodeop vsuxseg7ei64_v;
+:vsuxseg7ei64.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg7ei64_v(vs3,rs1,vs2);}
+:vsuxseg7ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg7ei64_v(vs3,rs1,vs2,v0);}
 
-# vsxei8.v         nf 28=0 27..26=3 vm vs2 rs1 14..12=0x0 vs3 6..0=0x27
-# vsxei8.v    vs3, (rs1), vs2, vm  # ordered  8-bit indexed store of SEW data
-:vsxei8.v     vs3, (rs1), vs2, vm   is nf & op2828=0x0 & op2627=0x3 & vm & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27  unimpl
+define pcodeop vsuxseg8ei64_v;
+:vsuxseg8ei64.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg8ei64_v(vs3,rs1,vs2);}
+:vsuxseg8ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsuxseg8ei64_v(vs3,rs1,vs2,v0);}
 
+define pcodeop vsuxei8_v;
+# vsuxei8.v        nf 28=0 27..26=1 vm vs2 rs1 14..12=0x0 vs3 6..0=0x27
+# vsuxei8.v   vs3, (rs1), vs2, vm # unordered  8-bit indexed store of SEW data
+:vsuxei8.v     vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxei8_v(vs3,rs1,vs2);}
+:vsuxei8.v     vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg2ei8_v;
+:vsuxseg2ei8.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg2ei8_v(vs3,rs1,vs2);}
+:vsuxseg2ei8.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg2ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg3ei8_v;
+:vsuxseg3ei8.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg3ei8_v(vs3,rs1,vs2);}
+:vsuxseg3ei8.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg3ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg4ei8_v;
+:vsuxseg4ei8.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg4ei8_v(vs3,rs1,vs2);}
+:vsuxseg4ei8.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg4ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg5ei8_v;
+:vsuxseg5ei8.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg5ei8_v(vs3,rs1,vs2);}
+:vsuxseg5ei8.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg5ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg6ei8_v;
+:vsuxseg6ei8.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg6ei8_v(vs3,rs1,vs2);}
+:vsuxseg6ei8.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg6ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg7ei8_v;
+:vsuxseg7ei8.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg7ei8_v(vs3,rs1,vs2);}
+:vsuxseg7ei8.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg7ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsuxseg8ei8_v;
+:vsuxseg8ei8.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg8ei8_v(vs3,rs1,vs2);}
+:vsuxseg8ei8.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x1 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsuxseg8ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxei1024_v;
+# vsoxei1024.v      nf 28=1 27..26=3 vm vs2 rs1 14..12=0x7 vs3 6..0=0x27
+# vsoxei1024.v   vs3, (rs1), vs2, vm  # ordered 1024-bit indexed store of SEW data
+:vsoxei1024.v     vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxei1024_v(vs3,rs1,vs2);}
+:vsoxei1024.v     vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxsege2i1024_v;
+:vsoxseg2ei1024.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxsege2i1024_v(vs3,rs1,vs2);}
+:vsoxseg2ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxsege2i1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg3ei1024_v;
+:vsoxseg3ei1024.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg3ei1024_v(vs3,rs1,vs2);}
+:vsoxseg3ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg3ei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg4ei1024_v;
+:vsoxseg4ei1024.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg4ei1024_v(vs3,rs1,vs2);}
+:vsoxseg4ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg4ei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg5ei1024_v;
+:vsoxseg5ei1024.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg5ei1024_v(vs3,rs1,vs2);}
+:vsoxseg5ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg5ei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg6ei1024_v;
+:vsoxseg6ei1024.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg6ei1024_v(vs3,rs1,vs2);}
+:vsoxseg6ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg6ei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg7ei1024_v;
+:vsoxseg7ei1024.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg7ei1024_v(vs3,rs1,vs2);}
+:vsoxseg7ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg7ei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg8ei1024_v;
+:vsoxseg8ei1024.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg8ei1024_v(vs3,rs1,vs2);}
+:vsoxseg8ei1024.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg8ei1024_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxei128_v;
+# vsoxei128.v       nf 28=1 27..26=3 vm vs2 rs1 14..12=0x0 vs3 6..0=0x27
+# vsoxei128.v   vs3, (rs1), vs2, vm  # ordered 128-bit indexed store of SEW data
+:vsoxei128.v     vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxei128_v(vs3,rs1,vs2);}
+:vsoxei128.v     vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg2ei128_v;
+:vsoxseg2ei128.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg2ei128_v(vs3,rs1,vs2);}
+:vsoxseg2ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg2ei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg3ei128_v;
+:vsoxseg3ei128.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg3ei128_v(vs3,rs1,vs2);}
+:vsoxseg3ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg3ei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg4ei128_v;
+:vsoxseg4ei128.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg4ei128_v(vs3,rs1,vs2);}
+:vsoxseg4ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg4ei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg5ei128_v;
+:vsoxseg5ei128.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg5ei128_v(vs3,rs1,vs2);}
+:vsoxseg5ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg5ei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg6ei128_v;
+:vsoxseg6ei128.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg6ei128_v(vs3,rs1,vs2);}
+:vsoxseg6ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg6ei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg7ei128_v;
+:vsoxseg7ei128.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg7ei128_v(vs3,rs1,vs2);}
+:vsoxseg7ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg7ei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg8ei128_v;
+:vsoxseg8ei128.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg8ei128_v(vs3,rs1,vs2);}
+:vsoxseg8ei128.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg8ei128_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxei16_v;
+# vsoxei16.v        nf 28=0 27..26=3 vm vs2 rs1 14..12=0x5 vs3 6..0=0x27
+# vsoxei16.v   vs3, (rs1), vs2, vm  # ordered 16-bit indexed store of SEW data
+:vsoxei16.v     vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxei16_v(vs3,rs1,vs2);}
+:vsoxei16.v     vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg2ei16_v;
+:vsoxseg2ei16.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg2ei16_v(vs3,rs1,vs2);}
+:vsoxseg2ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg2ei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg3ei16_v;
+:vsoxseg3ei16.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg3ei16_v(vs3,rs1,vs2);}
+:vsoxseg3ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg3ei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg4ei16_v;
+:vsoxseg4ei16.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg4ei16_v(vs3,rs1,vs2);}
+:vsoxseg4ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg4ei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg5ei16_v;
+:vsoxseg5ei16.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg5ei16_v(vs3,rs1,vs2);}
+:vsoxseg5ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg5ei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg6ei16_v;
+:vsoxseg6ei16.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg6ei16_v(vs3,rs1,vs2);}
+:vsoxseg6ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg6ei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg7ei16_v;
+:vsoxseg7ei16.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg7ei16_v(vs3,rs1,vs2);}
+:vsoxseg7ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg7ei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg8ei16_v;
+:vsoxseg8ei16.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg8ei16_v(vs3,rs1,vs2);}
+:vsoxseg8ei16.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg8ei16_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxei256_v;
+# vsoxei256.v       nf 28=1 27..26=3 vm vs2 rs1 14..12=0x5 vs3 6..0=0x27
+# vsoxei256.v   vs3, (rs1), vs2, vm  # ordered 256-bit indexed store of SEW data
+:vsoxei256.v     vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxei256_v(vs3,rs1,vs2);}
+:vsoxei256.v     vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg2ei256_v;
+:vsoxseg2ei256.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg2ei256_v(vs3,rs1,vs2);}
+:vsoxseg2ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg2ei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg3ei256_v;
+:vsoxseg3ei256.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg3ei256_v(vs3,rs1,vs2);}
+:vsoxseg3ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg3ei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg4ei256_v;
+:vsoxseg4ei256.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg4ei256_v(vs3,rs1,vs2);}
+:vsoxseg4ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg4ei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg5ei256_v;
+:vsoxseg5ei256.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg5ei256_v(vs3,rs1,vs2);}
+:vsoxseg5ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg5ei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg6ei256_v;
+:vsoxseg6ei256.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg6ei256_v(vs3,rs1,vs2);}
+:vsoxseg6ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg6ei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg7ei256_v;
+:vsoxseg7ei256.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg7ei256_v(vs3,rs1,vs2);}
+:vsoxseg7ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg7ei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg8ei256_v;
+:vsoxseg8ei256.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg8ei256_v(vs3,rs1,vs2);}
+:vsoxseg8ei256.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x5 & vs3 & op0006=0x27 {vsoxseg8ei256_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxei32_v;
+# vsoxei32.v        nf 28=0 27..26=3 vm vs2 rs1 14..12=0x6 vs3 6..0=0x27
+# vsoxei32.v   vs3, (rs1), vs2, vm  # ordered 32-bit indexed store of SEW data
+:vsoxei32.v     vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxei32_v(vs3,rs1,vs2);}
+:vsoxei32.v     vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg2ei32_v;
+:vsoxseg2ei32.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg2ei32_v(vs3,rs1,vs2);}
+:vsoxseg2ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg2ei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg3ei32_v;
+:vsoxseg3ei32.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg3ei32_v(vs3,rs1,vs2);}
+:vsoxseg3ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg3ei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg4ei32_v;
+:vsoxseg4ei32.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg4ei32_v(vs3,rs1,vs2);}
+:vsoxseg4ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg4ei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg5ei32_v;
+:vsoxseg5ei32.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg5ei32_v(vs3,rs1,vs2);}
+:vsoxseg5ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg5ei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg6ei32_v;
+:vsoxseg6ei32.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg6ei32_v(vs3,rs1,vs2);}
+:vsoxseg6ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg6ei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg7ei32_v;
+:vsoxseg7ei32.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg7ei32_v(vs3,rs1,vs2);}
+:vsoxseg7ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg7ei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg8ei32_v;
+:vsoxseg8ei32.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg8ei32_v(vs3,rs1,vs2);}
+:vsoxseg8ei32.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg8ei32_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxei512_v;
+# vsoxei512.v       nf 28=1 27..26=3 vm vs2 rs1 14..12=0x6 vs3 6..0=0x27
+# vsoxei512.v   vs3, (rs1), vs2, vm  # ordered 512-bit indexed store of SEW data
+:vsoxei512.v     vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxei512_v(vs3,rs1,vs2);}
+:vsoxei512.v     vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxei512_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg2ei512_v;
+:vsoxseg2ei512.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg2ei512_v(vs3,rs1,vs2);}
+:vsoxseg2ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg2ei512_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg3ei512_v;
+:vsoxseg3ei512.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg3ei512_v(vs3,rs1,vs2);}
+:vsoxseg3ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg3ei512_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg4ei512_v;
+:vsoxseg4ei512.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg4ei512_v(vs3,rs1,vs2);}
+:vsoxseg4ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg4ei512_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg5ei512_v;
+:vsoxseg5ei512.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg5ei512_v(vs3,rs1,vs2);}
+:vsoxseg5ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg5ei512_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg6ei512_v;
+:vsoxseg6ei512.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg6ei512_v(vs3,rs1,vs2);}
+:vsoxseg6ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg6ei512_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg7ei512_v;
+:vsoxseg7ei512.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg7ei512_v(vs3,rs1,vs2);}
+:vsoxseg7ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg7ei512_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg8ei512_v;
+:vsoxseg8ei512.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x1 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg8ei512_v(vs3,rs1,vs2);}
+:vsoxseg8ei512.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x1 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x6 & vs3 & op0006=0x27 {vsoxseg8ei512_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxei64_v;
+# vsoxei64.v        nf 28=0 27..26=3 vm vs2 rs1 14..12=0x7 vs3 6..0=0x27
+# vsoxei64.v   vs3, (rs1), vs2, vm  # ordered 64-bit indexed store of SEW data
+:vsoxei64.v     vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxei64_v(vs3,rs1,vs2);}
+:vsoxei64.v     vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxei64_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg2ei64_v;
+:vsoxseg2ei64.v vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg2ei64_v(vs3,rs1,vs2);}
+:vsoxseg2ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg2ei64_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg3ei64_v;
+:vsoxseg3ei64.v vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg3ei64_v(vs3,rs1,vs2);}
+:vsoxseg3ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg3ei64_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg4ei64_v;
+:vsoxseg4ei64.v vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg4ei64_v(vs3,rs1,vs2);}
+:vsoxseg4ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg4ei64_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg5ei64_v;
+:vsoxseg5ei64.v vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg5ei64_v(vs3,rs1,vs2);}
+:vsoxseg5ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg5ei64_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg6ei64_v;
+:vsoxseg6ei64.v vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg6ei64_v(vs3,rs1,vs2);}
+:vsoxseg6ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg6ei64_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg7ei64_v;
+:vsoxseg7ei64.v vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg7ei64_v(vs3,rs1,vs2);}
+:vsoxseg7ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg7ei64_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg8ei64_v;
+:vsoxseg8ei64.v vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg8ei64_v(vs3,rs1,vs2);}
+:vsoxseg8ei64.v vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x7 & vs3 & op0006=0x27 {vsoxseg8ei64_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxei8_v;
+# vsoxei8.v         nf 28=0 27..26=3 vm vs2 rs1 14..12=0x0 vs3 6..0=0x27
+# vsoxei8.v    vs3, (rs1), vs2, vm  # ordered  8-bit indexed store of SEW data
+:vsoxei8.v      vs3, (rs1), vs2         is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxei8_v(vs3,rs1,vs2);}
+:vsoxei8.v      vs3, (rs1), vs2, "v0.t" is nf & op2931=0 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg2ei8_v;
+:vsoxseg2ei8.v  vs3, (rs1), vs2         is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg2ei8_v(vs3,rs1,vs2);}
+:vsoxseg2ei8.v  vs3, (rs1), vs2, "v0.t" is nf & op2931=1 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg2ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg3ei8_v;
+:vsoxseg3ei8.v  vs3, (rs1), vs2         is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg3ei8_v(vs3,rs1,vs2);}
+:vsoxseg3ei8.v  vs3, (rs1), vs2, "v0.t" is nf & op2931=2 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg3ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg4ei8_v;
+:vsoxseg4ei8.v  vs3, (rs1), vs2         is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg4ei8_v(vs3,rs1,vs2);}
+:vsoxseg4ei8.v  vs3, (rs1), vs2, "v0.t" is nf & op2931=3 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg4ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg5ei8_v;
+:vsoxseg5ei8.v  vs3, (rs1), vs2         is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg5ei8_v(vs3,rs1,vs2);}
+:vsoxseg5ei8.v  vs3, (rs1), vs2, "v0.t" is nf & op2931=4 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg5ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg6ei8_v;
+:vsoxseg6ei8.v  vs3, (rs1), vs2         is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg6ei8_v(vs3,rs1,vs2);}
+:vsoxseg6ei8.v  vs3, (rs1), vs2, "v0.t" is nf & op2931=5 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg6ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg7ei8_v;
+:vsoxseg7ei8.v  vs3, (rs1), vs2         is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg7ei8_v(vs3,rs1,vs2);}
+:vsoxseg7ei8.v  vs3, (rs1), vs2, "v0.t" is nf & op2931=6 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg7ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vsoxseg8ei8_v;
+:vsoxseg8ei8.v  vs3, (rs1), vs2         is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=1 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg8ei8_v(vs3,rs1,vs2);}
+:vsoxseg8ei8.v  vs3, (rs1), vs2, "v0.t" is nf & op2931=7 & op2828=0x0 & op2627=0x3 & op2525=0 & vs2 & rs1 & op1214=0x0 & vs3 & op0006=0x27 {vsoxseg8ei8_v(vs3,rs1,vs2,v0);}
+
+define pcodeop vwadd_vv;
 # vwadd.vv       31..26=0x31 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vwadd.vv  vd, vs2, vs1, vm  # vector-vector
-:vwadd.vv   vd, vs2, vs1, vm   is op2631=0x31 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vwadd.vv   vd, vs2, vs1         is op2631=0x31 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwadd_vv(vs2,vs1);}
+:vwadd.vv   vd, vs2, vs1, "v0.t" is op2631=0x31 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwadd_vv(vs2,vs1,v0);}
 
+define pcodeop vwcvt_xxv;
+define pcodeop vwadd_vx;
 # vwadd.vx       31..26=0x31 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwadd.vx  vd, vs2, rs1, vm  # vector-scalar
-:vwadd.vx   vd, vs2, rs1, vm   is op2631=0x31 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwcvt.x.x.v vd, vs2              is op2631=0x31 & op2525=1 & vs2 & op1519=0 & op1214=0x6 & vd & op0006=0x57 {vd=vwcvt_xxv(vs2);}
+:vwcvt.x.x.v vd, vs2, "v0.t"      is op2631=0x31 & op2525=0 & vs2 & op1519=0 & op1214=0x6 & vd & op0006=0x57 {vd=vwcvt_xxv(vs2,v0);}
+:vwadd.vx    vd, vs2, rs1         is op2631=0x31 & op2525=1 & vs2 & rs1      & op1214=0x6 & vd & op0006=0x57 {vd=vwadd_vx(vs2,rs1);}
+:vwadd.vx    vd, vs2, rs1, "v0.t" is op2631=0x31 & op2525=0 & vs2 & rs1      & op1214=0x6 & vd & op0006=0x57 {vd=vwadd_vx(vs2,rs1,v0);}
 
+define pcodeop vwadd_wv;
 # vwadd.wv       31..26=0x35 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vwadd.wv  vd, vs2, vs1, vm  # vector-vector
-:vwadd.wv   vd, vs2, vs1, vm   is op2631=0x35 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vwadd.wv   vd, vs2, vs1         is op2631=0x35 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwadd_wv(vs2,vs1);}
+:vwadd.wv   vd, vs2, vs1, "v0.t" is op2631=0x35 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwadd_wv(vs2,vs1,v0);}
 
+define pcodeop vwadd_wx;
 # vwadd.wx       31..26=0x35 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwadd.wx  vd, vs2, rs1, vm  # vector-scalar
-:vwadd.wx   vd, vs2, rs1, vm   is op2631=0x35 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwadd.wx   vd, vs2, rs1         is op2631=0x35 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwadd_wx(vs2,rs1);}
+:vwadd.wx   vd, vs2, rs1, "v0.t" is op2631=0x35 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwadd_wx(vs2,rs1,v0);}
 
+define pcodeop vwaddu_vv;
 # vwaddu.vv      31..26=0x30 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vwaddu.vv  vd, vs2, vs1, vm  # vector-vector
-:vwaddu.vv   vd, vs2, vs1, vm   is op2631=0x30 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+#??:vwcvtu.x.x.v vd, vs2              is op2631=0x30 & op2525=1 & vs2 & op1519=0 & op1214=0x2 & vd & op0006=0x57
+#??:vwcvtu.x.x.v vd, vs2, "v0.t"      is op2631=0x30 & op2525=0 & vs2 & op1519=0 & op1214=0x2 & vd & op0006=0x57
+:vwaddu.vv    vd, vs2, vs1         is op2631=0x30 & op2525=1 & vs2 & vs1      & op1214=0x2 & vd & op0006=0x57 {vd=vwaddu_vv(vs2,vs1);}
+:vwaddu.vv    vd, vs2, vs1, "v0.t" is op2631=0x30 & op2525=0 & vs2 & vs1      & op1214=0x2 & vd & op0006=0x57 {vd=vwaddu_vv(vs2,vs1,v0);}
 
+define pcodeop vwcvtu_xxv;
+define pcodeop vwaddu_vx;
 # vwaddu.vx      31..26=0x30 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwaddu.vx  vd, vs2, rs1, vm  # vector-scalar
-:vwaddu.vx   vd, vs2, rs1, vm   is op2631=0x30 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwcvtu.x.x.v vd, vs2             is op2631=0x30 & op2525=1 & vs2 & op1519=0 & op1214=0x6 & vd & op0006=0x57 {vd=vwcvtu_xxv(vs2);}
+:vwcvtu.x.x.v vd, vs2, "v0.t"     is op2631=0x30 & op2525=0 & vs2 & op1519=0 & op1214=0x6 & vd & op0006=0x57 {vd=vwcvtu_xxv(vs2,v0);}
+:vwaddu.vx   vd, vs2, rs1         is op2631=0x30 & op2525=1 & vs2 & rs1      & op1214=0x6 & vd & op0006=0x57 {vd=vwaddu_vx(vs2,rs1);}
+:vwaddu.vx   vd, vs2, rs1, "v0.t" is op2631=0x30 & op2525=0 & vs2 & rs1      & op1214=0x6 & vd & op0006=0x57 {vd=vwaddu_vx(vs2,rs1,v0);}
 
+define pcodeop vwaddu_wv;
 # vwaddu.wv      31..26=0x34 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vwaddu.wv  vd, vs2, vs1, vm  # vector-vector
-:vwaddu.wv   vd, vs2, vs1, vm   is op2631=0x34 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vwaddu.wv   vd, vs2, vs1         is op2631=0x34 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwaddu_wv(vs2,vs1);}
+:vwaddu.wv   vd, vs2, vs1, "v0.t" is op2631=0x34 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwaddu_wv(vs2,vs1,v0);}
 
+define pcodeop vwaddu_wx;
 # vwaddu.wx      31..26=0x34 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwaddu.wx  vd, vs2, rs1, vm  # vector-scalar
-:vwaddu.wx   vd, vs2, rs1, vm   is op2631=0x34 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwaddu.wx   vd, vs2, rs1         is op2631=0x34 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwaddu_wx(vs2,rs1);}
+:vwaddu.wx   vd, vs2, rs1, "v0.t" is op2631=0x34 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwaddu_wx(vs2,rs1,v0);}
 
+define pcodeop vwmacc_vv;
 # vwmacc.vv      31..26=0x3d vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vwmacc.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]
-:vwmacc.vv  vd, vs1, vs2, vm     is op2631=0x3d & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vwmacc.vv  vd, vs1, vs2         is op2631=0x3d & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwmacc_vv(vs2,vs1);}
+:vwmacc.vv  vd, vs1, vs2, "v0.t" is op2631=0x3d & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwmacc_vv(vs2,vs1,v0);}
 
+define pcodeop vwmacc_vx;
 # vwmacc.vx      31..26=0x3d vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwmacc.vx vd, rs1, vs2, vm    # vd[i] = +(x[rs1] * vs2[i]) + vd[i]
-:vwmacc.vx  vd, rs1, vs2, vm     is op2631=0x3d & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwmacc.vx  vd, rs1, vs2         is op2631=0x3d & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmacc_vx(rs1,vs2);}
+:vwmacc.vx  vd, rs1, vs2, "v0.t" is op2631=0x3d & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmacc_vx(rs1,vs2,v0);}
 
+define pcodeop vwmaccsu_vv;
 # vwmaccsu.vv    31..26=0x3f vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vwmaccsu.vv vd, vs1, vs2, vm    # vd[i] = +(signed(vs1[i]) * unsigned(vs2[i])) + vd[i]
-:vwmaccsu.vv  vd, vs1, vs2, vm     is op2631=0x3f & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vwmaccsu.vv  vd, vs1, vs2         is op2631=0x3f & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwmaccsu_vv(vs1,vs2);}
+:vwmaccsu.vv  vd, vs1, vs2, "v0.t" is op2631=0x3f & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwmaccsu_vv(vs1,vs2,v0);}
 
+define pcodeop vwmaccsu_vx;
 # vwmaccsu.vx    31..26=0x3f vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwmaccsu.vx vd, rs1, vs2, vm    # vd[i] = +(signed(x[rs1]) * unsigned(vs2[i])) + vd[i]
-:vwmaccsu.vx  vd, rs1, vs2, vm     is op2631=0x3f & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwmaccsu.vx  vd, rs1, vs2         is op2631=0x3f & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmaccsu_vx(rs1,vs2);}
+:vwmaccsu.vx  vd, rs1, vs2, "v0.t" is op2631=0x3f & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmaccsu_vx(rs1,vs2,v0);}
 
+define pcodeop vwmaccu_vv;
 # vwmaccu.vv     31..26=0x3c vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vwmaccu.vv vd, vs1, vs2, vm    # vd[i] = +(vs1[i] * vs2[i]) + vd[i]
-:vwmaccu.vv  vd, vs1, vs2, vm     is op2631=0x3c & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vwmaccu.vv  vd, vs1, vs2         is op2631=0x3c & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwmaccsu_vv(vs1,vs2);}
+:vwmaccu.vv  vd, vs1, vs2, "v0.t" is op2631=0x3c & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwmaccsu_vv(vs1,vs2,v0);}
 
+define pcodeop vwmaccu_vx;
 # vwmaccu.vx     31..26=0x3c vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwmaccu.vx vd, rs1, vs2, vm    # vd[i] = +(x[rs1] * vs2[i]) + vd[i]
-:vwmaccu.vx  vd, rs1, vs2, vm     is op2631=0x3c & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwmaccu.vx  vd, rs1, vs2         is op2631=0x3c & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmaccu_vx(rs1,vs2);}
+:vwmaccu.vx  vd, rs1, vs2, "v0.t" is op2631=0x3c & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmaccu_vx(rs1,vs2,v0);}
 
+define pcodeop vwmaccus_vx;
 # vwmaccus.vx    31..26=0x3e vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwmaccus.vx vd, rs1, vs2, vm    # vd[i] = +(unsigned(x[rs1]) * signed(vs2[i])) + vd[i]
-:vwmaccus.vx  vd, rs1, vs2, vm     is op2631=0x3e & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwmaccus.vx  vd, rs1, vs2         is op2631=0x3e & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmaccus_vx(rs1,vs2);}
+:vwmaccus.vx  vd, rs1, vs2, "v0.t" is op2631=0x3e & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmaccus_vx(rs1,vs2,v0);}
 
+define pcodeop vwmul_vv;
 # vwmul.vv       31..26=0x3b vm vs2 vs1 14..12=0x2 vd 6..0=0x57
-# vwmul.vv  vd, vs2, vs1, vm# vector-vector
-:vwmul.vv   vd, vs2, vs1, vm is op2631=0x3b & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+# vwmul.vv  vd, vs2, vs1, vm  # vector-vector
+:vwmul.vv   vd, vs2, vs1         is op2631=0x3b & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwmul_vv(vs2,vs1);}
+:vwmul.vv   vd, vs2, vs1, "v0.t" is op2631=0x3b & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwmul_vv(vs2,vs1,v0);}
 
+define pcodeop vwmul_vx;
 # vwmul.vx       31..26=0x3b vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwmul.vx  vd, vs2, rs1, vm # vector-scalar
-:vwmul.vx   vd, vs2, rs1, vm  is op2631=0x3b & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwmul.vx   vd, vs2, rs1         is op2631=0x3b & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmul_vx(vs2,rs1);}
+:vwmul.vx   vd, vs2, rs1, "v0.t" is op2631=0x3b & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmul_vx(vs2,rs1,v0);}
 
+define pcodeop vwmulsu_vv;
 # vwmulsu.vv     31..26=0x3a vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vwmulsu.vv vd, vs2, vs1, vm # vector-vector
-:vwmulsu.vv  vd, vs2, vs1, vm  is op2631=0x3a & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vwmulsu.vv  vd, vs2, vs1         is op2631=0x3a & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwmulsu_vv(vs2,vs1);}
+:vwmulsu.vv  vd, vs2, vs1, "v0.t" is op2631=0x3a & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwmulsu_vv(vs2,vs1,v0);}
 
+define pcodeop vwmulsu_vx;
 # vwmulsu.vx     31..26=0x3a vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwmulsu.vx vd, vs2, rs1, vm # vector-scalar
-:vwmulsu.vx  vd, vs2, rs1, vm  is op2631=0x3a & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwmulsu.vx  vd, vs2, rs1         is op2631=0x3a & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmulsu_vx(vs2,rs1);}
+:vwmulsu.vx  vd, vs2, rs1, "v0.t" is op2631=0x3a & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmulsu_vx(vs2,rs1,v0);}
 
+define pcodeop vwmulu_vv;
 # vwmulu.vv      31..26=0x38 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vwmulu.vv vd, vs2, vs1, vm # vector-vector
-:vwmulu.vv  vd, vs2, vs1, vm  is op2631=0x38 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vwmulu.vv  vd, vs2, vs1          is op2631=0x38 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwmulu_vv(vs2,vs1);}
+:vwmulu.vv  vd, vs2, vs1, "v0.t"  is op2631=0x38 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwmulu_vv(vs2,vs1,v0);}
 
+define pcodeop vwmulu_vx;
 # vwmulu.vx      31..26=0x38 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwmulu.vx vd, vs2, rs1, vm # vector-scalar
-:vwmulu.vx  vd, vs2, rs1, vm  is op2631=0x38 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwmulu.vx  vd, vs2, rs1         is op2631=0x38 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmulu_vx(vs2,rs1);}
+:vwmulu.vx  vd, vs2, rs1, "v0.t" is op2631=0x38 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwmulu_vx(vs2,rs1,v0);}
 
+define pcodeop vwredsum_vs;
 # vwredsum.vs    31..26=0x31 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vwredsum.vs  vd, vs2, vs1, vm   # 2*SEW = 2*SEW + sum(sign-extend(SEW))
-:vwredsum.vs   vd, vs2, vs1, vm    is op2631=0x31 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vwredsum.vs   vd, vs2, vs1         is op2631=0x31 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vwredsum_vs(vs2,vs1);}
+:vwredsum.vs   vd, vs2, vs1, "v0.t" is op2631=0x31 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vwredsum_vs(vs2,vs1,v0);}
 
+define pcodeop vwredsumu_vs;
 # vwredsumu.vs   31..26=0x30 vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vwredsumu.vs vd, vs2, vs1, vm   # 2*SEW = 2*SEW + sum(zero-extend(SEW))
-:vwredsumu.vs  vd, vs2, vs1, vm    is op2631=0x30 & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vwredsumu.vs  vd, vs2, vs1         is op2631=0x30 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vwredsumu_vs(vs2,vs1);}
+:vwredsumu.vs  vd, vs2, vs1, "v0.t" is op2631=0x30 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vwredsumu_vs(vs2,vs1,v0);}
 
+define pcodeop vwsub_vv;
 # vwsub.vv       31..26=0x33 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vwsub.vv  vd, vs2, vs1, vm  # vector-vector
-:vwsub.vv   vd, vs2, vs1, vm   is op2631=0x33 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vwsub.vv   vd, vs2, vs1         is op2631=0x33 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwsub_vv(vs2,vs1);}
+:vwsub.vv   vd, vs2, vs1, "v0.t" is op2631=0x33 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwsub_vv(vs2,vs1,v0);}
 
+define pcodeop vwsub_vx;
 # vwsub.vx       31..26=0x33 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwsub.vx  vd, vs2, rs1, vm  # vector-scalar
-:vwsub.vx   vd, vs2, rs1, vm   is op2631=0x33 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwsub.vx   vd, vs2, rs1         is op2631=0x33 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwsub_vx(vs2,rs1);}
+:vwsub.vx   vd, vs2, rs1, "v0.t" is op2631=0x33 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwsub_vx(vs2,rs1,v0);}
 
+define pcodeop vwsub_wv;
 # vwsub.wv       31..26=0x37 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vwsub.wv  vd, vs2, vs1, vm  # vector-vector
-:vwsub.wv   vd, vs2, vs1, vm   is op2631=0x37 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vwsub.wv   vd, vs2, vs1         is op2631=0x37 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwsub_wv(vs2,vs1);}
+:vwsub.wv   vd, vs2, vs1, "v0.t" is op2631=0x37 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwsub_wv(vs2,vs1,v0);}
 
+define pcodeop vwsub_wx;
 # vwsub.wx       31..26=0x37 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwsub.wx  vd, vs2, rs1, vm  # vector-scalar
-:vwsub.wx   vd, vs2, rs1, vm   is op2631=0x37 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwsub.wx   vd, vs2, rs1         is op2631=0x37 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwsub_wx(vs2,rs1);}
+:vwsub.wx   vd, vs2, rs1, "v0.t" is op2631=0x37 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwsub_wx(vs2,rs1,v0);}
 
+define pcodeop vwsubu_vv;
 # vwsubu.vv      31..26=0x32 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vwsubu.vv  vd, vs2, vs1, vm  # vector-vector
-:vwsubu.vv   vd, vs2, vs1, vm   is op2631=0x32 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vwsubu.vv   vd, vs2, vs1         is op2631=0x32 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwsubu_vv(vs2,vs1);}
+:vwsubu.vv   vd, vs2, vs1, "v0.t" is op2631=0x32 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwsubu_vv(vs2,vs1,v0);}
 
+define pcodeop vwsubu_vx;
 # vwsubu.vx      31..26=0x32 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwsubu.vx  vd, vs2, rs1, vm  # vector-scalar
-:vwsubu.vx   vd, vs2, rs1, vm   is op2631=0x32 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwsubu.vx   vd, vs2, rs1         is op2631=0x32 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwsubu_vx(vs2,rs1);}
+:vwsubu.vx   vd, vs2, rs1, "v0.t" is op2631=0x32 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwsubu_vx(vs2,rs1,v0);}
 
+define pcodeop vwsubu_wv;
 # vwsubu.wv      31..26=0x36 vm vs2 vs1 14..12=0x2 vd 6..0=0x57
 # vwsubu.wv  vd, vs2, vs1, vm  # vector-vector
-:vwsubu.wv   vd, vs2, vs1, vm   is op2631=0x36 & vm & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vwsubu.wv   vd, vs2, vs1         is op2631=0x36 & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwsubu_wv(vs2,vs1);}
+:vwsubu.wv   vd, vs2, vs1, "v0.t" is op2631=0x36 & op2525=0 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x57 {vd=vwsubu_wv(vs2,vs1,v0);}
 
+define pcodeop vwsubu_wx;
 # vwsubu.wx      31..26=0x36 vm vs2 rs1 14..12=0x6 vd 6..0=0x57
 # vwsubu.wx  vd, vs2, rs1, vm  # vector-scalar
-:vwsubu.wx   vd, vs2, rs1, vm   is op2631=0x36 & vm & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57  unimpl
+:vwsubu.wx   vd, vs2, rs1         is op2631=0x36 & op2525=1 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwsubu_wx(vs2,rs1);}
+:vwsubu.wx   vd, vs2, rs1, "v0.t" is op2631=0x36 & op2525=0 & vs2 & rs1 & op1214=0x6 & vd & op0006=0x57 {vd=vwsubu_wx(vs2,rs1,v0);}
 
+define pcodeop vnot_v;
+define pcodeop vxor_vi;
 # vxor.vi        31..26=0x0b vm vs2 simm5 14..12=0x3 vd 6..0=0x57
 # vxor.vi vd, vs2, simm5, vm    # vector-immediate
-:vxor.vi  vd, vs2, simm5, vm     is op2631=0xb & vm & vs2 & simm5 & op1214=0x3 & vd & op0006=0x57  unimpl
+:vnot.v   vd, vs2                is op2631=0xb & op2525=1 & vs2 & sop1519=0x1f & op1214=0x3 & vd & op0006=0x57 {vd=vnot_v(vs2);}
+:vnot.v   vd, vs2, "v0.t"        is op2631=0xb & op2525=0 & vs2 & sop1519=0x1f & op1214=0x3 & vd & op0006=0x57 {vd=vnot_v(vs2,v0);}
+:vxor.vi  vd, vs2, simm5         is op2631=0xb & op2525=1 & vs2 & simm5        & op1214=0x3 & vd & op0006=0x57 {vd=vxor_vi(vs2,simm5);}
+:vxor.vi  vd, vs2, simm5, "v0.t" is op2631=0xb & op2525=0 & vs2 & simm5        & op1214=0x3 & vd & op0006=0x57 {vd=vxor_vi(vs2,simm5,v0);}
 
+define pcodeop vxor_vv;
 # vxor.vv         31..26=0x0b vm vs2 vs1 14..12=0x0 vd 6..0=0x57
 # vxor.vv vd, vs2, vs1, vm    # Vector-vector
-:vxor.vv  vd, vs2, vs1, vm     is op2631=0xb & vm & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57  unimpl
+:vxor.vv  vd, vs2, vs1         is op2631=0xb & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vxor_vv(vs2,vs1);}
+:vxor.vv  vd, vs2, vs1, "v0.t" is op2631=0xb & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 {vd=vxor_vv(vs2,vs1,v0);}
 
+define pcodeop vxor_vx;
 # vxor.vx        31..26=0x0b vm vs2 rs1 14..12=0x4 vd 6..0=0x57
 # vxor.vx vd, vs2, rs1, vm    # vector-scalar
-:vxor.vx  vd, vs2, rs1, vm     is op2631=0xb & vm & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57  unimpl
+:vxor.vx  vd, vs2, rs1         is op2631=0xb & op2525=1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vxor_vx(vs2,rs1);}
+:vxor.vx  vd, vs2, rs1, "v0.t" is op2631=0xb & op2525=0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 {vd=vxor_vx(vs2,rs1,v0);}
 
+define pcodeop vzext_vf2;
 # vzext.vf2      31..26=0x12 vm vs2 19..15=6 14..12=0x2 vd 6..0=0x57
 # vzext.vf2 vd, vs2, vm  # Zero-extend SEW/2 source to SEW destination
-:vzext.vf2  vd, vs2, vm   is op2631=0x12 & vm & vs2 & op1519=0x6 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vzext.vf2  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0x6 & op1214=0x2 & vd & op0006=0x57 {vd=vzext_vf2(vs2);}
+:vzext.vf2  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0x6 & op1214=0x2 & vd & op0006=0x57 {vd=vzext_vf2(vs2,v0);}
 
+define pcodeop vzext_vf4;
 # vzext.vf4      31..26=0x12 vm vs2 19..15=4 14..12=0x2 vd 6..0=0x57
 # vzext.vf4 vd, vs2, vm  # Zero-extend SEW/4 source to SEW destination
-:vzext.vf4  vd, vs2, vm   is op2631=0x12 & vm & vs2 & op1519=0x4 & op1214=0x2 & vd & op0006=0x57  unimpl
+:vzext.vf4  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0x4 & op1214=0x2 & vd & op0006=0x57 {vd=vzext_vf4(vs2);}
+:vzext.vf4  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0x4 & op1214=0x2 & vd & op0006=0x57 {vd=vzext_vf4(vs2,v0);}
 
+define pcodeop vzext_vf8;
 # vzext.vf8      31..26=0x12 vm vs2 19..15=2 14..12=0x2 vd 6..0=0x57
 # vzext.vf8 vd, vs2, vm  # Zero-extend SEW/8 source to SEW destination
-:vzext.vf8  vd, vs2, vm   is op2631=0x12 & vm & vs2 & op1519=0x2 & op1214=0x2 & vd & op0006=0x57  unimpl
-
+:vzext.vf8  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0x2 & op1214=0x2 & vd & op0006=0x57 {vd=vzext_vf8(vs2);}
+:vzext.vf8  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0x2 & op1214=0x2 & vd & op0006=0x57 {vd=vzext_vf8(vs2,v0);}
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.table.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.table.sinc
index 749ac3e8e..a592fa2e1 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.table.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.table.sinc
@@ -78,18 +78,21 @@ rdL: zero is r0711 & zero & op0711=0 { export 0:8; }
 
 frd:  fr0711 is fr0711 { export fr0711; }
 frs1: fr1519 is fr1519 { export fr1519; }
+@if FPSIZE == "128"
 frs2: fr2024 is fr2024 { export fr2024; }
 frs3: fr2731 is fr2731 { export fr2731; }
+frdS:  fr0711 is fr0711 { local tmp = fr0711:$(SFLEN); export tmp; }
+frdD:  fr0711 is fr0711 { local tmp = fr0711:$(DFLEN); export tmp; }
+@endif
 
 #TODO  dest may be bad, might need an assign macro
-#frdS:  fr0711 is fr0711 { local tmp = fr0711:$(SFLEN); export tmp; }
+
 frs1S: fr1519 is fr1519 { local tmp = fr1519:$(SFLEN); export tmp; }
 frs2S: fr2024 is fr2024 { local tmp = fr2024:$(SFLEN); export tmp; }
 frs3S: fr2731 is fr2731 { local tmp = fr2731:$(SFLEN); export tmp; }
 
 @if ((FPSIZE == "64") || (FPSIZE == "128"))
 #TODO  dest may be bad, might need an assign macro
-#frdD:  fr0711 is fr0711 { local tmp = fr0711:$(DFLEN); export tmp; }
 frs1D: fr1519 is fr1519 { local tmp = fr1519:$(DFLEN); export tmp; }
 frs2D: fr2024 is fr2024 { local tmp = fr2024:$(DFLEN); export tmp; }
 frs3D: fr2731 is fr2731 { local tmp = fr2731:$(DFLEN); export tmp; }
@@ -172,10 +175,8 @@ aqrl: ".rl"   is op2526=1 { export 1:$(XLEN); }
 aqrl: ".aq"   is op2526=2 { export 2:$(XLEN); }
 aqrl: ".aqrl" is op2526=3 { export 3:$(XLEN); }
 
-
-
-crs1: cr0711 is cr0711 { export cr0711; }
-crs1: zero is cr0711 & zero & cop0711=0 { export 0:$(XLEN); }
+#crs1: cr0711 is cr0711 { export cr0711; }
+#crs1: zero is cr0711 & zero & cop0711=0 { export 0:$(XLEN); }
 
 crd: cd0711 is cd0711 { export cd0711; }
 crd: zero is zero & cop0711=0 { export 0:$(XLEN); }
@@ -183,17 +184,11 @@ crd: zero is zero & cop0711=0 { export 0:$(XLEN); }
 crs2: cr0206 is cr0206 { export cr0206; }
 crs2: zero is cr0206 & zero & cop0206=0 { export 0:$(XLEN); }
 
-cfrs1: cfr0711 is cfr0711 { export cfr0711; }
-
 cfrd: cfr0711 is cfr0711 { export cfr0711; }
 
-cfrs2: cfr0206 is cfr0206 { export cfr0206; }
-
 #ATTN  Not doing tables for the RVC registers since there is no
 #      zero register to worry about
 
-
-
 cimmI: imm is scop1212 & cop0206 [ imm = (scop1212 << 5) | (cop0206); ] { local tmp:$(XLEN) = imm; export tmp; }
 
 # used for goto
@@ -204,10 +199,11 @@ cbimm: reloc is scop1212 & cop1011 & cop0506 & cop0304 & cop0202 [ reloc = inst_
 cjimm: reloc is scop1212 & cop1111 & cop0910 & cop0808 & cop0707 & cop0606 & cop0305 & cop0202 [ reloc = inst_start + ((scop1212 << 11) | (cop1111 << 4) | (cop0910 << 8) | (cop0808 << 10) | (cop0707 << 6) | (cop0606 << 7) | (cop0305 << 1) | (cop0202 << 5)); ] { export *[ram]:$(XLEN) reloc; }
 
 
-nzuimm5: is cop0606=1 | cop0505=1 | cop0404=1 | cop0303 = 1 | cop0202=1 {}
+
 nzuimm6: is cop1212=1 | cop0606=1 | cop0505=1 | cop0404=1 | cop0303 = 1 | cop0202=1 {}
 
 @if ADDRSIZE == "32"
+nzuimm5: is cop0606=1 | cop0505=1 | cop0404=1 | cop0303 = 1 | cop0202=1 {}
 c6imm: uimm is cop1212=0 & cop0206 & nzuimm5 [ uimm = (cop0206 + 0); ] { local tmp:$(XLEN) = uimm; export tmp; }
 @elif ADDRSIZE == "64"
 c6imm: uimm is cop1212 & cop0206 & nzuimm6 [ uimm = (cop1212 << 5) | (cop0206); ] { local tmp:$(XLEN) = uimm; export tmp; }
@@ -366,15 +362,13 @@ vs3: v0711 is v0711 { export v0711; }
 vd:  v0711 is v0711 { export v0711; }
 
 simm5: sop1519 is sop1519 { local tmp:$(XLEN) = sop1519; export tmp; }
-# zimm: op1519 is op1519 { local tmp:$(XLEN) = op1519; export tmp; }
+uimm5: op1519 is op1519 { local tmp:$(XLEN) = op1519; export tmp; }
 
 nf: op2931 is op2931 { local tmp:$(XLEN) = op2931; export tmp; }
 
 vtypei: op2030 is op2030 { local tmp:$(XLEN) = op2030; export tmp; }
 
-
 bs: op3031 is op3031 { local tmp:$(XLEN) = op3031; export tmp; }
-rcon: op2023 is op2023 { local tmp:$(XLEN) = op2023; export tmp; }
 
 # imm=0 for baseline operation, nonzero values are reserved
 shamtw: 0 is op2024=0 { local tmp:$(XLEN) = 0; export tmp; }
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.xthead.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.xthead.sinc
new file mode 100644
index 000000000..10aaf9718
--- /dev/null
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.xthead.sinc
@@ -0,0 +1,712 @@
+# Material generated from https://github.com/T-head-Semi/thead-extension-spec/releases/download/2.0.0/xthead-2022-09-05-2.0.0.pdf
+#  Pcode is untested!
+
+# Cache Management Operations (XTheadCmo)
+
+@ifdef xtheadcmo1p0
+#    Clean all D-cache
+define pcodeop th.dcache.call;
+:th.dcache.call is op2531=0x0 & op2024=0x1 & op1519=0 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.call();}
+
+#    Clean & invalidate all D-cache
+define pcodeop th.dcache.ciall;
+:th.dcache.ciall is op2531=0x0 & op2024=0x3 & op1519=0 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.ciall();}
+
+#    Invalidate all D-cache
+define pcodeop th.dcache.iall;
+:th.dcache.iall is op2531=0x0 & op2024=0x2 & op1519=0 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.iall();}
+
+#    Clean D-cache at PA
+define pcodeop th.dcache.cpa;
+:th.dcache.cpa rs1 is op2531=0x1 & op2024=0x9 & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.cpa(rs1);}
+
+#    Clean and invalidate D-cache at PA
+define pcodeop th.dcache.cipa;
+:th.dcache.cipa rs1 is op2531=0x1 & op2024=0xb & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.cipa(rs1);}
+
+#    Invalidate D-cache at PA
+define pcodeop th.dcache.ipa;
+:th.dcache.ipa rs1 is op2531=0x1 & op2024=0xa & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.ipa(rs1);}
+
+#    Clean D-cache at VA
+define pcodeop th.dcache.cva;
+:th.dcache.cva rs1 is op2531=0x1 & op2024=0x5 & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.cva(rs1);}
+
+#    Clean and invalidate D-cache at VA
+define pcodeop th.dcache.civa;
+:th.dcache.civa rs1 is op2531=0x1 & op2024=0x7 & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.civa(rs1);}
+
+#    Invalidate D-cache at VA
+define pcodeop th.dcache.iva;
+:th.dcache.iva rs1 is op2531=0x1 & op2024=0x6 & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.iva(rs1);}
+
+#    Clean D-cache by set/way
+define pcodeop th.dcache.csw;
+:th.dcache.csw rs1 is op2531=0x1 & op2024=0x1 & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.csw(rs1);}
+
+#    Clean & invalidate D-cache by set/way
+define pcodeop th.dcache.cisw;
+:th.dcache.cisw rs1 is op2531=0x1 & op2024=0x3 & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.cisw(rs1);}
+
+#    Invalidate D-cache by set/way
+define pcodeop th.dcache.isw;
+:th.dcache.isw rs1 is op2531=0x1 & op2024=0x2 & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.isw(rs1);}
+
+#    Clean L1 D-cache at PA
+define pcodeop th.dcache.cpal1;
+:th.dcache.cpal1 rs1 is op2531=0x1 & op2024=0x8 & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.cpal1(rs1);}
+
+#    Clean L1 D-cache at VA
+define pcodeop th.dcache.cval1;
+:th.dcache.cval1 rs1 is op2531=0x1 & op2024=0x4 & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.dcache.cval1(rs1);}
+
+#    Invalidate all I-cache
+define pcodeop th.icache.iall;
+:th.icache.iall is op2531=0x0 & op2024=0x10 & op1519=0 & op1214=0 & op0711=0 & op0006=0x0b {th.icache.iall();}
+
+#    Invalidate all I-cache on all harts
+define pcodeop th.icache.ialls;
+:th.icache.ialls is op2531=0x0 & op2024=0x11 & op1519=0 & op1214=0 & op0711=0 & op0006=0x0b {th.icache.ialls();}
+
+#    Invalidate I-cache at PA
+define pcodeop th.icache.ipa;
+:th.icache.ipa rs1 is op2531=0x1 & op2024=0x18 & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.icache.ipa(rs1);}
+
+#    Invalidate I-cache at VA
+define pcodeop th.icache.iva;
+:th.icache.iva rs1 is op2531=0x1 & op2024=0x10 & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.icache.iva(rs1);}
+
+#    Clean all L2 cache
+define pcodeop th.l2cache.call;
+:th.l2cache.call is op2531=0x0 & op2024=0x15 & op1519=0 & op1214=0 & op0711=0 & op0006=0x0b {th.l2cache.call();}
+
+#    Clean & invalidate all L2 cache
+define pcodeop th.l2cache.ciall;
+:th.l2cache.ciall is op2531=0x0 & op2024=0x17 & op1519=0 & op1214=0 & op0711=0 & op0006=0x0b {th.l2cache.ciall();}
+
+#    Invalidate all L2 cache
+define pcodeop th.l2cache.iall;
+:th.l2cache.iall is op2531=0x0 & op2024=0x16 & op1519=0 & op1214=0 & op0711=0 & op0006=0x0b {th.l2cache.iall();}
+
+@endif
+
+# Multi-core synchronization instructions (XTheadSync)
+
+@ifdef xtheadsync1p0
+
+#    Invalidate TLB (page table cache) on all harts via broadcasting.
+define pcodeop th.sfence.vmas;
+:th.sfence.vmas rs1, rs2 is op2531=0x2 & rs2 & rs1 & op1214=0 & op0711=0 & op0006=0x0b {th.sfence.vmas(rs1,rs2);}
+
+#    Ensures that all preceding instructions retire earlier than this instruction and all subsequent
+#    instructions retire later than this instruction.
+define pcodeop th.sync;
+:th.sync is op2531=0x0 & op2024=0x18 & op1519=0 & op1214=0 & op0711=0 & op0006=0x0b {th.sync();}
+
+#    Broadcasts an instruction, that ensures that all preceding instructions retire earlier than this
+#    instruction and all subsequent instructions retire later than this instruction on all harts.
+define pcodeop th.sync.s;
+:th.sync.s is op2531=0x0 & op2024=0x19 & op1519=0 & op1214=0 & op0711=0 & op0006=0x0b {th.sync.s();}
+
+#    Ensures that all preceding instructions retire earlier than this instruction and all subsequent
+#    instructions retire later than this instruction and clears the pipeline when this instruction retires.
+define pcodeop th.sync.i;
+:th.sync.i is op2531=0x0 & op2024=0x1a & op1519=0 & op1214=0 & op0711=0 & op0006=0x0b {th.sync.i();}
+
+#    Ensures that all preceding instructions retire earlier than this instruction and all subsequent
+#    instructions retire later than this instruction and clears the pipeline when this instruction retires
+#    on all harts.
+define pcodeop th.sync.is;
+:th.sync.is is op2531=0x0 & op2024=0x1b & op1519=0 & op1214=0 & op0711=0 & op0006=0x0b {th.sync.is();}
+
+@endif
+
+# Address calculation instructions (XTheadBa) version 1.0
+
+@ifdef xtheadba1p0
+
+# we need locally defined immediate fields for several of these ops
+uimm2631: op2631 is op2631 {local tmp:$(XLEN) = op2631; export tmp;}
+uimm2526: op2526 is op2526 {local tmp:$(XLEN) = op2526; export tmp;}
+uimm2025: op2025 is op2025 {local tmp:$(XLEN) = op2025; export tmp;}
+uimm2024: op2024 is op2024 {local tmp:$(XLEN) = op2024; export tmp;}
+simm2024: sop2024 is sop2024 {local tmp:$(XLEN) = sop2024; export tmp;}
+
+#    Add a shifted operand to a second operand
+define pcodeop th.addsl;
+:th.addsl rd, rs1, rs2, uimm2526 is op2731=0 & uimm2526 & rs2 & rs1 & op1214=0x1 & rd & op0006=0x0b {rd= rs1 + (rs2 << uimm2526);}
+
+@endif
+
+# Basic bit-manipulation (XTheadBb) version 1.0
+
+@ifdef xtheadbb1p0
+
+#    Perform a cyclic right shift
+define pcodeop th.srri;
+:th.srri rd, rs1, uimm2025 is op2631=0x4 & uimm2025 & rs1 & op1214=0x1 & rd & op0006=0x0b {rd=th.srri(rs1,uimm2025);}
+
+#    Perform a cyclic right shift on word operand
+define pcodeop th.srriw;
+:th.srriw rd, rs1, uimm2024 is op2531=0xa & uimm2024 & rs1 & op1214=0x1 & rd & op0006=0x0b {rd=th.srriw(rs1,uimm2024);}
+
+#    Extract and sign-extend bits
+define pcodeop th.ext;
+:th.ext rd, rs1, uimm2631, uimm2025 is uimm2631 & uimm2025 & rs1 & op1214=0x2 & rd & op0006=0x0b {
+    local mask = ((1 << (uimm2631 - uimm2025 + 1))  - 1) << uimm2025 ;
+    rd = sext((rs1 & mask) >> uimm2025 );
+}
+
+#    Extract and zero-extend bits
+define pcodeop th.extu;
+:th.extu rd, rs1, uimm2631, uimm2025 is uimm2631 & uimm2025 & rs1 & op1214=0x3 & rd & op0006=0x0b {
+    local mask = ((1 << (uimm2631 - uimm2025 + 1))  - 1) << uimm2025 ;
+    rd = zext((rs1 & mask) >> uimm2025 );
+}
+
+#    Find first '0'-bit
+define pcodeop th.ff0;
+:th.ff0 rd, rs1 is op2731=0x10 & op2526=0x2 & op2024=0x00 & rs1 & op1214=0x1 & rd & op0006=0x0b {rd=th.ff0(rs1);}
+
+#    Find first '1'-bit
+define pcodeop th.ff1;
+:th.ff1 rd, rs1 is op2731=0x10 & op2526=0x3 & op2024=0x00 & rs1 & op1214=0x1 & rd & op0006=0x0b {rd=th.ff1(rs1);}
+
+#    Reverse the byte order
+define pcodeop th.rev;
+:th.rev rd, rs1 is op2731=0x10 & op2526=0x1 & op2024=0x00 & rs1 & op1214=0x1 & rd & op0006=0x0b {rd=th.rev(rs1);}
+
+#   Reverse the byte order of a word operand
+define pcodeop th.revb;
+:th.revw rd, rs1 is op2731=0x12 & op2526=0x0 & op2024=0x00 & rs1 & op1214=0x1 & rd & op0006=0x0b {rd=th.revb(rs1);}
+
+#    Test for NUL bytes
+define pcodeop th.tstnbz;
+:th.tstnbz rd, rs1 is op2731=0x10 & op2526=0x0 & op2024=0x00 & rs1 & op1214=0x1 & rd & op0006=0x0b {rd=th.tstnbz(rs1);}
+
+# Single-bit instructions (XTheadBs)
+
+#    Tests if a single bit is set
+define pcodeop th.tst;
+:th.tst rd, rs1, uimm2025 is op2631=0x22 & uimm2025 & rs1 & op1214=0x1 & rd & op0006=0x0b {rd=th.tst(rs1,uimm2025);}
+
+@endif
+
+# Conditional move (XTheadCondMov) Version 1.0
+
+@ifdef xtheadcondmov1p0
+
+#    Move if equal zero
+define pcodeop th.mveqz;
+:th.mveqz rd, rs1, rs2 is op2731=0x08 & op2526=0 & rs2 & rs1 & op1214=0x1 & rd & op0006=0x0b {rd=th.mveqz(rs1,rs2);}
+
+#    Move if not equal zero
+define pcodeop th.mvneqz;
+:th.mvneqz rd, rs1, rs2 is op2731=0x08 & op2526=0x01 & rs2 & rs1 & op1214=0x1 & rd & op0006=0x0b {rd=th.mvneqz(rs1,rs2);}
+
+@endif
+
+# Indexed memory operations (XTheadMemIdx) Version 1.0
+
+@ifdef xtheadmemidx1p0
+
+#    Load indexed byte, increment address after loading
+:th.lbia rd, (rs1), simm2024, uimm2526 is op2731=0x3 & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1;
+    rd = sext(*[ram]:1 ea);
+    rs1 = rs1 + (sext(simm2024) << uimm2526);
+}
+
+#    Load indexed byte, increment address before loading
+:th.lbib rd, (rs1), simm2024, uimm2526 is op2731=0x1 & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    rs1 = rs1 + (sext(simm2024) << uimm2526);
+    local ea:$(XLEN) = rs1;
+    rd = sext(*[ram]:1 ea);
+}
+
+#    Load indexed unsigned byte, increment address after loading
+:th.lbuia rd, (rs1), simm2024, uimm2526 is op2731=0x13 & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1;
+    rd = zext(*[ram]:1 ea);
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+}
+
+#    Load indexed unsigned byte, increment address before loading
+:th.lbuib rd, (rs1), simm2024, uimm2526 is op2731=0x11 & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+    local ea:$(XLEN) = rs1;
+    rd = zext(*[ram]:1 ea);
+}
+
+#    Load indexed half-word, increment address after loading
+:th.lhia rd, (rs1), simm2024, uimm2526 is op2731=0x07 & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1;
+    rd = sext(*[ram]:2 ea);
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+}
+
+#    Load indexed half-word, increment address before loading
+:th.lhib rd, (rs1), simm2024, uimm2526 is op2731=0x05 & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+    local ea:$(XLEN) = rs1;
+    rd = sext(*[ram]:2 ea);
+}
+
+#    Load indexed unsigned half-word, increment address after loading
+:th.lhuia rd, (rs1), simm2024, uimm2526 is op2731=0x17 & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1;
+    rd = sext(*[ram]:2 ea);
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+}
+
+#    Load indexed unsigned half-word, increment address before loading
+:th.lhuib rd, (rs1), simm2024, uimm2526 is op2731=0x15 & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+    local ea:$(XLEN) = rs1;
+    rd = sext(*[ram]:2 ea);
+}
+
+#    Load indexed word, increment address after loading
+:th.lwia rd, (rs1), simm2024, uimm2526 is op2731=0x0b & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+    local ea:$(XLEN) = rs1;
+    rd = sext(*[ram]:4 ea);
+}
+
+#    Load indexed word, increment address before loading
+:th.lwib rd, (rs1), simm2024, uimm2526 is op2731=0x09 & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+    local ea:$(XLEN) = rs1;
+    rd = sext(*[ram]:4 ea);
+}
+
+#    Load indexed unsigned word, increment address after loading
+:th.lwuia rd, (rs1), simm2024, uimm2526 is op2731=0x1b & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1;
+    rd = zext(*[ram]:4 ea);
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+}
+
+#    Load indexed unsigned word, increment address before loading
+:th.lwuib rd, (rs1), simm2024, uimm2526 is op2731=0x19 & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+    local ea:$(XLEN) = rs1;
+    rd = zext(*[ram]:4 ea);
+}
+
+@if ADDRSIZE == "64"
+#    Load indexed double-word, increment address after loading
+:th.ldia rd, (rs1), simm2024, uimm2526 is op2731=0x0f & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1;
+    rd = sext(*[ram]:8 ea);
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+}
+
+#    Load indexed double-word, increment address before loading
+:th.ldib rd, (rs1), simm2024, uimm2526 is op2731=0x0d & uimm2526 & simm2024 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+    local ea:$(XLEN) = rs1;
+    rd = sext(*[ram]:8 ea);
+}
+@endif
+
+#    Store indexed byte, increment address after loading
+:th.sbia rd, (rs1), simm2024, uimm2526 is op2731=0x03 & uimm2526 & simm2024 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1;
+    *[ram]:1 ea = rd;
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+}
+
+#    Store indexed byte, increment address before loading
+:th.sbib rd, (rs1), simm2024, uimm2526 is op2731=0x01 & uimm2526 & simm2024 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+    local ea:$(XLEN) = rs1;
+    *[ram]:1 ea = rd;
+}
+
+#    Store indexed half-word, increment address after loading
+:th.shia rd, (rs1), simm2024, uimm2526 is op2731=0x07 & uimm2526 & simm2024 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1;
+    *[ram]:2 ea = rd;
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+}
+
+#    Store indexed half-word, increment address before loading
+:th.shib rd, (rs1), simm2024, uimm2526 is op2731=0x05 & uimm2526 & simm2024 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+    local ea:$(XLEN) = rs1;
+    *[ram]:2 ea = rd;
+}
+
+#    Store indexed word, increment address after loading
+:th.swia rd, (rs1), simm2024, uimm2526 is op2731=0x0b & uimm2526 & simm2024 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1;
+    *[ram]:4 ea = rd;
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+}
+
+#    Store indexed word, increment address before loading
+:th.swib rd, (rs1), simm2024, uimm2526 is op2731=0x09 & uimm2526 & simm2024 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+    local ea:$(XLEN) = rs1;
+    *[ram]:4 ea = rd;
+}
+
+@if ADDRSIZE == "64"
+#    Store indexed word, increment address after loading
+:th.sdia rd, (rs1), simm2024, uimm2526 is op2731=0x0f & uimm2526 & simm2024 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1;
+    *[ram]:8 ea = rd;
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+}
+
+#    Store indexed double word, increment address before loading
+:th.sdib rd, (rs1), simm2024, uimm2526 is op2731=0x0d & uimm2526 & simm2024 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    rs1 = rs1 + (sext(simm2024)<< uimm2526);
+    local ea:$(XLEN) = rs1;
+    *[ram]:8 ea = rd;
+}
+@endif
+
+#    Load indexed byte
+:th.lrb rd, rs1, rs2, uimm2526 is op2731=0x00 & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    rd = sext(*[ram]:1 ea);
+}
+
+#    Load indexed unsigned byte
+:th.lrbu rd, rs1, rs2, uimm2526 is op2731=0x10 & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    rd = zext(*[ram]:1 ea);
+}
+
+#    Load indexed half-word
+:th.lrh rd, rs1, rs2, uimm2526 is op2731=0x04 & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    rd = sext(*[ram]:2 ea);
+}
+
+#    Load indexed unsigned half-word
+:th.lrhu rd, rs1, rs2, uimm2526 is op2731=0x14 & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    rd = zext(*[ram]:2 ea);
+}
+
+#    Load indexed word
+:th.lrw rd, rs1, rs2, uimm2526 is op2731=0x08 & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    rd = sext(*[ram]:4 ea);
+}
+
+#    Load indexed unsigned word
+:th.lrwu rd, rs1, rs2, uimm2526 is op2731=0x18 & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    rd = zext(*[ram]:4 ea);
+}
+
+@if ADDRSIZE == "64"
+#    Load indexed double word
+:th.lrd rd, rs1, rs2, uimm2526 is op2731=0x0c & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    rd = sext(*[ram]:8 ea);
+}
+
+@endif
+
+#    Store indexed byte
+:th.srb rd, rs1, rs2, uimm2526 is op2731=0x00 & uimm2526 & rs2 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    *[ram]:1 ea = rd;
+}
+
+#    Store indexed half-word
+:th.srh rd, rs1, rs2, uimm2526 is op2731=0x04 & uimm2526 & rs2 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    *[ram]:2 ea = rd;
+}
+
+#    Store indexed word
+:th.srw rd, rs1, rs2, uimm2526 is op2731=0x08 & uimm2526 & rs2 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    *[ram]:4 ea = rd;
+}
+
+@if ADDRSIZE == "64"
+#    Store indexed double-word
+:th.srd rd, rs1, rs2, uimm2526 is op2731=0x0c & uimm2526 & rs2 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    *[ram]:8 ea = rd;
+}
+@endif
+
+#    Load unsigned indexed byte
+:th.lurb rd, rs1, rs2, uimm2526 is op2731=0x02 & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    rd = sext(*[ram]:1 ea);
+}
+
+#    Load unsigned indexed unsigned byte
+:th.lurbu rd, rs1, rs2, uimm2526 is op2731=0x12 & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    rd = zext(*[ram]:1 ea);
+}
+
+#    Load unsigned indexed half-word
+:th.lurh rd, rs1, rs2,  uimm2526 is op2731=0x06 & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    rd = sext(*[ram]:2 ea);
+}
+
+#    Load unsigned indexed unsigned half-word
+:th.lurhu rd, rs1, rs2, uimm2526 is op2731=0x16 & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    rd = zext(*[ram]:2 ea);
+}
+
+#    Load unsigned indexed word
+:th.lurw rd, rs1, rs2, uimm2526 is op2731=0x0a & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    rd = sext(*[ram]:4 ea);
+}
+
+#    Load unsigned indexed unsigned word
+:th.lurwu rd, rs1, rs2, uimm2526 is op2731=0x1a & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    rd = zext(*[ram]:4 ea);
+}
+
+@if ADDRSIZE == "64"
+#    Load unsigned indexed double-word
+:th.lurd rd, rs1, rs2, uimm2526 is op2731=0x0e & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    rd = sext(*[ram]:8 ea);
+}
+@endif
+
+#    Store unsigned indexed byte
+:th.surb rd, rs1, rs2, uimm2526 is op2731=0x02 & uimm2526 & rs2 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    *[ram]:1 ea = rd;
+}
+
+#    Store unsigned indexed half-word
+:th.surh rd, rs1, rs2, uimm2526 is op2731=0x06 & uimm2526 & rs2 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    *[ram]:2 ea = rd;
+}
+
+#    Store unsigned indexed word
+:th.surw rd, rs1, rs2, uimm2526 is op2731=0x0a & uimm2526 & rs2 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    *[ram]:4 ea = rd;
+}
+
+@if ADDRSIZE == "64"
+#    Store unsigned indexed double-word
+:th.surd rd, rs1, rs2, uimm2526 is op2731=0x0e & uimm2526 & rs2 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    *[ram]:8 ea = rd;
+}
+@endif
+@endif
+
+# Two-GPR memory operations (XTheadMemPair) Version 1
+
+@ifdef xtheadmempair1p0
+
+@if ADDRSIZE == "64"
+#    Load two 64-bit values from memory into two GPRs
+:th.ldd rd, rs2, (rs1), uimm2526, 4 is op2731=0x1f & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(uimm2526) << 4);
+    rd = *[ram]:8 ea;
+    rs2 = *[ram]:8 (ea + 8);
+}
+@endif
+
+#    Load two signed 32-bit values from memory into two GPRs
+:th.lwd rd, rs2, (rs1), uimm2526, 3 is op2731=0x1c & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(uimm2526) << 3);
+    rd = sext(*[ram]:4 ea);
+    rs2 = sext(*[ram]:4 (ea + 4));
+}
+
+#    Load two unsigned 32-bit values from memory into two GPRs
+:th.lwud rd, rs2, (rs1), uimm2526, 3 is op2731=0x1e & uimm2526 & rs2 & rs1 & op1214=0x4 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(uimm2526) << 3);
+    rd = zext(*[ram]:4 ea);
+    rs2 = zext(*[ram]:4 (ea + 4));
+}
+
+@if ADDRSIZE == "64"
+#    Store two 64-bit values to memory from two GPRs
+:th.sdd rd, rs2, (rs1), uimm2526, 4 is op2731=0x1f & uimm2526 & rs2 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(uimm2526) << 4);
+    *[ram]:8 ea = rd;
+    *[ram]:8 (ea + 8) = rs2;
+}
+@endif
+
+#    Store two 32-bit values to memory from two GPRs
+:th.swd rd, rs2, (rs1), uimm2526, 3 is op2731=0x1c & uimm2526 & rs2 & rs1 & op1214=0x5 & rd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(uimm2526) << 3);
+    *[ram]:4 ea = rd;
+    *[ram]:4 (ea + 4) = rs2;
+}
+@endif
+
+# Indexed memory operations for floating-point registers (XTheadFMemIdx) Version 1.0
+
+@ifdef xtheadfmemidx1p0
+
+#    Load indexed double-precision floating point value
+:th.flrd frd, rs1, rs2, uimm2526 is op2731=0x0c & uimm2526 & rs2 & rs1 & op1214=0x6 & frd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    frd = *[ram]:8 ea;
+}
+
+#    Load indexed single-precision floating point value
+:th.flrw frd, rs1, rs2, uimm2526 is op2731=0x08 & uimm2526 & rs2 & rs1 & op1214=0x6 & frd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    frd = *[ram]:4 ea;
+}
+
+#    Load unsigned indexed double-precision floating point value
+:th.flurd frd, rs1, rs2, uimm2526 is op2731=0x0e & uimm2526 & rs2 & rs1 & op1214=0x6 & frd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    frd = *[ram]:8 ea;
+}
+
+#    Load unsigned indexed single-precision floating point value
+:th.flurw frd, rs1, rs2, uimm2526 is op2731=0x0a & uimm2526 & rs2 & rs1 & op1214=0x6 & frd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2 )<< uimm2526);
+    frd = *[ram]:4 ea;
+}
+
+#    Store indexed double-precision floating point value
+:th.fsrd frd, rs1, rs2, uimm2526 is op2731=0x0c & uimm2526 & rs2 & rs1 & op1214=0x7 & frd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    *[ram]:8 ea = frd;
+}
+
+#    Store indexed single-precision floating point value
+:th.fsrw frd, rs1, rs2, uimm2526 is op2731=0x08 & uimm2526 & rs2 & rs1 & op1214=0x7 & frd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (rs2 << uimm2526);
+    *[ram]:4 ea = frd;
+}
+
+#    Store unsigned indexed double-precision floating point value
+:th.fsurd frd, rs1, rs2, uimm2526 is op2731=0x0e & uimm2526 & rs2 & rs1 & op1214=0x7 & frd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    *[ram]:8 ea = frd;
+}
+
+#    Store unsigned indexed single-precision floating point value
+:th.fsurw frd, rs1, rs2, uimm2526 is op2731=0x0a & uimm2526 & rs2 & rs1 & op1214=0x7 & frd & op0006=0xb
+{
+    local ea:$(XLEN) = rs1 + (zext(rs2) << uimm2526);
+    *[ram]:4 ea = frd;
+}
+
+@endif
+
+# Multiply-accumulate instructions (XTheadMac) Version 1.0
+
+@ifdef xtheadmac1p0
+
+#    Compute multiply-add result of double-word operands
+:th.mula rd, rs1, rs2 is op2731=0x04 & op2526=0 & rs2 & rs1 & op1214=0x1 & rd & op0006=0xb
+{
+    rd = rd + (rs1 * rs2);
+}
+
+#    Compute multiply-add result of half-word operands
+:th.mulah rd, rs1, rs2 is op2731=0x05 & op2526=0 & rs2 & rs1 & op1214=0x1 & rd & op0006=0xb
+{
+    # do we want a 32 bit sign extend here?
+    rd = sext(rd + (sext(rs1 & 0xffff) * sext(rs2 & 0xffff)));
+}
+
+#    Compute multiply-add result of word operands
+:th.mulaw rd, rs1, rs2 is op2731=0x04 & op2526=0x2 & rs2 & rs1 & op1214=0x1 & rd & op0006=0xb
+{
+    # do we want a 32 bit sign extend here?
+    rd = sext(rd + (rs1 * rs2));
+}
+
+#    Compute multiply-subtract result of double-word operands
+:th.muls rd, rs1, rs2 is op2731=0x04 & op2526=0x1 & rs2 & rs1 & op1214=0x1 & rd & op0006=0xb
+{
+    rd = rd - (rs1 * rs2);
+}
+
+#    Compute multiply-subtract result of half-word operands.
+:th.mulsh rd, rs1, rs2 is op2731=0x05 & op2526=0x1 & rs2 & rs1 & op1214=0x1 & rd & op0006=0xb
+{
+    # do we want a 32 bit sign extend here?
+    rd = sext(rd - (sext(rs1 & 0xffff) * sext(rs2 & 0xffff)));
+}
+
+#    Compute multiply-subtract result of word operands
+:th.mulsw rd, rs1, rs2 is op2731=0x04 & op2526=0x3 & rs2 & rs1 & op1214=0x1 & rd & op0006=0xb
+{
+    # do we want a 32 bit sign extend here?
+    rd = sext(rd - (sext(rs1) * sext(rs2)));
+}
+
+@endif
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.zcb.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.zcb.sinc
new file mode 100644
index 000000000..1d04755a0
--- /dev/null
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.zcb.sinc
@@ -0,0 +1,71 @@
+# Compressed bit manipulation instructions
+# Ref:  https://github.com/riscv/riscv-code-size-reduction/releases
+
+
+cuimm_b: uimm is cop0505 & cop0606 [uimm = (cop0505 << 1) + cop0606;] { local tmp:$(XLEN) = uimm; export tmp; }
+# c.lbu Load unsigned byte, 16-bit encoding
+:c.lbu cr0204s, cuimm_b(cr0709s) is cop0001=0x0 & cr0204s & cuimm_b & cr0709s & cop1012=0 & cop1315=0x4
+{
+	local ea:$(XLEN) = cr0709s + cuimm_b;
+	cr0204s = zext(*[ram]:1 ea);
+}
+
+cuimm_h: uimm is cop0505 [uimm = cop0505 << 1;] { local tmp:$(XLEN) = uimm; export tmp; }
+:c.lhu cr0204s, cuimm_h(cr0709s) is cop0001=0x0 & cr0204s & cuimm_h & cop0606=0 & cr0709s & cop1012=0x1 & cop1315=0x4
+{
+    local ea:$(XLEN) = cr0709s + cuimm_h;
+    cr0204s = zext(*[ram]:2 ea);
+}
+
+:c.lh cr0204s, cuimm_h(cr0709s) is cop0001=0x0 & cr0204s & cuimm_h & cop0606=0x1 & cr0709s & cop1012=0x1 & cop1315=0x4
+{
+    local ea:$(XLEN) = cr0709s + cuimm_h;
+    cr0204s = sext(*[ram]:2 ea);
+}
+
+:c.sb cr0204s, cuimm_b(cr0709s) is cop0001=0x0 & cr0204s & cuimm_b & cr0709s & cop1012=0x2 & cop1315=0x4
+{
+    local ea:$(XLEN) = cr0709s + cuimm_b;
+    *[ram]:1 ea = cr0204s;
+}
+
+:c.sh cr0204s, cuimm_h(cr0709s) is cop0001=0x0 & cr0204s & cuimm_h & cr0709s & cop1012=0x3 & cop1315=0x4
+{
+    local ea:$(XLEN) = cr0709s + cuimm_h;
+    *[ram]:2 ea = cr0204s;
+}
+
+:c.zext.b cr0709s is cop0001=0x1 & cop0204=0 & cop0506=0x3 & cr0709s & cop1012=0x7 & cop1315=0x4
+{
+    cr0709s = zext(cr0709s);
+}
+
+:c.sext.b cr0709s is cop0001=0x1 & cop0204=0x1 & cop0506=0x3 & cr0709s & cop1012=0x7 & cop1315=0x4
+{
+    cr0709s = sext(cr0709s);
+}
+
+:c.zext.h cr0709s is cop0001=0x1 & cop0204=0x2 & cop0506=0x3 & cr0709s & cop1012=0x7 & cop1315=0x4
+{
+    cr0709s = zext(cr0709s);
+}
+
+:c.sext.h cr0709s is cop0001=0x1 & cop0204=0x3 & cop0506=0x3 & cr0709s & cop1012=0x7 & cop1315=0x4
+{
+    cr0709s = sext(cr0709s);
+}
+
+:c.zext.w cr0709s is cop0001=0x1 & cop0204=0x4 & cop0506=0x3 & cr0709s & cop1012=0x7 & cop1315=0x4
+{
+    cr0709s = zext(cr0709s);
+}
+
+:c.not cr0709s is cop0001=0x1 & cop0204=0x5 & cop0506=0x3 & cr0709s & cop1012=0x7 & cop1315=0x4
+{
+    cr0709s = ~cr0709s;
+}
+
+:c.mul cr0709s, cr0204s is cop0001=0x1 & cr0204s & cop0506=0x2 & cr0709s & cop1012=0x7 & cop1315=0x4
+{
+    cr0709s = cr0709s * cr0204s;
+}
\ No newline at end of file
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.zknd.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.zknd.sinc
new file mode 100644
index 000000000..f606e204f
--- /dev/null
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.zknd.sinc
@@ -0,0 +1,16 @@
+# aes64ds - AES final round decryption instruction for RV64
+:aes64ds rd, rs1, rs2 is op2531=0x1d & rs2 & rs1 & op1214=0x0 & rd & op0006=0x33 unimpl
+
+# aes64dsm - AES middle round decryption instruction for RV64
+:aes64dsm rd, rs1, rs2 is op2531=0x1f & rs2 & rs1 & op1214=0x0 & rd & op0006=0x33 unimpl
+
+# aes64im - This instruction accelerates the inverse MixColumns step of the AES Block Cipher,
+#           and is used to aid creation of the decryption KeySchedule
+:aes64im rd, rs1 is op2531=0x18 & op2024=0x0 & rs1 & op1214=0x1 & rd & op0006=0x13 unimpl
+
+# aes64ks1i - This instruction implements part of the KeySchedule operation for the AES Block cipher
+#             involving the SBox operation.
+:aes64ks1i rd, rs1, succ is op2531=0x18 & op2424=1 & succ & rs1 & op1214=0x1 & rd & op0006=0x13 unimpl
+
+# aes64ks2 - This instruction implements part of the KeySchedule operation for the AES Block cipher
+:aes64ks2 rd, rs1, rs2 is op2531=0x3f & rs2 & rs1 & op1214=0x0 & rd & op0006=0x33 unimpl
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.zkne.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.zkne.sinc
new file mode 100644
index 000000000..1948c9eb2
--- /dev/null
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.zkne.sinc
@@ -0,0 +1,5 @@
+# aes64es - AES final round encryption instruction for RV64
+:aes64es rd, rs1, rs2 is op2531=0x19 & rs2 & rs1 & op1214=0x0 & rd & op0006=0x33 unimpl
+
+# aes64esm - AES middle round encryption instruction for RV64
+:aes64esm rd, rs1, rs2 is op2531=0x1b & rs2 & rs1 & op1214=0x0 & rd & op0006=0x33 unimpl
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.zknh.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.zknh.sinc
new file mode 100644
index 000000000..984aad47a
--- /dev/null
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.zknh.sinc
@@ -0,0 +1,41 @@
+#sha256sig0 - Implements the Sigma0 transformation function as used in the SHA2-256 hash function
+:sha256sig0 rd, rs1 is op2531=0x08 & op2024=0x02 & rs1 & op1214=0x1 & rd & op0006=0x13 unimpl
+
+#sha256sig1 - Implements the Sigma1 transformation function as used in the SHA2-256 hash function
+:sha256sig1 rd, rs1 is op2531=0x08 & op2024=0x03 & rs1 & op1214=0x1 & rd & op0006=0x13 unimpl
+
+#sha256sum0 - Implements the Sum0 transformation function as used in the SHA2-256 hash function
+:sha256sum0 rd, rs1 is op2531=0x08 & op2024=0x00 & rs1 & op1214=0x1 & rd & op0006=0x13 unimpl
+
+#sha256sum1 - Implements the Sum1 transformation function as used in the SHA2-256 hash function
+:sha256sum1 rd, rs1 is op2531=0x08 & op2024=0x01 & rs1 & op1214=0x1 & rd & op0006=0x13 unimpl
+
+# sha512sig0h - Implements the high half of the Sigma0 transformation, as used in the SHA2-512 hash function
+:sha512sig0h rd, rs1, rs2 is op2531=0x2e & rs2 & rs1 & op1214=0x0 & rd & op0006=0x33 unimpl
+
+# sha512sig0l - Implements the low half of the Sigma0 transformation, as used in the SHA2-512 hash function
+:sha512sig0l rd, rs1, rs2 is op2531=0x2a & rs2 & rs1 & op1214=0x0 & rd & op0006=0x33 unimpl
+
+# sha512sig1h - Implements the high half of the Sigma1 transformation, as used in the SHA2-512 hash function
+:sha512sig1h rd, rs1, rs2 is op2531=0x2f & rs2 & rs1 & op1214=0x0 & rd & op0006=0x33 unimpl
+
+# sha512sig1l - Implements the low half of the Sigma1 transformation, as used in the SHA2-512 hash function
+:sha512sig1l rd, rs1, rs2 is op2531=0x2b & rs2 & rs1 & op1214=0x0 & rd & op0006=0x33 unimpl
+
+# sha512sum0r - Implements the the Sum0 transformation, as used in the SHA2-512 hash function
+:sha512sum0r rd, rs1, rs2 is op2531=0x28 & rs2 & rs1 & op1214=0x0 & rd & op0006=0x33 unimpl
+
+# sha512sum1r - Implements the the Sum1 transformation, as used in the SHA2-512 hash function
+:sha512sum1r rd, rs1, rs2 is op2531=0x29 & rs2 & rs1 & op1214=0x0 & rd & op0006=0x33 unimpl
+
+# sha512sig0 - Implements the Sigma0 transformation function as used in the SHA2-512 hash function
+:sha512sig0 rd, rs1 is op2531=0x08 & op2024=0x06 & rs1 & op1214=0x1 & rd & op0006=0x13 unimpl
+
+# sha512sig1 - Implements the Sigma1 transformation function as used in the SHA2-512 hash function
+:sha512sig1 rd, rs1 is op2531=0x08 & op2024=0x07 & rs1 & op1214=0x1 & rd & op0006=0x13 unimpl
+
+# sha512sum0 - Implements the Sum0 transformation function as used in the SHA2-512 hash function
+:sha512sum0 rd, rs1 is op2531=0x08 & op2024=0x04 & rs1 & op1214=0x1 & rd & op0006=0x13 unimpl
+
+# sha512sum1 - Implements the Sum1 transformation function as used in the SHA2-512 hash function
+:sha512sum1 rd, rs1 is op2531=0x08 & op2024=0x05 & rs1 & op1214=0x1 & rd & op0006=0x13 unimpl
\ No newline at end of file
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.zksed.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.zksed.sinc
new file mode 100644
index 000000000..af84688cc
--- /dev/null
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.zksed.sinc
@@ -0,0 +1,5 @@
+# sm4ed - Accelerates the block encrypt/decrypt operation of the SM4 block cipher
+:sm4ed rd, rs1, rs2, bs is bs & op2529=0x18 & rs2 & rs1 & op1214=0x0 & rd & op0006=0x33 unimpl
+
+# sm4ks - Accelerates the Key Schedule operation of the SM4 block cipher
+:sm4ks rd, rs1, rs2, bs  is bs & op2529=0x1a & rs2 & rs1 & op1214=0x0 & rd & op0006=0x33 unimpl
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.zksh.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.zksh.sinc
new file mode 100644
index 000000000..74b939082
--- /dev/null
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.zksh.sinc
@@ -0,0 +1,5 @@
+# sm3p0 - Implements the P0 transformation function as used in the SM3 hash function
+:sm3p0 rd, rs1 is op2531=0x08 & op2024=0x08 & rs1 & op1214=0x1 & rd & op0006=0x13 unimpl
+
+#sm3p1 - Implements the P1 transformation function as used in the SM3 hash function
+:sm3p1 rd, rs1 is op2531=0x08 & op2024=0x09 & rs1 & op1214=0x1 & rd & op0006=0x13 unimpl
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.zvbb.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.zvbb.sinc
new file mode 100644
index 000000000..a1ba62937
--- /dev/null
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.zvbb.sinc
@@ -0,0 +1,64 @@
+# Vector bitmanip extension
+
+# vandn.[vv,vx] Bitwise And-Not
+# vand.vv vd, vs2, vs1, vm   # Vector-vector
+:vandn.vv  vd, vs2, vs1         is op2631=0x1 & op2525=1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 unimpl
+:vandn.vv  vd, vs2, vs1, "v0.t" is op2631=0x1 & op2525=0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 unimpl
+# vand.vv vd, vs2, vs1, vm   # Vector-scalar
+:vandn.vx  vd, vs2, vs1         is op2631=0x1 & op2525=1 & vs2 & vs1 & op1214=0x4 & vd & op0006=0x57 unimpl
+:vandn.vx  vd, vs2, vs1, "v0.t" is op2631=0x1 & op2525=0 & vs2 & vs1 & op1214=0x4 & vd & op0006=0x57 unimpl
+
+# vbrev vbrev.v vd, vs2, vm # Vector Reverse Bits in Elements
+:vbrev.v  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0xa & op1214=0x2 & vd & op0006=0x57 unimpl
+:vbrev.v  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0xa & op1214=0x2 & vd & op0006=0x57 unimpl
+
+# vbrev8.v vbrev8.v vd, vs2, vm # Vector Reverse Bits in Bytes
+:vbrev8.v  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0x8 & op1214=0x2 & vd & op0006=0x57 unimpl
+:vbrev8.v  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0x8 & op1214=0x2 & vd & op0006=0x57 unimpl
+
+# vrev8.v vd, vs2, vm # Vector Reverse Bytes
+:vrev8.v  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0x9 & op1214=0x2 & vd & op0006=0x57 unimpl
+:vrev8.v  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0x9 & op1214=0x2 & vd & op0006=0x57 unimpl
+
+# vclz.v vd, vs2, vm # Vector Count Leading Zeros
+:vclz.v  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0xc & op1214=0x2 & vd & op0006=0x57 unimpl
+:vclz.v  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0xc & op1214=0x2 & vd & op0006=0x57 unimpl
+
+# vctz.v vd, vs2, vm # Vector Count Trailing Zeros
+:vctz.v  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0xd & op1214=0x2 & vd & op0006=0x57 unimpl
+:vctz.v  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0xd & op1214=0x2 & vd & op0006=0x57 unimpl
+
+# vcpop.v vd, vs2, vm # Count the number of bits set in each element
+:vcpop.v  vd, vs2         is op2631=0x12 & op2525=1 & vs2 & op1519=0xe & op1214=0x2 & vd & op0006=0x57 unimpl
+:vcpop.v  vd, vs2, "v0.t" is op2631=0x12 & op2525=0 & vs2 & op1519=0xe & op1214=0x2 & vd & op0006=0x57 unimpl
+
+# vrol.[vv,vx] # Vector rotate left by vector/scalar
+# vrol.vv vd, vs2, vs1, vm
+:vrol.vv vd, vs2, vs1         is op2631=0x15 & op2525=0x1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 unimpl
+:vrol.vv vd, vs2, vs1, "v0.t" is op2631=0x15 & op2525=0x0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 unimpl
+# vrol.vx vd, vs2, rs1, vm
+:vrol.vx vd, vs2, rs1         is op2631=0x15 & op2525=0x1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 unimpl
+:vrol.vx vd, vs2, rs1, "v0.t" is op2631=0x15 & op2525=0x0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 unimpl
+
+# vror.[vv,vx]Vector rotate right by vector/scalar
+# vror.vv vd, vs2, vs1, vm
+:vror.vv vd, vs2, vs1         is op2631=0x14 & op2525=0x1 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 unimpl
+:vror.vv vd, vs2, vs1, "v0.t" is op2631=0x14 & op2525=0x0 & vs2 & vs1 & op1214=0x0 & vd & op0006=0x57 unimpl
+# vror.vx vd, vs2, rs1, vm
+:vror.vx vd, vs2, rs1         is op2631=0x14 & op2525=0x1 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 unimpl
+:vror.vx vd, vs2, rs1, "v0.t" is op2631=0x14 & op2525=0x0 & vs2 & rs1 & op1214=0x4 & vd & op0006=0x57 unimpl
+# vror.vi vd, vs2, uimm, vm
+#  NOTE: the following takes a 6 bit immediate value where uimm5 is the low order and op2626 provides the high order bit
+:vror.vi vd, vs2, uimm6         is op2731=0x0a & op2525=0x1 & op2626 & vs2 & op1519 & op1214=0x3 & vd & op0006=0x57 [ uimm6= op1519 | (op2626<<5); ] unimpl
+:vror.vi vd, vs2, uimm6, "v0.t" is op2731=0x0a & op2525=0x0 & op2626 & vs2 & op1519 & op1214=0x3 & vd & op0006=0x57 [ uimm6= op1519 | (op2626<<5); ] unimpl
+
+# vwsll.[vv,vx,vi] Vector widening shift left logical by vector/scalar/immediate.
+# vwsll.vv vd, vs2, vs1, vm
+:vwsll.vv   vd, vs2, vs1           is op2631=0x35 & op2525=1 & vs2 & vs1   & op1214=0x0 & vd & op0006=0x57 unimpl
+:vwsll.vv   vd, vs2, vs1, "v0.t"   is op2631=0x35 & op2525=0 & vs2 & vs1   & op1214=0x0 & vd & op0006=0x57 unimpl
+# vwsll.vx vd, vs2, rs1, vm
+:vwsll.vx   vd, vs2, rs1           is op2631=0x35 & op2525=1 & vs2 & rs1   & op1214=0x4 & vd & op0006=0x57 unimpl
+:vwsll.vx   vd, vs2, rs1, "v0.t"   is op2631=0x35 & op2525=0 & vs2 & rs1   & op1214=0x4 & vd & op0006=0x57 unimpl
+# vwsll.vi vd, vs2, uimm, vm
+:vwsll.vi   vd, vs2, uimm5         is op2631=0x35 & op2525=1 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 unimpl
+:vwsll.vi   vd, vs2, uimm5, "v0.t" is op2631=0x35 & op2525=0 & vs2 & uimm5 & op1214=0x3 & vd & op0006=0x57 unimpl
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.zvkng.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.zvkng.sinc
new file mode 100644
index 000000000..15b2c1fb2
--- /dev/null
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.zvkng.sinc
@@ -0,0 +1,35 @@
+# Vector Crypto NIST Algorithms including GHASH
+
+# Vector AES final-round decryption
+:vaesdf.vv vs2, vd  is op2631=0x28 & op2525=1 & vs2 & op1519=0x01 & op1214=0x2 & vd & op0006=0x77 unimpl
+:vaesdf.vs vs2, vd  is op2631=0x29 & op2525=1 & vs2 & op1519=0x01 & op1214=0x2 & vd & op0006=0x77 unimpl
+
+# Vector AES middle-round decryption (single round)
+:vaesdm.vv vd, vs2  is op2631=0x28 & op2525=1 & vs2 & op1519=0x00 & op1214=0x2 & vd & op0006=0x77 unimpl
+:vaesdm.vs vd, vs2  is op2631=0x29 & op2525=1 & vs2 & op1519=0x00 & op1214=0x2 & vd & op0006=0x77 unimpl
+
+# Vector AES final-round encryption
+:vaesef.vv vd, vs2  is op2631=0x28 & op2525=1 & vs2 & op1519=0x03 & op1214=0x2 & vd & op0006=0x77 unimpl
+:vaesef.vs vd, vs2  is op2631=0x29 & op2525=1 & vs2 & op1519=0x03 & op1214=0x2 & vd & op0006=0x77 unimpl
+
+# Vector AES-128 Forward KeySchedule generation (single round)
+:vaeskf1.vi vd, vs2, uimm5 is op2631=0x22 & op2525=1 & vs2 & uimm5 & op1214=0x2 & vd & op0006=0x77 unimpl
+
+# Vector AES-256 Forward KeySchedule generation (single round)
+:vaeskf2.vi vd, vs2, uimm5 is op2631=0x2a & op2525=1 & vs2 & uimm5 & op1214=0x2 & vd & op0006=0x77 unimpl
+
+# Vector AES round zero encryption/decryption
+:vaesz.vs vd, vs2 is op2631=0x29 & op2525=1 & vs2 & op1519=0x07 & op1214=0x2 & vd & op0006=0x77 unimpl
+
+# Vector SHA-2 two rounds of compression, high and low parts
+:vsha2ch.vv vd, vs2, vs1 is op2631=0x2e & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x77 unimpl
+:vsha2cl.vv vd, vs2, vs1 is op2631=0x2f & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x77 unimpl
+
+# Vector SHA-2 message schedule (four rounds)
+:vsha2ms.vv vd, vs2, vs1 is op2631=0x2d & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x77 unimpl
+
+# Vector Add-Multiply over GHASH Galois-Field (A single "iteration" of the GHASHH algorithm)
+:vghsh.vv vd, vs2, vs1 is op2631=0x2c & op2525=1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x77 unimpl
+
+# Vector Multiply over GHASH Galois-Field (A GHASHH multiply is performed.)
+:vgmul.vv vd, vs2 is op2631=0x28 & op2525=1 & vs2 & op1519=0x11 & op1214=0x2 & vd & op0006=0x77 unimpl
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.zvksg.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.zvksg.sinc
new file mode 100644
index 000000000..d2927a753
--- /dev/null
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.zvksg.sinc
@@ -0,0 +1,14 @@
+# Vector Crypto ShangMi Algorithms excluding GHASH (see riscv.zvkng.sinc)
+
+# Vector SM3 Compression (Two rounds of SM3 compression are performed)
+:vsm3c.vi vd, vs2, uimm5 is op2631=0x2b & op2525=0x1 & vs2 & uimm5 & op1214=0x2 & vd & op0006=0x77 unimpl
+
+# Vector SM3 Message Expansion (Eight rounds of SM3 message expansion)
+:vsm3me.vv vd, vs2, vs1 is op2631=0x20 & op2525=0x1 & vs2 & vs1 & op1214=0x2 & vd & op0006=0x77 unimpl
+
+# Vector SM4 KeyExpansion (Four rounds of the SM4 Key Expansion)
+:vsm4k.vi vd, vs2, uimm5 is op2631=0x21 & op2525=0x1 & vs2 & uimm5 & op1214=0x2 & vd & op0006=0x77 unimpl
+
+# Vector SM4 Rounds (Four rounds of SM4 Encryption/Decryption)
+:vsm4r.vv vd, vs2 is op2631=0x28 & op2525=0x1 & vs2 & op1519=0x10 & op1214=0x2 & vd & op0006=0x77 unimpl
+:vsm4r.vs vd, vs2 is op2631=0x29 & op2525=0x1 & vs2 & op1519=0x10 & op1214=0x2 & vd & op0006=0x77 unimpl
-- 
2.43.0

