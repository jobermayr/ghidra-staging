From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mumbel <22204578+mumbel@users.noreply.github.com>
Date: Mon, 16 Dec 2019 19:12:40 -0600
Subject: [PATCH] 1349: COFF i960

Revert "COFF i960"
Initial factory for COFF
---
 .../formats/CoffBinaryAnalysisCommand.java    |  6 +++---
 .../util/bin/format/coff/CoffConstants.java   |  4 ++++
 .../util/bin/format/coff/CoffFileHeader.java  |  8 ++++++++
 .../util/bin/format/coff/CoffLineNumber.java  |  8 +++++---
 .../bin/format/coff/CoffSectionHeader.java    |  8 ++++++++
 .../app/util/bin/format/coff/CoffSymbol.java  | 19 +++++++++++--------
 .../bin/format/coff/CoffSymbolAuxArray.java   | 19 +++++++++++--------
 .../coff/CoffSymbolAuxBeginningOfBlock.java   | 13 ++++++++-----
 .../bin/format/coff/CoffSymbolAuxDefault.java |  5 ++++-
 .../format/coff/CoffSymbolAuxEndOfBlock.java  |  9 ++++++---
 .../format/coff/CoffSymbolAuxEndOfStruct.java | 11 +++++++----
 .../format/coff/CoffSymbolAuxFilename.java    |  7 +++++--
 .../format/coff/CoffSymbolAuxFunction.java    | 13 ++++++++-----
 .../bin/format/coff/CoffSymbolAuxName.java    | 11 +++++++----
 .../bin/format/coff/CoffSymbolAuxSection.java | 11 +++++++----
 .../bin/format/coff/CoffSymbolAuxTagName.java | 13 ++++++++-----
 16 files changed, 110 insertions(+), 55 deletions(-)

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/formats/CoffBinaryAnalysisCommand.java b/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/formats/CoffBinaryAnalysisCommand.java
index baeb0fd9ce..aa37b33d08 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/formats/CoffBinaryAnalysisCommand.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/formats/CoffBinaryAnalysisCommand.java
@@ -147,7 +147,7 @@ public class CoffBinaryAnalysisCommand extends FlatProgramAPI
 	private void processStrings(CoffFileHeader header) throws Exception {
 		monitor.setMessage("Processing strings...");
 		Address start = toAddr(header.getSymbolTablePointer() +
-			(header.getSymbolTableEntries() * CoffConstants.SYMBOL_SIZEOF));
+			header.getSymbolTableLength());
 		Address address = start;
 		createData(address, new DWordDataType());
 		createLabel(address, "Number_of_strings", true);
@@ -165,7 +165,7 @@ public class CoffBinaryAnalysisCommand extends FlatProgramAPI
 	private void processSymbols(CoffFileHeader header) throws Exception {
 		monitor.setMessage("Processing symbols...");
 		Address start = toAddr(header.getSymbolTablePointer());
-		long length = header.getSymbolTableEntries() * CoffConstants.SYMBOL_SIZEOF;
+		long length = header.getSymbolTableLength();
 		Address address = start;
 		List<CoffSymbol> symbols = header.getSymbols();
 		for (int i = 0; i < symbols.size(); ++i) {
@@ -226,7 +226,7 @@ public class CoffBinaryAnalysisCommand extends FlatProgramAPI
 			return;
 		}
 		Address start = toAddr(section.getPointerToLineNumbers());
-		long length = section.getLineNumberCount() * CoffLineNumber.SIZEOF;
+		long length = section.getLineNumberLength();
 		Address address = start;
 		List<CoffLineNumber> lineNumbers = section.getLineNumbers();
 		for (CoffLineNumber lineNumber : lineNumbers) {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffConstants.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffConstants.java
index 6b2de0598e..b8ce54487d 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffConstants.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffConstants.java
@@ -38,4 +38,8 @@ public class CoffConstants {
 	 * Number of dimensions of a symbol's auxiliary array.
 	 */
 	public final static int AUXILIARY_ARRAY_DIMENSION   =  4;
+	/**
+	 * Length (in bytes0 of a Line Number
+	 */
+	public final static int LINENO_SIZEOF = 6;
 }
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffFileHeader.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffFileHeader.java
index f95229d9d8..42b8025d8f 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffFileHeader.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffFileHeader.java
@@ -109,6 +109,14 @@ public class CoffFileHeader implements StructConverter {
 		return f_nsyms;
 	}
 
+	/**
+	 * Returns the length of symbols in the symbol table.
+	 * @return the length of symbols in the symbol table
+	 */
+	public int getSymbolTableLength() {
+		return f_nsyms * CoffConstants.SYMBOL_SIZEOF;
+	}
+
 	/**
 	 * Returns the size in bytes of the optional header.
 	 * The optional header immediately follows the file header
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffLineNumber.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffLineNumber.java
index 8b0cbf92a5..d87b198f28 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffLineNumber.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffLineNumber.java
@@ -22,10 +22,12 @@ import ghidra.util.exception.DuplicateNameException;
 import java.io.IOException;
 
 public class CoffLineNumber implements StructConverter {
-	public final static int SIZEOF = 4 + 2;
 
-	private int   l_addr; // address of line number
-	private short l_lnno; // line number
+	protected int   l_addr; // address of line number
+	protected short l_lnno; // line number
+
+	protected CoffLineNumber() {
+	}
 
 	CoffLineNumber(BinaryReader reader) throws IOException {
 		l_addr = reader.readNextInt();
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSectionHeader.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSectionHeader.java
index fb00d9b5c2..a4c69b0b44 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSectionHeader.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSectionHeader.java
@@ -212,6 +212,14 @@ public class CoffSectionHeader implements StructConverter {
 		return s_nlnno;
 	}
 
+	/**
+	 * Returns the length of line number entries for this section.
+	 * @return the length of line number entries for this section
+	 */
+	public int getLineNumberLength() {
+		return s_nlnno * CoffConstants.LINENO_SIZEOF;
+	}
+
 	/**
 	 * Returns the flags for this section.
 	 * @return the flags for this section
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbol.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbol.java
index f0196a1eb3..e1919e8dae 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbol.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbol.java
@@ -24,14 +24,17 @@ import java.util.ArrayList;
 import java.util.List;
 
 public class CoffSymbol implements StructConverter {
-	private String e_name;
-	private int e_value;
-	private short e_scnum;
-	private short e_type;
-	private byte e_sclass;
-	private byte e_numaux;
-
-	private List<CoffSymbolAux> _auxiliarySymbols = new ArrayList<CoffSymbolAux>();
+	protected String e_name;
+	protected int e_value;
+	protected short e_scnum;
+	protected int e_type;
+	protected byte e_sclass;
+	protected byte e_numaux;
+
+	protected List<CoffSymbolAux> _auxiliarySymbols = new ArrayList<CoffSymbolAux>();
+
+	protected CoffSymbol() {
+	}
 
 	CoffSymbol(BinaryReader reader, CoffFileHeader header) throws IOException {
 
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxArray.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxArray.java
index 5e5ef8c348..6b01e5f742 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxArray.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxArray.java
@@ -24,14 +24,17 @@ import java.io.IOException;
 
 public class CoffSymbolAuxArray implements CoffSymbolAux {
 
-	private int     tagIndex;
-	private short   lineNumber;
-	private short   arraySize;
-	private short   firstDimension;
-	private short   secondDimension;
-	private short   thirdDimension;
-	private short   fourthDimension;
-	private byte [] unused;
+	protected int     tagIndex;
+	protected short   lineNumber;
+	protected short   arraySize;
+	protected short   firstDimension;
+	protected short   secondDimension;
+	protected short   thirdDimension;
+	protected short   fourthDimension;
+	protected byte [] unused;
+
+	protected CoffSymbolAuxArray() {
+	}
 
 	CoffSymbolAuxArray(BinaryReader reader) throws IOException {
 		tagIndex        = reader.readNextInt();
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxBeginningOfBlock.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxBeginningOfBlock.java
index a3862d1c12..b020d2eadf 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxBeginningOfBlock.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxBeginningOfBlock.java
@@ -24,11 +24,14 @@ import ghidra.util.exception.DuplicateNameException;
 
 public class CoffSymbolAuxBeginningOfBlock implements CoffSymbolAux {
 
-	private byte [] unused1;
-	private short   sourceLineNumber;
-	private byte [] unused2;
-	private int     nextEntryIndex;
-	private byte [] unused3;
+	protected byte [] unused1;
+	protected short   sourceLineNumber;
+	protected byte [] unused2;
+	protected int     nextEntryIndex;
+	protected byte [] unused3;
+
+	protected CoffSymbolAuxBeginningOfBlock() {
+	}
 
 	CoffSymbolAuxBeginningOfBlock(BinaryReader reader) throws IOException {
 		unused1          = reader.readNextByteArray(4);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxDefault.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxDefault.java
index 30586684a7..f5d631fce2 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxDefault.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxDefault.java
@@ -24,7 +24,10 @@ import java.io.IOException;
 
 class CoffSymbolAuxDefault implements CoffSymbolAux {
 
-	private byte [] bytes;
+	protected byte [] bytes;
+
+	protected CoffSymbolAuxDefault() {
+	}
 
 	CoffSymbolAuxDefault(BinaryReader reader) throws IOException {
 		bytes = reader.readNextByteArray(CoffConstants.SYMBOL_SIZEOF);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxEndOfBlock.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxEndOfBlock.java
index f04a51e5e9..b36444184d 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxEndOfBlock.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxEndOfBlock.java
@@ -24,9 +24,12 @@ import java.io.IOException;
 
 public class CoffSymbolAuxEndOfBlock implements CoffSymbolAux {
 
-	private byte [] unused1;
-	private short   sourceLineNumber;
-	private byte [] unused2;
+	protected byte [] unused1;
+	protected short   sourceLineNumber;
+	protected byte [] unused2;
+
+	protected CoffSymbolAuxEndOfBlock() {
+	}
 
 	CoffSymbolAuxEndOfBlock(BinaryReader reader) throws IOException {
 		unused1          = reader.readNextByteArray(4);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxEndOfStruct.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxEndOfStruct.java
index a4eba72fe6..60210c964a 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxEndOfStruct.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxEndOfStruct.java
@@ -24,10 +24,13 @@ import java.io.IOException;
 
 public class CoffSymbolAuxEndOfStruct implements CoffSymbolAux {
 
-	private int     tagIndex;
-	private byte [] unused1;
-	private short   size; //of structure, union, or enumeration
-	private byte [] unused2;
+	protected int     tagIndex;
+	protected byte [] unused1;
+	protected short   size; //of structure, union, or enumeration
+	protected byte [] unused2;
+
+	protected CoffSymbolAuxEndOfStruct() {
+	}
 
 	CoffSymbolAuxEndOfStruct(BinaryReader reader) throws IOException {
 		tagIndex = reader.readNextInt();
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxFilename.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxFilename.java
index 1310200e50..b981639756 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxFilename.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxFilename.java
@@ -24,8 +24,11 @@ import ghidra.util.exception.DuplicateNameException;
 
 public class CoffSymbolAuxFilename implements CoffSymbolAux {
 
-	private byte [] filename;
-	private byte [] unused;
+	protected byte [] filename;
+	protected byte [] unused;
+
+	protected CoffSymbolAuxFilename() {
+	}
 
 	CoffSymbolAuxFilename(BinaryReader reader) throws IOException {
 		filename = reader.readNextByteArray(CoffConstants.FILE_NAME_LENGTH);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxFunction.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxFunction.java
index 6083423d80..f46fb47cbd 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxFunction.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxFunction.java
@@ -24,11 +24,14 @@ import java.io.IOException;
 
 public class CoffSymbolAuxFunction implements CoffSymbolAux {
 
-	private int     tagIndex;
-	private int     size;
-	private int     filePointerToLineNumber;
-	private int     nextEntryIndex;
-	private byte [] unused;
+	protected int     tagIndex;
+	protected int     size;
+	protected int     filePointerToLineNumber;
+	protected int     nextEntryIndex;
+	protected byte [] unused;
+
+	protected CoffSymbolAuxFunction() {
+	}
 
 	CoffSymbolAuxFunction(BinaryReader reader) throws IOException {
 		tagIndex                = reader.readNextInt();
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxName.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxName.java
index a4cc2d832a..fbe449ec28 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxName.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxName.java
@@ -24,10 +24,13 @@ import java.io.IOException;
 
 public class CoffSymbolAuxName implements CoffSymbolAux {
 
-	private int     tagIndex;
-	private byte [] unused1;
-	private short   size;
-	private byte [] unused2;
+	protected int     tagIndex;
+	protected byte [] unused1;
+	protected short   size;
+	protected byte [] unused2;
+
+	protected CoffSymbolAuxName() {
+	}
 
 	CoffSymbolAuxName(BinaryReader reader) throws IOException {
 		tagIndex   = reader.readNextInt();
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxSection.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxSection.java
index 67bd7ab934..4f5e64a034 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxSection.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxSection.java
@@ -24,10 +24,13 @@ import java.io.IOException;
 
 public class CoffSymbolAuxSection implements CoffSymbolAux {
 
-	private int      sectionLength;
-	private short    relocationCount;
-	private short    lineNumberCount;
-	private byte []  unused;
+	protected int      sectionLength;
+	protected short    relocationCount;
+	protected short    lineNumberCount;
+	protected byte []  unused;
+
+	protected CoffSymbolAuxSection() {
+	}
 
 	CoffSymbolAuxSection(BinaryReader reader) throws IOException {
 		sectionLength     = reader.readNextInt();
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxTagName.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxTagName.java
index 985f3340f7..ab50c6a4a1 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxTagName.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/CoffSymbolAuxTagName.java
@@ -24,11 +24,14 @@ import java.io.IOException;
 
 public class CoffSymbolAuxTagName implements CoffSymbolAux {
 
-	private byte []  unused1;
-	private short    size;
-	private byte []  unused2;
-	private int      nextEntryIndex;
-	private byte []  unused3;
+	protected byte []  unused1;
+	protected short    size;
+	protected byte []  unused2;
+	protected int      nextEntryIndex;
+	protected byte []  unused3;
+
+	protected CoffSymbolAuxTagName() {
+	}
 
 	CoffSymbolAuxTagName(BinaryReader reader) throws IOException {
 		unused1         = reader.readNextByteArray(6);
-- 
2.45.1

