From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Johannes Obermayr <johannesobermayr@gmx.de>
Date: Sat, 14 Jan 2023 21:41:44 +0100
Subject: [PATCH] 4896: Show noreturn information in function signature

Adapted version of:
https://github.com/rizinorg/ghidra/commit/af424fd
---
 .../src/decompile/cpp/prettyprint.cc          | 27 ++++++++++++++++++-
 .../src/decompile/cpp/prettyprint.hh          | 18 +++++++++++++
 .../Decompiler/src/decompile/cpp/printc.cc    |  5 ++--
 .../ghidra/app/decompiler/ClangToken.java     |  3 +++
 4 files changed, 50 insertions(+), 3 deletions(-)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/prettyprint.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/prettyprint.cc
index 01718bb7d0..c708563e8e 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/prettyprint.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/prettyprint.cc
@@ -218,6 +218,16 @@ void EmitMarkup::tagFuncName(const string &name,syntax_highlight hl,const Funcda
   encoder->closeElement(ELEM_FUNCNAME);
 }
 
+void EmitMarkup::tagNoreturn(syntax_highlight hl)
+
+{
+  encoder->openElement(ELEM_NORETURN);
+  if (hl != no_color)
+    encoder->writeUnsignedInteger(ATTRIB_COLOR,hl);
+  encoder->writeString(ATTRIB_CONTENT," noreturn ");
+  encoder->closeElement(ELEM_NORETURN);
+}
+
 void EmitMarkup::tagType(const string &name,syntax_highlight hl,const Datatype *ct)
 
 {
@@ -391,6 +401,9 @@ void TokenSplit::print(Emit *emit) const
   case fnam_t:	// tagFuncName
     emit->tagFuncName(tok,hl,ptr_second.fd,op);
     break;
+  case noret_t: // tagNoreturn
+    emit->tagNoreturn(hl);
+    break;
   case type_t:	// tagType
     emit->tagType(tok,hl,ptr_second.ct);
     break;
@@ -479,12 +492,15 @@ void TokenSplit::printDebug(ostream &s) const
   case vari_t:	// tagVariable
     s << "vari_t";
     break;
-  case op_t:		// tagOp
+  case op_t:	// tagOp
     s << "op_t";
     break;
   case fnam_t:	// tagFuncName
     s << "fnam_t";
     break;
+  case noret_t:	// tagNoreturn
+    s << "noret_t";
+    break;
   case type_t:	// tagType
     s << "type_t";
     break;
@@ -1027,6 +1043,15 @@ void EmitPrettyPrint::tagFuncName(const string &name,syntax_highlight hl,const F
   scan();
 }
 
+void EmitPrettyPrint::tagNoreturn(syntax_highlight hl)
+
+{
+  checkstring();
+  TokenSplit &tok( tokqueue.push() );
+  tok.tagNoreturn(hl);
+  scan();
+}
+
 void EmitPrettyPrint::tagType(const string &name,syntax_highlight hl,const Datatype *ct)
 
 {
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/prettyprint.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/prettyprint.hh
index 6fff373751..5bb4a11bfa 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/prettyprint.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/prettyprint.hh
@@ -41,6 +41,7 @@ extern AttributeId ATTRIB_VARREF;	///< Marshaling attribute "varref"
 extern ElementId ELEM_BREAK;		///< Marshaling element \<break>
 extern ElementId ELEM_CLANG_DOCUMENT;	///< Marshaling element \<clang_document>
 extern ElementId ELEM_FUNCNAME;		///< Marshaling element \<funcname>
+extern ElementId ELEM_NORETURN;		///< Marshaling element \<noreturn>
 extern ElementId ELEM_FUNCPROTO;	///< Marshaling element \<funcproto>
 extern ElementId ELEM_LABEL;		///< Marshaling element \<label>
 extern ElementId ELEM_RETURN_TYPE;	///< Marshaling element \<return_type>
@@ -258,6 +259,12 @@ public:
   /// \param op is the CALL operation associated within the syntax tree or null for a declaration
   virtual void tagFuncName(const string &name,syntax_highlight hl,const Funcdata *fd,const PcodeOp *op)=0;
 
+  /// \brief Create a function noreturn identifiertoken
+  ///
+  /// \param hl indicates how the identifier should be highlighted
+  /// An identifier string representing noreturn information of the function is emitted
+  virtual void tagNoreturn(syntax_highlight hl)=0;
+
   /// \brief Emit a data-type identifier
   ///
   /// A string representing the name of a data-type, as appropriate for the source language
@@ -513,6 +520,7 @@ public:
   virtual void tagVariable(const string &name,syntax_highlight hl,const Varnode *vn,const PcodeOp *op);
   virtual void tagOp(const string &name,syntax_highlight hl,const PcodeOp *op);
   virtual void tagFuncName(const string &name,syntax_highlight hl,const Funcdata *fd,const PcodeOp *op);
+  virtual void tagNoreturn(syntax_highlight hl);
   virtual void tagType(const string &name,syntax_highlight hl,const Datatype *ct);
   virtual void tagField(const string &name,syntax_highlight hl,const Datatype *ct,int4 off,const PcodeOp *op);
   virtual void tagComment(const string &name,syntax_highlight hl,const AddrSpace *spc,uintb off,const char *type);
@@ -559,6 +567,8 @@ public:
     *s << name; }
   virtual void tagFuncName(const string &name,syntax_highlight hl,const Funcdata *fd,const PcodeOp *op) {
     *s << name; }
+  virtual void tagNoreturn(syntax_highlight hl) {
+    *s << " noreturn "; }
   virtual void tagType(const string &name,syntax_highlight hl,const Datatype *ct) {
     *s << name; }
   virtual void tagField(const string &name,syntax_highlight hl,const Datatype *ct,int4 off,const PcodeOp *op) {
@@ -627,6 +637,7 @@ public:
     vari_t,		///< A variable identifier
     op_t,		///< An operator
     fnam_t,		///< A function identifier
+    noret_t,		///< A function noreturn identifier
     type_t,		///< A data-type identifier
     field_t,		///< A field name for a structured data-type
     comm_t,		///< Part of a comment block
@@ -785,6 +796,12 @@ public:
     tok = name; size = tok.size();
     tagtype=fnam_t; delimtype=tokenstring; hl=h; ptr_second.fd=f; op=o; }
 
+  /// \ brief Create a function noreturn identifiertoken
+  ///
+  /// \parm h indicated how the identifier should be highlighted
+  void tagNoreturn(EmitMarkup::syntax_highlight h) {
+    tagtype=noret_t; delimtype=tokenstring; hl=h; }
+
   /// \brief Create a data-type identifier token
   ///
   /// \param name is the character data for the identifier
@@ -1077,6 +1094,7 @@ public:
   virtual void tagVariable(const string &name,syntax_highlight hl,const Varnode *vn,const PcodeOp *op);
   virtual void tagOp(const string &name,syntax_highlight hl,const PcodeOp *op);
   virtual void tagFuncName(const string &name,syntax_highlight hl,const Funcdata *fd,const PcodeOp *op);
+  virtual void tagNoreturn(syntax_highlight hl);
   virtual void tagType(const string &name,syntax_highlight hl,const Datatype *ct);
   virtual void tagField(const string &name,syntax_highlight hl,const Datatype *ct,int4 off,const PcodeOp *op);
   virtual void tagComment(const string &name,syntax_highlight hl,const AddrSpace *spc,uintb off,const char *type);
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
index 50fff099f7..f941df9569 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
@@ -2612,7 +2612,9 @@ void PrintC::emitFunctionDeclaration(const Funcdata *fd)
   int4 id1 = emit->openGroup();
   emitSymbolScope(fd->getSymbol());
   emit->tagFuncName(fd->getDisplayName(),EmitMarkup::funcname_color,fd,(PcodeOp *)0);
-
+  if (proto->isNoReturn()) {
+    emit->tagNoreturn(EmitMarkup::no_color);
+  }
   emit->spaces(function_call.spacing,function_call.bump);
   int4 id2 = emit->openParen(OPEN_PAREN);
   emit->spaces(0,function_call.bump);
@@ -2620,7 +2622,6 @@ void PrintC::emitFunctionDeclaration(const Funcdata *fd)
   emitPrototypeInputs(proto);
   emit->closeParen(CLOSE_PAREN,id2);
   emit->closeGroup(id1);
-
   emit->endFuncProto(id);
 }
 
diff --git a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/ClangToken.java b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/ClangToken.java
index dddf6d3f57..b341c47183 100644
--- a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/ClangToken.java
+++ b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/ClangToken.java
@@ -247,6 +247,9 @@ public class ClangToken implements ClangNode {
 		else if (node == ELEM_FUNCNAME.id()) {
 			token = new ClangFuncNameToken(par, null);
 		}
+		else if (node == ELEM_NORETURN.id()) {
+			token = new ClangTypeToken(par);
+		}
 		else if (node == ELEM_TYPE.id()) {
 			token = new ClangTypeToken(par);
 		}
-- 
2.43.0

