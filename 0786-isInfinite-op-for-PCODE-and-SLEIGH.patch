From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mumbel <22204578+mumbel@users.noreply.github.com>
Date: Wed, 17 Jul 2019 17:45:34 -0500
Subject: [PATCH] 0786: isInfinite() op for PCODE and SLEIGH

Squashed:
Adding PCODE op FLOAT_INF

This feature is similar to FLOAT_NAN, but returns if the float
is positive or negative infinity.  The patch uses the unused
slot 45.  Users can GT or LT zero to determine positiver or
negative infinity.
---
 .../pcode/opbehavior/OpBehaviorFactory.java   |  1 +
 .../pcode/opbehavior/OpBehaviorFloatInf.java  | 42 +++++++++++++++++++
 .../ghidra/pcode/floatformat/FloatFormat.java | 12 ++++++
 .../ghidra/pcodeCPort/opcodes/OpCode.java     |  4 +-
 .../slgh_compile/ConsistencyChecker.java      |  3 ++
 .../pcodeCPort/slgh_compile/PcodeCompile.java |  4 ++
 .../program/model/pcode/DynamicHash.java      |  1 +
 .../ghidra/program/model/pcode/PcodeOp.java   |  4 +-
 8 files changed, 68 insertions(+), 3 deletions(-)
 create mode 100644 Ghidra/Framework/Emulation/src/main/java/ghidra/pcode/opbehavior/OpBehaviorFloatInf.java

diff --git a/Ghidra/Framework/Emulation/src/main/java/ghidra/pcode/opbehavior/OpBehaviorFactory.java b/Ghidra/Framework/Emulation/src/main/java/ghidra/pcode/opbehavior/OpBehaviorFactory.java
index c68028bf1..218deaf7b 100644
--- a/Ghidra/Framework/Emulation/src/main/java/ghidra/pcode/opbehavior/OpBehaviorFactory.java
+++ b/Ghidra/Framework/Emulation/src/main/java/ghidra/pcode/opbehavior/OpBehaviorFactory.java
@@ -82,6 +82,7 @@ public class OpBehaviorFactory {
 		opBehaviorMap.put(PcodeOp.FLOAT_NOTEQUAL, new OpBehaviorFloatNotEqual());
 		opBehaviorMap.put(PcodeOp.FLOAT_LESS, new OpBehaviorFloatLess());
 		opBehaviorMap.put(PcodeOp.FLOAT_LESSEQUAL, new OpBehaviorFloatLessEqual());
+		opBehaviorMap.put(PcodeOp.FLOAT_INF, new OpBehaviorFloatInf());
 		opBehaviorMap.put(PcodeOp.FLOAT_NAN, new OpBehaviorFloatNan());
 
 		opBehaviorMap.put(PcodeOp.FLOAT_ADD, new OpBehaviorFloatAdd());
diff --git a/Ghidra/Framework/Emulation/src/main/java/ghidra/pcode/opbehavior/OpBehaviorFloatInf.java b/Ghidra/Framework/Emulation/src/main/java/ghidra/pcode/opbehavior/OpBehaviorFloatInf.java
new file mode 100644
index 000000000..1980bd7d8
--- /dev/null
+++ b/Ghidra/Framework/Emulation/src/main/java/ghidra/pcode/opbehavior/OpBehaviorFloatInf.java
@@ -0,0 +1,42 @@
+/* ###
+ * IP: GHIDRA
+ * REVIEWED: YES
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.pcode.opbehavior;
+
+import ghidra.pcode.floatformat.FloatFormat;
+import ghidra.pcode.floatformat.FloatFormatFactory;
+import ghidra.program.model.pcode.PcodeOp;
+
+import java.math.BigInteger;
+
+public class OpBehaviorFloatInf extends UnaryOpBehavior {
+
+	public OpBehaviorFloatInf() {
+		super(PcodeOp.FLOAT_INF);
+	}
+
+	@Override
+	public long evaluateUnary(int sizeout, int sizein, long in1) {
+		FloatFormat format = FloatFormatFactory.getFloatFormat(sizein);
+		return format.opInf(in1);
+	}
+
+	@Override
+	public BigInteger evaluateUnary(int sizeout, int sizein, BigInteger in1) {
+		FloatFormat format = FloatFormatFactory.getFloatFormat(sizein);
+		return format.opInf(in1);
+	}
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/floatformat/FloatFormat.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/floatformat/FloatFormat.java
index 6b34dd3c1..d7b167d63 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/floatformat/FloatFormat.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/floatformat/FloatFormat.java
@@ -974,6 +974,18 @@ public class FloatFormat {
 		return res;
 	}
 
+	public long opInf(long a) {
+		double val = decodeHostFloat(a);
+		long res = Double.isInfinite(val) ? 1 : 0;
+		return res;
+	}
+
+	public BigInteger opInf(BigInteger a) {
+		BigDecimal val = new BigDecimal(a);
+		BigInteger res = (val == BigFloat.BIG_POSITIVE_INFINITY || val == BigFloat.BIG_NEGATIVE_INFINITY) ? BigInteger.ONE : BigInteger.ZERO;
+		return res;
+	}
+
 	public long opAdd(long a, long b) { // a + b
 		double val1 = decodeHostFloat(a);
 		double val2 = decodeHostFloat(b);
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/opcodes/OpCode.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/opcodes/OpCode.java
index 4d91cca6b..82a624942 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/opcodes/OpCode.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/opcodes/OpCode.java
@@ -77,7 +77,7 @@ public enum OpCode {
 	CPUI_FLOAT_NOTEQUAL, // Return TRUE if operand1 != operand2
 	CPUI_FLOAT_LESS, // Return TRUE if op1 < op2
 	CPUI_FLOAT_LESSEQUAL, // Return TRUE if op1 <= op2
-	CPUI_UNUSED1, // Slot 45 is unused
+	CPUI_FLOAT_INF, // Return TRUE if positive or negative infinity
 	CPUI_FLOAT_NAN, // Return TRUE if op1 is NaN
 
 	CPUI_FLOAT_ADD, // float addition
@@ -201,7 +201,7 @@ public enum OpCode {
 		"INT_XOR", "INT_AND", "INT_OR", "INT_LEFT", "INT_RIGHT", "INT_SRIGHT", "INT_MULT",
 		"INT_DIV", "INT_SDIV", "INT_REM", "INT_SREM", "BOOL_NEGATE", "BOOL_XOR", "BOOL_AND",
 		"BOOL_OR", "FLOAT_EQUAL", "FLOAT_NOTEQUAL", "FLOAT_LESS", "FLOAT_LESSEQUAL",
-		"UNUSED1", "FLOAT_NAN", "FLOAT_ADD", "FLOAT_DIV", "FLOAT_MULT", "FLOAT_SUB",
+		"FLOAT_INF", "FLOAT_NAN", "FLOAT_ADD", "FLOAT_DIV", "FLOAT_MULT", "FLOAT_SUB",
 		"FLOAT_NEG", "FLOAT_ABS", "FLOAT_SQRT", "INT2FLOAT", "FLOAT2FLOAT", "TRUNC", "CEIL",
 		"FLOOR", "ROUND", "BUILD", "DELAY_SLOT", "PIECE", "SUBPIECE", "CAST", "LABEL",
 		"CROSSBUILD", "SEGMENTOP", "CPOOLREF", "NEW", "INSERT", "EXTRACT", "POPCOUNT",
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/ConsistencyChecker.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/ConsistencyChecker.java
index 0c28b1734..1ebf014e9 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/ConsistencyChecker.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/ConsistencyChecker.java
@@ -144,6 +144,7 @@ class ConsistencyChecker {
 					return false;
 				}
 				return true;
+			case CPUI_FLOAT_INF:
 			case CPUI_FLOAT_NAN:
 				vnout = recoverSize(op.getOut().getSize(), ct);
 				if (vnout == -1) {
@@ -436,6 +437,8 @@ class ConsistencyChecker {
 				return "Float less than(f<)";
 			case CPUI_FLOAT_LESSEQUAL:
 				return "Float less than or equal(f<=)";
+			case CPUI_FLOAT_INF:
+				return "+/- inifity";
 			case CPUI_FLOAT_NAN:
 				return "Not a number(nan)";
 			case CPUI_FLOAT_ADD:
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/PcodeCompile.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/PcodeCompile.java
index 112a531fa..5612e56f4 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/PcodeCompile.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/PcodeCompile.java
@@ -796,6 +796,7 @@ public abstract class PcodeCompile {
 			case CPUI_FLOAT_NOTEQUAL:
 			case CPUI_FLOAT_LESS:
 			case CPUI_FLOAT_LESSEQUAL:
+			case CPUI_FLOAT_INF:
 			case CPUI_FLOAT_NAN:
 			case CPUI_BOOL_NEGATE:
 			case CPUI_BOOL_XOR:
@@ -954,6 +955,9 @@ public abstract class PcodeCompile {
 		if ("abs".equals(name) && hasOperands(1, operands, location, name)) {
 			return createOp(location, OpCode.CPUI_FLOAT_ABS, r);
 		}
+		if ("inf".equals(name) && hasOperands(1, operands, location, name)) {
+			return createOp(location, OpCode.CPUI_FLOAT_INF, r);
+		}
 		if ("nan".equals(name) && hasOperands(1, operands, location, name)) {
 			return createOp(location, OpCode.CPUI_FLOAT_NAN, r);
 		}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/DynamicHash.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/DynamicHash.java
index 5423b73d4..09904d05c 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/DynamicHash.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/DynamicHash.java
@@ -62,6 +62,7 @@ public class DynamicHash {
 		PcodeOp.FLOAT_EQUAL, PcodeOp.FLOAT_EQUAL,	// NOTEQUAL hashes same as EQUAL
 		PcodeOp.FLOAT_LESS, PcodeOp.FLOAT_LESS,		// LESSEQUAL hashes same as EQUAL
 		0,						// Unused slot -- skip
+		PcodeOp.FLOAT_INF,
 		PcodeOp.FLOAT_NAN,
 
 		PcodeOp.FLOAT_ADD, PcodeOp.FLOAT_DIV, PcodeOp.FLOAT_MULT, PcodeOp.FLOAT_ADD,	// SUB hashes same as ADD
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PcodeOp.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PcodeOp.java
index 8c993de27..809dc37dc 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PcodeOp.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PcodeOp.java
@@ -98,7 +98,7 @@ public class PcodeOp {
 	public static final int FLOAT_NOTEQUAL = 42;	// Return TRUE if operand1 != operand2    
 	public static final int FLOAT_LESS = 43;   	// Return TRUE if op1 < op2 
 	public static final int FLOAT_LESSEQUAL = 44;	// Return TRUE if op1 <= op2
-	// Slot 45 is unused
+	public static final int FLOAT_INF = 45;	// Return TRUE if positive or negative infinity
 	public static final int FLOAT_NAN = 46;	// Return TRUE if neither op1 is NaN 
 
 	public static final int FLOAT_ADD = 47;            // float addition
@@ -644,6 +644,8 @@ public class PcodeOp {
 				return "FLOAT_LESS";
 			case FLOAT_LESSEQUAL:
 				return "FLOAT_LESSEQUAL";
+			case FLOAT_INF:
+				return "FLOAT_INF";
 			case FLOAT_NAN:
 				return "FLOAT_NAN";
 			case FLOAT_ADD:
-- 
2.43.0

