From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Gregory Morse <gregory.morse@live.com>
Date: Sun, 28 Jul 2019 17:35:17 +0200
Subject: [PATCH] 0852: Double segmented resolve bad output in constants

Instead of printing the global variable, relics like "ram0x000006d0" occur because the resolver is run twice, the first time on a near/far pointer, the second time on a RAM address which it treats like a segmented far pointer due to its size - and this is wrong behavior.  Yet the ptr check flag is set specifically to prevent this yet never inquired.

Update type.cc
Update printc.cc
Update coreaction.cc
Update ruleaction.cc
---
 Ghidra/Features/Decompiler/src/decompile/cpp/coreaction.cc  | 6 +++---
 .../Decompiler/src/decompile/cpp/funcdata_varnode.cc        | 2 +-
 Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc      | 2 +-
 Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc  | 2 +-
 Ghidra/Features/Decompiler/src/decompile/cpp/type.cc        | 3 ++-
 Ghidra/Features/Decompiler/src/decompile/cpp/type.hh        | 2 +-
 6 files changed, 9 insertions(+), 8 deletions(-)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/coreaction.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/coreaction.cc
index 62a182d9aa..304164798a 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/coreaction.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/coreaction.cc
@@ -5127,14 +5127,14 @@ void ActionInferTypes::propagateSpacebaseRef(Funcdata &data,Varnode *spcvn)
     switch(op->code()) {
     case CPUI_COPY:
       vn = op->getIn(0);
-      addr = sbtype->getAddress(0,vn->getSize(),op->getAddr());
+      addr = sbtype->getAddress(0,vn->getSize(),op->getAddr(),vn->isPtrCheck());
       propagateRef(data,op->getOut(),addr);
       break;
     case CPUI_INT_ADD:
     case CPUI_PTRSUB:
       vn = op->getIn(1);
       if (vn->isConstant()) {
-	addr = sbtype->getAddress(vn->getOffset(),vn->getSize(),op->getAddr());
+	addr = sbtype->getAddress(vn->getOffset(),vn->getSize(),op->getAddr(),vn->isPtrCheck());
 	propagateRef(data,op->getOut(),addr);
       }
       break;
@@ -5142,7 +5142,7 @@ void ActionInferTypes::propagateSpacebaseRef(Funcdata &data,Varnode *spcvn)
       vn = op->getIn(1);
       if (vn->isConstant()) {
 	uintb off = vn->getOffset() * op->getIn(2)->getOffset();
-	addr = sbtype->getAddress(off,vn->getSize(),op->getAddr());
+	addr = sbtype->getAddress(off,vn->getSize(),op->getAddr(),vn->isPtrCheck());
 	propagateRef(data,op->getOut(),addr);
       }
       break;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata_varnode.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata_varnode.cc
index 08b4037e08..8504c4c02d 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata_varnode.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata_varnode.cc
@@ -1195,7 +1195,7 @@ Symbol *Funcdata::linkSymbolReference(Varnode *vn)
   if (sb->getMetatype() != TYPE_SPACEBASE)
       return (Symbol *)0;
   Scope *scope = sb->getMap();
-  Address addr = sb->getAddress(vn->getOffset(),in0->getSize(),op->getAddr());
+  Address addr = sb->getAddress(vn->getOffset(),in0->getSize(),op->getAddr(),vn->isPtrCheck());
   if (addr.isInvalid())
     throw LowlevelError("Unable to generate proper address from spacebase");
   SymbolEntry *entry = scope->queryContainer(addr,1,Address());
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
index dfdc6b4bed..4671f176fe 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
@@ -1077,7 +1077,7 @@ void PrintC::opPtrsub(const PcodeOp *op)
     }
     if (symbol == (Symbol *)0) {
       TypeSpacebase *sb = (TypeSpacebase *)ct;
-      Address addr = sb->getAddress(in1const,in0->getSize(),op->getAddr());
+      Address addr = sb->getAddress(in1const,in0->getSize(),op->getAddr(),op->getIn(1)->isPtrCheck());
       pushUnnamedLocation(addr,(Varnode *)0,op);
     }
     else {
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
index b7fda34cc9..71431ac282 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
@@ -7297,7 +7297,7 @@ int4 RulePtrsubCharConstant::applyOp(PcodeOp *op,Funcdata &data)
   if (outtype->getMetatype() != TYPE_PTR) return 0;
   Datatype *basetype = outtype->getPtrTo();
   if (!basetype->isCharPrint()) return 0;
-  Address symaddr = sbtype->getAddress(vn1->getOffset(),vn1->getSize(),op->getAddr());
+  Address symaddr = sbtype->getAddress(vn1->getOffset(),vn1->getSize(),op->getAddr(),vn1->isPtrCheck());
   Scope *scope = sbtype->getMap();
   if (!scope->isReadOnly(symaddr,1,op->getAddr()))
     return 0;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/type.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/type.cc
index 88ca8e36c8..fa9aeccb50 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/type.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/type.cc
@@ -3057,10 +3057,11 @@ int4 TypeSpacebase::compareDependency(const Datatype &op) const
 /// \param sz is the size of offset (as a pointer)
 /// \param point is a "context" reference for the request
 /// \return the referred to Address
-Address TypeSpacebase::getAddress(uintb off,int4 sz,const Address &point) const
+Address TypeSpacebase::getAddress(uintb off,int4 sz,const Address &point,bool ptrCheck) const
 
 {
   uintb fullEncoding;
+  if (ptrCheck) return Address(spaceid,off);
   // Currently a constant off of a global spacebase must be a full pointer encoding
   if (localframe.isInvalid())
     sz = -1;	// Set size to -1 to guarantee that full encoding recovery isn't launched
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/type.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/type.hh
index 2f2c5c254d..74fbc9d868 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/type.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/type.hh
@@ -735,7 +735,7 @@ public:
   TypeSpacebase(AddrSpace *id,const Address &frame,Architecture *g)
     : Datatype(0,1,TYPE_SPACEBASE), localframe(frame) { spaceid = id; glb = g; }
   Scope *getMap(void) const;	///< Get the symbol table indexed by \b this
-  Address getAddress(uintb off,int4 sz,const Address &point) const;	///< Construct an Address given an offset
+  Address getAddress(uintb off,int4 sz,const Address &point,bool ptrCheck) const;	///< Construct an Address given an offset
   virtual Datatype *getSubType(int8 off,int8 *newoff) const;
   virtual Datatype *nearestArrayedComponentForward(int8 off,int8 *newoff,int8 *elSize) const;
   virtual Datatype *nearestArrayedComponentBackward(int8 off,int8 *newoff,int8 *elSize) const;
-- 
2.45.1

