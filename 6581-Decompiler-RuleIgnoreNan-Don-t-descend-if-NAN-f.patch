From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Luke=20Sern=C3=A9?= <luke.serne@solconmail.nl>
Date: Sat, 25 May 2024 17:56:59 +0200
Subject: [PATCH] 6581: Decompiler: RuleIgnoreNan: Don't descend if NAN flow
 has been removed Sometimes, when `RuleIgnoreNan` tries to remove NaN-branches
 from conditionals, it is too aggressive and also removes other branches,
 leading to incorrect decompiler output. By returning a null pointer if the
 NAN flow has been removed by replacing the boolean combinator such as
 `BOOL_AND` or `BOOL_OR` by a `COPY` operation, we avoid descending down
 further and removing too much of the tree.

---
 Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
index 288a63f65b..44aac00e3e 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
@@ -9669,6 +9669,8 @@ Varnode *RuleIgnoreNan::testForComparison(Varnode *floatVar,PcodeOp *op,int4 slo
       data.opRemoveInput(op,1);
       data.opSetInput(op,vn,0);
       count += 1;
+      // NaN flow has been removed - don't descend further
+      return (Varnode *)0;
     }
     else if (isAnotherNan(vn)) {
       return op->getOut();
-- 
2.45.1

