From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mumbel <22204578+mumbel@users.noreply.github.com>
Date: Sat, 23 Oct 2021 22:16:51 -0500
Subject: [PATCH] 1479: Additions to pcodetest

---
 .../SleighDevTools/certification.manifest     |    5 +
 .../Extensions/SleighDevTools/pcodetest/build |    3 +
 .../SleighDevTools/pcodetest/c_src/BIOPS.test |   32 +-
 .../pcodetest/c_src/BIOPS2.test               |   26 +-
 .../pcodetest/c_src/BIOPS2_BODY.c             |  423 +------
 .../pcodetest/c_src/BIOPS4.test               |   25 +-
 .../pcodetest/c_src/BIOPS4_BODY.c             |  421 +------
 .../pcodetest/c_src/BIOPS_BODY.c              |  424 +------
 .../pcodetest/c_src/BIOPS_DOUBLE.test         |   17 +
 .../pcodetest/c_src/BIOPS_DOUBLE_BODY.c       |  156 +--
 .../pcodetest/c_src/BIOPS_FLOAT.test          |   16 +-
 .../pcodetest/c_src/BIOPS_FLOAT_BODY.c        |  155 +--
 .../pcodetest/c_src/BIOPS_LONGLONG.test       |   25 +-
 .../pcodetest/c_src/BIOPS_LONGLONG_BODY.c     |  414 +------
 .../pcodetest/c_src/BUILTIN.test              |  742 ++++++++++++
 .../pcodetest/c_src/BUILTIN_BODY.c            |  226 ++++
 .../pcodetest/c_src/BitManipulation.test      |  462 +++++---
 .../pcodetest/c_src/BitManipulation_BODY.c    |  142 +++
 .../pcodetest/c_src/CONVERT.test              |  554 +++++++++
 .../pcodetest/c_src/CONVERT_BODY.c            |  154 +++
 .../pcodetest/c_src/CONVERT_DOUBLE.test       |  438 +++++++
 .../pcodetest/c_src/CONVERT_FLOAT.test        |  320 ++++++
 .../pcodetest/c_src/CONVERT_LONGLONG.test     |  533 +++++++++
 .../pcodetest/c_src/GlobalVariables.test      |    2 +-
 .../pcodetest/c_src/GlobalVariables_BODY.c    |    2 +-
 .../c_src/IterativeProcessingDoWhile_BODY.c   |    8 +-
 .../c_src/IterativeProcessingFor_BODY.c       |    8 +-
 .../c_src/IterativeProcessingWhile_BODY.c     |    8 +-
 .../pcodetest/c_src/pcode_test.h              | 1006 ++++++++++++++++-
 .../SleighDevTools/pcodetest/c_src/types.h    |  261 ++++-
 .../SleighDevTools/pcodetest/defaults.py      |    1 +
 .../SleighDevTools/pcodetest/pcode_defs.py    |   73 ++
 .../SleighDevTools/pcodetest/pcodetest.py     |   18 +-
 .../SleighDevTools/pcodetest/tpp.py           |    5 +-
 .../support/ProcessorEmulatorTestAdapter.java |   19 +
 35 files changed, 5129 insertions(+), 1995 deletions(-)
 create mode 100644 Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BUILTIN.test
 create mode 100644 Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BUILTIN_BODY.c
 create mode 100644 Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT.test
 create mode 100644 Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_BODY.c
 create mode 100644 Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_DOUBLE.test
 create mode 100644 Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_FLOAT.test
 create mode 100644 Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_LONGLONG.test

diff --git a/Ghidra/Extensions/SleighDevTools/certification.manifest b/Ghidra/Extensions/SleighDevTools/certification.manifest
index d82fb5b166..24a8d46bd7 100644
--- a/Ghidra/Extensions/SleighDevTools/certification.manifest
+++ b/Ghidra/Extensions/SleighDevTools/certification.manifest
@@ -13,6 +13,11 @@ pcodetest/c_src/BIOPS_DOUBLE.test||GHIDRA||||END|
 pcodetest/c_src/BIOPS_FLOAT.test||GHIDRA||||END|
 pcodetest/c_src/BIOPS_LONGLONG.test||GHIDRA||||END|
 pcodetest/c_src/BitManipulation.test||GHIDRA||||END|
+pcodetest/c_src/BUILTIN.test||GHIDRA||||END|
+pcodetest/c_src/CONVERT.test||GHIDRA||||END|
+pcodetest/c_src/CONVERT_DOUBLE.test||GHIDRA||||END|
+pcodetest/c_src/CONVERT_FLOAT.test||GHIDRA||||END|
+pcodetest/c_src/CONVERT_LONGLONG.test||GHIDRA||||END|
 pcodetest/c_src/DecisionMaking.test||GHIDRA||||END|
 pcodetest/c_src/GlobalVariables.test||GHIDRA||||END|
 pcodetest/c_src/IterativeProcessingDoWhile.test||GHIDRA||||END|
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/build b/Ghidra/Extensions/SleighDevTools/pcodetest/build
index 0e3b899ea6..7c834499d7 100755
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/build
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/build
@@ -72,6 +72,9 @@ pcodetest_group.add_argument('--variants', default=json.dumps(PCodeTest.defaults
 sys.argv.pop(0)
 args = parser.parse_args(sys.argv)
 
+PCodeTest.defaults.toolchain_root = args.toolchain_root
+PCodeTest.defaults.build_root = args.build_root
+PCodeTest.defaults.gcc_version = args.gcc_version
 PCodeTest.defaults.skip_files = args.skip_files
 PCodeTest.defaults.pcodetest_root = args.pcodetest_root
 PCodeTest.defaults.pcodetest_src = args.pcodetest_src
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS.test b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS.test
index d00d15d9a4..eb363fdf2f 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS.test
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS.test
@@ -22,20 +22,26 @@ TEST i1_complexLogic_Main()
 TEST u1_compareLogic_Main()
 {
 	extern u1 u1_compareLogic(u1 lhs, u1 rhs);
-	ASSERTU1(u1_compareLogic(0x1, 0x1), 1);
-	ASSERTU1(u1_compareLogic(0x1, 0x2), 23);
-	ASSERTU1(u1_compareLogic(0x2, 0x1), 22);
+	ASSERTU1(u1_compareLogic(0x0, 0x1), 17);
+	ASSERTU1(u1_compareLogic(0x1, 0x0), 13);
+	ASSERTU1(u1_compareLogic(0x1, 0x1), 17);
+	ASSERTU1(u1_compareLogic(0x1, 0x2), 15);
+	ASSERTU1(u1_compareLogic(0x2, 0x1), 14);
 }
 
 TEST i1_compareLogic_Main()
 {
 	extern i1 i1_compareLogic(i1 lhs, i1 rhs);
-	ASSERTI1(i1_compareLogic(0x1, 0x1), 21);
-	ASSERTI1(i1_compareLogic(0x1, 0x2), 21);
-	ASSERTI1(i1_compareLogic(0x2, 0x1), 22);
-	ASSERTI1(i1_compareLogic(-0x1, -0x1), 21);
-	ASSERTI1(i1_compareLogic(-0x1, -0x2), 21);
-	ASSERTI1(i1_compareLogic(-0x2, -0x1), 24);
+	ASSERTI1(i1_compareLogic(0x0, 0x1), 17);
+	ASSERTI1(i1_compareLogic(0x1, 0x0), 13);
+	ASSERTI1(i1_compareLogic(0x1, 0x1), 17);
+	ASSERTI1(i1_compareLogic(0x1, 0x2), 15);
+	ASSERTI1(i1_compareLogic(0x2, 0x1), 14);
+	ASSERTI1(i1_compareLogic(0x0, -0x1), 13);
+	ASSERTI1(i1_compareLogic(-0x1, 0x0), 13);
+	ASSERTI1(i1_compareLogic(-0x1, -0x1), 15);
+	ASSERTI1(i1_compareLogic(-0x1, -0x2), 11);
+	ASSERTI1(i1_compareLogic(-0x2, -0x1), 12);
 }
 
 /* Comparison operators */
@@ -331,10 +337,10 @@ TEST u1_multiply_Main()
 
 TEST u1_divide_Main()
 {
-	extern i1 u1_divide(u1 lhs, u1 rhs);
-	ASSERTI1(u1_divide(0x01, 0x01), 1);
-	ASSERTI1(u1_divide(U1_MAX, U1_MAX), 1);
-	ASSERTI1(u1_divide(U1_MAX, 1), U1_MAX);
+	extern u1 u1_divide(u1 lhs, u1 rhs);
+	ASSERTU1(u1_divide(0x01, 0x01), 1);
+	ASSERTU1(u1_divide(U1_MAX, U1_MAX), 1);
+	ASSERTU1(u1_divide(U1_MAX, 1), U1_MAX);
 }
 
 TEST u1_remainder_Main()
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS2.test b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS2.test
index f7c575eb49..a428b3bcf9 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS2.test
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS2.test
@@ -21,20 +21,26 @@ TEST i2_complexLogic_Main()
 TEST u2_compareLogic_Main()
 {
 	extern u2 u2_compareLogic(u2 lhs, u2 rhs);
-	ASSERTU2(u2_compareLogic(0x1, 0x1), 1);
-	ASSERTU2(u2_compareLogic(0x1, 0x2), 23);
-	ASSERTU2(u2_compareLogic(0x2, 0x1), 22);
+	ASSERTU2(u2_compareLogic(0x0, 0x1), 17);
+	ASSERTU2(u2_compareLogic(0x1, 0x0), 13);
+	ASSERTU2(u2_compareLogic(0x1, 0x1), 17);
+	ASSERTU2(u2_compareLogic(0x1, 0x2), 15);
+	ASSERTU2(u2_compareLogic(0x2, 0x1), 14);
 }
 
 TEST i2_compareLogic_Main()
 {
 	extern i2 i2_compareLogic(i2 lhs, i2 rhs);
-	ASSERTI2(i2_compareLogic(0x1, 0x1), 21);
-	ASSERTI2(i2_compareLogic(0x1, 0x2), 21);
-	ASSERTI2(i2_compareLogic(0x2, 0x1), 22);
-	ASSERTI2(i2_compareLogic(-0x1, -0x1), 21);
-	ASSERTI2(i2_compareLogic(-0x1, -0x2), 21);
-	ASSERTI2(i2_compareLogic(-0x2, -0x1), 24);
+	ASSERTI2(i2_compareLogic(0x0, 0x1), 17);
+	ASSERTI2(i2_compareLogic(0x1, 0x0), 13);
+	ASSERTI2(i2_compareLogic(0x1, 0x1), 17);
+	ASSERTI2(i2_compareLogic(0x1, 0x2), 15);
+	ASSERTI2(i2_compareLogic(0x2, 0x1), 14);
+	ASSERTI2(i2_compareLogic(0x0, -0x1), 13);
+	ASSERTI2(i2_compareLogic(-0x1, 0x0), 13);
+	ASSERTI2(i2_compareLogic(-0x1, -0x1), 15);
+	ASSERTI2(i2_compareLogic(-0x1, -0x2), 11);
+	ASSERTI2(i2_compareLogic(-0x2, -0x1), 12);
 }
 
 /* Comparison operators */
@@ -245,12 +251,10 @@ TEST u2_logicalOr_Main()
 {
 	extern u2 u2_logicalOr(u2 lhs, u2 rhs);
 	ASSERTU2(u2_logicalOr(2, 1), 1);
-	ASSERTU2(u2_logicalOr(2, 1), 1);
 	ASSERTU2(u2_logicalOr(U2_MAX, U2_MAX), 1);
 	ASSERTU2(u2_logicalOr(U2_MIN, U2_MIN), 0);
 	ASSERTU2(u2_logicalOr(U2_MAX, U2_MIN), 1);
 	ASSERTU2(u2_logicalOr(U2_MAX, 0), 1);
-	ASSERTU2(u2_logicalOr(0, 0), 0);
 }
 
 TEST u2_logicalNot_Main()
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS2_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS2_BODY.c
index c2b62d81e0..b6611fe945 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS2_BODY.c
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS2_BODY.c
@@ -15,401 +15,78 @@
  */
 #include "pcode_test.h"
 
-u2 u2_complexLogic(u2 a, u2 b, u2 c, u2 d, u2 e, u2 f)
-{
-	u2 ret = 0;
+PCODE_COMPLEX_LOGIC(u2)
+PCODE_COMPLEX_LOGIC(i2)
 
-	if (a > b && b > c || d < e && f < e) {
-		ret += 1;
-	}
-	if (a != b || a != c && d != e || f != e) {
-		ret += 2;
-	}
-	if (a && b && c || d && e && f) {
-		ret += 4;
-	}
-	if (a || b || c && d || e || f) {
-		ret += 8;
-	}
-	return ret;
-}
+PCODE_COMPARE_LOGIC(u2)
+PCODE_COMPARE_LOGIC(i2)
 
-i2 i2_complexLogic(i2 a, i2 b, i2 c, i2 d, i2 e, i2 f)
-{
-	i2 ret = 0;
+PCODE_GREATERTHAN(u2)
+PCODE_GREATERTHAN(i2)
 
-	if (a > b && b > c || d < e && f < e) {
-		ret += 1;
-	}
-	if (a != b || a != c && d != e || f != e) {
-		ret += 2;
-	}
-	if (a && b && c || d && e && f) {
-		ret += 4;
-	}
-	if (a || b || c && d || e || f) {
-		ret += 8;
-	}
-	return ret;
-}
+PCODE_GREATERTHANEQUALS(u2)
+PCODE_GREATERTHANEQUALS(i2)
 
-u2 u2_compareLogic(u2 lhs, u2 rhs)
-{
-	if (lhs < rhs)
-		lhs += 2;
-	if (lhs > rhs)
-		lhs += 4;
-	if (lhs == 0)
-		lhs += 8;
-	if (lhs != rhs)
-		lhs += 16;
-	return lhs;
-}
+PCODE_LESSTHAN(u2)
+PCODE_LESSTHAN(i2)
 
-i2 i2_compareLogic(i2 lhs, i2 rhs)
-{
-	if (lhs < 0)
-		lhs += 2;
-	if (lhs > 0)
-		lhs += 4;
-	if (lhs == 0)
-		lhs += 8;
-	if (lhs != rhs)
-		lhs += 16;
-	return lhs;
-}
+PCODE_LESSTHANEQUALS(u2)
+PCODE_LESSTHANEQUALS(i2)
 
-/* Comparison operators */
-u2 u2_greaterThan(u2 lhs, u2 rhs)
-{
-	u2 z;
+PCODE_EQUALS(u2)
+PCODE_EQUALS(i2)
 
-	z = lhs > rhs;
-	return z;
-}
+PCODE_NOTEQUALS(u2)
+PCODE_NOTEQUALS(i2)
 
-u2 u2_greaterThanEquals(u2 lhs, u2 rhs)
-{
-	u2 z;
+PCODE_BITWISE_AND(u2)
+PCODE_BITWISE_AND(i2)
 
-	z = lhs >= rhs;
-	return z;
-}
+PCODE_BITWISE_OR(u2)
+PCODE_BITWISE_OR(i2)
 
-u2 u2_lessThan(u2 lhs, u2 rhs)
-{
-	u2 z;
+PCODE_LOGICAL_AND(u2)
+PCODE_LOGICAL_AND(i2)
 
-	z = lhs < rhs;
-	return z;
-}
+PCODE_LOGICAL_OR(u2)
+PCODE_LOGICAL_OR(i2)
 
-u2 u2_lessThanEquals(u2 lhs, u2 rhs)
-{
-	u2 z;
+PCODE_LOGICAL_NOT(u2)
+PCODE_LOGICAL_NOT(i2)
 
-	z = lhs <= rhs;
-	return z;
-}
+PCODE_XOR(u2)
+PCODE_XOR(i2)
 
-u2 u2_equals(u2 lhs, u2 rhs)
-{
-	u2 z;
+PCODE_SHIFTLEFT(u2)
+PCODE_SHIFTLEFT(i2)
 
-	z = lhs == rhs;
-	return z;
-}
+PCODE_SHIFTRIGHT(u2)
+PCODE_SHIFTRIGHT(i2)
 
-u2 u2_notEquals(u2 lhs, u2 rhs)
-{
-	u2 z;
+PCODE_UNARY_PLUS(u2)
+PCODE_UNARY_PLUS(i2)
 
-	z = lhs != rhs;
-	return z;
-}
+PCODE_UNARY_MINUS(u2)
+PCODE_UNARY_MINUS(i2)
 
-i2 i2_greaterThan(i2 lhs, i2 rhs)
-{
-	i2 z;
+PCODE_ADDITION(u2)
+PCODE_ADDITION(i2)
 
-	z = lhs > rhs;
-	return z;
-}
+PCODE_SUBTRACT(u2)
+PCODE_SUBTRACT(i2)
 
-i2 i2_greaterThanEquals(i2 lhs, i2 rhs)
-{
-	i2 z;
+#ifdef HAS_MULTIPLY
 
-	z = lhs >= rhs;
-	return z;
-}
+PCODE_MUL(u2)
+PCODE_MUL(i2)
 
-i2 i2_lessThan(i2 lhs, i2 rhs)
-{
-	i2 z;
+#endif /* #ifdef HAS_MULTIPLY */
+#ifdef HAS_DIVIDE
 
-	z = lhs < rhs;
-	return z;
-}
-
-i2 i2_lessThanEquals(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs <= rhs;
-	return z;
-}
-
-i2 i2_equals(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs == rhs;
-	return z;
-}
-
-i2 i2_notEquals(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs != rhs;
-	return z;
-}
-
-/* Bitwise operators */
-u2 u2_bitwiseAnd(u2 lhs, u2 rhs)
-{
-	u2 z;
-
-	z = lhs & rhs;
-	return z;
-}
-
-u2 u2_bitwiseOr(u2 lhs, u2 rhs)
-{
-	u2 z;
-
-	z = lhs | rhs;
-	return z;
-}
-
-u2 u2_bitwiseXor(u2 lhs, u2 rhs)
-{
-	u2 z;
-
-	z = lhs ^ rhs;
-	return z;
-}
-
-i2 i2_bitwiseAnd(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs & rhs;
-	return z;
-}
-
-i2 i2_bitwiseOr(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs | rhs;
-	return z;
-}
-
-i2 i2_bitwiseXor(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs ^ rhs;
-	return z;
-}
-
-/* Logical operators */
-u2 u2_logicalAnd(u2 lhs, u2 rhs)
-{
-	u2 z;
-
-	z = lhs && rhs;
-	return z;
-}
-
-u2 u2_logicalOr(u2 lhs, u2 rhs)
-{
-	u2 z;
-
-	z = lhs || rhs;
-	return z;
-}
-
-u2 u2_logicalNot(u2 lhs)
-{
-	u2 z;
-
-	z = !lhs;
-	return z;
-}
-
-i2 i2_logicalAnd(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs && rhs;
-	return z;
-}
-
-i2 i2_logicalOr(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs || rhs;
-	return z;
-}
-
-i2 i2_logicalNot(i2 lhs)
-{
-	i2 z;
-
-	z = !lhs;
-	return z;
-}
-
-/* Shift operators */
-u2 u2_shiftLeft(u2 lhs, u2 rhs)
-{
-	u2 z;
-
-	z = lhs << rhs;
-	return z;
-}
-
-u2 u2_shiftRight(u2 lhs, u2 rhs)
-{
-	u2 z;
-
-	z = lhs >> rhs;
-	return z;
-}
-
-i2 i2_shiftRight(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs >> rhs;
-	return z;
-}
-
-i2 i2_shiftLeft(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs << rhs;
-	return z;
-}
-
-/* Arithmetic operators */
-u2 u2_unaryPlus(u2 lhs)
-{
-	u2 z;
-
-	z = +lhs;
-	return z;
-}
-
-u2 u2_addition(u2 lhs, u2 rhs)
-{
-	u2 z;
-
-	z = lhs + rhs;
-	return z;
-}
-
-u2 u2_subtract(u2 lhs, u2 rhs)
-{
-	u2 z;
-
-	z = lhs - rhs;
-	return z;
-}
-
-u2 u2_multiply(u2 lhs, u2 rhs)
-{
-	u2 z;
-
-	z = lhs * rhs;
-	return z;
-}
-
-i2 u2_divide(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs / rhs;
-	return z;
-}
-
-u2 u2_remainder(u2 lhs, u2 rhs)
-{
-	u2 z;
-
-	z = lhs % rhs;
-	return z;
-}
-
-i2 i2_unaryMinus(i2 lhs)
-{
-	i2 z;
-
-	z = -lhs;
-	return z;
-}
-
-i2 i2_unaryPlus(i2 lhs)
-{
-	i2 z;
-
-	z = +lhs;
-	return z;
-}
-
-i2 i2_addition(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs + rhs;
-	return z;
-}
-
-i2 i2_subtract(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs - rhs;
-	return z;
-}
-
-i2 i2_multiply(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs * rhs;
-	return z;
-}
-
-i2 i2_divide(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs / rhs;
-	return z;
-}
-
-i2 i2_remainder(i2 lhs, i2 rhs)
-{
-	i2 z;
-
-	z = lhs % rhs;
-	return z;
-}
+PCODE_DIV(u2)
+PCODE_DIV(i2)
 
+PCODE_REM(u2)
+PCODE_REM(i2)
 
+#endif /* #ifdef HAS_DIVIDE */
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS4.test b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS4.test
index fb7d81e732..d2d69f39ae 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS4.test
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS4.test
@@ -21,20 +21,26 @@ TEST i4_complexLogic_Main()
 TEST u4_compareLogic_Main()
 {
 	extern u4 u4_compareLogic(u4 lhs, u4 rhs);
-	ASSERTU4(u4_compareLogic(0x1, 0x1), 1);
-	ASSERTU4(u4_compareLogic(0x1, 0x2), 23);
-	ASSERTU4(u4_compareLogic(0x2, 0x1), 22);
+	ASSERTU4(u4_compareLogic(0x0, 0x1), 17);
+	ASSERTU4(u4_compareLogic(0x1, 0x0), 13);
+	ASSERTU4(u4_compareLogic(0x1, 0x1), 17);
+	ASSERTU4(u4_compareLogic(0x1, 0x2), 15);
+	ASSERTU4(u4_compareLogic(0x2, 0x1), 14);
 }
 
 TEST i4_compareLogic_Main()
 {
 	extern i4 i4_compareLogic(i4 lhs, i4 rhs);
-	ASSERTI4(i4_compareLogic(0x1, 0x1), 21);
-	ASSERTI4(i4_compareLogic(0x1, 0x2), 21);
-	ASSERTI4(i4_compareLogic(0x2, 0x1), 22);
-	ASSERTI4(i4_compareLogic(-0x1, -0x1), 21);
-	ASSERTI4(i4_compareLogic(-0x1, -0x2), 21);
-	ASSERTI4(i4_compareLogic(-0x2, -0x1), 24);
+	ASSERTI4(i4_compareLogic(0x0, 0x1), 17);
+	ASSERTI4(i4_compareLogic(0x1, 0x0), 13);
+	ASSERTI4(i4_compareLogic(0x1, 0x1), 17);
+	ASSERTI4(i4_compareLogic(0x1, 0x2), 15);
+	ASSERTI4(i4_compareLogic(0x2, 0x1), 14);
+	ASSERTI4(i4_compareLogic(0x0, -0x1), 13);
+	ASSERTI4(i4_compareLogic(-0x1, 0x0), 13);
+	ASSERTI4(i4_compareLogic(-0x1, -0x1), 15);
+	ASSERTI4(i4_compareLogic(-0x1, -0x2), 11);
+	ASSERTI4(i4_compareLogic(-0x2, -0x1), 12);
 }
 
 /* Comparison operators */
@@ -242,6 +248,7 @@ TEST u4_logicalOr_Main()
 	extern u4 u4_logicalOr(u4 lhs, u4 rhs);
 	ASSERTU4(u4_logicalOr(0x01010101, 0x01010101), 1);
 	ASSERTU4(u4_logicalOr(2, 1), 1);
+	ASSERTU4(u4_logicalOr(U4_MIN, U4_MIN), 0);
 	ASSERTU4(u4_logicalOr(U4_MAX, U4_MAX), 1);
 	ASSERTU4(u4_logicalOr(U4_MAX, U4_MIN), 1);
 }
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS4_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS4_BODY.c
index f97dd4c76e..54fe83a416 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS4_BODY.c
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS4_BODY.c
@@ -15,399 +15,78 @@
  */
 #include "pcode_test.h"
 
-u4 u4_complexLogic(u4 a, u4 b, u4 c, u4 d, u4 e, u4 f)
-{
-	u4 ret = 0;
+PCODE_COMPLEX_LOGIC(u4)
+PCODE_COMPLEX_LOGIC(i4)
 
-	if (a > b && b > c || d < e && f < e) {
-		ret += 1;
-	}
-	if (a != b || a != c && d != e || f != e) {
-		ret += 2;
-	}
-	if (a && b && c || d && e && f) {
-		ret += 4;
-	}
-	if (a || b || c && d || e || f) {
-		ret += 8;
-	}
-	return ret;
-}
+PCODE_COMPARE_LOGIC(u4)
+PCODE_COMPARE_LOGIC(i4)
 
-i4 i4_complexLogic(i4 a, i4 b, i4 c, i4 d, i4 e, i4 f)
-{
-	i4 ret = 0;
+PCODE_GREATERTHAN(u4)
+PCODE_GREATERTHAN(i4)
 
-	if (a > b && b > c || d < e && f < e) {
-		ret += 1;
-	}
-	if (a != b || a != c && d != e || f != e) {
-		ret += 2;
-	}
-	if (a && b && c || d && e && f) {
-		ret += 4;
-	}
-	if (a || b || c && d || e || f) {
-		ret += 8;
-	}
-	return ret;
-}
+PCODE_GREATERTHANEQUALS(u4)
+PCODE_GREATERTHANEQUALS(i4)
 
-u4 u4_compareLogic(u4 lhs, u4 rhs)
-{
-	if (lhs < rhs)
-		lhs += 2;
-	if (lhs > rhs)
-		lhs += 4;
-	if (lhs == 0)
-		lhs += 8;
-	if (lhs != rhs)
-		lhs += 16;
-	return lhs;
-}
+PCODE_LESSTHAN(u4)
+PCODE_LESSTHAN(i4)
 
-i4 i4_compareLogic(i4 lhs, i4 rhs)
-{
-	if (lhs < 0)
-		lhs += 2;
-	if (lhs > 0)
-		lhs += 4;
-	if (lhs == 0)
-		lhs += 8;
-	if (lhs != rhs)
-		lhs += 16;
-	return lhs;
-}
-/* Comparison operators */
-u4 u4_greaterThan(u4 lhs, u4 rhs)
-{
-	u4 z;
+PCODE_LESSTHANEQUALS(u4)
+PCODE_LESSTHANEQUALS(i4)
 
-	z = lhs > rhs;
-	return z;
-}
+PCODE_EQUALS(u4)
+PCODE_EQUALS(i4)
 
-u4 u4_greaterThanEquals(u4 lhs, u4 rhs)
-{
-	u4 z;
+PCODE_NOTEQUALS(u4)
+PCODE_NOTEQUALS(i4)
 
-	z = lhs >= rhs;
-	return z;
-}
+PCODE_BITWISE_AND(u4)
+PCODE_BITWISE_AND(i4)
 
-u4 u4_lessThan(u4 lhs, u4 rhs)
-{
-	u4 z;
+PCODE_BITWISE_OR(u4)
+PCODE_BITWISE_OR(i4)
 
-	z = lhs < rhs;
-	return z;
-}
+PCODE_LOGICAL_AND(u4)
+PCODE_LOGICAL_AND(i4)
 
-u4 u4_lessThanEquals(u4 lhs, u4 rhs)
-{
-	u4 z;
+PCODE_LOGICAL_OR(u4)
+PCODE_LOGICAL_OR(i4)
 
-	z = lhs <= rhs;
-	return z;
-}
+PCODE_LOGICAL_NOT(u4)
+PCODE_LOGICAL_NOT(i4)
 
-u4 u4_equals(u4 lhs, u4 rhs)
-{
-	u4 z;
+PCODE_XOR(u4)
+PCODE_XOR(i4)
 
-	z = lhs == rhs;
-	return z;
-}
+PCODE_SHIFTLEFT(u4)
+PCODE_SHIFTLEFT(i4)
 
-u4 u4_notEquals(u4 lhs, u4 rhs)
-{
-	u4 z;
+PCODE_SHIFTRIGHT(u4)
+PCODE_SHIFTRIGHT(i4)
 
-	z = lhs != rhs;
-	return z;
-}
+PCODE_UNARY_PLUS(u4)
+PCODE_UNARY_PLUS(i4)
 
-i4 i4_greaterThan(i4 lhs, i4 rhs)
-{
-	i4 z;
+PCODE_UNARY_MINUS(u4)
+PCODE_UNARY_MINUS(i4)
 
-	z = lhs > rhs;
-	return z;
-}
+PCODE_ADDITION(u4)
+PCODE_ADDITION(i4)
 
-i4 i4_greaterThanEquals(i4 lhs, i4 rhs)
-{
-	i4 z;
+PCODE_SUBTRACT(u4)
+PCODE_SUBTRACT(i4)
 
-	z = lhs >= rhs;
-	return z;
-}
+#ifdef HAS_MULTIPLY
 
-i4 i4_lessThan(i4 lhs, i4 rhs)
-{
-	i4 z;
+PCODE_MUL(u4)
+PCODE_MUL(i4)
 
-	z = lhs < rhs;
-	return z;
-}
+#endif /* #ifdef HAS_MULTIPLY */
+#ifdef HAS_DIVIDE
 
-i4 i4_lessThanEquals(i4 lhs, i4 rhs)
-{
-	i4 z;
+PCODE_DIV(u4)
+PCODE_DIV(i4)
 
-	z = lhs <= rhs;
-	return z;
-}
-
-i4 i4_equals(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs == rhs;
-	return z;
-}
-
-i4 i4_notEquals(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs != rhs;
-	return z;
-}
-
-/* Bitwise operators */
-u4 u4_bitwiseAnd(u4 lhs, u4 rhs)
-{
-	u4 z;
-
-	z = lhs & rhs;
-	return z;
-}
-
-u4 u4_bitwiseOr(u4 lhs, u4 rhs)
-{
-	u4 z;
-
-	z = lhs | rhs;
-	return z;
-}
-
-u4 u4_bitwiseXor(u4 lhs, u4 rhs)
-{
-	u4 z;
-
-	z = lhs ^ rhs;
-	return z;
-}
-
-i4 i4_bitwiseAnd(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs & rhs;
-	return z;
-}
-
-i4 i4_bitwiseOr(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs | rhs;
-	return z;
-}
-
-i4 i4_bitwiseXor(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs ^ rhs;
-	return z;
-}
-
-/* Logical operators */
-u4 u4_logicalAnd(u4 lhs, u4 rhs)
-{
-	u4 z;
-
-	z = lhs && rhs;
-	return z;
-}
-
-u4 u4_logicalOr(u4 lhs, u4 rhs)
-{
-	u4 z;
-
-	z = lhs || rhs;
-	return z;
-}
-
-u4 u4_logicalNot(u4 lhs)
-{
-	u4 z;
-
-	z = !lhs;
-	return z;
-}
-
-i4 i4_logicalAnd(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs && rhs;
-	return z;
-}
-
-i4 i4_logicalOr(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs || rhs;
-	return z;
-}
-
-i4 i4_logicalNot(i4 lhs)
-{
-	i4 z;
-
-	z = !lhs;
-	return z;
-}
-
-/* Shift operators */
-u4 u4_shiftLeft(u4 lhs, u4 rhs)
-{
-	u4 z;
-
-	z = lhs << rhs;
-	return z;
-}
-
-u4 u4_shiftRight(u4 lhs, u4 rhs)
-{
-	u4 z;
-
-	z = lhs >> rhs;
-	return z;
-}
-
-i4 i4_shiftLeft(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs << rhs;
-	return z;
-}
-
-i4 i4_shiftRight(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs >> rhs;
-	return z;
-}
-
-/* Arithmetic operators */
-u4 u4_unaryPlus(u4 lhs)
-{
-	u4 z;
-
-	z = +lhs;
-	return z;
-}
-
-u4 u4_addition(u4 lhs, u4 rhs)
-{
-	u4 z;
-
-	z = lhs + rhs;
-	return z;
-}
-
-u4 u4_subtract(u4 lhs, u4 rhs)
-{
-	u4 z;
-
-	z = lhs - rhs;
-	return z;
-}
-
-u4 u4_multiply(u4 lhs, u4 rhs)
-{
-	u4 z;
-
-	z = lhs * rhs;
-	return z;
-}
-
-u4 u4_divide(u4 lhs, u4 rhs)
-{
-	u4 z;
-
-	z = lhs / rhs;
-	return z;
-}
-
-u4 u4_remainder(u4 lhs, u4 rhs)
-{
-	u4 z;
-
-	z = lhs % rhs;
-	return z;
-}
-
-i4 i4_unaryMinus(i4 lhs)
-{
-	i4 z;
-
-	z = -lhs;
-	return z;
-}
-
-i4 i4_unaryPlus(i4 lhs)
-{
-	i4 z;
-
-	z = +lhs;
-	return z;
-}
-
-i4 i4_addition(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs + rhs;
-	return z;
-}
-
-i4 i4_subtract(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs - rhs;
-	return z;
-}
-
-i4 i4_multiply(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs * rhs;
-	return z;
-}
-
-i4 i4_divide(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs / rhs;
-	return z;
-}
-
-i4 i4_remainder(i4 lhs, i4 rhs)
-{
-	i4 z;
-
-	z = lhs % rhs;
-	return z;
-}
+PCODE_REM(u4)
+PCODE_REM(i4)
 
+#endif /* #ifdef HAS_DIVIDE */
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_BODY.c
index 715abeccdb..56d46db05b 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_BODY.c
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_BODY.c
@@ -15,402 +15,78 @@
  */
 #include "pcode_test.h"
 
-u1 u1_complexLogic(u1 a, u1 b, u1 c, u1 d, u1 e, u1 f)
-{
-	u1 ret = 0;
+PCODE_COMPLEX_LOGIC(u1)
+PCODE_COMPLEX_LOGIC(i1)
 
-	if (a > b && b > c || d < e && f < e) {
-		ret += 1;
-	}
-	if (a != b || a != c && d != e || f != e) {
-		ret += 2;
-	}
-	if (a && b && c || d && e && f) {
-		ret += 4;
-	}
-	if (a || b || c && d || e || f) {
-		ret += 8;
-	}
-	return ret;
-}
+PCODE_COMPARE_LOGIC(u1)
+PCODE_COMPARE_LOGIC(i1)
 
-i1 i1_complexLogic(i1 a, i1 b, i1 c, i1 d, i1 e, i1 f)
-{
-	i1 ret = 0;
+PCODE_GREATERTHAN(u1)
+PCODE_GREATERTHAN(i1)
 
-	if (a > b && b > c || d < e && f < e) {
-		ret += 1;
-	}
-	if (a != b || a != c && d != e || f != e) {
-		ret += 2;
-	}
-	if (a && b && c || d && e && f) {
-		ret += 4;
-	}
-	if (a || b || c && d || e || f) {
-		ret += 8;
-	}
-	return ret;
-}
+PCODE_GREATERTHANEQUALS(u1)
+PCODE_GREATERTHANEQUALS(i1)
 
-u1 u1_compareLogic(u1 lhs, u1 rhs)
-{
-	if (lhs < rhs)
-		lhs += 2;
-	if (lhs > rhs)
-		lhs += 4;
-	if (lhs == 0)
-		lhs += 8;
-	if (lhs != rhs)
-		lhs += 16;
-	return lhs;
-}
+PCODE_LESSTHAN(u1)
+PCODE_LESSTHAN(i1)
 
-i1 i1_compareLogic(i1 lhs, i1 rhs)
-{
-	if (lhs < 0)
-		lhs += 2;
-	if (lhs > 0)
-		lhs += 4;
-	if (lhs == 0)
-		lhs += 8;
-	if (lhs != rhs)
-		lhs += 16;
-	return lhs;
-}
+PCODE_LESSTHANEQUALS(u1)
+PCODE_LESSTHANEQUALS(i1)
 
-/* Comparison operators */
-u1 u1_greaterThan(u1 lhs, u1 rhs)
-{
-	u1 z;
+PCODE_EQUALS(u1)
+PCODE_EQUALS(i1)
 
-	z = lhs > rhs;
-	return z;
-}
+PCODE_NOTEQUALS(u1)
+PCODE_NOTEQUALS(i1)
 
-u1 u1_greaterThanEquals(u1 lhs, u1 rhs)
-{
-	u1 z;
+PCODE_BITWISE_AND(u1)
+PCODE_BITWISE_AND(i1)
 
-	z = lhs >= rhs;
-	return z;
-}
+PCODE_BITWISE_OR(u1)
+PCODE_BITWISE_OR(i1)
 
-u1 u1_lessThan(u1 lhs, u1 rhs)
-{
-	u1 z;
+PCODE_LOGICAL_AND(u1)
+PCODE_LOGICAL_AND(i1)
 
-	z = lhs < rhs;
-	return z;
-}
+PCODE_LOGICAL_OR(u1)
+PCODE_LOGICAL_OR(i1)
 
-u1 u1_lessThanEquals(u1 lhs, u1 rhs)
-{
-	u1 z;
+PCODE_LOGICAL_NOT(u1)
+PCODE_LOGICAL_NOT(i1)
 
-	z = lhs <= rhs;
-	return z;
-}
+PCODE_XOR(u1)
+PCODE_XOR(i1)
 
-u1 u1_equals(u1 lhs, u1 rhs)
-{
-	u1 z;
+PCODE_SHIFTLEFT(u1)
+PCODE_SHIFTLEFT(i1)
 
-	z = lhs == rhs;
-	return z;
-}
+PCODE_SHIFTRIGHT(u1)
+PCODE_SHIFTRIGHT(i1)
 
-u1 u1_notEquals(u1 lhs, u1 rhs)
-{
-	u1 z;
+PCODE_UNARY_PLUS(u1)
+PCODE_UNARY_PLUS(i1)
 
-	z = lhs != rhs;
-	return z;
-}
+PCODE_UNARY_MINUS(u1)
+PCODE_UNARY_MINUS(i1)
 
-i1 i1_greaterThan(i1 lhs, i1 rhs)
-{
-	i1 z;
+PCODE_ADDITION(u1)
+PCODE_ADDITION(i1)
 
-	z = lhs > rhs;
-	return z;
-}
+PCODE_SUBTRACT(u1)
+PCODE_SUBTRACT(i1)
 
-i1 i1_greaterThanEquals(i1 lhs, i1 rhs)
-{
-	i1 z;
+#ifdef HAS_MULTIPLY
 
-	z = lhs >= rhs;
-	return z;
-}
+PCODE_MUL(u1)
+PCODE_MUL(i1)
 
-i1 i1_lessThan(i1 lhs, i1 rhs)
-{
-	i1 z;
+#endif /* #ifdef HAS_MULTIPLY */
+#ifdef HAS_DIVIDE
 
-	z = lhs < rhs;
-	return z;
-}
-
-i1 i1_lessThanEquals(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs <= rhs;
-	return z;
-}
-
-i1 i1_equals(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs == rhs;
-	return z;
-}
-
-i1 i1_notEquals(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs != rhs;
-	return z;
-}
-
-/* Bitwise operators */
-u1 u1_bitwiseAnd(u1 lhs, u1 rhs)
-{
-	u1 z;
-
-	z = lhs & rhs;
-	return z;
-}
-
-
-u1 u1_bitwiseOr(u1 lhs, u1 rhs)
-{
-	u1 z;
-
-	z = lhs | rhs;
-	return z;
-}
-
-u1 u1_bitwiseXor(u1 lhs, u1 rhs)
-{
-	u1 z;
-
-	z = lhs ^ rhs;
-	return z;
-}
-
-i1 i1_bitwiseAnd(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs & rhs;
-	return z;
-}
-
-i1 i1_bitwiseOr(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs | rhs;
-	return z;
-}
-
-i1 i1_bitwiseXor(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs ^ rhs;
-	return z;
-}
-
-/* Logical operators */
-u1 u1_logicalAnd(u1 lhs, u1 rhs)
-{
-	u1 z;
-
-	z = lhs && rhs;
-	return z;
-}
-
-u1 u1_logicalOr(u1 lhs, u1 rhs)
-{
-	u1 z;
-
-	z = lhs || rhs;
-	return z;
-}
-
-u1 u1_logicalNot(u1 lhs)
-{
-	u1 z;
-
-	z = !lhs;
-	return z;
-}
-
-i1 i1_logicalAnd(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs && rhs;
-	return z;
-}
-
-i1 i1_logicalOr(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs || rhs;
-	return z;
-}
-
-i1 i1_logicalNot(i1 lhs)
-{
-	i1 z;
-
-	z = !lhs;
-	return z;
-}
-
-/* Shift operators */
-u1 u1_shiftLeft(u1 lhs, u1 rhs)
-{
-	u1 z;
-
-	z = lhs << rhs;
-	return z;
-}
-
-u1 u1_shiftRight(u1 lhs, u1 rhs)
-{
-	u1 z;
-
-	z = lhs >> rhs;
-	return z;
-}
-
-i1 i1_shiftLeft(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs << rhs;
-	return z;
-}
-
-i1 i1_shiftRight(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs >> rhs;
-	return z;
-}
-
-/* Arithmetic operators */
-u1 u1_unaryPlus(u1 lhs)
-{
-	u1 z;
-
-	z = +lhs;
-	return z;
-}
-
-u1 u1_addition(u1 lhs, u1 rhs)
-{
-	u1 z;
-
-	z = lhs + rhs;
-	return z;
-}
-
-u1 u1_subtract(u1 lhs, u1 rhs)
-{
-	u1 z;
-
-	z = lhs - rhs;
-	return z;
-}
-
-u1 u1_multiply(u1 lhs, u1 rhs)
-{
-	u1 z;
-
-	z = lhs * rhs;
-	return z;
-}
-
-i1 u1_divide(u1 lhs, u1 rhs)
-{
-	i1 z;
-
-	z = lhs / rhs;
-	return z;
-}
-
-u1 u1_remainder(u1 lhs, u1 rhs)
-{
-	u1 z;
-
-	z = lhs % rhs;
-	return z;
-}
-
-i1 i1_unaryMinus(i1 lhs)
-{
-	i1 z;
-
-	z = -lhs;
-	return z;
-}
-
-i1 i1_unaryPlus(i1 lhs)
-{
-	i1 z;
-
-	z = +lhs;
-	return z;
-}
-
-i1 i1_addition(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs + rhs;
-	return z;
-}
-
-i1 i1_subtract(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs - rhs;
-	return z;
-}
-
-i1 i1_multiply(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs * rhs;
-	return z;
-}
-
-i1 i1_divide(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs / rhs;
-	return z;
-}
-
-i1 i1_remainder(i1 lhs, i1 rhs)
-{
-	i1 z;
-
-	z = lhs % rhs;
-	return z;
-}
+PCODE_DIV(u1)
+PCODE_DIV(i1)
 
+PCODE_REM(u1)
+PCODE_REM(i1)
 
+#endif /* #ifdef HAS_DIVIDE */
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_DOUBLE.test b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_DOUBLE.test
index 34bba39353..ce6b81cbac 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_DOUBLE.test
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_DOUBLE.test
@@ -29,6 +29,23 @@ TEST f8_greaterThan_Main()
 }
 #endif
 
+#ifdef HAS_DOUBLE
+TEST f8_compareLogic_Main()
+{
+	extern f8 f8_compareLogic(f8 lhs, f8 rhs);
+	ASSERTF8(f8_compareLogic(0x0, 0x1), 17);
+	ASSERTF8(f8_compareLogic(0x1, 0x0), 13);
+	ASSERTF8(f8_compareLogic(0x1, 0x1), 17);
+	ASSERTF8(f8_compareLogic(0x1, 0x2), 15);
+	ASSERTF8(f8_compareLogic(0x2, 0x1), 14);
+	ASSERTF8(f8_compareLogic(0x0, -0x1), 13);
+	ASSERTF8(f8_compareLogic(-0x1, 0x0), 13);
+	ASSERTF8(f8_compareLogic(-0x1, -0x1), 15);
+	ASSERTF8(f8_compareLogic(-0x1, -0x2), 11);
+	ASSERTF8(f8_compareLogic(-0x2, -0x1), 12);
+}
+#endif
+
 #ifdef HAS_DOUBLE
 TEST f8_greaterThanEquals_Main()
 {
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_DOUBLE_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_DOUBLE_BODY.c
index 98c88c2a25..3e65417bfb 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_DOUBLE_BODY.c
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_DOUBLE_BODY.c
@@ -16,134 +16,42 @@
 #include "pcode_test.h"
 #ifdef HAS_DOUBLE
 
-f8 f8_compareLogic(f8 lhs, f8 rhs)
-{
-	if (lhs < 0)
-		lhs += 2;
-	if (lhs > 0)
-		lhs += 4;
-	if (lhs == 0)
-		lhs += 8;
-	if (lhs != rhs)
-		lhs += 16;
-	return lhs;
-}
-
-/* Comparison operators */
-f8 f8_greaterThan(f8 lhs, f8 rhs)
-{
-	f8 z;
-
-	z = lhs > rhs;
-	return z;
-}
-
-f8 f8_greaterThanEquals(f8 lhs, f8 rhs)
-{
-	f8 z;
-
-	z = lhs >= rhs;
-	return z;
-}
-
-f8 f8_lessThan(f8 lhs, f8 rhs)
-{
-	f8 z;
-
-	z = lhs < rhs;
-	return z;
-}
-
-f8 f8_lessThanEquals(f8 lhs, f8 rhs)
-{
-	f8 z;
-
-	z = lhs <= rhs;
-	return z;
-}
-
-f8 f8_equals(f8 lhs, f8 rhs)
-{
-	f8 z;
-
-	z = lhs == rhs;
-	return z;
-}
-
-f8 f8_notEquals(f8 lhs, f8 rhs)
-{
-	f8 z;
-
-	z = lhs != rhs;
-	return z;
-}
-
-/* Bitwise operators */
-
-/* Logical operators */
-f8 f8_logicalAnd(f8 lhs, f8 rhs)
-{
-	f8 z;
-
-	z = lhs && rhs;
-	return z;
-}
-
-f8 f8_logicalOr(f8 lhs, f8 rhs)
-{
-	f8 z;
-
-	z = lhs || rhs;
-	return z;
-}
-
-f8 f8_logicalNot(f8 lhs)
-{
-	f8 z;
-
-	z = !lhs;
-	return z;
-}
-
-/* Arithmetic operators */
-f8 f8_unaryMinus(f8 lhs)
-{
-	f8 z;
-
-	z = -lhs;
-	return z;
-}
-
-f8 f8_unaryPlus(f8 lhs)
-{
-	f8 z;
-
-	z = +lhs;
-	return z;
-}
-
-f8 f8_addition(f8 lhs, f8 rhs)
-{
-	f8 z;
+PCODE_COMPARE_LOGIC(f8)
 
-	z = lhs + rhs;
-	return z;
-}
+PCODE_GREATERTHAN_FLOAT(f8)
 
-f8 f8_subtract(f8 lhs, f8 rhs)
-{
-	f8 z;
+PCODE_GREATERTHANEQUALS_FLOAT(f8)
 
-	z = lhs - rhs;
-	return z;
-}
+PCODE_LESSTHAN_FLOAT(f8)
 
-f8 f8_multiply(f8 lhs, f8 rhs)
-{
-	f8 z;
+PCODE_LESSTHANEQUALS_FLOAT(f8)
 
-	z = lhs * rhs;
-	return z;
-}
+PCODE_EQUALS_FLOAT(f8)
 
+PCODE_NOTEQUALS_FLOAT(f8)
+
+PCODE_LOGICAL_AND_FLOAT(f8)
+
+PCODE_LOGICAL_OR_FLOAT(f8)
+
+PCODE_LOGICAL_NOT_FLOAT(f8)
+
+PCODE_UNARY_PLUS_FLOAT(f8)
+
+PCODE_UNARY_MINUS_FLOAT(f8)
+
+PCODE_ADDITION_FLOAT(f8)
+
+PCODE_SUBTRACT_FLOAT(f8)
+
+#ifdef HAS_MULTIPLY
+
+PCODE_MUL_FLOAT(f8)
+
+#endif /* #ifdef HAS_MULTIPLY */
+#ifdef HAS_DIVIDE
+
+PCODE_DIV_FLOAT(f8)
+
+#endif /* #ifdef HAS_DIVIDE */
 #endif /* #ifdef HAS_DOUBLE */
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_FLOAT.test b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_FLOAT.test
index 6f638105ce..515c6a8f98 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_FLOAT.test
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_FLOAT.test
@@ -4,12 +4,16 @@
 TEST f4_compareLogic_Main()
 {
 	extern f4 f4_compareLogic(f4 lhs, f4 rhs);
-	ASSERTF4(f4_compareLogic(0x1, 0x1), 21);
-	ASSERTF4(f4_compareLogic(0x1, 0x2), 21);
-	ASSERTF4(f4_compareLogic(0x2, 0x1), 22);
-	ASSERTF4(f4_compareLogic(-0x1, -0x1), 21);
-	ASSERTF4(f4_compareLogic(-0x1, -0x2), 21);
-	ASSERTF4(f4_compareLogic(-0x2, -0x1), 24);
+	ASSERTF4(f4_compareLogic(0x0, 0x1), 17);
+	ASSERTF4(f4_compareLogic(0x1, 0x0), 13);
+	ASSERTF4(f4_compareLogic(0x1, 0x1), 17);
+	ASSERTF4(f4_compareLogic(0x1, 0x2), 15);
+	ASSERTF4(f4_compareLogic(0x2, 0x1), 14);
+	ASSERTF4(f4_compareLogic(0x0, -0x1), 13);
+	ASSERTF4(f4_compareLogic(-0x1, 0x0), 13);
+	ASSERTF4(f4_compareLogic(-0x1, -0x1), 15);
+	ASSERTF4(f4_compareLogic(-0x1, -0x2), 11);
+	ASSERTF4(f4_compareLogic(-0x2, -0x1), 12);
 }
 #endif
 
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_FLOAT_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_FLOAT_BODY.c
index c27d73f790..dd89b3a6dc 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_FLOAT_BODY.c
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_FLOAT_BODY.c
@@ -16,132 +16,41 @@
 #include "pcode_test.h"
 
 #ifdef HAS_FLOAT
-f4 f4_compareLogic(f4 lhs, f4 rhs)
-{
-	if (lhs < 0)
-		lhs += 2;
-	if (lhs > 0)
-		lhs += 4;
-	if (lhs == 0)
-		lhs += 8;
-	if (lhs != rhs)
-		lhs += 16;
-	return lhs;
-}
-
-/* Comparison operators */
-f4 f4_greaterThan(f4 lhs, f4 rhs)
-{
-	f4 z;
-
-	z = lhs > rhs;
-	return z;
-}
-
-f4 f4_greaterThanEquals(f4 lhs, f4 rhs)
-{
-	f4 z;
-
-	z = lhs >= rhs;
-	return z;
-}
-
-f4 f4_lessThan(f4 lhs, f4 rhs)
-{
-	f4 z;
-
-	z = lhs < rhs;
-	return z;
-}
-
-f4 f4_lessThanEquals(f4 lhs, f4 rhs)
-{
-	f4 z;
-
-	z = lhs <= rhs;
-	return z;
-}
-
-f4 f4_equals(f4 lhs, f4 rhs)
-{
-	f4 z;
-
-	z = lhs == rhs;
-	return z;
-}
-
-f4 f4_notEquals(f4 lhs, f4 rhs)
-{
-	f4 z;
-
-	z = lhs != rhs;
-	return z;
-}
-
-/* Logical operators */
-f4 f4_logicalAnd(f4 lhs, f4 rhs)
-{
-	f4 z;
-
-	z = lhs && rhs;
-	return z;
-}
-
-f4 f4_logicalOr(f4 lhs, f4 rhs)
-{
-	f4 z;
-
-	z = lhs || rhs;
-	return z;
-}
-
-f4 f4_logicalNot(f4 lhs)
-{
-	f4 z;
-
-	z = !lhs;
-	return z;
-}
-
-/* Arithmetic operators */
-f4 f4_unaryMinus(f4 lhs)
-{
-	f4 z;
-
-	z = -lhs;
-	return z;
-}
-
-f4 f4_unaryPlus(f4 lhs)
-{
-	f4 z;
-
-	z = +lhs;
-	return z;
-}
-
-f4 f4_addition(f4 lhs, f4 rhs)
-{
-	f4 z;
-
-	z = lhs + rhs;
-	return z;
-}
 
-f4 f4_subtract(f4 lhs, f4 rhs)
-{
-	f4 z;
+PCODE_GREATERTHAN_FLOAT(f4)
 
-	z = lhs - rhs;
-	return z;
-}
+PCODE_GREATERTHANEQUALS_FLOAT(f4)
 
-f4 f4_multiply(f4 lhs, f4 rhs)
-{
-	f4 z;
+PCODE_LESSTHAN_FLOAT(f4)
 
-	z = lhs * rhs;
-	return z;
-}
+PCODE_LESSTHANEQUALS_FLOAT(f4)
 
+PCODE_EQUALS_FLOAT(f4)
+
+PCODE_NOTEQUALS_FLOAT(f4)
+
+PCODE_LOGICAL_AND_FLOAT(f4)
+
+PCODE_LOGICAL_OR_FLOAT(f4)
+
+PCODE_LOGICAL_NOT_FLOAT(f4)
+
+PCODE_UNARY_PLUS_FLOAT(f4)
+
+PCODE_UNARY_MINUS_FLOAT(f4)
+
+PCODE_ADDITION_FLOAT(f4)
+
+PCODE_SUBTRACT_FLOAT(f4)
+
+#ifdef HAS_MULTIPLY
+
+PCODE_MUL_FLOAT(f4)
+
+#endif /* #ifdef HAS_MULTIPLY */
+#ifdef HAS_DIVIDE
+
+PCODE_DIV_FLOAT(f4)
+
+#endif /* #ifdef HAS_DIVIDE */
 #endif /* #ifdef HAS_FLOAT */
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_LONGLONG.test b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_LONGLONG.test
index af259a99ed..86eb7ad893 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_LONGLONG.test
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_LONGLONG.test
@@ -26,12 +26,16 @@ TEST u8_complexLogic_Main()
 TEST i8_compareLogic_Main()
 {
 	extern i8 i8_compareLogic(i8 lhs, i8 rhs);
-	ASSERTI8(i8_compareLogic(0x1, 0x1), 21);
-	ASSERTI8(i8_compareLogic(0x1, 0x2), 21);
-	ASSERTI8(i8_compareLogic(0x2, 0x1), 22);
-	ASSERTI8(i8_compareLogic(-0x1, -0x1), 21);
-	ASSERTI8(i8_compareLogic(-0x1, -0x2), 21);
-	ASSERTI8(i8_compareLogic(-0x2, -0x1), 24);
+	ASSERTI8(i8_compareLogic(0x0, 0x1), 17);
+	ASSERTI8(i8_compareLogic(0x1, 0x0), 13);
+	ASSERTI8(i8_compareLogic(0x1, 0x1), 17);
+	ASSERTI8(i8_compareLogic(0x1, 0x2), 15);
+	ASSERTI8(i8_compareLogic(0x2, 0x1), 14);
+	ASSERTI8(i8_compareLogic(0x0, -0x1), 13);
+	ASSERTI8(i8_compareLogic(-0x1, 0x0), 13);
+	ASSERTI8(i8_compareLogic(-0x1, -0x1), 15);
+	ASSERTI8(i8_compareLogic(-0x1, -0x2), 11);
+	ASSERTI8(i8_compareLogic(-0x2, -0x1), 12);
 }
 #endif
 
@@ -39,9 +43,11 @@ TEST i8_compareLogic_Main()
 TEST u8_compareLogic_Main()
 {
 	extern u8 u8_compareLogic(u8 lhs, u8 rhs);
-	ASSERTU8(u8_compareLogic(0x1, 0x1), 1);
-	ASSERTU8(u8_compareLogic(0x1, 0x2), 23);
-	ASSERTU8(u8_compareLogic(0x2, 0x1), 22);
+	ASSERTU8(u8_compareLogic(0x0, 0x1), 17);
+	ASSERTU8(u8_compareLogic(0x1, 0x0), 13);
+	ASSERTU8(u8_compareLogic(0x1, 0x1), 17);
+	ASSERTU8(u8_compareLogic(0x1, 0x2), 15);
+	ASSERTU8(u8_compareLogic(0x2, 0x1), 14);
 }
 #endif
 /* Comparison operators */
@@ -309,6 +315,7 @@ TEST i8_logicalAnd_Main()
 TEST i8_logicalOr_Main()
 {
 	extern i8 i8_logicalOr(i8 lhs, i8 rhs);
+	ASSERTI8(i8_logicalOr(0, 0), 0);
 	ASSERTI8(i8_logicalOr(2, 1), 1);
 	ASSERTI8(i8_logicalOr(0x0101010101010101LL, 0x0101010101010101LL), 1);
 	ASSERTI8(i8_logicalOr(I8_MAX, I8_MAX), 1);
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_LONGLONG_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_LONGLONG_BODY.c
index 53593be742..4c4c7048f3 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_LONGLONG_BODY.c
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BIOPS_LONGLONG_BODY.c
@@ -16,394 +16,80 @@
 #include "pcode_test.h"
 
 #ifdef HAS_LONGLONG
-i8 i8_complexLogic(i8 a, i8 b, i8 c, i8 d, i8 e, i8 f)
-{
-	i8 ret = 0;
 
-	if (a > b && b > c || d < e && f < e) {
-		ret += 1;
-	}
-	if (a != b || a != c && d != e || f != e) {
-		ret += 2;
-	}
-	if (a && b && c || d && e && f) {
-		ret += 4;
-	}
-	if (a || b || c && d || e || f) {
-		ret += 8;
-	}
-	return ret;
-}
+PCODE_COMPLEX_LOGIC(u8)
+PCODE_COMPLEX_LOGIC(i8)
 
-u8 u8_complexLogic(u8 a, u8 b, u8 c, u8 d, u8 e, u8 f)
-{
-	u8 ret = 0;
+PCODE_COMPARE_LOGIC(u8)
+PCODE_COMPARE_LOGIC(i8)
 
-	if (a > b && b > c || d < e && f < e) {
-		ret += 1;
-	}
-	if (a != b || a != c && d != e || f != e) {
-		ret += 2;
-	}
-	if (a && b && c || d && e && f) {
-		ret += 4;
-	}
-	if (a || b || c && d || e || f) {
-		ret += 8;
-	}
-	return ret;
-}
+PCODE_GREATERTHAN(u8)
+PCODE_GREATERTHAN(i8)
 
-i8 i8_compareLogic(i8 lhs, i8 rhs)
-{
-	if (lhs < 0)
-		lhs += 2;
-	if (lhs > 0)
-		lhs += 4;
-	if (lhs == 0)
-		lhs += 8;
-	if (lhs != rhs)
-		lhs += 16;
-	return lhs;
-}
+PCODE_GREATERTHANEQUALS(u8)
+PCODE_GREATERTHANEQUALS(i8)
 
-u8 u8_compareLogic(u8 lhs, u8 rhs)
-{
-	if (lhs < rhs)
-		lhs += 2;
-	if (lhs > rhs)
-		lhs += 4;
-	if (lhs == 0)
-		lhs += 8;
-	if (lhs != rhs)
-		lhs += 16;
-	return lhs;
-}
-/* Comparison operators */
-u8 u8_greaterThan(u8 lhs, u8 rhs)
-{
-	u8 z;
+PCODE_LESSTHAN(u8)
+PCODE_LESSTHAN(i8)
 
-	z = lhs > rhs;
-	return z;
-}
+PCODE_LESSTHANEQUALS(u8)
+PCODE_LESSTHANEQUALS(i8)
 
-u8 u8_greaterThanEquals(u8 lhs, u8 rhs)
-{
-	u8 z;
+PCODE_EQUALS(u8)
+PCODE_EQUALS(i8)
 
-	z = lhs >= rhs;
-	return z;
-}
+PCODE_NOTEQUALS(u8)
+PCODE_NOTEQUALS(i8)
 
-u8 u8_lessThan(u8 lhs, u8 rhs)
-{
-	u8 z;
+PCODE_BITWISE_AND(u8)
+PCODE_BITWISE_AND(i8)
 
-	z = lhs < rhs;
-	return z;
-}
+PCODE_BITWISE_OR(u8)
+PCODE_BITWISE_OR(i8)
 
-u8 u8_lessThanEquals(u8 lhs, u8 rhs)
-{
-	u8 z;
+PCODE_LOGICAL_AND(u8)
+PCODE_LOGICAL_AND(i8)
 
-	z = lhs <= rhs;
-	return z;
-}
+PCODE_LOGICAL_OR(u8)
+PCODE_LOGICAL_OR(i8)
 
-u8 u8_equals(u8 lhs, u8 rhs)
-{
-	u8 z;
+PCODE_LOGICAL_NOT(u8)
+PCODE_LOGICAL_NOT(i8)
 
-	z = lhs == rhs;
-	return z;
-}
+PCODE_XOR(u8)
+PCODE_XOR(i8)
 
-u8 u8_notEquals(u8 lhs, u8 rhs)
-{
-	u8 z;
+PCODE_SHIFTLEFT(u8)
+PCODE_SHIFTLEFT(i8)
 
-	z = lhs != rhs;
-	return z;
-}
+PCODE_SHIFTRIGHT(u8)
+PCODE_SHIFTRIGHT(i8)
 
-i8 i8_greaterThan(i8 lhs, i8 rhs)
-{
-	i8 z;
+PCODE_UNARY_PLUS(u8)
+PCODE_UNARY_PLUS(i8)
 
-	z = lhs > rhs;
-	return z;
-}
+PCODE_UNARY_MINUS(u8)
+PCODE_UNARY_MINUS(i8)
 
-i8 i8_greaterThanEquals(i8 lhs, i8 rhs)
-{
-	i8 z;
+PCODE_ADDITION(u8)
+PCODE_ADDITION(i8)
 
-	z = lhs >= rhs;
-	return z;
-}
+PCODE_SUBTRACT(u8)
+PCODE_SUBTRACT(i8)
 
-i8 i8_lessThan(i8 lhs, i8 rhs)
-{
-	i8 z;
+#ifdef HAS_MULTIPLY
 
-	z = lhs < rhs;
-	return z;
-}
+PCODE_MUL(u8)
+PCODE_MUL(i8)
 
-i8 i8_lessThanEquals(i8 lhs, i8 rhs)
-{
-	i8 z;
+#endif /* #ifdef HAS_MULTIPLY */
+#ifdef HAS_DIVIDE
 
-	z = lhs <= rhs;
-	return z;
-}
-
-i8 i8_equals(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs == rhs;
-	return z;
-}
-
-i8 i8_notEquals(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs != rhs;
-	return z;
-}
-
-/* Bitwise operators */
-u8 u8_bitwiseAnd(u8 lhs, u8 rhs)
-{
-	u8 z;
-
-	z = lhs & rhs;
-	return z;
-}
-
-u8 u8_bitwiseOr(u8 lhs, u8 rhs)
-{
-	u8 z;
-
-	z = lhs | rhs;
-	return z;
-}
-
-u8 u8_bitwiseXor(u8 lhs, u8 rhs)
-{
-	u8 z;
-
-	z = lhs ^ rhs;
-	return z;
-}
-
-i8 i8_bitwiseAnd(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs & rhs;
-	return z;
-}
-
-i8 i8_bitwiseOr(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs | rhs;
-	return z;
-}
-
-i8 i8_bitwiseXor(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs ^ rhs;
-	return z;
-}
-
-/* Logical operators */
-u8 u8_logicalAnd(u8 lhs, u8 rhs)
-{
-	u8 z;
-
-	z = lhs && rhs;
-	return z;
-}
-
-u8 u8_logicalOr(u8 lhs, u8 rhs)
-{
-	u8 z;
-
-	z = lhs || rhs;
-	return z;
-}
-
-u8 u8_logicalNot(u8 lhs)
-{
-	u8 z;
-
-	z = !lhs;
-	return z;
-}
-
-i8 i8_logicalAnd(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs && rhs;
-	return z;
-}
-
-i8 i8_logicalOr(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs || rhs;
-	return z;
-}
-
-i8 i8_logicalNot(i8 lhs)
-{
-	i8 z;
-
-	z = !lhs;
-	return z;
-}
-
-/* Shift operators */
-u8 u8_shiftLeft(u8 lhs, u8 rhs)
-{
-	u8 z;
-
-	z = lhs << rhs;
-	return z;
-}
-
-u8 u8_shiftRight(u8 lhs, u8 rhs)
-{
-	u8 z;
-
-	z = lhs >> rhs;
-	return z;
-}
-
-i8 i8_shiftLeft(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs << rhs;
-	return z;
-}
-
-i8 i8_shiftRight(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs >> rhs;
-	return z;
-}
-
-/* Arithmetic operators */
-u8 u8_unaryPlus(u8 lhs)
-{
-	u8 z;
-
-	z = +lhs;
-	return z;
-}
-
-u8 u8_addition(u8 lhs, u8 rhs)
-{
-	u8 z;
-
-	z = lhs + rhs;
-	return z;
-}
-
-u8 u8_subtract(u8 lhs, u8 rhs)
-{
-	u8 z;
-
-	z = lhs - rhs;
-	return z;
-}
-
-u8 u8_multiply(u8 lhs, u8 rhs)
-{
-	u8 z;
-
-	z = lhs * rhs;
-	return z;
-}
-
-u8 u8_divide(u8 lhs, u8 rhs)
-{
-	u8 z;
-
-	z = lhs / rhs;
-	return z;
-}
-
-
-i8 i8_unaryMinus(i8 lhs)
-{
-	i8 z;
-
-	z = -lhs;
-	return z;
-}
-
-i8 i8_unaryPlus(i8 lhs)
-{
-	i8 z;
-
-	z = +lhs;
-	return z;
-}
-
-i8 i8_addition(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs + rhs;
-	return z;
-}
-
-i8 i8_subtract(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs - rhs;
-	return z;
-}
-
-i8 i8_multiply(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs * rhs;
-	return z;
-}
-
-i8 i8_divide(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs / rhs;
-	return z;
-}
-
-i8 i8_remainder(i8 lhs, i8 rhs)
-{
-	i8 z;
-
-	z = lhs % rhs;
-	return z;
-}
+PCODE_DIV(u8)
+PCODE_DIV(i8)
 
+PCODE_REM(u8)
+PCODE_REM(i8)
 
+#endif /* #ifdef HAS_DIVIDE */
 #endif /* #ifdef HAS_LONGLONG */
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BUILTIN.test b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BUILTIN.test
new file mode 100644
index 0000000000..1283e018eb
--- /dev/null
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BUILTIN.test
@@ -0,0 +1,742 @@
+#include "pcode_test.h"
+
+
+TEST pcode_swap_u2_Main()
+{
+	extern u2 pcode_bswap_u2(u2);
+	ASSERTU2(pcode_bswap_u2(U2_MIN), U2_MIN);
+	ASSERTU2(pcode_bswap_u2(U2_MAX), U2_MAX);
+	ASSERTU2(pcode_bswap_u2(0x1234), 0x3412);
+	ASSERTU2(pcode_bswap_u2(0x8000), 0x0080);
+	ASSERTU2(pcode_bswap_u2(0x0080), 0x8000);
+}
+
+TEST pcode_swap_i2_Main()
+{
+	extern i2 pcode_bswap_i2(i2);
+	ASSERTI2(pcode_bswap_i2(0), 0);
+	ASSERTI2(pcode_bswap_i2(-1), -1);
+	ASSERTI2(pcode_bswap_i2(I2_MIN), 128);
+	ASSERTI2(pcode_bswap_i2(I2_MAX), -129);
+	ASSERTI2(pcode_bswap_i2(0x1234), 0x3412);
+	ASSERTI2(pcode_bswap_i2(0x0080), I2_MIN);
+}
+
+
+TEST pcode_swap_u4_Main()
+{
+	extern u4 pcode_bswap_u4(u4);
+	ASSERTU4(pcode_bswap_u4(U4_MIN), U4_MIN);
+	ASSERTU4(pcode_bswap_u4(U4_MAX), U4_MAX);
+	ASSERTU4(pcode_bswap_u4(0x12345678), 0x78563412);
+	ASSERTU4(pcode_bswap_u4(0x80000000), 0x00000080);
+	ASSERTU4(pcode_bswap_u4(0x00000080), 0x80000000);
+}
+
+TEST pcode_swap_i4_Main()
+{
+	extern i4 pcode_bswap_i4(i4);
+	ASSERTI4(pcode_bswap_i4(0), 0);
+	ASSERTI4(pcode_bswap_i4(-1), -1);
+	ASSERTI4(pcode_bswap_i4(I4_MIN), 128);
+	ASSERTI4(pcode_bswap_i4(I4_MAX), -129);
+	ASSERTI4(pcode_bswap_i4(0x12345678), 0x78563412);
+	ASSERTI4(pcode_bswap_i4(0x00000080), I4_MIN);
+}
+
+
+#ifdef HAS_LONGLONG
+TEST pcode_swap_u8_Main()
+{
+	extern u8 pcode_bswap_u8(u8);
+	ASSERTU8(pcode_bswap_u8(U8_MIN), U8_MIN);
+	ASSERTU8(pcode_bswap_u8(U8_MAX), U8_MAX);
+	ASSERTU8(pcode_bswap_u8(0x1234567890abcdefULL), 0xefcdab9078563412ULL);
+	ASSERTU8(pcode_bswap_u8(0x8000000000000000ULL), 0x0000000000000080ULL);
+	ASSERTU8(pcode_bswap_u8(0x0000000000000080ULL), 0x8000000000000000ULL);
+}
+
+TEST pcode_swap_i8_Main()
+{
+	extern i8 pcode_bswap_i8(i8);
+	ASSERTI8(pcode_bswap_i8(0), 0);
+	ASSERTI8(pcode_bswap_i8(-1), -1);
+	ASSERTI8(pcode_bswap_i8(I8_MIN), 128);
+	ASSERTI8(pcode_bswap_i8(I8_MAX), -129);
+	ASSERTI8(pcode_bswap_i8(0x1234567890abcdefLL), 0xefcdab9078563412LL);
+	ASSERTI8(pcode_bswap_i8(0x0000000000000080LL), I8_MIN);
+}
+#endif
+
+
+TEST pcode_atomic_load_store_u1_Main()
+{
+	extern u1 pcode_atomic_load_store_u1(u1);
+	ASSERTU1(pcode_atomic_load_store_u1(U1_MIN), U1_MIN);
+	ASSERTU1(pcode_atomic_load_store_u1(U1_MAX), U1_MAX);
+	ASSERTU1(pcode_atomic_load_store_u1(0x55), 0x55);
+}
+
+TEST pcode_atomic_load_store_i1_Main()
+{
+	extern i1 pcode_atomic_load_store_i1(i1);
+	ASSERTI1(pcode_atomic_load_store_i1(0), 0);
+	ASSERTI1(pcode_atomic_load_store_i1(-1), -1);
+	ASSERTI1(pcode_atomic_load_store_i1(I1_MIN), I1_MIN);
+	ASSERTI1(pcode_atomic_load_store_i1(I1_MAX), I1_MAX);
+	ASSERTI1(pcode_atomic_load_store_i1(0x55), 0x55);
+}
+
+
+TEST pcode_atomic_load_store_u2_Main()
+{
+	extern u2 pcode_atomic_load_store_u2(u2);
+	ASSERTU2(pcode_atomic_load_store_u2(U2_MIN), U2_MIN);
+	ASSERTU2(pcode_atomic_load_store_u2(U2_MAX), U2_MAX);
+	ASSERTU2(pcode_atomic_load_store_u2(0x5555), 0x5555);
+}
+
+TEST pcode_atomic_load_store_i2_Main()
+{
+	extern i2 pcode_atomic_load_store_i2(i2);
+	ASSERTI2(pcode_atomic_load_store_i2(0), 0);
+	ASSERTI2(pcode_atomic_load_store_i2(-1), -1);
+	ASSERTI2(pcode_atomic_load_store_i2(I2_MIN), I2_MIN);
+	ASSERTI2(pcode_atomic_load_store_i2(I2_MAX), I2_MAX);
+	ASSERTI2(pcode_atomic_load_store_i2(0x5555), 0x5555);
+}
+
+
+TEST pcode_atomic_load_store_u4_Main()
+{
+	extern u4 pcode_atomic_load_store_u4(u4);
+	ASSERTU4(pcode_atomic_load_store_u4(U4_MIN), U4_MIN);
+	ASSERTU4(pcode_atomic_load_store_u4(U4_MAX), U4_MAX);
+	ASSERTU4(pcode_atomic_load_store_u4(0x55555555), 0x55555555);
+}
+
+TEST pcode_atomic_load_store_i4_Main()
+{
+	extern i4 pcode_atomic_load_store_i4(i4);
+	ASSERTI4(pcode_atomic_load_store_i4(0), 0);
+	ASSERTI4(pcode_atomic_load_store_i4(-1), -1);
+	ASSERTI4(pcode_atomic_load_store_i4(I4_MIN), I4_MIN);
+	ASSERTI4(pcode_atomic_load_store_i4(I4_MAX), I4_MAX);
+	ASSERTI4(pcode_atomic_load_store_i4(0x55555555), 0x55555555);
+}
+
+
+#ifdef HAS_LONGLONG
+TEST pcode_atomic_load_store_u8_Main()
+{
+	extern u8 pcode_atomic_load_store_u8(u8);
+	ASSERTU8(pcode_atomic_load_store_u8(U8_MIN), U8_MIN);
+	ASSERTU8(pcode_atomic_load_store_u8(U8_MAX), U8_MAX);
+	ASSERTU8(pcode_atomic_load_store_u8(0x5555555555555555ULL), 0x5555555555555555ULL);
+}
+
+TEST pcode_atomic_load_store_i8_Main()
+{
+	extern i8 pcode_atomic_load_store_i8(i8);
+	ASSERTI8(pcode_atomic_load_store_i8(0), 0);
+	ASSERTI8(pcode_atomic_load_store_i8(-1), -1);
+	ASSERTI8(pcode_atomic_load_store_i8(I8_MIN), I8_MIN);
+	ASSERTI8(pcode_atomic_load_store_i8(I8_MAX), I8_MAX);
+	ASSERTI8(pcode_atomic_load_store_i8(0x5555555555555555LL), 0x5555555555555555LL);
+}
+#endif
+
+
+TEST pcode_atomic_exchange_u4_Main()
+{
+	extern u4 pcode_atomic_exchange_u4(u4, u4);
+	ASSERTU4(pcode_atomic_exchange_u4(1, U4_MIN), U4_MIN);
+	ASSERTU4(pcode_atomic_exchange_u4(1, U4_MAX), U4_MAX);
+	ASSERTU4(pcode_atomic_exchange_u4(1, 0x55555555), 0x55555555);
+}
+
+TEST pcode_atomic_exchange_i4_Main()
+{
+	extern i4 pcode_atomic_exchange_i4(i4, i4);
+	ASSERTI4(pcode_atomic_exchange_i4(1, 0), 0);
+	ASSERTI4(pcode_atomic_exchange_i4(1, -1), -1);
+	ASSERTI4(pcode_atomic_exchange_i4(1, I4_MIN), I4_MIN);
+	ASSERTI4(pcode_atomic_exchange_i4(1, I4_MAX), I4_MAX);
+	ASSERTI4(pcode_atomic_exchange_i4(1, 0x55555555), 0x55555555);
+}
+
+
+#ifdef HAS_LONGLONG
+TEST pcode_atomic_exchange_u8_Main()
+{
+	extern u8 pcode_atomic_exchange_u8(u8, u8);
+	ASSERTU8(pcode_atomic_exchange_u8(1, U8_MIN), U8_MIN);
+	ASSERTU8(pcode_atomic_exchange_u8(1, U8_MAX), U8_MAX);
+	ASSERTU8(pcode_atomic_exchange_u8(1, 0x5555555555555555ULL), 0x5555555555555555ULL);
+}
+
+TEST pcode_atomic_exchange_i8_Main()
+{
+	extern i8 pcode_atomic_exchange_i8(i8, i8);
+	ASSERTI8(pcode_atomic_exchange_i8(1, 0), 0);
+	ASSERTI8(pcode_atomic_exchange_i8(1, -1), -1);
+	ASSERTI8(pcode_atomic_exchange_i8(1, I8_MIN), I8_MIN);
+	ASSERTI8(pcode_atomic_exchange_i8(1, I8_MAX), I8_MAX);
+	ASSERTI8(pcode_atomic_exchange_i8(1, 0x5555555555555555LL), 0x5555555555555555LL);
+}
+#endif
+
+
+TEST pcode_atomic_compare_exchange_u4_Main()
+{
+	extern u4 pcode_atomic_compare_exchange_u4(u4, u4, u4);
+	ASSERTU4(pcode_atomic_compare_exchange_u4(1, 1, U4_MIN), U4_MIN);
+	ASSERTU4(pcode_atomic_compare_exchange_u4(1, 1, U4_MAX), U4_MAX);
+	ASSERTU4(pcode_atomic_compare_exchange_u4(U4_MAX, 1, 2), U4_MIN);
+	ASSERTU4(pcode_atomic_compare_exchange_u4(1, U4_MAX, 2), 1);
+}
+
+TEST pcode_atomic_compare_exchange_i4_Main()
+{
+	extern i4 pcode_atomic_compare_exchange_i4(i4, i4, i4);
+	ASSERTI4(pcode_atomic_compare_exchange_i4(1, 1, I4_MIN), I4_MIN);
+	ASSERTI4(pcode_atomic_compare_exchange_i4(1, 1, I4_MAX), I4_MAX);
+	ASSERTI4(pcode_atomic_compare_exchange_i4(I4_MAX, 1, 2), I4_MAX);
+	ASSERTI4(pcode_atomic_compare_exchange_i4(1, I4_MAX, 2), 1);
+}
+
+
+#ifdef HAS_LONGLONG
+TEST pcode_atomic_compare_exchange_u8_Main()
+{
+	extern u8 pcode_atomic_compare_exchange_u8(u8, u8, u8);
+	ASSERTU8(pcode_atomic_compare_exchange_u8(1, 1, U8_MIN), U8_MIN);
+	ASSERTU8(pcode_atomic_compare_exchange_u8(1, 1, U8_MAX), U8_MAX);
+	ASSERTU8(pcode_atomic_compare_exchange_u8(U8_MAX, 1, 2), U8_MIN);
+	ASSERTU8(pcode_atomic_compare_exchange_u8(1, U8_MAX, 2), 1);
+}
+
+TEST pcode_atomic_compare_exchange_i8_Main()
+{
+	extern i8 pcode_atomic_compare_exchange_i8(i8, i8, i8);
+	ASSERTI8(pcode_atomic_compare_exchange_i8(1, 1, I8_MIN), I8_MIN);
+	ASSERTI8(pcode_atomic_compare_exchange_i8(1, 1, I8_MAX), I8_MAX);
+	ASSERTI8(pcode_atomic_compare_exchange_i8(I8_MAX, 1, 2), I8_MAX);
+	ASSERTI8(pcode_atomic_compare_exchange_i8(1, I8_MAX, 2), 1);
+}
+#endif
+
+
+TEST pcode_atomic_add_fetch_u4_Main()
+{
+	extern u4 pcode_atomic_add_fetch_u4(u4, u4);
+	extern u4 pcode_atomic_fetch_add_u4(u4, u4);
+	ASSERTU4(pcode_atomic_add_fetch_u4(0x01010101, 0x01010101), 33686018);
+	ASSERTU4(pcode_atomic_add_fetch_u4(2, 1), 3);
+	ASSERTU4(pcode_atomic_add_fetch_u4(~2, ~1), 4294967291);
+	ASSERTU4(pcode_atomic_add_fetch_u4(U4_MAX, U4_MAX), -2);
+	ASSERTU4(pcode_atomic_add_fetch_u4(U4_MAX, 0), -1);
+	ASSERTU4(pcode_atomic_add_fetch_u4(0, 0), 0);
+	ASSERTU4(pcode_atomic_fetch_add_u4(0x01010101, 0x01010101), 33686018);
+	ASSERTU4(pcode_atomic_fetch_add_u4(2, 1), 3);
+	ASSERTU4(pcode_atomic_fetch_add_u4(~2, ~1), 4294967291);
+	ASSERTU4(pcode_atomic_fetch_add_u4(U4_MAX, U4_MAX), -2);
+	ASSERTU4(pcode_atomic_fetch_add_u4(U4_MAX, 0), -1);
+	ASSERTU4(pcode_atomic_fetch_add_u4(0, 0), 0);
+}
+
+TEST pcode_atomic_sub_fetch_u4_Main()
+{
+	extern u4 pcode_atomic_sub_fetch_u4(u4, u4);
+	extern u4 pcode_atomic_fetch_sub_u4(u4, u4);
+	ASSERTU4(pcode_atomic_sub_fetch_u4(0x01010101, 0x01010101), 0);
+	ASSERTU4(pcode_atomic_sub_fetch_u4(2, 1), 1);
+	ASSERTU4(pcode_atomic_sub_fetch_u4(~2, ~1), 4294967295);
+	ASSERTU4(pcode_atomic_sub_fetch_u4(U4_MAX, U4_MAX), 0);
+	ASSERTU4(pcode_atomic_sub_fetch_u4(U4_MAX, 0), U4_MAX);
+	ASSERTU4(pcode_atomic_sub_fetch_u4(0, U4_MAX), 1);
+	ASSERTU4(pcode_atomic_fetch_sub_u4(0x01010101, 0x01010101), 0);
+	ASSERTU4(pcode_atomic_fetch_sub_u4(2, 1), 1);
+	ASSERTU4(pcode_atomic_fetch_sub_u4(~2, ~1), 4294967295);
+	ASSERTU4(pcode_atomic_fetch_sub_u4(U4_MAX, U4_MAX), 0);
+	ASSERTU4(pcode_atomic_fetch_sub_u4(U4_MAX, 0), U4_MAX);
+	ASSERTU4(pcode_atomic_fetch_sub_u4(0, U4_MAX), 1);
+}
+
+TEST pcode_atomic_and_fetch_u4_Main()
+{
+	extern u4 pcode_atomic_and_fetch_u4(u4, u4);
+	extern u4 pcode_atomic_fetch_and_u4(u4, u4);
+	ASSERTU4(pcode_atomic_and_fetch_u4(0x01010101, 0x01010101), 0x01010101);
+	ASSERTU4(pcode_atomic_and_fetch_u4(2, 1), 0);
+	ASSERTU4(pcode_atomic_and_fetch_u4(U4_MAX, U4_MAX), -1);
+	ASSERTU4(pcode_atomic_and_fetch_u4(U4_MAX, U4_MIN), 0);
+	ASSERTU4(pcode_atomic_and_fetch_u4(U4_MAX, 0), 0);
+	ASSERTU4(pcode_atomic_fetch_and_u4(0x01010101, 0x01010101), 0x01010101);
+	ASSERTU4(pcode_atomic_fetch_and_u4(2, 1), 0);
+	ASSERTU4(pcode_atomic_fetch_and_u4(U4_MAX, U4_MAX), -1);
+	ASSERTU4(pcode_atomic_fetch_and_u4(U4_MAX, U4_MIN), 0);
+	ASSERTU4(pcode_atomic_fetch_and_u4(U4_MAX, 0), 0);
+}
+
+TEST pcode_atomic_or_fetch_u4_Main()
+{
+	extern u4 pcode_atomic_or_fetch_u4(u4, u4);
+	extern u4 pcode_atomic_fetch_or_u4(u4, u4);
+	ASSERTU4(pcode_atomic_or_fetch_u4(0x01010101, 0x01010101), 0x01010101);
+	ASSERTU4(pcode_atomic_or_fetch_u4(2, 1), 3);
+	ASSERTU4(pcode_atomic_or_fetch_u4(U4_MAX, U4_MAX), U4_MAX);
+	ASSERTU4(pcode_atomic_or_fetch_u4(U4_MAX, 0), U4_MAX);
+	ASSERTU4(pcode_atomic_fetch_or_u4(0x01010101, 0x01010101), 0x01010101);
+	ASSERTU4(pcode_atomic_fetch_or_u4(2, 1), 3);
+	ASSERTU4(pcode_atomic_fetch_or_u4(U4_MAX, U4_MAX), U4_MAX);
+	ASSERTU4(pcode_atomic_fetch_or_u4(U4_MAX, 0), U4_MAX);
+}
+
+TEST pcode_atomic_xor_fetch_u4_Main()
+{
+	extern u4 pcode_atomic_xor_fetch_u4(u4, u4);
+	extern u4 pcode_atomic_fetch_xor_u4(u4, u4);
+	ASSERTU4(pcode_atomic_xor_fetch_u4(0x01010101, 0x01010101), 0);
+	ASSERTU4(pcode_atomic_xor_fetch_u4(2, 1), 3);
+	ASSERTU4(pcode_atomic_xor_fetch_u4(U4_MAX, U4_MAX), 0);
+	ASSERTU4(pcode_atomic_xor_fetch_u4(U4_MAX, U4_MIN), -1);
+	ASSERTU4(pcode_atomic_xor_fetch_u4(U4_MAX, 0), -1);
+	ASSERTU4(pcode_atomic_fetch_xor_u4(0x01010101, 0x01010101), 0);
+	ASSERTU4(pcode_atomic_fetch_xor_u4(2, 1), 3);
+	ASSERTU4(pcode_atomic_fetch_xor_u4(U4_MAX, U4_MAX), 0);
+	ASSERTU4(pcode_atomic_fetch_xor_u4(U4_MAX, U4_MIN), -1);
+	ASSERTU4(pcode_atomic_fetch_xor_u4(U4_MAX, 0), -1);
+}
+
+TEST pcode_atomic_nand_fetch_u4_Main()
+{
+	extern u4 pcode_atomic_nand_fetch_u4(u4, u4);
+	extern u4 pcode_atomic_fetch_nand_u4(u4, u4);
+	ASSERTU4(pcode_atomic_nand_fetch_u4(U4_MAX, 0), U4_MAX);
+	ASSERTU4(pcode_atomic_nand_fetch_u4(U4_MAX, U4_MAX), 0);
+	ASSERTU4(pcode_atomic_fetch_nand_u4(U4_MAX, 0), U4_MAX);
+	ASSERTU4(pcode_atomic_fetch_nand_u4(U4_MAX, U4_MAX), 0);
+}
+
+TEST pcode_atomic_add_fetch_i4_Main()
+{
+	extern i4 pcode_atomic_add_fetch_i4(i4, i4);
+	extern i4 pcode_atomic_fetch_add_i4(i4, i4);
+	ASSERTI4(pcode_atomic_add_fetch_i4(2, 1), 3);
+	ASSERTI4(pcode_atomic_add_fetch_i4(0x01010101, 0x01010101), 33686018);
+	ASSERTI4(pcode_atomic_add_fetch_i4(0x01010101, -0x01010101), 0);
+	ASSERTI4(pcode_atomic_add_fetch_i4(I4_MAX, I4_MAX), -2);
+	ASSERTI4(pcode_atomic_add_fetch_i4(I4_MAX, I4_MIN), -1);
+	ASSERTI4(pcode_atomic_add_fetch_i4(I4_MAX, 0), 2147483647);
+	ASSERTI4(pcode_atomic_add_fetch_i4(I4_MIN, I4_MIN), 0);
+	ASSERTI4(pcode_atomic_fetch_add_i4(2, 1), 3);
+	ASSERTI4(pcode_atomic_fetch_add_i4(0x01010101, 0x01010101), 33686018);
+	ASSERTI4(pcode_atomic_fetch_add_i4(0x01010101, -0x01010101), 0);
+	ASSERTI4(pcode_atomic_fetch_add_i4(I4_MAX, I4_MAX), -2);
+	ASSERTI4(pcode_atomic_fetch_add_i4(I4_MAX, I4_MIN), -1);
+	ASSERTI4(pcode_atomic_fetch_add_i4(I4_MAX, 0), 2147483647);
+	ASSERTI4(pcode_atomic_fetch_add_i4(I4_MIN, I4_MIN), 0);
+}
+
+TEST pcode_atomic_sub_fetch_i4_Main()
+{
+	extern i4 pcode_atomic_sub_fetch_i4(i4, i4);
+	extern i4 pcode_atomic_fetch_sub_i4(i4, i4);
+	ASSERTI4(pcode_atomic_sub_fetch_i4(2, 1), 1);
+	ASSERTI4(pcode_atomic_sub_fetch_i4(0x01010101, 0x01010101), 0);
+	ASSERTI4(pcode_atomic_sub_fetch_i4(0x01010101, 0x01000100), 0x00010001);
+	ASSERTI4(pcode_atomic_sub_fetch_i4(0x01000100, 0x01010101), -0x00010001);
+	ASSERTI4(pcode_atomic_sub_fetch_i4(I4_MAX, I4_MAX), 0);
+	ASSERTI4(pcode_atomic_sub_fetch_i4(I4_MAX, I4_MIN), -1);
+	ASSERTI4(pcode_atomic_sub_fetch_i4(I4_MAX, 0), 2147483647);
+	ASSERTI4(pcode_atomic_sub_fetch_i4(0, I4_MAX), -2147483647);
+	ASSERTI4(pcode_atomic_fetch_sub_i4(2, 1), 1);
+	ASSERTI4(pcode_atomic_fetch_sub_i4(0x01010101, 0x01010101), 0);
+	ASSERTI4(pcode_atomic_fetch_sub_i4(0x01010101, 0x01000100), 0x00010001);
+	ASSERTI4(pcode_atomic_fetch_sub_i4(0x01000100, 0x01010101), -0x00010001);
+	ASSERTI4(pcode_atomic_fetch_sub_i4(I4_MAX, I4_MAX), 0);
+	ASSERTI4(pcode_atomic_fetch_sub_i4(I4_MAX, I4_MIN), -1);
+	ASSERTI4(pcode_atomic_fetch_sub_i4(I4_MAX, 0), 2147483647);
+	ASSERTI4(pcode_atomic_fetch_sub_i4(0, I4_MAX), -2147483647);
+}
+
+TEST pcode_atomic_and_fetch_i4_Main()
+{
+	extern i4 pcode_atomic_and_fetch_i4(i4, i4);
+	extern i4 pcode_atomic_fetch_and_i4(i4, i4);
+	ASSERTI4(pcode_atomic_and_fetch_i4(0x01010101, 0x01010101), 0x01010101);
+	ASSERTI4(pcode_atomic_and_fetch_i4(2, 1), 0);
+	ASSERTI4(/*val*/ pcode_atomic_and_fetch_i4(I4_MAX, I4_MAX), 2147483647)
+	ASSERTI4(/*val*/ pcode_atomic_and_fetch_i4(0, 0), 0)
+	ASSERTI4(/*val*/ pcode_atomic_and_fetch_i4(I4_MIN, I4_MIN), -2147483648)
+	ASSERTI4(pcode_atomic_fetch_and_i4(0x01010101, 0x01010101), 0x01010101);
+	ASSERTI4(pcode_atomic_fetch_and_i4(2, 1), 0);
+	ASSERTI4(/*val*/ pcode_atomic_fetch_and_i4(I4_MAX, I4_MAX), 2147483647)
+	ASSERTI4(/*val*/ pcode_atomic_fetch_and_i4(0, 0), 0)
+	ASSERTI4(/*val*/ pcode_atomic_fetch_and_i4(I4_MIN, I4_MIN), -2147483648)
+}
+
+TEST pcode_atomic_or_fetch_i4_Main()
+{
+	extern i4 pcode_atomic_or_fetch_i4(i4, i4);
+	extern i4 pcode_atomic_fetch_or_i4(i4, i4);
+	ASSERTI4(pcode_atomic_or_fetch_i4(0x01010101, 0x01010101), 0x01010101);
+	ASSERTI4(pcode_atomic_or_fetch_i4(0x01010101, 0x0), 0x01010101);
+	ASSERTI4(pcode_atomic_or_fetch_i4(2, 1), 3);
+	ASSERTI4(pcode_atomic_or_fetch_i4(I4_MAX, I4_MAX), 2147483647);
+	ASSERTI4(pcode_atomic_or_fetch_i4(0, 0), 0);
+	ASSERTI4(pcode_atomic_fetch_or_i4(0x01010101, 0x01010101), 0x01010101);
+	ASSERTI4(pcode_atomic_fetch_or_i4(0x01010101, 0x0), 0x01010101);
+	ASSERTI4(pcode_atomic_fetch_or_i4(2, 1), 3);
+	ASSERTI4(pcode_atomic_fetch_or_i4(I4_MAX, I4_MAX), 2147483647);
+	ASSERTI4(pcode_atomic_fetch_or_i4(0, 0), 0);
+}
+
+TEST pcode_atomic_xor_fetch_i4_Main()
+{
+	extern i4 pcode_atomic_xor_fetch_i4(i4, i4);
+	extern i4 pcode_atomic_fetch_xor_i4(i4, i4);
+	ASSERTI4(pcode_atomic_xor_fetch_i4(0x01010101, 0x01010101), 0);
+	ASSERTI4(pcode_atomic_xor_fetch_i4(0x01010101, 0x01000101), 0x10000);
+	ASSERTI4(pcode_atomic_xor_fetch_i4(2, 1), 3);
+	ASSERTI4(pcode_atomic_xor_fetch_i4(I4_MAX, I4_MAX), 0);
+	ASSERTI4(pcode_atomic_xor_fetch_i4(I4_MAX, 0), 2147483647);
+	ASSERTI4(pcode_atomic_xor_fetch_i4(0, 0), 0);
+	ASSERTI4(pcode_atomic_fetch_xor_i4(0x01010101, 0x01010101), 0);
+	ASSERTI4(pcode_atomic_fetch_xor_i4(0x01010101, 0x01000101), 0x10000);
+	ASSERTI4(pcode_atomic_fetch_xor_i4(2, 1), 3);
+	ASSERTI4(pcode_atomic_fetch_xor_i4(I4_MAX, I4_MAX), 0);
+	ASSERTI4(pcode_atomic_fetch_xor_i4(I4_MAX, 0), 2147483647);
+	ASSERTI4(pcode_atomic_fetch_xor_i4(0, 0), 0);
+}
+
+TEST pcode_atomic_nand_fetch_i4_Main()
+{
+	extern i4 pcode_atomic_nand_fetch_i4(i4, i4);
+	extern i4 pcode_atomic_fetch_nand_i4(i4, i4);
+	ASSERTI4(pcode_atomic_nand_fetch_i4(I4_MAX, 0), I4_MAX);
+	ASSERTI4(pcode_atomic_nand_fetch_i4(I4_MAX, I4_MAX), 0);
+	ASSERTI4(pcode_atomic_fetch_nand_i4(I4_MAX, 0), I4_MAX);
+	ASSERTI4(pcode_atomic_fetch_nand_i4(I4_MAX, I4_MAX), 0);
+}
+
+#ifdef HAS_LONGLONG
+TEST pcode_atomic_add_fetch_u8_Main()
+{
+	extern u8 pcode_atomic_add_fetch_u8(u8, u8);
+	extern u8 pcode_atomic_fetch_add_u8(u8, u8);
+	ASSERTU8(pcode_atomic_add_fetch_u8(2, 1), 3);
+	ASSERTU8(pcode_atomic_add_fetch_u8(U8_MAX, U8_MAX), 18446744073709551614ULL);
+	ASSERTU8(pcode_atomic_add_fetch_u8(U8_MAX, 0), U8_MAX);
+	ASSERTU8(pcode_atomic_fetch_add_u8(2, 1), 3);
+	ASSERTU8(pcode_atomic_fetch_add_u8(U8_MAX, U8_MAX), 18446744073709551614ULL);
+	ASSERTU8(pcode_atomic_fetch_add_u8(U8_MAX, 0), U8_MAX);
+}
+
+TEST pcode_atomic_sub_fetch_u8_Main()
+{
+	extern u8 pcode_atomic_sub_fetch_u8(u8, u8);
+	extern u8 pcode_atomic_fetch_sub_u8(u8, u8);
+	ASSERTU8(pcode_atomic_sub_fetch_u8(2, 1), 1);
+	ASSERTU8(pcode_atomic_sub_fetch_u8(U8_MAX, U8_MAX), 0);
+	ASSERTU8(pcode_atomic_sub_fetch_u8(U8_MAX, 0), U8_MAX);
+	ASSERTU8(pcode_atomic_sub_fetch_u8(0, U8_MAX), 1);
+	ASSERTU8(pcode_atomic_fetch_sub_u8(2, 1), 1);
+	ASSERTU8(pcode_atomic_fetch_sub_u8(U8_MAX, U8_MAX), 0);
+	ASSERTU8(pcode_atomic_fetch_sub_u8(U8_MAX, 0), U8_MAX);
+	ASSERTU8(pcode_atomic_fetch_sub_u8(0, U8_MAX), 1);
+}
+
+TEST pcode_atomic_and_fetch_u8_Main()
+{
+	extern u8 pcode_atomic_and_fetch_u8(u8, u8);
+	extern u8 pcode_atomic_fetch_and_u8(u8, u8);
+	ASSERTU8(pcode_atomic_and_fetch_u8(2, 1), 0);
+	ASSERTU8(pcode_atomic_and_fetch_u8(U8_MAX, U8_MAX), U8_MAX);
+	ASSERTU8(pcode_atomic_and_fetch_u8(U8_MAX, 0), 0);
+	ASSERTU8(pcode_atomic_and_fetch_u8(U8_MAX, 1), 1);
+	ASSERTU8(pcode_atomic_fetch_and_u8(2, 1), 0);
+	ASSERTU8(pcode_atomic_fetch_and_u8(U8_MAX, U8_MAX), U8_MAX);
+	ASSERTU8(pcode_atomic_fetch_and_u8(U8_MAX, 0), 0);
+	ASSERTU8(pcode_atomic_fetch_and_u8(U8_MAX, 1), 1);
+}
+
+TEST pcode_atomic_or_fetch_u8_Main()
+{
+	extern u8 pcode_atomic_or_fetch_u8(u8, u8);
+	extern u8 pcode_atomic_fetch_or_u8(u8, u8);
+	ASSERTU8(pcode_atomic_or_fetch_u8(2, 1), 3);
+	ASSERTU8(pcode_atomic_or_fetch_u8(U8_MAX, U8_MAX), U8_MAX);
+	ASSERTU8(pcode_atomic_or_fetch_u8(U8_MAX, U8_MIN), 18446744073709551615ULL);
+	ASSERTU8(pcode_atomic_or_fetch_u8(U8_MAX, 0), 18446744073709551615ULL);
+	ASSERTU8(pcode_atomic_fetch_or_u8(2, 1), 3);
+	ASSERTU8(pcode_atomic_fetch_or_u8(U8_MAX, U8_MAX), U8_MAX);
+	ASSERTU8(pcode_atomic_fetch_or_u8(U8_MAX, U8_MIN), 18446744073709551615ULL);
+	ASSERTU8(pcode_atomic_fetch_or_u8(U8_MAX, 0), 18446744073709551615ULL);
+}
+
+TEST pcode_atomic_xor_fetch_u8_Main()
+{
+	extern u8 pcode_atomic_xor_fetch_u8(u8, u8);
+	extern u8 pcode_atomic_fetch_xor_u8(u8, u8);
+	ASSERTU8(pcode_atomic_xor_fetch_u8(2, 1), 3);
+	ASSERTU8(pcode_atomic_xor_fetch_u8(U8_MAX, U8_MAX), 0);
+	ASSERTU8(pcode_atomic_xor_fetch_u8(U8_MAX, 0), U8_MAX);
+	ASSERTU8(pcode_atomic_xor_fetch_u8(U8_MAX, 2), 18446744073709551613ULL);
+	ASSERTU8(pcode_atomic_fetch_xor_u8(2, 1), 3);
+	ASSERTU8(pcode_atomic_fetch_xor_u8(U8_MAX, U8_MAX), 0);
+	ASSERTU8(pcode_atomic_fetch_xor_u8(U8_MAX, 0), U8_MAX);
+	ASSERTU8(pcode_atomic_fetch_xor_u8(U8_MAX, 2), 18446744073709551613ULL);
+}
+
+TEST pcode_atomic_add_fetch_i8_Main()
+{
+	extern i8 pcode_atomic_add_fetch_i8(i8, i8);
+	extern i8 pcode_atomic_fetch_add_i8(i8, i8);
+	ASSERTI8(pcode_atomic_add_fetch_i8(0x0101010101010101LL, 0x0101010101010101LL), 0x202020202020202LL);
+	ASSERTI8(pcode_atomic_add_fetch_i8(2, 1), 3);
+	ASSERTI8(pcode_atomic_add_fetch_i8(I8_MAX, I8_MAX), -2);
+	ASSERTI8(pcode_atomic_add_fetch_i8(I8_MAX, I8_MIN), -1);
+	ASSERTI8(pcode_atomic_add_fetch_i8(I8_MAX, 0), I8_MAX);
+	ASSERTI8(pcode_atomic_fetch_add_i8(0x0101010101010101LL, 0x0101010101010101LL), 0x202020202020202LL);
+	ASSERTI8(pcode_atomic_fetch_add_i8(2, 1), 3);
+	ASSERTI8(pcode_atomic_fetch_add_i8(I8_MAX, I8_MAX), -2);
+	ASSERTI8(pcode_atomic_fetch_add_i8(I8_MAX, I8_MIN), -1);
+	ASSERTI8(pcode_atomic_fetch_add_i8(I8_MAX, 0), I8_MAX);
+}
+
+TEST pcode_atomic_sub_fetch_i8_Main()
+{
+	extern i8 pcode_atomic_sub_fetch_i8(i8, i8);
+	extern i8 pcode_atomic_fetch_sub_i8(i8, i8);
+	ASSERTI8(pcode_atomic_sub_fetch_i8(0x0101010101010101LL, 0x0101010101010100LL), 0x1);
+	ASSERTI8(pcode_atomic_sub_fetch_i8(0x0001010101010100LL, 0x0101010101010101LL), -72057594037927937LL);
+	ASSERTI8(pcode_atomic_sub_fetch_i8(2, 1), 1);
+	ASSERTI8(pcode_atomic_sub_fetch_i8(0x0101010101010101LL, 0x0101010101010101LL), 0);
+	ASSERTI8(pcode_atomic_sub_fetch_i8(I8_MAX, I8_MAX), 0);
+	ASSERTI8(pcode_atomic_sub_fetch_i8(I8_MAX, I8_MIN), -1);
+	ASSERTI8(pcode_atomic_sub_fetch_i8(I8_MAX, 0), I8_MAX);
+	ASSERTI8(pcode_atomic_sub_fetch_i8(0, I8_MAX), -I8_MAX);
+	ASSERTI8(pcode_atomic_fetch_sub_i8(0x0101010101010101LL, 0x0101010101010100LL), 0x1);
+	ASSERTI8(pcode_atomic_fetch_sub_i8(0x0001010101010100LL, 0x0101010101010101LL), -72057594037927937LL);
+	ASSERTI8(pcode_atomic_fetch_sub_i8(2, 1), 1);
+	ASSERTI8(pcode_atomic_fetch_sub_i8(0x0101010101010101LL, 0x0101010101010101LL), 0);
+	ASSERTI8(pcode_atomic_fetch_sub_i8(I8_MAX, I8_MAX), 0);
+	ASSERTI8(pcode_atomic_fetch_sub_i8(I8_MAX, I8_MIN), -1);
+	ASSERTI8(pcode_atomic_fetch_sub_i8(I8_MAX, 0), I8_MAX);
+	ASSERTI8(pcode_atomic_fetch_sub_i8(0, I8_MAX), -I8_MAX);
+}
+
+TEST pcode_atomic_and_fetch_i8_Main()
+{
+	extern i8 pcode_atomic_and_fetch_i8(i8, i8);
+	extern i8 pcode_atomic_fetch_and_i8(i8, i8);
+	ASSERTI8(pcode_atomic_and_fetch_i8(2, 1), 0);
+	ASSERTI8(pcode_atomic_and_fetch_i8(0x0101010101010101LL, 0x0101010101010101LL), 0x0101010101010101);
+	ASSERTI8(pcode_atomic_and_fetch_i8(I8_MAX, I8_MAX), I8_MAX);
+	ASSERTI8(pcode_atomic_and_fetch_i8(I8_MAX, I8_MIN), 0);
+	ASSERTI8(pcode_atomic_and_fetch_i8(I8_MAX, 0), 0);
+	ASSERTI8(pcode_atomic_fetch_and_i8(2, 1), 0);
+	ASSERTI8(pcode_atomic_fetch_and_i8(0x0101010101010101LL, 0x0101010101010101LL), 0x0101010101010101);
+	ASSERTI8(pcode_atomic_fetch_and_i8(I8_MAX, I8_MAX), I8_MAX);
+	ASSERTI8(pcode_atomic_fetch_and_i8(I8_MAX, I8_MIN), 0);
+	ASSERTI8(pcode_atomic_fetch_and_i8(I8_MAX, 0), 0);
+}
+
+TEST pcode_atomic_or_fetch_i8_Main()
+{
+	extern i8 pcode_atomic_or_fetch_i8(i8, i8);
+	extern i8 pcode_atomic_fetch_or_i8(i8, i8);
+	ASSERTI8(pcode_atomic_or_fetch_i8(2, 1), 3);
+	ASSERTI8(pcode_atomic_or_fetch_i8(0x0101010101010101LL, 0x0101010101010101LL), 0x0101010101010101LL);
+	ASSERTI8(pcode_atomic_or_fetch_i8(0x0101010101010101LL, 0x0), 0x0101010101010101LL);
+	ASSERTI8(pcode_atomic_or_fetch_i8(U8_MAX, U8_MAX), -1);
+	ASSERTI8(pcode_atomic_or_fetch_i8(U8_MAX, U8_MIN), -1);
+	ASSERTI8(pcode_atomic_or_fetch_i8(U8_MAX, 0), -1);
+	ASSERTI8(pcode_atomic_or_fetch_i8(U8_MAX, 4), -1);
+	ASSERTI8(pcode_atomic_fetch_or_i8(2, 1), 3);
+	ASSERTI8(pcode_atomic_fetch_or_i8(0x0101010101010101LL, 0x0101010101010101LL), 0x0101010101010101LL);
+	ASSERTI8(pcode_atomic_fetch_or_i8(0x0101010101010101LL, 0x0), 0x0101010101010101LL);
+	ASSERTI8(pcode_atomic_fetch_or_i8(U8_MAX, U8_MAX), -1);
+	ASSERTI8(pcode_atomic_fetch_or_i8(U8_MAX, U8_MIN), -1);
+	ASSERTI8(pcode_atomic_fetch_or_i8(U8_MAX, 0), -1);
+	ASSERTI8(pcode_atomic_fetch_or_i8(U8_MAX, 4), -1);
+}
+
+TEST pcode_atomic_xor_fetch_i8_Main()
+{
+	extern i8 pcode_atomic_xor_fetch_i8(i8, i8);
+	extern i8 pcode_atomic_fetch_xor_i8(i8, i8);
+	ASSERTI8(pcode_atomic_xor_fetch_i8(2, 1), 3);
+	ASSERTI8(pcode_atomic_xor_fetch_i8(0x0101010101010101LL, 0x0101010101010101LL), 0);
+	ASSERTI8(pcode_atomic_xor_fetch_i8(0x0101010101010101LL, 0x0101010101010101LL), 0x0);
+	ASSERTI8(pcode_atomic_xor_fetch_i8(U8_MAX, U8_MAX), 0x0);
+	ASSERTI8(pcode_atomic_xor_fetch_i8(U8_MAX, U8_MIN), -1);
+	ASSERTI8(pcode_atomic_xor_fetch_i8(U8_MAX, 0), -1);
+	ASSERTI8(pcode_atomic_xor_fetch_i8(U8_MAX, 5), -6);
+	ASSERTI8(pcode_atomic_fetch_xor_i8(2, 1), 3);
+	ASSERTI8(pcode_atomic_fetch_xor_i8(0x0101010101010101LL, 0x0101010101010101LL), 0);
+	ASSERTI8(pcode_atomic_fetch_xor_i8(0x0101010101010101LL, 0x0101010101010101LL), 0x0);
+	ASSERTI8(pcode_atomic_fetch_xor_i8(U8_MAX, U8_MAX), 0x0);
+	ASSERTI8(pcode_atomic_fetch_xor_i8(U8_MAX, U8_MIN), -1);
+	ASSERTI8(pcode_atomic_fetch_xor_i8(U8_MAX, 0), -1);
+	ASSERTI8(pcode_atomic_fetch_xor_i8(U8_MAX, 5), -6);
+}
+
+TEST pcode_atomic_nand_fetch_u8_Main()
+{
+	extern u8 pcode_atomic_nand_fetch_u8(u8, u8);
+	extern u8 pcode_atomic_fetch_nand_u8(u8, u8);
+	ASSERTU8(pcode_atomic_nand_fetch_u8(U8_MAX, 0), U8_MAX);
+	ASSERTU8(pcode_atomic_nand_fetch_u8(U8_MAX, U8_MAX), 0);
+	ASSERTU8(pcode_atomic_fetch_nand_u8(U8_MAX, 0), U8_MAX);
+	ASSERTU8(pcode_atomic_fetch_nand_u8(U8_MAX, U8_MAX), 0);
+}
+
+TEST pcode_atomic_nand_fetch_i8_Main()
+{
+	extern i8 pcode_atomic_nand_fetch_i8(i8, i8);
+	extern i8 pcode_atomic_fetch_nand_i8(i8, i8);
+	ASSERTI8(pcode_atomic_nand_fetch_i8(I8_MAX, 0), I8_MAX);
+	ASSERTI8(pcode_atomic_nand_fetch_i8(I8_MAX, I8_MAX), 0);
+	ASSERTI8(pcode_atomic_fetch_nand_i8(I8_MAX, 0), I8_MAX);
+	ASSERTI8(pcode_atomic_fetch_nand_i8(I8_MAX, I8_MAX), 0);
+}
+
+TEST pcode_overflow_u8_Main()
+{
+	extern u8 pcode_add_overflow_u8(u8 x, u8 y);
+	extern u8 pcode_sub_overflow_u8(u8 x, u8 y);
+	extern u8 pcode_mul_overflow_u8(u8 x, u8 y);
+	ASSERTU8(pcode_add_overflow_u8(1, 1), 0);
+	ASSERTU8(pcode_sub_overflow_u8(1, 1), 0);
+	ASSERTU8(pcode_mul_overflow_u8(1, 1), 0);
+	ASSERTU8(pcode_add_overflow_u8(U8_MAX, 1), 1);
+	ASSERTU8(pcode_sub_overflow_u8(U8_MAX, 1), 0);
+	ASSERTU8(pcode_mul_overflow_u8(U8_MAX, 2), 1);
+	ASSERTU8(pcode_add_overflow_u8(1, U8_MAX), 1);
+	ASSERTU8(pcode_sub_overflow_u8(1, U8_MAX), 1);
+	ASSERTU8(pcode_mul_overflow_u8(2, U8_MAX), 1);
+}
+
+TEST pcode_overflow_i8_Main()
+{
+	extern i8 pcode_add_overflow_i8(i8 x, i8 y);
+	extern i8 pcode_sub_overflow_i8(i8 x, i8 y);
+	extern i8 pcode_mul_overflow_i8(i8 x, i8 y);
+	ASSERTI8(pcode_add_overflow_i8(1, 1), 0);
+	ASSERTI8(pcode_sub_overflow_i8(1, 1), 0);
+	ASSERTI8(pcode_mul_overflow_i8(1, 1), 0);
+	ASSERTI8(pcode_add_overflow_i8(I8_MAX, 1), 1);
+	ASSERTI8(pcode_sub_overflow_i8(I8_MAX, 1), 0);
+	ASSERTI8(pcode_mul_overflow_i8(I8_MAX, 2), 1);
+	ASSERTI8(pcode_add_overflow_i8(1, I8_MAX), 1);
+	ASSERTI8(pcode_sub_overflow_i8(1, I8_MAX), 0);
+	ASSERTI8(pcode_mul_overflow_i8(2, I8_MAX), 1);
+}
+
+#endif
+
+
+TEST pcode_overflow_u1_Main()
+{
+	extern u1 pcode_add_overflow_u1(u1 x, u1 y);
+	extern u1 pcode_sub_overflow_u1(u1 x, u1 y);
+	extern u1 pcode_mul_overflow_u1(u1 x, u1 y);
+	ASSERTU1(pcode_add_overflow_u1(1, 1), 0);
+	ASSERTU1(pcode_sub_overflow_u1(1, 1), 0);
+	ASSERTU1(pcode_mul_overflow_u1(1, 1), 0);
+	ASSERTU1(pcode_add_overflow_u1(U1_MAX, 1), 1);
+	ASSERTU1(pcode_sub_overflow_u1(U1_MAX, 1), 0);
+	ASSERTU1(pcode_mul_overflow_u1(U1_MAX, 2), 1);
+	ASSERTU1(pcode_add_overflow_u1(1, U1_MAX), 1);
+	ASSERTU1(pcode_sub_overflow_u1(1, U1_MAX), 1);
+	ASSERTU1(pcode_mul_overflow_u1(2, U1_MAX), 1);
+}
+
+TEST pcode_overflow_i1_Main()
+{
+	extern i1 pcode_add_overflow_i1(i1 x, i1 y);
+	extern i1 pcode_sub_overflow_i1(i1 x, i1 y);
+	extern i1 pcode_mul_overflow_i1(i1 x, i1 y);
+	ASSERTI1(pcode_add_overflow_i1(1, 1), 0);
+	ASSERTI1(pcode_sub_overflow_i1(1, 1), 0);
+	ASSERTI1(pcode_mul_overflow_i1(1, 1), 0);
+	ASSERTI1(pcode_add_overflow_i1(I1_MAX, 1), 1);
+	ASSERTI1(pcode_sub_overflow_i1(I1_MAX, 1), 0);
+	ASSERTI1(pcode_mul_overflow_i1(I1_MAX, 2), 1);
+	ASSERTI1(pcode_add_overflow_i1(1, I1_MAX), 1);
+	ASSERTI1(pcode_sub_overflow_i1(1, I1_MAX), 0);
+	ASSERTI1(pcode_mul_overflow_i1(2, I1_MAX), 1);
+}
+
+
+TEST pcode_overflow_u2_Main()
+{
+	extern u2 pcode_add_overflow_u2(u2 x, u2 y);
+	extern u2 pcode_sub_overflow_u2(u2 x, u2 y);
+	extern u2 pcode_mul_overflow_u2(u2 x, u2 y);
+	ASSERTU2(pcode_add_overflow_u2(1, 1), 0);
+	ASSERTU2(pcode_sub_overflow_u2(1, 1), 0);
+	ASSERTU2(pcode_mul_overflow_u2(1, 1), 0);
+	ASSERTU2(pcode_add_overflow_u2(U2_MAX, 1), 1);
+	ASSERTU2(pcode_sub_overflow_u2(U2_MAX, 1), 0);
+	ASSERTU2(pcode_mul_overflow_u2(U2_MAX, 2), 1);
+	ASSERTU2(pcode_add_overflow_u2(1, U2_MAX), 1);
+	ASSERTU2(pcode_sub_overflow_u2(1, U2_MAX), 1);
+	ASSERTU2(pcode_mul_overflow_u2(2, U2_MAX), 1);
+}
+
+TEST pcode_overflow_i2_Main()
+{
+	extern i2 pcode_add_overflow_i2(i2 x, i2 y);
+	extern i2 pcode_sub_overflow_i2(i2 x, i2 y);
+	extern i2 pcode_mul_overflow_i2(i2 x, i2 y);
+	ASSERTI2(pcode_add_overflow_i2(1, 1), 0);
+	ASSERTI2(pcode_sub_overflow_i2(1, 1), 0);
+	ASSERTI2(pcode_mul_overflow_i2(1, 1), 0);
+	ASSERTI2(pcode_add_overflow_i2(I2_MAX, 1), 1);
+	ASSERTI2(pcode_sub_overflow_i2(I2_MAX, 1), 0);
+	ASSERTI2(pcode_mul_overflow_i2(I2_MAX, 2), 1);
+	ASSERTI2(pcode_add_overflow_i2(1, I2_MAX), 1);
+	ASSERTI2(pcode_sub_overflow_i2(1, I2_MAX), 0);
+	ASSERTI2(pcode_mul_overflow_i2(2, I2_MAX), 1);
+}
+
+
+TEST pcode_overflow_u4_Main()
+{
+	extern u4 pcode_add_overflow_u4(u4 x, u4 y);
+	extern u4 pcode_sub_overflow_u4(u4 x, u4 y);
+	extern u4 pcode_mul_overflow_u4(u4 x, u4 y);
+	ASSERTU4(pcode_add_overflow_u4(1, 1), 0);
+	ASSERTU4(pcode_sub_overflow_u4(1, 1), 0);
+	ASSERTU4(pcode_mul_overflow_u4(1, 1), 0);
+	ASSERTU4(pcode_add_overflow_u4(U4_MAX, 1), 1);
+	ASSERTU4(pcode_sub_overflow_u4(U4_MAX, 1), 0);
+	ASSERTU4(pcode_mul_overflow_u4(U4_MAX, 2), 1);
+	ASSERTU4(pcode_add_overflow_u4(1, U4_MAX), 1);
+	ASSERTU4(pcode_sub_overflow_u4(1, U4_MAX), 1);
+	ASSERTU4(pcode_mul_overflow_u4(2, U4_MAX), 1);
+}
+
+TEST pcode_overflow_i4_Main()
+{
+	extern i4 pcode_add_overflow_i4(i4 x, i4 y);
+	extern i4 pcode_sub_overflow_i4(i4 x, i4 y);
+	extern i4 pcode_mul_overflow_i4(i4 x, i4 y);
+	ASSERTI4(pcode_add_overflow_i4(1, 1), 0);
+	ASSERTI4(pcode_sub_overflow_i4(1, 1), 0);
+	ASSERTI4(pcode_mul_overflow_i4(1, 1), 0);
+	ASSERTI4(pcode_add_overflow_i4(I4_MAX, 1), 1);
+	ASSERTI4(pcode_sub_overflow_i4(I4_MAX, 1), 0);
+	ASSERTI4(pcode_mul_overflow_i4(I4_MAX, 2), 1);
+	ASSERTI4(pcode_add_overflow_i4(1, I4_MAX), 1);
+	ASSERTI4(pcode_sub_overflow_i4(1, I4_MAX), 0);
+	ASSERTI4(pcode_mul_overflow_i4(2, I4_MAX), 1);
+}
+
+
+
+MAIN BUILTIN_main() { }
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BUILTIN_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BUILTIN_BODY.c
new file mode 100644
index 0000000000..2c71415275
--- /dev/null
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BUILTIN_BODY.c
@@ -0,0 +1,226 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include "pcode_test.h"
+
+
+u2 pcode_bswap_u2(u2 x)
+{
+    u2 y;
+    y = __builtin_bswap16(x);
+    return y;
+}
+
+u4 pcode_bswap_u4(u4 x)
+{
+    u4 y;
+    y = __builtin_bswap32(x);
+    return y;
+}
+
+#ifdef HAS_LONGLONG
+u8 pcode_bswap_u8(u8 x)
+{
+    u8 y;
+    y = __builtin_bswap64(x);
+    return y;
+}
+#endif
+
+i2 pcode_bswap_i2(i2 x)
+{
+    i2 y;
+    y = __builtin_bswap16(x);
+    return y;
+}
+
+i4 pcode_bswap_i4(i4 x)
+{
+    i4 y;
+    y = __builtin_bswap32(x);
+    return y;
+}
+
+#ifdef HAS_LONGLONG
+i8 pcode_bswap_i8(i8 x)
+{
+    i8 y;
+    y = __builtin_bswap64(x);
+    return y;
+}
+#endif
+
+// compare exchange if x===y -> z, else -> x
+#define PCODE_LOAD_STORE(typ)						\
+    typ pcode_atomic_load_store_##typ(typ x)				\
+    {									\
+	typ a = 0;							\
+	__atomic_store_n(&a, x, __ATOMIC_SEQ_CST);			\
+	x = __atomic_load_n(&a, __ATOMIC_SEQ_CST);			\
+	return x;							\
+    }
+
+#define PCODE_ATOMICS(typ)						\
+    typ pcode_atomic_exchange_##typ(typ x, typ y)			\
+    {									\
+	typ a = x;							\
+	a = __atomic_exchange_n(&a, y, __ATOMIC_ACQ_REL);		\
+	return a;							\
+    }									\
+    typ pcode_atomic_compare_exchange_##typ(typ x, typ y, typ z)	\
+    {									\
+	typ a = x;							\
+	typ b = y;							\
+	if (__atomic_compare_exchange_n(&a, &b, z, 0,			\
+				      __ATOMIC_ACQ_REL,			\
+				      __ATOMIC_ACQUIRE))		\
+	    return a;							\
+	return b;							\
+    }									\
+    typ pcode_atomic_add_fetch_##typ(typ x, typ y)			\
+    {									\
+	typ a = x;							\
+	typ b;								\
+	b = __atomic_add_fetch(&a, y, __ATOMIC_ACQ_REL);		\
+	return b;							\
+    }									\
+    typ pcode_atomic_sub_fetch_##typ(typ x, typ y)			\
+    {									\
+	typ a = x;							\
+	typ b;								\
+	b = __atomic_sub_fetch(&a, y, __ATOMIC_ACQ_REL);		\
+	return b;							\
+    }									\
+    typ pcode_atomic_and_fetch_##typ(typ x, typ y)			\
+    {									\
+	typ a = x;							\
+	typ b;								\
+	b = __atomic_and_fetch(&a, y, __ATOMIC_ACQ_REL);		\
+	return b;							\
+    }									\
+    typ pcode_atomic_xor_fetch_##typ(typ x, typ y)			\
+    {									\
+	typ a = x;							\
+	typ b;								\
+	b = __atomic_xor_fetch(&a, y, __ATOMIC_ACQ_REL);		\
+	return b;							\
+    }									\
+    typ pcode_atomic_or_fetch_##typ(typ x, typ y)			\
+    {									\
+	typ a = x;							\
+	typ b;								\
+	b = __atomic_or_fetch(&a, y, __ATOMIC_ACQ_REL);			\
+	return b;							\
+    }									\
+    typ pcode_atomic_nand_fetch_##typ(typ x, typ y)			\
+    {									\
+	typ a = x;							\
+	typ b;								\
+	b = __atomic_nand_fetch(&a, y, __ATOMIC_ACQ_REL);		\
+	return b;							\
+    }									\
+    typ pcode_atomic_fetch_add_##typ(typ x, typ y)			\
+    {									\
+	typ a = x;							\
+	typ b;								\
+	b = __atomic_fetch_add(&a, y, __ATOMIC_ACQ_REL);		\
+	return b;							\
+    }									\
+    typ pcode_atomic_fetch_sub_##typ(typ x, typ y)			\
+    {									\
+	typ a = x;							\
+	typ b;								\
+	b = __atomic_fetch_sub(&a, y, __ATOMIC_ACQ_REL);		\
+	return b;							\
+    }									\
+    typ pcode_atomic_fetch_and_##typ(typ x, typ y)			\
+    {									\
+	typ a = x;							\
+	typ b;								\
+	b = __atomic_fetch_and(&a, y, __ATOMIC_ACQ_REL);		\
+	return b;							\
+    }									\
+    typ pcode_atomic_fetch_xor_##typ(typ x, typ y)			\
+    {									\
+	typ a = x;							\
+	typ b;								\
+	b = __atomic_fetch_xor(&a, y, __ATOMIC_ACQ_REL);		\
+	return b;							\
+    }									\
+    typ pcode_atomic_fetch_or_##typ(typ x, typ y)			\
+    {									\
+	typ a = x;							\
+	typ b;								\
+	b = __atomic_fetch_or(&a, y, __ATOMIC_ACQ_REL);			\
+	return b;							\
+    }									\
+    typ pcode_atomic_fetch_nand_##typ(typ x, typ y)			\
+    {									\
+	typ a = x;							\
+	typ b;								\
+	b = __atomic_fetch_nand(&a, y, __ATOMIC_ACQ_REL);		\
+	return b;							\
+    }
+
+
+
+PCODE_LOAD_STORE(u1)
+PCODE_LOAD_STORE(i1)
+PCODE_LOAD_STORE(u2)
+PCODE_LOAD_STORE(i2)
+PCODE_LOAD_STORE(u4)
+PCODE_LOAD_STORE(i4)
+
+PCODE_ATOMICS(u4)
+PCODE_ATOMICS(i4)
+
+#ifdef HAS_LONGLONG
+PCODE_LOAD_STORE(u8)
+PCODE_LOAD_STORE(i8)
+PCODE_ATOMICS(u8)
+PCODE_ATOMICS(i8)
+#endif
+
+
+#define PCODE_OVERFLOW(typ)				\
+    typ pcode_add_overflow_##typ(typ x, typ y)		\
+    {							\
+	typ a;						\
+	a = (typ)__builtin_add_overflow_p(x, y, a);	\
+	return a;					\
+    }							\
+    typ pcode_sub_overflow_##typ(typ x, typ y)		\
+    {							\
+	typ a;						\
+	a = (typ)__builtin_sub_overflow_p(x, y, a);	\
+	return a;					\
+    }							\
+    typ pcode_mul_overflow_##typ(typ x, typ y)		\
+    {							\
+	typ a;						\
+	a = (typ)__builtin_mul_overflow_p(x, y, a);	\
+	return a;					\
+    }
+
+PCODE_OVERFLOW(u1)
+PCODE_OVERFLOW(u2)
+PCODE_OVERFLOW(u4)
+PCODE_OVERFLOW(i1)
+PCODE_OVERFLOW(i2)
+PCODE_OVERFLOW(i4)
+#ifdef HAS_LONGLONG
+PCODE_OVERFLOW(u8)
+PCODE_OVERFLOW(i8)
+#endif
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BitManipulation.test b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BitManipulation.test
index c0b7d48db9..8ce270d3a1 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BitManipulation.test
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BitManipulation.test
@@ -4,145 +4,213 @@
 TEST pcode_BM1_GetBitLongLong_Main()
 {
 	extern i8 pcode_BM1_GetBitLongLong(i8 arg, u4 bit);
-	ASSERTI8(pcode_BM1_GetBitLongLong(0xFF, 1), 2); 
-	ASSERTI8(pcode_BM1_GetBitLongLong(I8_MAX, 8), 256); 
-	ASSERTI8(pcode_BM1_GetBitLongLong(I8_MAX, 16), 65536); 
-	ASSERTI8(pcode_BM1_GetBitLongLong(I8_MAX, 32), 4294967296LL); 
-	ASSERTI8(pcode_BM1_GetBitLongLong(I8_MAX, 63), 0); 
-	ASSERTI8(pcode_BM1_GetBitLongLong(0x0, 1), 0); 
+	ASSERTI8(pcode_BM1_GetBitLongLong(0xFF, 1), 2);
+	ASSERTI8(pcode_BM1_GetBitLongLong(I8_MAX, 8), 256);
+	ASSERTI8(pcode_BM1_GetBitLongLong(I8_MAX, 16), 65536);
+	ASSERTI8(pcode_BM1_GetBitLongLong(I8_MAX, 32), 4294967296LL);
+	ASSERTI8(pcode_BM1_GetBitLongLong(I8_MAX, 63), 0);
+	ASSERTI8(pcode_BM1_GetBitLongLong(0x0, 1), 0);
 }
 #endif
 
 TEST pcode_BM2_GetBitInt_Main()
 {
 	extern i4 pcode_BM2_GetBitInt(i4 arg, u4 bit);
-	ASSERTI4(pcode_BM2_GetBitInt(0xFF, 1), 2); 
-	ASSERTI4(pcode_BM2_GetBitInt(0, 1), 0); 
-	ASSERTI4(pcode_BM2_GetBitInt(I4_MAX, 8), 256); 
-	ASSERTI4(pcode_BM2_GetBitInt(I4_MAX, 16), 65536); 
-	ASSERTI4(pcode_BM2_GetBitInt(I4_MAX, 24), 16777216); 
-	ASSERTI4(pcode_BM2_GetBitInt(I4_MAX, 31), 0); 
+	ASSERTI4(pcode_BM2_GetBitInt(0xFF, 1), 2);
+	ASSERTI4(pcode_BM2_GetBitInt(0, 1), 0);
+	ASSERTI4(pcode_BM2_GetBitInt(I4_MAX, 8), 256);
+	ASSERTI4(pcode_BM2_GetBitInt(I4_MAX, 16), 65536);
+	ASSERTI4(pcode_BM2_GetBitInt(I4_MAX, 24), 16777216);
+	ASSERTI4(pcode_BM2_GetBitInt(I4_MAX, 31), 0);
 }
 
 TEST pcode_BM3_GetBitShort_Main()
 {
 	extern i2 pcode_BM3_GetBitShort(i2 arg, u4 bit);
-	ASSERTI2(pcode_BM3_GetBitShort(0xFD, 1), 0); 
-	ASSERTI2(pcode_BM3_GetBitShort(0x02, 1), 2); 
-	ASSERTI2(pcode_BM3_GetBitShort(I2_MAX, 8), 256); 
-	ASSERTI2(pcode_BM3_GetBitShort(I2_MAX, 14), 16384); 
-	ASSERTI2(pcode_BM3_GetBitShort(I2_MAX, 15), 0); 
+	ASSERTI2(pcode_BM3_GetBitShort(0xFD, 1), 0);
+	ASSERTI2(pcode_BM3_GetBitShort(0x02, 1), 2);
+	ASSERTI2(pcode_BM3_GetBitShort(I2_MAX, 8), 256);
+	ASSERTI2(pcode_BM3_GetBitShort(I2_MAX, 14), 16384);
+	ASSERTI2(pcode_BM3_GetBitShort(I2_MAX, 15), 0);
 }
 
 TEST pcode_BM4_GetBitChar_Main()
 {
 	extern i1 pcode_BM4_GetBitChar(i1 arg, u4 bit);
-	ASSERTI1(pcode_BM4_GetBitChar(0xFD, 1), 0);          
-	ASSERTI1(pcode_BM4_GetBitChar(0x02, 1), 2); 
-	ASSERTI1(pcode_BM4_GetBitChar(0xFF, 7), -128); 
+	ASSERTI1(pcode_BM4_GetBitChar(0xFD, 1), 0);
+	ASSERTI1(pcode_BM4_GetBitChar(0x02, 1), 2);
+	ASSERTI1(pcode_BM4_GetBitChar(0xFF, 7), -128);
 	ASSERTI1(pcode_BM4_GetBitChar(0x7F, 7), 0);
-	ASSERTI1(pcode_BM4_GetBitChar(0, 1), 0); 
+	ASSERTI1(pcode_BM4_GetBitChar(0, 1), 0);
 }
 
 #ifdef HAS_LONGLONG
 TEST pcode_BM5_GetBitUnsignedLongLong_Main()
 {
 	extern u8 pcode_BM5_GetBitUnsignedLongLong(u8 arg, u8 bit);
-	ASSERTU8(pcode_BM5_GetBitUnsignedLongLong(0x02, 1), 2); 
-	ASSERTU8(pcode_BM5_GetBitUnsignedLongLong(0xFFFFFFFFFFFFFFFDULL, 1), 0); 
-	ASSERTU8(pcode_BM5_GetBitUnsignedLongLong(U8_MAX, 8), 256); 
-	ASSERTU8(pcode_BM5_GetBitUnsignedLongLong(U8_MAX, 16), 65536); 
-	ASSERTU8(pcode_BM5_GetBitUnsignedLongLong(U8_MAX, 24), 16777216ULL); 
-	ASSERTU8(pcode_BM5_GetBitUnsignedLongLong(U8_MAX, 32), 4294967296ULL); 
+	extern u8 pcode_u8_GetBitsfield(u8 arg);
+	extern u8 pcode_u8_GetBitfield(u8 arg);
+	ASSERTU8(pcode_BM5_GetBitUnsignedLongLong(0x02, 1), 2);
+	ASSERTU8(pcode_BM5_GetBitUnsignedLongLong(0xFFFFFFFFFFFFFFFDULL, 1), 0);
+	ASSERTU8(pcode_BM5_GetBitUnsignedLongLong(U8_MAX, 8), 256);
+	ASSERTU8(pcode_BM5_GetBitUnsignedLongLong(U8_MAX, 16), 65536);
+	ASSERTU8(pcode_BM5_GetBitUnsignedLongLong(U8_MAX, 24), 16777216ULL);
+	ASSERTU8(pcode_BM5_GetBitUnsignedLongLong(U8_MAX, 32), 4294967296ULL);
+	ASSERTU8(pcode_u8_GetBitsfield(0), 0);
+	ASSERTU8(pcode_u8_GetBitsfield(0x0000000000010000ULL), 1);
+	ASSERTU8(pcode_u8_GetBitsfield(0x0000800000000000ULL), 0x80000000ULL);
+	ASSERTU8(pcode_u8_GetBitsfield(0xFFFF00000000FFFFULL), 0);
+	ASSERTU8(pcode_u8_GetBitsfield(U8_MAX), U4_MAX);
+	ASSERTU8(pcode_u8_GetBitsfield(0x1f2f3f4f5f6f7f8fULL), 0x3f4f5f6fULL);
+	ASSERTU8(pcode_u8_GetBitfield(0), 0);
+	ASSERTU8(pcode_u8_GetBitfield(0x0001000000000000ULL), 1);
+	ASSERTU8(pcode_u8_GetBitfield(0x0000FFFFFFFFFFFFULL), 0);
+	ASSERTU8(pcode_u8_GetBitfield(0x0001FFFFFFFFFFFFULL), 1);
+	ASSERTU8(pcode_u8_GetBitfield(U8_MAX), 1);
+	ASSERTU8(pcode_u8_GetBitfield(0x1f2f3f4f5f6f7f8fULL), 1);
 }
 #endif
 
 TEST pcode_BM6_GetBitUnsignedInt_Main()
 {
 	extern u4 pcode_BM6_GetBitUnsignedInt(u4 arg, u4 bit);
-	ASSERTU4(pcode_BM6_GetBitUnsignedInt(0x02, 1), 2); 
-	ASSERTU4(pcode_BM6_GetBitUnsignedInt(0xFD, 1), 0); 
-	ASSERTU4(pcode_BM6_GetBitUnsignedInt(U4_MAX, 8), 256); 
-	ASSERTU4(pcode_BM6_GetBitUnsignedInt(U4_MAX, 16), 65536); 
-	ASSERTU4(pcode_BM6_GetBitUnsignedInt(U4_MAX, 24), 16777216); 
-	ASSERTU4(pcode_BM6_GetBitUnsignedInt(U4_MAX, 31), 2147483648); 
+	extern u4 pcode_u4_GetBitsfield(u4 arg);
+	extern u4 pcode_u4_GetBitfield(u4 arg);
+	ASSERTU4(pcode_BM6_GetBitUnsignedInt(0x02, 1), 2);
+	ASSERTU4(pcode_BM6_GetBitUnsignedInt(0xFD, 1), 0);
+	ASSERTU4(pcode_BM6_GetBitUnsignedInt(U4_MAX, 8), 256);
+	ASSERTU4(pcode_BM6_GetBitUnsignedInt(U4_MAX, 16), 65536);
+	ASSERTU4(pcode_BM6_GetBitUnsignedInt(U4_MAX, 24), 16777216);
+	ASSERTU4(pcode_BM6_GetBitUnsignedInt(U4_MAX, 31), 2147483648);
+	ASSERTU4(pcode_u4_GetBitsfield(0), 0);
+	ASSERTU4(pcode_u4_GetBitsfield(0x00000100), 1);
+	ASSERTU4(pcode_u4_GetBitsfield(0x00800000), 0x8000);
+	ASSERTU4(pcode_u4_GetBitsfield(0xFF0000FF), 0);
+	ASSERTU4(pcode_u4_GetBitsfield(U4_MAX), U2_MAX);
+	ASSERTU4(pcode_u4_GetBitsfield(0x1f2f3f4f), 0x2f3f);
+	ASSERTU4(pcode_u4_GetBitfield(0), 0);
+	ASSERTU4(pcode_u4_GetBitfield(0x01000000), 1);
+	ASSERTU4(pcode_u4_GetBitfield(0x00FFFFFF), 0);
+	ASSERTU4(pcode_u4_GetBitfield(0x01FFFFFF), 1);
+	ASSERTU4(pcode_u4_GetBitfield(U4_MAX), 1);
+	ASSERTU4(pcode_u4_GetBitfield(0x1f2f3f4f), 1);
 }
 
 TEST pcode_BM7_GetBitUnsignedShort_Main()
 {
 	extern u2 pcode_BM7_GetBitUnsignedShort(u2 arg, u4 bit);
-	ASSERTU2(pcode_BM7_GetBitUnsignedShort(0xFF, 1), 2); 
-	ASSERTU2(pcode_BM7_GetBitUnsignedShort(0, 1), 0); 
-	ASSERTU2(pcode_BM7_GetBitUnsignedShort(U2_MAX, 8), 256); 
+	extern u2 pcode_u2_GetBitsfield(u2 arg);
+	extern u2 pcode_u2_GetBitfield(u2 arg);
+	ASSERTU2(pcode_BM7_GetBitUnsignedShort(0xFF, 1), 2);
+	ASSERTU2(pcode_BM7_GetBitUnsignedShort(0, 1), 0);
+	ASSERTU2(pcode_BM7_GetBitUnsignedShort(U2_MAX, 8), 256);
 	ASSERTU2(pcode_BM7_GetBitUnsignedShort(U2_MAX, 15), 32768);
+	ASSERTU2(pcode_u2_GetBitsfield(0), 0);
+	ASSERTU2(pcode_u2_GetBitsfield(0x0010), 1);
+	ASSERTU2(pcode_u2_GetBitsfield(0x0800), 0x80);
+	ASSERTU2(pcode_u2_GetBitsfield(0xF00F), 0);
+	ASSERTU2(pcode_u2_GetBitsfield(U2_MAX), U1_MAX);
+	ASSERTU2(pcode_u2_GetBitsfield(0x1f2f), 0xf2);
+	ASSERTU2(pcode_u2_GetBitfield(0), 0);
+	ASSERTU2(pcode_u2_GetBitfield(0x1000), 1);
+	ASSERTU2(pcode_u2_GetBitfield(0x0FFF), 0);
+	ASSERTU2(pcode_u2_GetBitfield(0x1FFF), 1);
+	ASSERTU2(pcode_u2_GetBitfield(U2_MAX), 1);
+	ASSERTU2(pcode_u2_GetBitfield(0x1f2f), 0xf2);
 }
 
 TEST pcode_BM8_GetBitUnsignedChar_Main()
 {
 	extern u1 pcode_BM8_GetBitUnsignedChar(u1 arg, u4 bit);
-	ASSERTU1(pcode_BM8_GetBitUnsignedChar(0xFF, 1), 2); 
-	ASSERTU1(pcode_BM8_GetBitUnsignedChar(0, 1), 0); 
-	ASSERTU1(pcode_BM8_GetBitUnsignedChar(U1_MAX, 4), 16); 
-	ASSERTU1(pcode_BM8_GetBitUnsignedChar(U1_MAX, 8), 0); 
+	extern u1 pcode_u1_GetBitsfield(u1 arg);
+	extern u1 pcode_u1_GetBitfield(u1 arg);
+	ASSERTU1(pcode_BM8_GetBitUnsignedChar(0xFF, 1), 2);
+	ASSERTU1(pcode_BM8_GetBitUnsignedChar(0, 1), 0);
+	ASSERTU1(pcode_BM8_GetBitUnsignedChar(U1_MAX, 4), 16);
+	ASSERTU1(pcode_BM8_GetBitUnsignedChar(U1_MAX, 8), 0);
+	ASSERTU1(pcode_u1_GetBitsfield(0), 0);
+	ASSERTU1(pcode_u1_GetBitsfield(0x02), 1);
+	ASSERTU1(pcode_u1_GetBitsfield(0x20), 0x8);
+	ASSERTU1(pcode_u1_GetBitsfield(0x81), 0);
+	ASSERTU1(pcode_u1_GetBitsfield(U1_MAX), 15);
+	ASSERTU1(pcode_u1_GetBitfield(0), 0);
+	ASSERTU1(pcode_u1_GetBitfield(0x40), 1);
+	ASSERTU1(pcode_u1_GetBitfield(0x3F), 0);
+	ASSERTU1(pcode_u1_GetBitfield(0x7F), 1);
+	ASSERTU1(pcode_u1_GetBitfield(U1_MAX), 1);
 }
 
-#ifdef HAS_LONGLONG 
+#ifdef HAS_LONGLONG
 TEST pcode_BM9_SetBitLongLong_Main()
 {
 	extern i8 pcode_BM9_SetBitLongLong(i8 arg, u4 bit);
-	ASSERTI8(pcode_BM9_SetBitLongLong(0xFF, 1), 255); 
-	ASSERTI8(pcode_BM9_SetBitLongLong(0, 1), 2); 
-	ASSERTI8(pcode_BM9_SetBitLongLong(I8_MAX, 8), I8_MAX); 
-	ASSERTI8(pcode_BM9_SetBitLongLong(I8_MAX, 16), I8_MAX); 
-	ASSERTI8(pcode_BM9_SetBitLongLong(I8_MAX, 24), I8_MAX); 
-	ASSERTI8(pcode_BM9_SetBitLongLong(I8_MAX, 32), I8_MAX); 
-	ASSERTI8(pcode_BM9_SetBitLongLong(I8_MAX, 0), I8_MAX); 
-	ASSERTI8(pcode_BM9_SetBitLongLong(4, 8), 260); 
+	ASSERTI8(pcode_BM9_SetBitLongLong(0xFF, 1), 255);
+	ASSERTI8(pcode_BM9_SetBitLongLong(0, 1), 2);
+	ASSERTI8(pcode_BM9_SetBitLongLong(I8_MAX, 8), I8_MAX);
+	ASSERTI8(pcode_BM9_SetBitLongLong(I8_MAX, 16), I8_MAX);
+	ASSERTI8(pcode_BM9_SetBitLongLong(I8_MAX, 24), I8_MAX);
+	ASSERTI8(pcode_BM9_SetBitLongLong(I8_MAX, 32), I8_MAX);
+	ASSERTI8(pcode_BM9_SetBitLongLong(I8_MAX, 0), I8_MAX);
+	ASSERTI8(pcode_BM9_SetBitLongLong(4, 8), 260);
 }
 #endif
 
 TEST pcode_BM10_SetBitInt_Main()
 {
 	extern i4 pcode_BM10_SetBitInt(i4 arg, u4 bit);
-	ASSERTI4(pcode_BM10_SetBitInt(0xFF, 1), 255); 
-	ASSERTI4(pcode_BM10_SetBitInt(0, 1), 2); 
-	ASSERTI4(pcode_BM10_SetBitInt(I4_MAX, 31), -1); 
-	ASSERTI4(pcode_BM10_SetBitInt(I4_MAX, I4_MIN), I4_MAX);     
-	ASSERTI4(pcode_BM10_SetBitInt(4, 8), 260);     
+	ASSERTI4(pcode_BM10_SetBitInt(0xFF, 1), 255);
+	ASSERTI4(pcode_BM10_SetBitInt(0, 1), 2);
+	ASSERTI4(pcode_BM10_SetBitInt(I4_MAX, 31), -1);
+	ASSERTI4(pcode_BM10_SetBitInt(I4_MAX, I4_MIN), I4_MAX);
+	ASSERTI4(pcode_BM10_SetBitInt(4, 8), 260);
 }
 
 TEST pcode_BM11_SetBitShort_Main()
 {
 	extern i2 pcode_BM11_SetBitShort(i2 arg, i2 bit);
-	ASSERTI2(pcode_BM11_SetBitShort(0xFF, 1), 255); 
-	ASSERTI2(pcode_BM11_SetBitShort(0, 1), 2); 
-	ASSERTI2(pcode_BM11_SetBitShort(I2_MAX, 8), 32767); 
-	ASSERTI2(pcode_BM11_SetBitShort(I2_MAX, 15), -1); 
+	ASSERTI2(pcode_BM11_SetBitShort(0xFF, 1), 255);
+	ASSERTI2(pcode_BM11_SetBitShort(0, 1), 2);
+	ASSERTI2(pcode_BM11_SetBitShort(I2_MAX, 8), 32767);
+	ASSERTI2(pcode_BM11_SetBitShort(I2_MAX, 15), -1);
 }
 
 TEST pcode_BM12_SetBitChar_Main()
 {
 	extern i1 pcode_BM12_SetBitChar(i1 arg, u1 bit);
-	ASSERTI1(pcode_BM12_SetBitChar(0xFF, 1), -1); 
-	ASSERTI1(pcode_BM12_SetBitChar(0, 1), 2); 
-	ASSERTI1(pcode_BM12_SetBitChar(I1_MAX, 8), 127); 
+	ASSERTI1(pcode_BM12_SetBitChar(0xFF, 1), -1);
+	ASSERTI1(pcode_BM12_SetBitChar(0, 1), 2);
+	ASSERTI1(pcode_BM12_SetBitChar(I1_MAX, 8), 127);
 }
 
 #ifdef HAS_LONGLONG
 TEST pcode_BM12_SetBitUnsignedLongLong_Main()
 {
 	extern u8 pcode_BM12_SetBitUnsignedLongLong(u8 arg, u8 bit);
-	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(0xFF, 1), 255); 
+	extern u8 pcode_u8_SetBitsfield(u8 arg);
+	extern u8 pcode_u8_SetBitfield(u8 arg);
+	extern u8 pcode_u8_SetHigh(u8 arg);
+	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(0xFF, 1), 255);
 	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(0, 1), 2);
-	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(0, 8), 256); 
-	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(0, 16), 65536); 
+	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(0, 8), 256);
+	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(0, 16), 65536);
 	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(0, 24), 16777216ULL);
-	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(0, 31), 2147483648ULL); 
-	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(0, 32), 4294967296ULL); 
-	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(U8_MAX, 8), U8_MAX); 
-	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(U8_MAX, 16), U8_MAX); 
-	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(U8_MAX, 24), U8_MAX); 
-	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(U8_MAX, 32), U8_MAX); 
+	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(0, 31), 2147483648ULL);
+	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(0, 32), 4294967296ULL);
+	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(U8_MAX, 8), U8_MAX);
+	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(U8_MAX, 16), U8_MAX);
+	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(U8_MAX, 24), U8_MAX);
+	ASSERTU8(pcode_BM12_SetBitUnsignedLongLong(U8_MAX, 32), U8_MAX);
+	ASSERTU8(pcode_u8_SetBitsfield(0), 0);
+	ASSERTU8(pcode_u8_SetBitsfield(1), 0x10000);
+	ASSERTU8(pcode_u8_SetBitsfield(U4_MAX), 0xFFFFFFFF0000ULL);
+	ASSERTU8(pcode_u8_SetBitsfield(0x1f2f3f4f), 0x1f2f3f4f0000ULL);
+	ASSERTU8(pcode_u8_SetBitfield(0), 0);
+	ASSERTU8(pcode_u8_SetBitfield(1), 0x1000000000000ULL);
+	ASSERTU8(pcode_u8_SetHigh(0), 0x0001000000000000ULL);
+	ASSERTU8(pcode_u8_SetHigh(0x0001000000000000ULL), 0x0001000000000000ULL);
+	ASSERTU8(pcode_u8_SetHigh(1), 0x0001000000000001ULL);
+	ASSERTU8(pcode_u8_SetHigh(U8_MAX), U8_MAX);
+	ASSERTU8(pcode_u8_SetHigh(0xFFFEFFFFFFFFFFFFULL), U8_MAX);
 }
 #endif
 
@@ -150,207 +218,275 @@ TEST pcode_BM12_SetBitUnsignedLongLong_Main()
 TEST pcode_BM13_SetLowBitUnsignedLongLong_Main()
 {
 	extern u8 pcode_BM13_SetLowBitUnsignedLongLong(u8 arg, u8 bit);
-	ASSERTU8(pcode_BM13_SetLowBitUnsignedLongLong(0xFF, 1), 255); 
-	ASSERTU8(pcode_BM13_SetLowBitUnsignedLongLong(0, 1), 2); 
-	ASSERTU8(pcode_BM13_SetLowBitUnsignedLongLong(0, 8), 256); 
-	ASSERTU8(pcode_BM13_SetLowBitUnsignedLongLong(0, 16), 65536); 
-	ASSERTU8(pcode_BM13_SetLowBitUnsignedLongLong(0, 24), 16777216ULL); 
-	ASSERTU8(pcode_BM13_SetLowBitUnsignedLongLong(0, 31), 2147483648ULL); // ensure no sign extension occurs
+	ASSERTU8(pcode_BM13_SetLowBitUnsignedLongLong(0xFF, 1), 255);
+	ASSERTU8(pcode_BM13_SetLowBitUnsignedLongLong(0, 1), 2);
+	ASSERTU8(pcode_BM13_SetLowBitUnsignedLongLong(0, 8), 256);
+	ASSERTU8(pcode_BM13_SetLowBitUnsignedLongLong(0, 16), 65536);
+	ASSERTU8(pcode_BM13_SetLowBitUnsignedLongLong(0, 24), 16777216ULL);
+	ASSERTU8(pcode_BM13_SetLowBitUnsignedLongLong(0, 31), 2147483648ULL);// ensure no sign extension occurs
 }
 #endif
 
 TEST pcode_BM14_SetBitUnsignedInt_Main()
 {
 	extern u4 pcode_BM14_SetBitUnsignedInt(u4 arg, u4 bit);
-	ASSERTU4(pcode_BM14_SetBitUnsignedInt(0xFF, 1), 255); 
-	ASSERTU4(pcode_BM14_SetBitUnsignedInt(0, 1), 2); 
-	ASSERTU4(pcode_BM14_SetBitUnsignedInt(0, 8), 256); 
-	ASSERTU4(pcode_BM14_SetBitUnsignedInt(0, 16), 65536); 
+	extern u4 pcode_u4_SetBitsfield(u4 arg);
+	extern u4 pcode_u4_SetBitfield(u4 arg);
+	extern u4 pcode_u4_SetHigh(u4 arg);
+	ASSERTU4(pcode_BM14_SetBitUnsignedInt(0xFF, 1), 255);
+	ASSERTU4(pcode_BM14_SetBitUnsignedInt(0, 1), 2);
+	ASSERTU4(pcode_BM14_SetBitUnsignedInt(0, 8), 256);
+	ASSERTU4(pcode_BM14_SetBitUnsignedInt(0, 16), 65536);
 	ASSERTU4(pcode_BM14_SetBitUnsignedInt(0, 24), 16777216);
-	ASSERTU4(pcode_BM14_SetBitUnsignedInt(0, 31), 2147483648);  
+	ASSERTU4(pcode_BM14_SetBitUnsignedInt(0, 31), 2147483648);
+	ASSERTU4(pcode_u4_SetBitsfield(0), 0);
+	ASSERTU4(pcode_u4_SetBitsfield(1), 0x100);
+	ASSERTU4(pcode_u4_SetBitsfield(U2_MAX), 0xFFFF00);
+	ASSERTU4(pcode_u4_SetBitfield(0), 0);
+	ASSERTU4(pcode_u4_SetBitfield(1), 0x1000000);
+	ASSERTU4(pcode_u4_SetHigh(0), 0x01000000);
+	ASSERTU4(pcode_u4_SetHigh(0x01000000), 0x01000000);
+	ASSERTU4(pcode_u4_SetHigh(1), 0x01000001);
+	ASSERTU4(pcode_u4_SetHigh(U4_MAX), U4_MAX);
+	ASSERTU4(pcode_u4_SetHigh(0xFEFFFFFF), U4_MAX);
 }
 
 TEST pcode_BM15_SetBitUnsignedShort_Main()
 {
 	extern u2 pcode_BM15_SetBitUnsignedShort(u2 arg, u4 bit);
-	ASSERTU2(pcode_BM15_SetBitUnsignedShort(0xFF, 1), 255); 
-	ASSERTU2(pcode_BM15_SetBitUnsignedShort(0, 1), 2); 
-	ASSERTU2(pcode_BM15_SetBitUnsignedShort(0, 8), 256); 
+	extern u2 pcode_u2_SetBitsfield(u2 arg);
+	extern u2 pcode_u2_SetBitfield(u2 arg);
+	extern u2 pcode_u2_SetHigh(u2 arg);
+	ASSERTU2(pcode_BM15_SetBitUnsignedShort(0xFF, 1), 255);
+	ASSERTU2(pcode_BM15_SetBitUnsignedShort(0, 1), 2);
+	ASSERTU2(pcode_BM15_SetBitUnsignedShort(0, 8), 256);
 	ASSERTU2(pcode_BM15_SetBitUnsignedShort(0, 15), 32768);
+	ASSERTU2(pcode_u2_SetBitsfield(0), 0);
+	ASSERTU2(pcode_u2_SetBitsfield(1), 0x10);
+	ASSERTU2(pcode_u2_SetBitsfield(U1_MAX), 0xFF0);
+	ASSERTU2(pcode_u2_SetBitfield(0), 0);
+	ASSERTU2(pcode_u2_SetBitfield(1), 0x1000);
+	ASSERTU2(pcode_u2_SetHigh(0), 0x1000);
+	ASSERTU2(pcode_u2_SetHigh(0x1000), 0x1000);
+	ASSERTU2(pcode_u2_SetHigh(1), 0x1001);
+	ASSERTU2(pcode_u2_SetHigh(U2_MAX), U2_MAX);
+	ASSERTU2(pcode_u2_SetHigh(0xEFFF), U2_MAX);
 }
 
 TEST pcode_BM16_SetBitUnsignedChar_Main()
 {
 	extern u1 pcode_BM16_SetBitUnsignedChar(u1 arg, u1 bit);
-	ASSERTU1(pcode_BM16_SetBitUnsignedChar(0xFF, 1), 255); 
-	ASSERTU1(pcode_BM16_SetBitUnsignedChar(0, 1), 2); 
-	ASSERTU1(pcode_BM16_SetBitUnsignedChar(4, 1), 6); 
+	extern u1 pcode_u1_SetBitsfield(u1 arg);
+	extern u1 pcode_u1_SetBitfield(u1 arg);
+	extern u1 pcode_u1_SetHigh(u1 arg);
+	ASSERTU1(pcode_BM16_SetBitUnsignedChar(0xFF, 1), 255);
+	ASSERTU1(pcode_BM16_SetBitUnsignedChar(0, 1), 2);
+	ASSERTU1(pcode_BM16_SetBitUnsignedChar(4, 1), 6);
+	ASSERTU1(pcode_u1_SetBitsfield(0), 0);
+	ASSERTU1(pcode_u1_SetBitsfield(1), 0x8);
+	ASSERTU1(pcode_u1_SetBitsfield(0xf), 0x3c);
+	ASSERTU1(pcode_u1_SetBitfield(0), 0);
+	ASSERTU1(pcode_u1_SetBitfield(1), 0x40);
+	ASSERTU1(pcode_u1_SetHigh(0), 0x40);
+	ASSERTU1(pcode_u1_SetHigh(0x40), 0x40);
+	ASSERTU1(pcode_u1_SetHigh(1), 0x41);
+	ASSERTU1(pcode_u1_SetHigh(U1_MAX), U1_MAX);
+	ASSERTU1(pcode_u1_SetHigh(0xBF), U1_MAX);
 }
 
 #ifdef HAS_LONGLONG
 TEST pcode_BM17_ClearBitLongLong_Main()
 {
 	extern i8 pcode_BM17_ClearBitLongLong(i8 arg, i8 bit);
-	ASSERTI8(pcode_BM17_ClearBitLongLong(0xFF, 1), 253); 
-	ASSERTI8(pcode_BM17_ClearBitLongLong(0, 1), 0); 
-	ASSERTI8(pcode_BM17_ClearBitLongLong(I8_MAX, 8), 9223372036854775551LL); 
-	ASSERTI8(pcode_BM17_ClearBitLongLong(I8_MAX, 16), 9223372036854710271LL); 
-	ASSERTI8(pcode_BM17_ClearBitLongLong(I8_MAX, 24), 9223372036837998591LL); 
-	ASSERTI8(pcode_BM17_ClearBitLongLong(I8_MAX, 32), 9223372032559808511LL); 
+	ASSERTI8(pcode_BM17_ClearBitLongLong(0xFF, 1), 253);
+	ASSERTI8(pcode_BM17_ClearBitLongLong(0, 1), 0);
+	ASSERTI8(pcode_BM17_ClearBitLongLong(I8_MAX, 8), 9223372036854775551LL);
+	ASSERTI8(pcode_BM17_ClearBitLongLong(I8_MAX, 16), 9223372036854710271LL);
+	ASSERTI8(pcode_BM17_ClearBitLongLong(I8_MAX, 24), 9223372036837998591LL);
+	ASSERTI8(pcode_BM17_ClearBitLongLong(I8_MAX, 32), 9223372032559808511LL);
 }
 #endif
 
 TEST pcode_BM18_ClearBitInt_Main()
 {
 	extern i4 pcode_BM18_ClearBitInt(i4 arg, i4 bit);
-	ASSERTI4(pcode_BM18_ClearBitInt(0xFF, 1), 253); 
-	ASSERTI4(pcode_BM18_ClearBitInt(0, 1), 0); 
-	ASSERTI4(pcode_BM18_ClearBitInt(I4_MAX, 8), 2147483391); 
-	ASSERTI4(pcode_BM18_ClearBitInt(I4_MAX, 16), 2147418111); 
-	ASSERTI4(pcode_BM18_ClearBitInt(I4_MAX, 31), 2147483647); 
+	ASSERTI4(pcode_BM18_ClearBitInt(0xFF, 1), 253);
+	ASSERTI4(pcode_BM18_ClearBitInt(0, 1), 0);
+	ASSERTI4(pcode_BM18_ClearBitInt(I4_MAX, 8), 2147483391);
+	ASSERTI4(pcode_BM18_ClearBitInt(I4_MAX, 16), 2147418111);
+	ASSERTI4(pcode_BM18_ClearBitInt(I4_MAX, 31), 2147483647);
 }
 
 TEST pcode_BM19_ClearBitShort_Main()
 {
 	extern i2 pcode_BM19_ClearBitShort(i2 arg, i2 bit);
-	ASSERTI2(pcode_BM19_ClearBitShort(0xFF, 1), 253); 
-	ASSERTI2(pcode_BM19_ClearBitShort(0, 1), 0); 
-	ASSERTI2(pcode_BM19_ClearBitShort(I2_MAX, 8), 32511); 
-	ASSERTI2(pcode_BM19_ClearBitShort(I2_MAX, 15), 32767); 
+	ASSERTI2(pcode_BM19_ClearBitShort(0xFF, 1), 253);
+	ASSERTI2(pcode_BM19_ClearBitShort(0, 1), 0);
+	ASSERTI2(pcode_BM19_ClearBitShort(I2_MAX, 8), 32511);
+	ASSERTI2(pcode_BM19_ClearBitShort(I2_MAX, 15), 32767);
 }
 
 TEST pcode_BM20_ClearBitChar_Main()
 {
 	extern i1 pcode_BM20_ClearBitChar(i1 arg, u1 bit);
-	ASSERTI1(pcode_BM20_ClearBitChar(0xFF, 1), -3); 
-	ASSERTI1(pcode_BM20_ClearBitChar(0, 1), 0); 
-	ASSERTI1(pcode_BM20_ClearBitChar(I1_MAX, 4), 111); 
-	ASSERTI1(pcode_BM20_ClearBitChar(I1_MAX, 8), 127); 
+	ASSERTI1(pcode_BM20_ClearBitChar(0xFF, 1), -3);
+	ASSERTI1(pcode_BM20_ClearBitChar(0, 1), 0);
+	ASSERTI1(pcode_BM20_ClearBitChar(I1_MAX, 4), 111);
+	ASSERTI1(pcode_BM20_ClearBitChar(I1_MAX, 8), 127);
 }
 
 #ifdef HAS_LONGLONG
 TEST pcode_BM21_ClearBitUnsignedLongLong_Main()
 {
 	extern u8 pcode_BM21_ClearBitUnsignedLongLong(u8 arg, u8 bit);
-	ASSERTU8(pcode_BM21_ClearBitUnsignedLongLong(0xFF, 1), 253); 
-	ASSERTU8(pcode_BM21_ClearBitUnsignedLongLong(0, 1), 0); 
-	ASSERTU8(pcode_BM21_ClearBitUnsignedLongLong(U8_MAX, 8), 18446744073709551359ULL); 
-	ASSERTU8(pcode_BM21_ClearBitUnsignedLongLong(U8_MAX, 16), 18446744073709486079ULL); 
-	ASSERTU8(pcode_BM21_ClearBitUnsignedLongLong(U8_MAX, 32), 18446744069414584319ULL); 
-	ASSERTU8(pcode_BM21_ClearBitUnsignedLongLong(U8_MAX, 63), 9223372036854775807ULL); 
+	extern u8 pcode_u8_SetLow(u8 arg);
+	ASSERTU8(pcode_BM21_ClearBitUnsignedLongLong(0xFF, 1), 253);
+	ASSERTU8(pcode_BM21_ClearBitUnsignedLongLong(0, 1), 0);
+	ASSERTU8(pcode_BM21_ClearBitUnsignedLongLong(U8_MAX, 8), 18446744073709551359ULL);
+	ASSERTU8(pcode_BM21_ClearBitUnsignedLongLong(U8_MAX, 16), 18446744073709486079ULL);
+	ASSERTU8(pcode_BM21_ClearBitUnsignedLongLong(U8_MAX, 32), 18446744069414584319ULL);
+	ASSERTU8(pcode_BM21_ClearBitUnsignedLongLong(U8_MAX, 63), 9223372036854775807ULL);
+	ASSERTU8(pcode_u8_SetLow(0), 0);
+	ASSERTU8(pcode_u8_SetLow(1), 1);
+	ASSERTU8(pcode_u8_SetLow(0x1000000000000ULL), 0);
+	ASSERTU8(pcode_u8_SetLow(U8_MAX), 0xFFFEFFFFFFFFFFFFULL);
+	ASSERTU8(pcode_u8_SetLow(0xFFFEFFFFFFFFFFFFULL), 0xFFFEFFFFFFFFFFFFULL);
+	ASSERTU8(pcode_u8_SetLow(0x1f2f3f4f5f6f7f8fULL), 0x1f2e3f4f5f6f7f8fULL);
 }
 #endif
 
 TEST pcode_BM22_ClearBitUnsignedInt_Main()
 {
 	extern u4 pcode_BM22_ClearBitUnsignedInt(u4 arg, u4 bit);
-	ASSERTU4(pcode_BM22_ClearBitUnsignedInt(0xFF, 1), 253); 
-	ASSERTU4(pcode_BM22_ClearBitUnsignedInt(0, 1), 0); 
-	ASSERTU4(pcode_BM22_ClearBitUnsignedInt(U4_MAX, 8), -257); 
-	ASSERTU4(pcode_BM22_ClearBitUnsignedInt(U4_MAX, 16), -65537); 
-	ASSERTU4(pcode_BM22_ClearBitUnsignedInt(U4_MAX, 24), -16777217); 
-	ASSERTU4(pcode_BM22_ClearBitUnsignedInt(U4_MAX, 31), 2147483647); 
+	extern u4 pcode_u4_SetLow(u4 arg);
+	ASSERTU4(pcode_BM22_ClearBitUnsignedInt(0xFF, 1), 253);
+	ASSERTU4(pcode_BM22_ClearBitUnsignedInt(0, 1), 0);
+	ASSERTU4(pcode_BM22_ClearBitUnsignedInt(U4_MAX, 8), -257);
+	ASSERTU4(pcode_BM22_ClearBitUnsignedInt(U4_MAX, 16), -65537);
+	ASSERTU4(pcode_BM22_ClearBitUnsignedInt(U4_MAX, 24), -16777217);
+	ASSERTU4(pcode_BM22_ClearBitUnsignedInt(U4_MAX, 31), 2147483647);
+	ASSERTU4(pcode_u4_SetLow(0), 0);
+	ASSERTU4(pcode_u4_SetLow(1), 1);
+	ASSERTU4(pcode_u4_SetLow(0x1000000), 0);
+	ASSERTU4(pcode_u4_SetLow(U4_MAX), 0xFEFFFFFF);
+	ASSERTU4(pcode_u4_SetLow(0xFEFFFFFF), 0xFEFFFFFF);
+	ASSERTU4(pcode_u4_SetLow(0x1f2f3f4f), 0x1f2e3f4f);
 }
 
 TEST pcode_BM23_ClearBitUnsignedShort_Main()
 {
 	extern u2 pcode_BM23_ClearBitUnsignedShort(u2 arg, u2 bit);
-	ASSERTU2(pcode_BM23_ClearBitUnsignedShort(0xFF, 1), 253); 
-	ASSERTU2(pcode_BM23_ClearBitUnsignedShort(0, 1), 0); 
-	ASSERTU2(pcode_BM23_ClearBitUnsignedShort(U2_MAX, 8), 65279); 
-	ASSERTU2(pcode_BM23_ClearBitUnsignedShort(U2_MAX, 15), 32767); 
+	extern u2 pcode_u2_SetLow(u2 arg);
+	ASSERTU2(pcode_BM23_ClearBitUnsignedShort(0xFF, 1), 253);
+	ASSERTU2(pcode_BM23_ClearBitUnsignedShort(0, 1), 0);
+	ASSERTU2(pcode_BM23_ClearBitUnsignedShort(U2_MAX, 8), 65279);
+	ASSERTU2(pcode_BM23_ClearBitUnsignedShort(U2_MAX, 15), 32767);
+	ASSERTU2(pcode_u2_SetLow(0), 0);
+	ASSERTU2(pcode_u2_SetLow(1), 1);
+	ASSERTU2(pcode_u2_SetLow(0x1000), 0);
+	ASSERTU2(pcode_u2_SetLow(U2_MAX), 0xEFFF);
+	ASSERTU2(pcode_u2_SetLow(0xEFFF), 0xEFFF);
+	ASSERTU2(pcode_u2_SetLow(0x1f2f), 0x0f2f);
 }
 
 TEST pcode_BM24_ClearBitUnsignedChar_Main()
 {
 	extern u1 pcode_BM24_ClearBitUnsignedChar(u1 arg, u1 bit);
-	ASSERTU1(pcode_BM24_ClearBitUnsignedChar(0xFF, 1), 253); 
-	ASSERTU1(pcode_BM24_ClearBitUnsignedChar(0, 1), 0); 
-	ASSERTU1(pcode_BM24_ClearBitUnsignedChar(U1_MAX, 4), 239); 
-	ASSERTU1(pcode_BM24_ClearBitUnsignedChar(U1_MAX, 8), 255); 
+	extern u1 pcode_u1_SetLow(u1 arg);
+	ASSERTU1(pcode_BM24_ClearBitUnsignedChar(0xFF, 1), 253);
+	ASSERTU1(pcode_BM24_ClearBitUnsignedChar(0, 1), 0);
+	ASSERTU1(pcode_BM24_ClearBitUnsignedChar(U1_MAX, 4), 239);
+	ASSERTU1(pcode_BM24_ClearBitUnsignedChar(U1_MAX, 8), 255);
+	ASSERTU1(pcode_u1_SetLow(0), 0);
+	ASSERTU1(pcode_u1_SetLow(1), 1);
+	ASSERTU1(pcode_u1_SetLow(0x40), 0);
+	ASSERTU1(pcode_u1_SetLow(U1_MAX), 0xBF);
+	ASSERTU1(pcode_u1_SetLow(0xBF), 0xBF);
 }
 
 #ifdef HAS_LONGLONG
 TEST pcode_BM25_ToggleBitLongLong_Main()
 {
 	extern i8 pcode_BM25_ToggleBitLongLong(i8 arg, u4 bit);
-	ASSERTI8(pcode_BM25_ToggleBitLongLong(0xFF, 1), 253); 
-	ASSERTI8(pcode_BM25_ToggleBitLongLong(0, 1), 2); 
-	ASSERTI8(pcode_BM25_ToggleBitLongLong(I8_MAX, 8), 9223372036854775551LL); 
-	ASSERTI8(pcode_BM25_ToggleBitLongLong(I8_MAX, 16), 9223372036854710271LL); 
-	ASSERTI8(pcode_BM25_ToggleBitLongLong(I8_MAX, 32), 9223372032559808511LL); 
-	ASSERTI8(pcode_BM25_ToggleBitLongLong(I8_MAX, 63), -1LL); 
+	ASSERTI8(pcode_BM25_ToggleBitLongLong(0xFF, 1), 253);
+	ASSERTI8(pcode_BM25_ToggleBitLongLong(0, 1), 2);
+	ASSERTI8(pcode_BM25_ToggleBitLongLong(I8_MAX, 8), 9223372036854775551LL);
+	ASSERTI8(pcode_BM25_ToggleBitLongLong(I8_MAX, 16), 9223372036854710271LL);
+	ASSERTI8(pcode_BM25_ToggleBitLongLong(I8_MAX, 32), 9223372032559808511LL);
+	ASSERTI8(pcode_BM25_ToggleBitLongLong(I8_MAX, 63), -1LL);
 }
 #endif
 
 TEST pcode_BM26_ToggleBitInt_Main()
 {
 	extern i4 pcode_BM26_ToggleBitInt(i4 arg, i4 bit);
-	ASSERTI4(pcode_BM26_ToggleBitInt(0xFF, 1), 253); 
+	ASSERTI4(pcode_BM26_ToggleBitInt(0xFF, 1), 253);
 	ASSERTI4(pcode_BM26_ToggleBitInt(0, 1), 2);
 	ASSERTI4(pcode_BM26_ToggleBitInt(I4_MAX, 8), 2147483391);
-	ASSERTI4(pcode_BM26_ToggleBitInt(I4_MAX, 16), 2147418111);    
-	ASSERTI4(pcode_BM26_ToggleBitInt(I4_MAX, 24), 2130706431);  
-	ASSERTI4(pcode_BM26_ToggleBitInt(I4_MAX, 31), -1);  
+	ASSERTI4(pcode_BM26_ToggleBitInt(I4_MAX, 16), 2147418111);
+	ASSERTI4(pcode_BM26_ToggleBitInt(I4_MAX, 24), 2130706431);
+	ASSERTI4(pcode_BM26_ToggleBitInt(I4_MAX, 31), -1);
 }
 
 TEST pcode_BM27_ToggleBitShort_Main()
 {
 	extern i2 pcode_BM27_ToggleBitShort(i2 arg, i2 bit);
-	ASSERTI2(pcode_BM27_ToggleBitShort(0xFF, 1), 253); 
-	ASSERTI2(pcode_BM27_ToggleBitShort(0, 1), 2); 
-	ASSERTI2(pcode_BM27_ToggleBitShort(I2_MAX, 8), 32511); 
-	ASSERTI2(pcode_BM27_ToggleBitShort(I2_MAX, 15), -1); 
+	ASSERTI2(pcode_BM27_ToggleBitShort(0xFF, 1), 253);
+	ASSERTI2(pcode_BM27_ToggleBitShort(0, 1), 2);
+	ASSERTI2(pcode_BM27_ToggleBitShort(I2_MAX, 8), 32511);
+	ASSERTI2(pcode_BM27_ToggleBitShort(I2_MAX, 15), -1);
 }
 
 TEST pcode_BM28_ToggleBitChar_Main()
 {
 	extern i1 pcode_BM28_ToggleBitChar(i1 arg, u4 bit);
-	ASSERTI1(pcode_BM28_ToggleBitChar(0xFF, 1), -3); 
-	ASSERTI1(pcode_BM28_ToggleBitChar(0, 1), 2); 
-	ASSERTI1(pcode_BM28_ToggleBitChar(I1_MAX, 4), 111); 
-	ASSERTI1(pcode_BM28_ToggleBitChar(I1_MAX, 7), -1); 
+	ASSERTI1(pcode_BM28_ToggleBitChar(0xFF, 1), -3);
+	ASSERTI1(pcode_BM28_ToggleBitChar(0, 1), 2);
+	ASSERTI1(pcode_BM28_ToggleBitChar(I1_MAX, 4), 111);
+	ASSERTI1(pcode_BM28_ToggleBitChar(I1_MAX, 7), -1);
 }
 
 #ifdef HAS_LONGLONG
 TEST pcode_BM29_ToggleBitUnsignedLongLong_Main()
 {
 	extern u8 pcode_BM29_ToggleBitUnsignedLongLong(u8 arg, u4 bit);
-	ASSERTU8(pcode_BM29_ToggleBitUnsignedLongLong(0xFF, 1), 253); 
-	ASSERTU8(pcode_BM29_ToggleBitUnsignedLongLong(0, 1), 2); 
-	ASSERTU8(pcode_BM29_ToggleBitUnsignedLongLong(U8_MAX, 8), 18446744073709551359ULL); 
-	ASSERTU8(pcode_BM29_ToggleBitUnsignedLongLong(U8_MAX, 16), 18446744073709486079ULL); 
-	ASSERTU8(pcode_BM29_ToggleBitUnsignedLongLong(U8_MAX, 32), 18446744069414584319ULL); 
-	ASSERTU8(pcode_BM29_ToggleBitUnsignedLongLong(U8_MAX, 63), 9223372036854775807ULL); 
+	ASSERTU8(pcode_BM29_ToggleBitUnsignedLongLong(0xFF, 1), 253);
+	ASSERTU8(pcode_BM29_ToggleBitUnsignedLongLong(0, 1), 2);
+	ASSERTU8(pcode_BM29_ToggleBitUnsignedLongLong(U8_MAX, 8), 18446744073709551359ULL);
+	ASSERTU8(pcode_BM29_ToggleBitUnsignedLongLong(U8_MAX, 16), 18446744073709486079ULL);
+	ASSERTU8(pcode_BM29_ToggleBitUnsignedLongLong(U8_MAX, 32), 18446744069414584319ULL);
+	ASSERTU8(pcode_BM29_ToggleBitUnsignedLongLong(U8_MAX, 63), 9223372036854775807ULL);
 }
 #endif
 
 TEST pcode_BM30_ToggleBitUnsignedInt_Main()
 {
 	extern u4 pcode_BM30_ToggleBitUnsignedInt(u4 arg, u4 bit);
-	ASSERTU4(pcode_BM30_ToggleBitUnsignedInt(0xFF, 1), 253); 
-	ASSERTU4(pcode_BM30_ToggleBitUnsignedInt(0, 1), 2); 
-	ASSERTU4(pcode_BM30_ToggleBitUnsignedInt(U4_MAX, 8), 4294967039); 
-	ASSERTU4(pcode_BM30_ToggleBitUnsignedInt(U4_MAX, 16), 4294901759); 
-	ASSERTU4(pcode_BM30_ToggleBitUnsignedInt(U4_MAX, 31), 2147483647); 
+	ASSERTU4(pcode_BM30_ToggleBitUnsignedInt(0xFF, 1), 253);
+	ASSERTU4(pcode_BM30_ToggleBitUnsignedInt(0, 1), 2);
+	ASSERTU4(pcode_BM30_ToggleBitUnsignedInt(U4_MAX, 8), 4294967039);
+	ASSERTU4(pcode_BM30_ToggleBitUnsignedInt(U4_MAX, 16), 4294901759);
+	ASSERTU4(pcode_BM30_ToggleBitUnsignedInt(U4_MAX, 31), 2147483647);
 }
 
 TEST pcode_BM31_ToggleBitUnsignedShort_Main()
 {
 	extern u2 pcode_BM31_ToggleBitUnsignedShort(u2 arg, u4 bit);
-	ASSERTU2(pcode_BM31_ToggleBitUnsignedShort(0xFF, 1), 253); 
-	ASSERTU2(pcode_BM31_ToggleBitUnsignedShort(0, 1), 2); 
-	ASSERTU2(pcode_BM31_ToggleBitUnsignedShort(U2_MAX, 8), 65279); 
-	ASSERTU2(pcode_BM31_ToggleBitUnsignedShort(U2_MAX, 15), 32767); 
+	ASSERTU2(pcode_BM31_ToggleBitUnsignedShort(0xFF, 1), 253);
+	ASSERTU2(pcode_BM31_ToggleBitUnsignedShort(0, 1), 2);
+	ASSERTU2(pcode_BM31_ToggleBitUnsignedShort(U2_MAX, 8), 65279);
+	ASSERTU2(pcode_BM31_ToggleBitUnsignedShort(U2_MAX, 15), 32767);
 }
 
 TEST pcode_BM32_ToggleBitUnsignedChar_Main()
 {
 	extern u1 pcode_BM32_ToggleBitUnsignedChar(u1 arg, u1 bit);
-	ASSERTU1(pcode_BM32_ToggleBitUnsignedChar(0xFF, 1), 253); 
-	ASSERTU1(pcode_BM32_ToggleBitUnsignedChar(0, 1), 2); 
-	ASSERTU1(pcode_BM32_ToggleBitUnsignedChar(U1_MAX, 4), 239); 
-	ASSERTU1(pcode_BM32_ToggleBitUnsignedChar(U1_MAX, 7), 127); 
+	ASSERTU1(pcode_BM32_ToggleBitUnsignedChar(0xFF, 1), 253);
+	ASSERTU1(pcode_BM32_ToggleBitUnsignedChar(0, 1), 2);
+	ASSERTU1(pcode_BM32_ToggleBitUnsignedChar(U1_MAX, 4), 239);
+	ASSERTU1(pcode_BM32_ToggleBitUnsignedChar(U1_MAX, 7), 127);
 }
 
+TEST pcode_BM
+
 MAIN BitManipulation_main() { }
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BitManipulation_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BitManipulation_BODY.c
index 70030be524..be435992e0 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BitManipulation_BODY.c
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/BitManipulation_BODY.c
@@ -20,6 +20,33 @@
 #define CLR_BIT(typ, arg, bit) (arg & (~(((typ)1) << bit)))
 #define TGL_BIT(typ, arg, bit) (arg ^ (((typ)1) << bit))
 
+#if 0
+u1 is_big_endian(void)
+{
+    // Not all tests need to go into something like this, but enough
+    // use as a test to use big endian values or little
+    // this could be better supported by pcodetest in general
+    // there is a value in the the structs but not sure how to ref
+    const union {
+        u4 i;
+        u1 c[4];
+    } e = { 0x01000000 };
+
+    return e.c[0];
+}
+#endif
+#if 0
+u1 is_order_lo(void)
+{
+    // The bit order may be reading hi to lo or lo to hi
+    // return true if flipped
+    u1bits x;
+    x.z = 0x3f;
+    x.y.w2 = 1;
+    return x.z == 0x3f;
+}
+#endif
+
 #ifdef HAS_LONGLONG
 i8 pcode_BM1_GetBitLongLong(i8 arg, u4 bit)
 {
@@ -202,3 +229,118 @@ u1 pcode_BM32_ToggleBitUnsignedChar(u1 arg, u1 bit)
 {
 	return TGL_BIT(u1, arg, bit);
 }
+
+u1 pcode_u1_SumBits(u1 arg)
+{
+    u1bits a;
+    a.z = arg;
+    u1 sum =
+	a.x.b0  + a.x.b1  + a.x.b2  + a.x.b3  +
+	a.x.b4  + a.x.b5  + a.x.b6  + a.x.b7;
+    return sum;
+}
+
+u2 pcode_u2_SumBits(u2 arg)
+{
+    u2bits a;
+    a.z = arg;
+    u2 sum =
+	a.x.b0  + a.x.b1  + a.x.b2  + a.x.b3  +
+	a.x.b4  + a.x.b5  + a.x.b6  + a.x.b7  +
+	a.x.b8  + a.x.b9  + a.x.b10 + a.x.b11 +
+	a.x.b12 + a.x.b13 + a.x.b14 + a.x.b15;
+    return sum;
+}
+
+u4 pcode_u4_SumBits(u4 arg)
+{
+    u4bits a;
+    a.z = arg;
+    u4 sum =
+	a.x.b0  + a.x.b1  + a.x.b2  + a.x.b3  +
+	a.x.b4  + a.x.b5  + a.x.b6  + a.x.b7  +
+	a.x.b8  + a.x.b9  + a.x.b10 + a.x.b11 +
+	a.x.b12 + a.x.b13 + a.x.b14 + a.x.b15 +
+	a.x.b16 + a.x.b17 + a.x.b18 + a.x.b19 +
+	a.x.b20 + a.x.b21 + a.x.b22 + a.x.b23 +
+	a.x.b24 + a.x.b25 + a.x.b26 + a.x.b27 +
+	a.x.b28 + a.x.b29 + a.x.b30 + a.x.b31;
+    return sum;
+}
+
+#ifdef HAS_LONGLONG
+u8 pcode_u8_SumBits(u8 arg)
+{
+    u8bits a;
+    a.z = arg;
+    u8 sum =
+	a.x.b0  + a.x.b1  + a.x.b2  + a.x.b3  +
+	a.x.b4  + a.x.b5  + a.x.b6  + a.x.b7  +
+	a.x.b8  + a.x.b9  + a.x.b10 + a.x.b11 +
+	a.x.b12 + a.x.b13 + a.x.b14 + a.x.b15 +
+	a.x.b16 + a.x.b17 + a.x.b18 + a.x.b19 +
+	a.x.b20 + a.x.b21 + a.x.b22 + a.x.b23 +
+	a.x.b24 + a.x.b25 + a.x.b26 + a.x.b27 +
+	a.x.b28 + a.x.b29 + a.x.b30 + a.x.b31 +
+	a.x.b32 + a.x.b33 + a.x.b34 + a.x.b35 +
+	a.x.b36 + a.x.b37 + a.x.b38 + a.x.b39 +
+	a.x.b40 + a.x.b41 + a.x.b42 + a.x.b43 +
+	a.x.b44 + a.x.b45 + a.x.b46 + a.x.b47 +
+	a.x.b48 + a.x.b49 + a.x.b50 + a.x.b51 +
+	a.x.b52 + a.x.b53 + a.x.b54 + a.x.b55 +
+	a.x.b56 + a.x.b57 + a.x.b58 + a.x.b59 +
+	a.x.b60 + a.x.b61 + a.x.b62 + a.x.b63;
+    return sum;
+}
+#endif
+
+
+#define BITFIELDS(typ)				\
+    typ pcode_##typ##_SetBitsfield(typ arg)	\
+    {						\
+	typ##bits a;				\
+	a.z = 0;				\
+	a.y.w1 = arg;				\
+	return a.z;				\
+    }						\
+    typ pcode_##typ##_GetBitsfield(typ arg)	\
+    {						\
+	typ##bits a;				\
+	a.z = arg;				\
+	return a.y.w1;				\
+    }						\
+    typ pcode_##typ##_SetBitfield(typ arg)	\
+    {						\
+	typ##bits a;				\
+	a.z = 0;				\
+	a.y.w2 = arg;				\
+	return a.z;				\
+    }						\
+    typ pcode_##typ##_GetBitfield(typ arg)	\
+    {						\
+	typ##bits a;				\
+	a.z = 0;				\
+	a.z = arg;				\
+	return a.y.w2;				\
+    }						\
+    typ pcode_##typ##_SetHigh(typ arg)		\
+    {						\
+	typ##bits a;				\
+	a.z = arg;				\
+	a.y.w2 = 1;				\
+	return a.z;				\
+    }						\
+    typ pcode_##typ##_SetLow(typ arg)		\
+    {						\
+	typ##bits a;				\
+	a.z = arg;				\
+	a.y.w2 = 0;				\
+	return a.z;				\
+    }
+
+BITFIELDS(u1)
+BITFIELDS(u2)
+BITFIELDS(u4)
+#ifdef HAS_LONGLONG
+BITFIELDS(u8)
+#endif
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT.test b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT.test
new file mode 100644
index 0000000000..a7121e6fba
--- /dev/null
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT.test
@@ -0,0 +1,554 @@
+#include "pcode_test.h"
+
+TEST i1_to_i1_convert_Main()
+{
+	extern i1 i1_to_i1_convert(i1 a);
+	ASSERTI1(i1_to_i1_convert(U1_MAGIC), U1_MAGIC);
+	ASSERTI1(i1_to_i1_convert(0), 0);
+	ASSERTI1(i1_to_i1_convert(-1), -1);
+	ASSERTI1(i1_to_i1_convert(U1_55), U1_55);
+	ASSERTI1(i1_to_i1_convert(-U1_55), -U1_55);
+	ASSERTI1(i1_to_i1_convert(I1_MAX), I1_MAX);
+	ASSERTI1(i1_to_i1_convert(I1_MIN), I1_MIN);
+}
+
+TEST i2_to_i1_convert_Main()
+{
+	extern i1 i2_to_i1_convert(i2 a);
+	ASSERTI1(i2_to_i1_convert(U2_MAGIC), U1_MAGIC);
+	ASSERTI1(i2_to_i1_convert(0), 0);
+	ASSERTI1(i2_to_i1_convert(-1), -1);
+	ASSERTI1(i2_to_i1_convert(U1_55), U1_55);
+	ASSERTI1(i2_to_i1_convert(U1_AA), -U1_56);
+	ASSERTI1(i2_to_i1_convert(U2_55), U1_55);
+	ASSERTI1(i2_to_i1_convert(-U1_55), -U1_55);
+	ASSERTI1(i2_to_i1_convert(-U1_AA), U1_56);
+	ASSERTI1(i2_to_i1_convert(-U2_55), -U1_55);
+	ASSERTI1(i2_to_i1_convert(I2_MAX), -1);
+	ASSERTI1(i2_to_i1_convert(I2_MIN), 0);
+}
+
+TEST i4_to_i1_convert_Main()
+{
+	extern i1 i4_to_i1_convert(i4 a);
+	ASSERTI1(i4_to_i1_convert(U4_MAGIC), U1_MAGIC);
+	ASSERTI1(i4_to_i1_convert(0), 0);
+	ASSERTI1(i4_to_i1_convert(-1), -1);
+	ASSERTI1(i4_to_i1_convert(U1_55), U1_55);
+	ASSERTI1(i4_to_i1_convert(U1_AA), -U1_56);
+	ASSERTI1(i4_to_i1_convert(U2_55), U1_55);
+	ASSERTI1(i4_to_i1_convert(U2_AA), -U1_56);
+	ASSERTI1(i4_to_i1_convert(U4_55), U1_55);
+	ASSERTI1(i4_to_i1_convert(-U1_55), -U1_55);
+	ASSERTI1(i4_to_i1_convert(-U1_AA), U1_56);
+	ASSERTI1(i4_to_i1_convert(-U2_55), -U1_55);
+	ASSERTI1(i4_to_i1_convert(-U2_AA), U1_56);
+	ASSERTI1(i4_to_i1_convert(-U4_55), -U1_55);
+	ASSERTI1(i4_to_i1_convert(I1_MAX), I1_MAX);
+	ASSERTI1(i4_to_i1_convert(I1_MAX), I1_MAX);
+	ASSERTI1(i4_to_i1_convert(I4_MAX), -1);
+	ASSERTI1(i4_to_i1_convert(I4_MIN), 0);
+}
+
+TEST u1_to_i1_convert_Main()
+{
+	extern i1 u1_to_i1_convert(u1 a);
+	ASSERTI1(u1_to_i1_convert(U1_MAGIC), U1_MAGIC);
+	ASSERTI1(u1_to_i1_convert(0), 0);
+	ASSERTI1(u1_to_i1_convert(U1_MAX), -1);
+	ASSERTI1(u1_to_i1_convert(U1_55), U1_55);
+	ASSERTI1(u1_to_i1_convert(U1_AA), -U1_56);
+	ASSERTI1(u1_to_i1_convert(U1_MSB), I1_MIN);
+	ASSERTI1(u1_to_i1_convert(I1_MAX), I1_MAX);
+}
+
+TEST u2_to_i1_convert_Main()
+{
+	extern i1 u2_to_i1_convert(u2 a);
+	ASSERTI1(u2_to_i1_convert(U2_MAGIC), U1_MAGIC);
+	ASSERTI1(u2_to_i1_convert(0), 0);
+	ASSERTI1(u2_to_i1_convert(U1_55), U1_55);
+	ASSERTI1(u2_to_i1_convert(U1_AA), -U1_56);
+	ASSERTI1(u2_to_i1_convert(U2_55), U1_55);
+	ASSERTI1(u2_to_i1_convert(U2_AA), -U1_56);
+	ASSERTI1(u2_to_i1_convert(U2_MAX), -1);
+	ASSERTI1(u2_to_i1_convert(I2_MAX), -1);
+	ASSERTI1(u2_to_i1_convert(U2_MSB), 0);
+}
+
+TEST u4_to_i1_convert_Main()
+{
+	extern i1 u4_to_i1_convert(u4 a);
+	ASSERTI1(u4_to_i1_convert(U4_MAGIC), U1_MAGIC);
+	ASSERTI1(u4_to_i1_convert(0), 0);
+	ASSERTI1(u4_to_i1_convert(U1_55), U1_55);
+	ASSERTI1(u4_to_i1_convert(U1_AA), -U1_56);
+	ASSERTI1(u4_to_i1_convert(U2_55), U1_55);
+	ASSERTI1(u4_to_i1_convert(U2_AA), -U1_56);
+	ASSERTI1(u4_to_i1_convert(U4_55), U1_55);
+	ASSERTI1(u4_to_i1_convert(U4_AA), -U1_56);
+	ASSERTI1(u4_to_i1_convert(U4_MAX), -1);
+	ASSERTI1(u4_to_i1_convert(U1_MAX), -1);
+	ASSERTI1(u4_to_i1_convert(I4_MAX), -1);
+	ASSERTI1(u4_to_i1_convert(U4_MSB), 0);
+	ASSERTI1(u4_to_i1_convert(I1_MAX), I1_MAX);
+	ASSERTI1(u4_to_i1_convert(U1_MSB), I1_MIN);
+}
+
+TEST i1_to_i2_convert_Main()
+{
+	extern i2 i1_to_i2_convert(i1 a);
+	ASSERTI2(i1_to_i2_convert(U1_MAGIC), U1_MAGIC);
+	ASSERTI2(i1_to_i2_convert(0), 0);
+	ASSERTI2(i1_to_i2_convert(-1), -1);
+	ASSERTI2(i1_to_i2_convert(U1_55), U1_55);
+	ASSERTI2(i1_to_i2_convert(-U1_55), -U1_55);
+	ASSERTI2(i1_to_i2_convert(I1_MAX), I1_MAX);
+	ASSERTI2(i1_to_i2_convert(I1_MIN), I1_MIN);
+}
+
+TEST i2_to_i2_convert_Main()
+{
+	extern i2 i2_to_i2_convert(i2 a);
+	ASSERTI2(i2_to_i2_convert(U2_MAGIC), U2_MAGIC);
+	ASSERTI2(i2_to_i2_convert(0), 0);
+	ASSERTI2(i2_to_i2_convert(-1), -1);
+	ASSERTI2(i2_to_i2_convert(U1_55), U1_55);
+	ASSERTI2(i2_to_i2_convert(U1_AA), U1_AA);
+	ASSERTI2(i2_to_i2_convert(U2_55), U2_55);
+	ASSERTI2(i2_to_i2_convert(-U1_55), -U1_55);
+	ASSERTI2(i2_to_i2_convert(-U1_AA), -U1_AA);
+	ASSERTI2(i2_to_i2_convert(-U2_55), -U2_55);
+	ASSERTI2(i2_to_i2_convert(I2_MAX), I2_MAX);
+	ASSERTI2(i2_to_i2_convert(I2_MIN), I2_MIN);
+}
+
+TEST i4_to_i2_convert_Main()
+{
+	extern i2 i4_to_i2_convert(i4 a);
+	ASSERTI2(i4_to_i2_convert(U4_MAGIC), U2_MAGIC);
+	ASSERTI2(i4_to_i2_convert(0), 0);
+	ASSERTI2(i4_to_i2_convert(-1), -1);
+	ASSERTI2(i4_to_i2_convert(U1_55), U1_55);
+	ASSERTI2(i4_to_i2_convert(U1_AA), U1_AA);
+	ASSERTI2(i4_to_i2_convert(U2_55), U2_55);
+	ASSERTI2(i4_to_i2_convert(U2_AA), -U2_56);
+	ASSERTI2(i4_to_i2_convert(U4_55), U2_55);
+	ASSERTI2(i4_to_i2_convert(-U1_55), -U1_55);
+	ASSERTI2(i4_to_i2_convert(-U1_AA), -U1_AA);
+	ASSERTI2(i4_to_i2_convert(-U2_55), -U2_55);
+	ASSERTI2(i4_to_i2_convert(-U2_AA), U2_56);
+	ASSERTI2(i4_to_i2_convert(-U4_55), -U2_55);
+	ASSERTI2(i4_to_i2_convert(I2_MIN), I2_MIN);
+	ASSERTI2(i4_to_i2_convert(I2_MAX), I2_MAX);
+	ASSERTI2(i4_to_i2_convert(U2_MAX), -1);
+	ASSERTI2(i4_to_i2_convert(I4_MAX), -1);
+	ASSERTI2(i4_to_i2_convert(I4_MIN), 0);
+}
+
+TEST u1_to_i2_convert_Main()
+{
+	extern i2 u1_to_i2_convert(u1 a);
+	ASSERTI2(u1_to_i2_convert(U1_MAGIC), U1_MAGIC);
+	ASSERTI2(u1_to_i2_convert(0), 0);
+	ASSERTI2(u1_to_i2_convert(U1_MAX), U1_MAX);
+	ASSERTI2(u1_to_i2_convert(U1_55), U1_55);
+	ASSERTI2(u1_to_i2_convert(U1_AA), U1_AA);
+	ASSERTI2(u1_to_i2_convert(U1_MSB), U1_MSB);
+	ASSERTI2(u1_to_i2_convert(I1_MAX), I1_MAX);
+}
+
+TEST u2_to_i2_convert_Main()
+{
+	extern i2 u2_to_i2_convert(u2 a);
+	ASSERTI2(u2_to_i2_convert(U2_MAGIC), U2_MAGIC);
+	ASSERTI2(u2_to_i2_convert(0), 0);
+	ASSERTI2(u2_to_i2_convert(U1_55), U1_55);
+	ASSERTI2(u2_to_i2_convert(U1_AA), U1_AA);
+	ASSERTI2(u2_to_i2_convert(U2_55), U2_55);
+	ASSERTI2(u2_to_i2_convert(U2_AA), -U2_56);
+	ASSERTI2(u2_to_i2_convert(U2_MAX), -1);
+	ASSERTI2(u2_to_i2_convert(I2_MAX), I2_MAX);
+	ASSERTI2(u2_to_i2_convert(U2_MSB), I2_MIN);
+}
+
+TEST u4_to_i2_convert_Main()
+{
+	extern i2 u4_to_i2_convert(u4 a);
+	ASSERTI2(u4_to_i2_convert(U4_MAGIC), U2_MAGIC);
+	ASSERTI2(u4_to_i2_convert(0), 0);
+	ASSERTI2(u4_to_i2_convert(U1_55), U1_55);
+	ASSERTI2(u4_to_i2_convert(U1_AA), U1_AA);
+	ASSERTI2(u4_to_i2_convert(U2_55), U2_55);
+	ASSERTI2(u4_to_i2_convert(U2_AA), -U2_56);
+	ASSERTI2(u4_to_i2_convert(U4_55), U2_55);
+	ASSERTI2(u4_to_i2_convert(U4_AA), -U2_56);
+	ASSERTI2(u4_to_i2_convert(U4_MAX), -1);
+	ASSERTI2(u4_to_i2_convert(U2_MAX), -1);
+	ASSERTI2(u4_to_i2_convert(I4_MAX), -1);
+	ASSERTI2(u4_to_i2_convert(U4_MSB), 0);
+	ASSERTI2(u4_to_i2_convert(I2_MAX), I2_MAX);
+	ASSERTI2(u4_to_i2_convert(U2_MSB), I2_MIN);
+}
+
+TEST i1_to_i4_convert_Main()
+{
+	extern i4 i1_to_i4_convert(i1 a);
+	ASSERTI4(i1_to_i4_convert(U1_MAGIC), U1_MAGIC);
+	ASSERTI4(i1_to_i4_convert(0), 0);
+	ASSERTI4(i1_to_i4_convert(-1), -1);
+	ASSERTI4(i1_to_i4_convert(U1_55), U1_55);
+	ASSERTI4(i1_to_i4_convert(-U1_55), -U1_55);
+	ASSERTI4(i1_to_i4_convert(I1_MAX), I1_MAX);
+	ASSERTI4(i1_to_i4_convert(I1_MIN), I1_MIN);
+}
+
+TEST i2_to_i4_convert_Main()
+{
+	extern i4 i2_to_i4_convert(i2 a);
+	ASSERTI4(i2_to_i4_convert(U2_MAGIC), U2_MAGIC);
+	ASSERTI4(i2_to_i4_convert(0), 0);
+	ASSERTI4(i2_to_i4_convert(-1), -1);
+	ASSERTI4(i2_to_i4_convert(U1_55), U1_55);
+	ASSERTI4(i2_to_i4_convert(U1_AA), U1_AA);
+	ASSERTI4(i2_to_i4_convert(U2_55), U2_55);
+	ASSERTI4(i2_to_i4_convert(-U1_55), -U1_55);
+	ASSERTI4(i2_to_i4_convert(-U1_AA), -U1_AA);
+	ASSERTI4(i2_to_i4_convert(-U2_55), -U2_55);
+	ASSERTI4(i2_to_i4_convert(I2_MAX), I2_MAX);
+	ASSERTI4(i2_to_i4_convert(I2_MIN), I2_MIN);
+}
+
+TEST i4_to_i4_convert_Main()
+{
+	extern i4 i4_to_i4_convert(i4 a);
+	ASSERTI4(i4_to_i4_convert(U4_MAGIC), U4_MAGIC);
+	ASSERTI4(i4_to_i4_convert(0), 0);
+	ASSERTI4(i4_to_i4_convert(-1), -1);
+	ASSERTI4(i4_to_i4_convert(U1_55), U1_55);
+	ASSERTI4(i4_to_i4_convert(U1_AA), U1_AA);
+	ASSERTI4(i4_to_i4_convert(U2_55), U2_55);
+	ASSERTI4(i4_to_i4_convert(U2_AA), U2_AA);
+	ASSERTI4(i4_to_i4_convert(U4_55), U4_55);
+	ASSERTI4(i4_to_i4_convert(-U1_55), -U1_55);
+	ASSERTI4(i4_to_i4_convert(-U1_AA), -U1_AA);
+	ASSERTI4(i4_to_i4_convert(-U2_55), -U2_55);
+	ASSERTI4(i4_to_i4_convert(-U2_AA), -U2_AA);
+	ASSERTI4(i4_to_i4_convert(-U4_55), -U4_55);
+	ASSERTI4(i4_to_i4_convert(I4_MAX), I4_MAX);
+	ASSERTI4(i4_to_i4_convert(I4_MIN), I4_MIN);
+}
+
+TEST u1_to_i4_convert_Main()
+{
+	extern i4 u1_to_i4_convert(u1 a);
+	ASSERTI4(u1_to_i4_convert(U1_MAGIC), U1_MAGIC);
+	ASSERTI4(u1_to_i4_convert(0), 0);
+	ASSERTI4(u1_to_i4_convert(U1_MAX), U1_MAX);
+	ASSERTI4(u1_to_i4_convert(U1_55), U1_55);
+	ASSERTI4(u1_to_i4_convert(U1_AA), U1_AA);
+	ASSERTI4(u1_to_i4_convert(U1_MSB), U1_MSB);
+	ASSERTI4(u1_to_i4_convert(I1_MAX), I1_MAX);
+}
+
+TEST u2_to_i4_convert_Main()
+{
+	extern i4 u2_to_i4_convert(u2 a);
+	ASSERTI4(u2_to_i4_convert(U2_MAGIC), U2_MAGIC);
+	ASSERTI4(u2_to_i4_convert(0), 0);
+	ASSERTI4(u2_to_i4_convert(U1_55), U1_55);
+	ASSERTI4(u2_to_i4_convert(U1_AA), U1_AA);
+	ASSERTI4(u2_to_i4_convert(U2_55), U2_55);
+	ASSERTI4(u2_to_i4_convert(U2_AA), U2_AA);
+	ASSERTI4(u2_to_i4_convert(U2_MAX), U2_MAX);
+	ASSERTI4(u2_to_i4_convert(I2_MAX), I2_MAX);
+	ASSERTI4(u2_to_i4_convert(U2_MSB), U2_MSB);
+}
+
+TEST u4_to_i4_convert_Main()
+{
+	extern i4 u4_to_i4_convert(u4 a);
+	ASSERTI4(u4_to_i4_convert(U4_MAGIC), U4_MAGIC);
+	ASSERTI4(u4_to_i4_convert(0), 0);
+	ASSERTI4(u4_to_i4_convert(U1_55), U1_55);
+	ASSERTI4(u4_to_i4_convert(U1_AA), U1_AA);
+	ASSERTI4(u4_to_i4_convert(U2_55), U2_55);
+	ASSERTI4(u4_to_i4_convert(U2_AA), U2_AA);
+	ASSERTI4(u4_to_i4_convert(U4_55), U4_55);
+	ASSERTI4(u4_to_i4_convert(U4_AA), -U4_56);
+	ASSERTI4(u4_to_i4_convert(U4_MAX), -1);
+	ASSERTI4(u4_to_i4_convert(I4_MAX), I4_MAX);
+	ASSERTI4(u4_to_i4_convert(U4_MSB), I4_MIN);
+}
+
+TEST i1_to_u1_convert_Main()
+{
+	extern u1 i1_to_u1_convert(i1 a);
+	ASSERTU1(i1_to_u1_convert(0), U1_MIN);
+	ASSERTU1(i1_to_u1_convert(-1), U1_MAX);
+	ASSERTU1(i1_to_u1_convert(U1_55), U1_55);
+	ASSERTU1(i1_to_u1_convert(-U1_55), U1_AB);
+	ASSERTU1(i1_to_u1_convert(I1_MAX), I1_MAX);
+	ASSERTU1(i1_to_u1_convert(I1_MIN), U1_MSB);
+	ASSERTU1(i1_to_u1_convert(U1_MAGIC), U1_MAGIC);
+}
+
+TEST i2_to_u1_convert_Main()
+{
+	extern u1 i2_to_u1_convert(i2 a);
+	ASSERTU1(i2_to_u1_convert(0), 0);
+	ASSERTU1(i2_to_u1_convert(-1), U1_MAX);
+	ASSERTU1(i2_to_u1_convert(U1_55), U1_55);
+	ASSERTU1(i2_to_u1_convert(U1_AA), U1_AA);
+	ASSERTU1(i2_to_u1_convert(U2_55), U1_55);
+	ASSERTU1(i2_to_u1_convert(-U1_55), U1_AB);
+	ASSERTU1(i2_to_u1_convert(-U1_AA), U1_56);
+	ASSERTU1(i2_to_u1_convert(-U2_55), U1_AB);
+	ASSERTU1(i2_to_u1_convert(I2_MAX), U1_MAX);
+	ASSERTU1(i2_to_u1_convert(I2_MIN), 0);
+	ASSERTU1(i2_to_u1_convert(U2_MAGIC), U1_MAGIC);
+}
+
+TEST i4_to_u1_convert_Main()
+{
+	extern u1 i4_to_u1_convert(i4 a);
+	ASSERTU1(i4_to_u1_convert(0), 0);
+	ASSERTU1(i4_to_u1_convert(-1), U1_MAX);
+	ASSERTU1(i4_to_u1_convert(U1_55), U1_55);
+	ASSERTU1(i4_to_u1_convert(U1_AA), U1_AA);
+	ASSERTU1(i4_to_u1_convert(U2_55), U1_55);
+	ASSERTU1(i4_to_u1_convert(U2_AA), U1_AA);
+	ASSERTU1(i4_to_u1_convert(U4_55), U1_55);
+	ASSERTU1(i4_to_u1_convert(-U1_55), U1_AB);
+	ASSERTU1(i4_to_u1_convert(-U1_AA), U1_56);
+	ASSERTU1(i4_to_u1_convert(-U2_55), U1_AB);
+	ASSERTU1(i4_to_u1_convert(-U2_AA), U1_56);
+	ASSERTU1(i4_to_u1_convert(-U4_55), U1_AB);
+	ASSERTU1(i4_to_u1_convert(I4_MAX), U1_MAX);
+	ASSERTU1(i4_to_u1_convert(I4_MIN), 0);
+	ASSERTU1(i4_to_u1_convert(U4_MAGIC), U1_MAGIC);
+}
+
+TEST u1_to_u1_convert_Main()
+{
+	extern u1 u1_to_u1_convert(u1 a);
+	ASSERTU1(u1_to_u1_convert(0), 0);
+	ASSERTU1(u1_to_u1_convert(U1_55), U1_55);
+	ASSERTU1(u1_to_u1_convert(U1_AA), U1_AA);
+	ASSERTU1(u1_to_u1_convert(U1_MAX), U1_MAX);
+	ASSERTU1(u1_to_u1_convert(I1_MAX), I1_MAX);
+	ASSERTU1(u1_to_u1_convert(U1_MSB), U1_MSB);
+	ASSERTU1(u1_to_u1_convert(U1_MAGIC), U1_MAGIC);
+}
+
+TEST u2_to_u1_convert_Main()
+{
+	extern u1 u2_to_u1_convert(u2 a);
+	ASSERTU1(u2_to_u1_convert(0), 0);
+	ASSERTU1(u2_to_u1_convert(U1_55), U1_55);
+	ASSERTU1(u2_to_u1_convert(U1_AA), U1_AA);
+	ASSERTU1(u2_to_u1_convert(U2_55), U1_55);
+	ASSERTU1(u2_to_u1_convert(U2_AA), U1_AA);
+	ASSERTU1(u2_to_u1_convert(U2_MAX), U1_MAX);
+	ASSERTU1(u2_to_u1_convert(I2_MAX), U1_MAX);
+	ASSERTU1(u2_to_u1_convert(U2_MSB), 0);
+	ASSERTU1(u2_to_u1_convert(U2_MAGIC), U1_MAGIC);
+}
+
+TEST u4_to_u1_convert_Main()
+{
+	extern u1 u4_to_u1_convert(u4 a);
+	ASSERTU1(u4_to_u1_convert(0), 0);
+	ASSERTU1(u4_to_u1_convert(U1_55), U1_55);
+	ASSERTU1(u4_to_u1_convert(U1_AA), U1_AA);
+	ASSERTU1(u4_to_u1_convert(U2_55), U1_55);
+	ASSERTU1(u4_to_u1_convert(U2_AA), U1_AA);
+	ASSERTU1(u4_to_u1_convert(U4_55), U1_55);
+	ASSERTU1(u4_to_u1_convert(U4_AA), U1_AA);
+	ASSERTU1(u4_to_u1_convert(U4_MAX), U1_MAX);
+	ASSERTU1(u4_to_u1_convert(I4_MAX), U1_MAX);
+	ASSERTU1(u4_to_u1_convert(U4_MSB), 0);
+	ASSERTU1(u4_to_u1_convert(U4_MAGIC), U1_MAGIC);
+}
+
+TEST i1_to_u2_convert_Main()
+{
+	extern u2 i1_to_u2_convert(i1 a);
+	ASSERTU2(i1_to_u2_convert(0), U2_MIN);
+	ASSERTU2(i1_to_u2_convert(-1), U2_MAX);
+	ASSERTU2(i1_to_u2_convert(U1_55), U1_55);
+	ASSERTU2(i1_to_u2_convert(-U1_55), U21_AB);
+	ASSERTU2(i1_to_u2_convert(I1_MAX), I1_MAX);
+	ASSERTU2(i1_to_u2_convert(I1_MIN), U21_MSB);
+	ASSERTU2(i1_to_u2_convert(U1_MAGIC), U1_MAGIC);
+}
+
+TEST i2_to_u2_convert_Main()
+{
+	extern u2 i2_to_u2_convert(i2 a);
+	ASSERTU2(i2_to_u2_convert(0), 0);
+	ASSERTU2(i2_to_u2_convert(-1), U2_MAX);
+	ASSERTU2(i2_to_u2_convert(U1_55), U1_55);
+	ASSERTU2(i2_to_u2_convert(U1_AA), U1_AA);
+	ASSERTU2(i2_to_u2_convert(U2_55), U2_55);
+	ASSERTU2(i2_to_u2_convert(-U1_55), U21_AB);
+	ASSERTU2(i2_to_u2_convert(-U1_AA), U21_56);
+	ASSERTU2(i2_to_u2_convert(-U2_55), U2_AB);
+	ASSERTU2(i2_to_u2_convert(I2_MAX), I2_MAX);
+	ASSERTU2(i2_to_u2_convert(I2_MIN), U2_MSB);
+	ASSERTU2(i2_to_u2_convert(U2_MAGIC), U2_MAGIC);
+}
+
+TEST i4_to_u2_convert_Main()
+{
+	extern u2 i4_to_u2_convert(i4 a);
+	ASSERTU2(i4_to_u2_convert(0), 0);
+	ASSERTU2(i4_to_u2_convert(-1), U2_MAX);
+	ASSERTU2(i4_to_u2_convert(U1_55), U1_55);
+	ASSERTU2(i4_to_u2_convert(U1_AA), U1_AA);
+	ASSERTU2(i4_to_u2_convert(U2_55), U2_55);
+	ASSERTU2(i4_to_u2_convert(U2_AA), U2_AA);
+	ASSERTU2(i4_to_u2_convert(U4_55), U2_55);
+	ASSERTU2(i4_to_u2_convert(-U1_55), U21_AB);
+	ASSERTU2(i4_to_u2_convert(-U1_AA), U21_56);
+	ASSERTU2(i4_to_u2_convert(-U2_55), U2_AB);
+	ASSERTU2(i4_to_u2_convert(-U2_AA), U2_56);
+	ASSERTU2(i4_to_u2_convert(-U4_55), U2_AB);
+	ASSERTU2(i4_to_u2_convert(I4_MAX), U2_MAX);
+	ASSERTU2(i4_to_u2_convert(I4_MIN), 0);
+	ASSERTU2(i4_to_u2_convert(U4_MAGIC), U2_MAGIC);
+}
+
+TEST u1_to_u2_convert_Main()
+{
+	extern u2 u1_to_u2_convert(u1 a);
+	ASSERTU2(u1_to_u2_convert(0), 0);
+	ASSERTU2(u1_to_u2_convert(U1_55), U1_55);
+	ASSERTU2(u1_to_u2_convert(U1_AA), U1_AA);
+	ASSERTU2(u1_to_u2_convert(U1_MAX), U1_MAX);
+	ASSERTU2(u1_to_u2_convert(I1_MAX), I1_MAX);
+	ASSERTU2(u1_to_u2_convert(U1_MSB), U1_MSB);
+	ASSERTU2(u1_to_u2_convert(U1_MAGIC), U1_MAGIC);
+}
+
+TEST u2_to_u2_convert_Main()
+{
+	extern u2 u2_to_u2_convert(u2 a);
+	ASSERTU2(u2_to_u2_convert(0), 0);
+	ASSERTU2(u2_to_u2_convert(U1_55), U1_55);
+	ASSERTU2(u2_to_u2_convert(U1_AA), U1_AA);
+	ASSERTU2(u2_to_u2_convert(U2_55), U2_55);
+	ASSERTU2(u2_to_u2_convert(U2_AA), U2_AA);
+	ASSERTU2(u2_to_u2_convert(U2_MAX), U2_MAX);
+	ASSERTU2(u2_to_u2_convert(U2_MSB), U2_MSB);
+	ASSERTU2(u2_to_u2_convert(I2_MAX), I2_MAX);
+	ASSERTU2(u2_to_u2_convert(U2_MAGIC), U2_MAGIC);
+}
+
+TEST u4_to_u2_convert_Main()
+{
+	extern u2 u4_to_u2_convert(u4 a);
+	ASSERTU2(u4_to_u2_convert(0), 0);
+	ASSERTU2(u4_to_u2_convert(U1_55), U1_55);
+	ASSERTU2(u4_to_u2_convert(U1_AA), U1_AA);
+	ASSERTU2(u4_to_u2_convert(U2_55), U2_55);
+	ASSERTU2(u4_to_u2_convert(U2_AA), U2_AA);
+	ASSERTU2(u4_to_u2_convert(U4_55), U2_55);
+	ASSERTU2(u4_to_u2_convert(U4_AA), U2_AA);
+	ASSERTU2(u4_to_u2_convert(U4_MAX), U2_MAX);
+	ASSERTU2(u4_to_u2_convert(I4_MAX), U2_MAX);
+	ASSERTU2(u4_to_u2_convert(U4_MSB), 0);
+	ASSERTU2(u4_to_u2_convert(U4_MAGIC), U2_MAGIC);
+}
+
+TEST i1_to_u4_convert_Main()
+{
+	extern u4 i1_to_u4_convert(i1 a);
+	ASSERTU4(i1_to_u4_convert(0), U4_MIN);
+	ASSERTU4(i1_to_u4_convert(-1), U4_MAX);
+	ASSERTU4(i1_to_u4_convert(U1_55), U1_55);
+	ASSERTU4(i1_to_u4_convert(-U1_55), U41_AB);
+	ASSERTU4(i1_to_u4_convert(I1_MAX), I1_MAX);
+	ASSERTU4(i1_to_u4_convert(I1_MIN), U41_MSB);
+	ASSERTU4(i1_to_u4_convert(U1_MAGIC), U1_MAGIC);
+}
+
+TEST i2_to_u4_convert_Main()
+{
+	extern u4 i2_to_u4_convert(i2 a);
+	ASSERTU4(i2_to_u4_convert(0), 0);
+	ASSERTU4(i2_to_u4_convert(-1), U4_MAX);
+	ASSERTU4(i2_to_u4_convert(U1_55), U1_55);
+	ASSERTU4(i2_to_u4_convert(U1_AA), U1_AA);
+	ASSERTU4(i2_to_u4_convert(U2_55), U2_55);
+	ASSERTU4(i2_to_u4_convert(-U1_55), U41_AB);
+	ASSERTU4(i2_to_u4_convert(-U1_AA), U41_56);
+	ASSERTU4(i2_to_u4_convert(-U2_55), U42_AB);
+	ASSERTU4(i2_to_u4_convert(I2_MAX), I2_MAX);
+	ASSERTU4(i2_to_u4_convert(I2_MIN), U42_MSB);
+	ASSERTU4(i2_to_u4_convert(U2_MAGIC), U2_MAGIC);
+}
+
+TEST i4_to_u4_convert_Main()
+{
+	extern u4 i4_to_u4_convert(i4 a);
+	ASSERTU4(i4_to_u4_convert(0), 0);
+	ASSERTU4(i4_to_u4_convert(-1), U4_MAX);
+	ASSERTU4(i4_to_u4_convert(U1_55), U1_55);
+	ASSERTU4(i4_to_u4_convert(U1_AA), U1_AA);
+	ASSERTU4(i4_to_u4_convert(U2_55), U2_55);
+	ASSERTU4(i4_to_u4_convert(U2_AA), U2_AA);
+	ASSERTU4(i4_to_u4_convert(U4_55), U4_55);
+	ASSERTU4(i4_to_u4_convert(-U1_55), U41_AB);
+	ASSERTU4(i4_to_u4_convert(-U1_AA), U41_56);
+	ASSERTU4(i4_to_u4_convert(-U2_55), U42_AB);
+	ASSERTU4(i4_to_u4_convert(-U2_AA), U42_56);
+	ASSERTU4(i4_to_u4_convert(-U4_55), U4_AB);
+	ASSERTU4(i4_to_u4_convert(I4_MAX), I4_MAX);
+	ASSERTU4(i4_to_u4_convert(I4_MIN), U4_MSB);
+	ASSERTU4(i4_to_u4_convert(U4_MAGIC), U4_MAGIC);
+}
+
+TEST u1_to_u4_convert_Main()
+{
+	extern u4 u1_to_u4_convert(u1 a);
+	ASSERTU4(u1_to_u4_convert(0), 0);
+	ASSERTU4(u1_to_u4_convert(U1_55), U1_55);
+	ASSERTU4(u1_to_u4_convert(U1_AA), U1_AA);
+	ASSERTU4(u1_to_u4_convert(U1_MAX), U1_MAX);
+	ASSERTU4(u1_to_u4_convert(I1_MAX), I1_MAX);
+	ASSERTU4(u1_to_u4_convert(U1_MSB), U1_MSB);
+	ASSERTU4(u1_to_u4_convert(U1_MAGIC), U1_MAGIC);
+}
+
+TEST u2_to_u4_convert_Main()
+{
+	extern u4 u2_to_u4_convert(u2 a);
+	ASSERTU4(u2_to_u4_convert(0), 0);
+	ASSERTU4(u2_to_u4_convert(U1_55), U1_55);
+	ASSERTU4(u2_to_u4_convert(U1_AA), U1_AA);
+	ASSERTU4(u2_to_u4_convert(U2_55), U2_55);
+	ASSERTU4(u2_to_u4_convert(U2_AA), U2_AA);
+	ASSERTU4(u2_to_u4_convert(U2_MAX), U2_MAX);
+	ASSERTU4(u2_to_u4_convert(U2_MSB), U2_MSB);
+	ASSERTU4(u2_to_u4_convert(I2_MAX), I2_MAX);
+	ASSERTU4(u2_to_u4_convert(U2_MAGIC), U2_MAGIC);
+}
+
+TEST u4_to_u4_convert_Main()
+{
+	extern u4 u4_to_u4_convert(u4 a);
+	ASSERTU4(u4_to_u4_convert(0), 0);
+	ASSERTU4(u4_to_u4_convert(U1_55), U1_55);
+	ASSERTU4(u4_to_u4_convert(U1_AA), U1_AA);
+	ASSERTU4(u4_to_u4_convert(U2_55), U2_55);
+	ASSERTU4(u4_to_u4_convert(U2_AA), U2_AA);
+	ASSERTU4(u4_to_u4_convert(U4_55), U4_55);
+	ASSERTU4(u4_to_u4_convert(U4_AA), U4_AA);
+	ASSERTU4(u4_to_u4_convert(U4_MAX), U4_MAX);
+	ASSERTU4(u4_to_u4_convert(U4_MSB), U4_MSB);
+	ASSERTU4(u4_to_u4_convert(I4_MAX), I4_MAX);
+	ASSERTU4(u4_to_u4_convert(U4_MAGIC), U4_MAGIC);
+}
+
+MAIN CONVERT_main() { }
\ No newline at end of file
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_BODY.c
new file mode 100644
index 0000000000..e4fa8091d4
--- /dev/null
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_BODY.c
@@ -0,0 +1,154 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include "pcode_test.h"
+
+
+PCODE_CONVERT(i1, i1)
+PCODE_CONVERT(i1, i2)
+PCODE_CONVERT(i1, i4)
+PCODE_CONVERT(i1, u1)
+PCODE_CONVERT(i1, u2)
+PCODE_CONVERT(i1, u4)
+
+PCODE_CONVERT(i2, i1)
+PCODE_CONVERT(i2, i2)
+PCODE_CONVERT(i2, i4)
+PCODE_CONVERT(i2, u1)
+PCODE_CONVERT(i2, u2)
+PCODE_CONVERT(i2, u4)
+
+PCODE_CONVERT(i4, i1)
+PCODE_CONVERT(i4, i2)
+PCODE_CONVERT(i4, i4)
+PCODE_CONVERT(i4, u1)
+PCODE_CONVERT(i4, u2)
+PCODE_CONVERT(i4, u4)
+
+PCODE_CONVERT(u1, i1)
+PCODE_CONVERT(u1, i2)
+PCODE_CONVERT(u1, i4)
+PCODE_CONVERT(u1, u1)
+PCODE_CONVERT(u1, u2)
+PCODE_CONVERT(u1, u4)
+
+PCODE_CONVERT(u2, i1)
+PCODE_CONVERT(u2, i2)
+PCODE_CONVERT(u2, i4)
+PCODE_CONVERT(u2, u1)
+PCODE_CONVERT(u2, u2)
+PCODE_CONVERT(u2, u4)
+
+PCODE_CONVERT(u4, i1)
+PCODE_CONVERT(u4, i2)
+PCODE_CONVERT(u4, i4)
+PCODE_CONVERT(u4, u1)
+PCODE_CONVERT(u4, u2)
+PCODE_CONVERT(u4, u4)
+
+#if defined(HAS_LONGLONG)
+
+PCODE_CONVERT(i8, i1)
+PCODE_CONVERT(i8, i2)
+PCODE_CONVERT(i8, i4)
+PCODE_CONVERT(i8, i8)
+PCODE_CONVERT(i8, u1)
+PCODE_CONVERT(i8, u2)
+PCODE_CONVERT(i8, u4)
+PCODE_CONVERT(i8, u8)
+
+PCODE_CONVERT(u8, i1)
+PCODE_CONVERT(u8, i2)
+PCODE_CONVERT(u8, i4)
+PCODE_CONVERT(u8, i8)
+PCODE_CONVERT(u8, u1)
+PCODE_CONVERT(u8, u2)
+PCODE_CONVERT(u8, u4)
+PCODE_CONVERT(u8, u8)
+
+PCODE_CONVERT(i1, i8)
+PCODE_CONVERT(i2, i8)
+PCODE_CONVERT(i4, i8)
+PCODE_CONVERT(u1, i8)
+PCODE_CONVERT(u2, i8)
+PCODE_CONVERT(u4, i8)
+
+PCODE_CONVERT(i1, u8)
+PCODE_CONVERT(i2, u8)
+PCODE_CONVERT(i4, u8)
+PCODE_CONVERT(u1, u8)
+PCODE_CONVERT(u2, u8)
+PCODE_CONVERT(u4, u8)
+
+#endif // HAS_LONGLONG
+
+
+#if defined(HAS_FLOAT)
+
+PCODE_CONVERT_FLOAT(f4, i1)
+PCODE_CONVERT_FLOAT(f4, i2)
+PCODE_CONVERT_FLOAT(f4, i4)
+PCODE_CONVERT_FLOAT(f4, f4)
+PCODE_CONVERT_FLOAT(f4, u1)
+PCODE_CONVERT_FLOAT(f4, u2)
+PCODE_CONVERT_FLOAT(f4, u4)
+
+PCODE_CONVERT_FLOAT(i1, f4)
+PCODE_CONVERT_FLOAT(i2, f4)
+PCODE_CONVERT_FLOAT(i4, f4)
+PCODE_CONVERT_FLOAT(u1, f4)
+PCODE_CONVERT_FLOAT(u2, f4)
+PCODE_CONVERT_FLOAT(u4, f4)
+
+#if defined(HAS_LONGLONG)
+PCODE_CONVERT_FLOAT(f4, u8)
+PCODE_CONVERT_FLOAT(f4, i8)
+PCODE_CONVERT_FLOAT(u8, f4)
+PCODE_CONVERT_FLOAT(i8, f4)
+#endif // HAS_LONGLONG
+
+#endif // HAS_FLOAT
+
+
+#if defined(HAS_DOUBLE)
+
+PCODE_CONVERT_FLOAT(f8, i1)
+PCODE_CONVERT_FLOAT(f8, i2)
+PCODE_CONVERT_FLOAT(f8, i4)
+PCODE_CONVERT_FLOAT(f8, f8)
+PCODE_CONVERT_FLOAT(f8, u1)
+PCODE_CONVERT_FLOAT(f8, u2)
+PCODE_CONVERT_FLOAT(f8, u4)
+
+PCODE_CONVERT_FLOAT(i1, f8)
+PCODE_CONVERT_FLOAT(i2, f8)
+PCODE_CONVERT_FLOAT(i4, f8)
+PCODE_CONVERT_FLOAT(u1, f8)
+PCODE_CONVERT_FLOAT(u2, f8)
+PCODE_CONVERT_FLOAT(u4, f8)
+
+#if defined(HAS_FLOAT)
+PCODE_CONVERT_FLOAT(f8, f4)
+PCODE_CONVERT_FLOAT(f4, f8)
+#endif // HAS_FLOAT
+
+#if defined(HAS_LONGLONG)
+PCODE_CONVERT_FLOAT(f8, u8)
+PCODE_CONVERT_FLOAT(f8, i8)
+PCODE_CONVERT_FLOAT(u8, f8)
+PCODE_CONVERT_FLOAT(i8, f8)
+#endif // HAS_LONGLONG
+
+#endif // HAS_DOUBLE
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_DOUBLE.test b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_DOUBLE.test
new file mode 100644
index 0000000000..1c4035f386
--- /dev/null
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_DOUBLE.test
@@ -0,0 +1,438 @@
+#if defined(HAS_DOUBLE)
+
+// Some of these values are just inconsistent in general
+// printing (char) and (unsigned char) of {FLT,DBL}_{MAX,MIN}
+// $ ./a.out
+// 0, 0, 0, 0
+// 0, 0, 0, 0
+// qemu-ppc ./a.out
+// 0, 0, 0, 0
+// 0, 0, 0, 0
+// $ qemu-riscv64 ./a.out
+// 255, 0, 255, 0
+// 255, 0, 255, 0
+// $ qemu-mips ./a.out
+// -1, 0, -1, 0
+// 255, 0, 255, 0
+
+
+#include "pcode_test.h"
+
+TEST f8_to_f8_convert_Main()
+{
+	extern f8 f8_to_f8_convert(f8 a);
+	ASSERTF8(f8_to_f8_convert((f8)0), (f8)0);
+	ASSERTF8(f8_to_f8_convert(-(f8)0), -(f8)0);
+	ASSERTF8(f8_to_f8_convert((f8)U8_MAGIC), (f8)U8_MAGIC);
+	ASSERTF8(f8_to_f8_convert((f8)U8_55), (f8)U8_55);
+	ASSERTF8(f8_to_f8_convert((f8)FLT_MAX), (f8)FLT_MAX);
+	ASSERTF8(f8_to_f8_convert((f8)FLT_MIN), (f8)FLT_MIN);
+	ASSERTF8(f8_to_f8_convert((f8)DBL_MAX), (f8)DBL_MAX);
+	ASSERTF8(f8_to_f8_convert((f8)DBL_MAX), (f8)DBL_MAX);
+	ASSERTF8(f8_to_f8_convert((f8)PI_SHORT), (f8)PI_SHORT);
+	ASSERTF8(f8_to_f8_convert((f8)M_PI), (f8)M_PI);
+	ASSERTF8(f8_to_f8_convert((f8)M_PIl), (f8)M_PIl);
+	ASSERTF8(f8_to_f8_convert((f8)-FLT_MAX), (f8)-FLT_MAX);
+	ASSERTF8(f8_to_f8_convert((f8)-FLT_MIN), (f8)-FLT_MIN);
+	ASSERTF8(f8_to_f8_convert((f8)-DBL_MAX), (f8)-DBL_MAX);
+	ASSERTF8(f8_to_f8_convert((f8)-DBL_MAX), (f8)-DBL_MAX);
+	ASSERTF8(f8_to_f8_convert((f8)-PI_SHORT), (f8)-PI_SHORT);
+	ASSERTF8(f8_to_f8_convert((f8)-M_PI), (f8)-M_PI);
+	ASSERTF8(f8_to_f8_convert((f8)-M_PIl), (f8)-M_PIl);
+}
+
+TEST i1_to_f8_convert_Main()
+{
+	extern f8 i1_to_f8_convert(i1 a);
+	ASSERTF8(i1_to_f8_convert(0), (i1)0);
+	ASSERTF8(i1_to_f8_convert(U1_MAGIC), (f8)U1_MAGIC);
+	ASSERTF8(i1_to_f8_convert(U1_55), (f8)U1_55);
+	ASSERTF8(i1_to_f8_convert(-U1_56), (f8)-U1_56);
+	ASSERTF8(i1_to_f8_convert(I1_MIN), (f8)I1_MIN);
+	ASSERTF8(i1_to_f8_convert(I1_MAX), (f8)I1_MAX);
+	ASSERTF8(i1_to_f8_convert(-1), (f8)-1);
+}
+
+TEST i2_to_f8_convert_Main()
+{
+	extern f8 i2_to_f8_convert(i2 a);
+	ASSERTF8(i2_to_f8_convert(0), (i2)0);
+	ASSERTF8(i2_to_f8_convert(U2_MAGIC), (f8)U2_MAGIC);
+	ASSERTF8(i2_to_f8_convert(U2_55), (f8)U2_55);
+	ASSERTF8(i2_to_f8_convert(-U2_56), (f8)-U2_56);
+	ASSERTF8(i2_to_f8_convert(I2_MIN), (f8)I2_MIN);
+	ASSERTF8(i2_to_f8_convert(I2_MAX), (f8)I2_MAX);
+	ASSERTF8(i2_to_f8_convert(-1), (f8)-1);
+}
+
+TEST i4_to_f8_convert_Main()
+{
+	extern f8 i4_to_f8_convert(i4 a);
+	ASSERTF8(i4_to_f8_convert(0), (i4)0);
+	ASSERTF8(i4_to_f8_convert(U4_MAGIC), (f8)U4_MAGIC);
+	ASSERTF8(i4_to_f8_convert(U4_55), (f8)U4_55);
+	ASSERTF8(i4_to_f8_convert(-U4_56), (f8)-U4_56);
+	ASSERTF8(i4_to_f8_convert(I4_MIN), (f8)I4_MIN);
+	ASSERTF8(i4_to_f8_convert(I4_MAX), (f8)I4_MAX);
+	ASSERTF8(i4_to_f8_convert(-1), (f8)-1);
+}
+
+TEST u1_to_f8_convert_Main()
+{
+	extern f8 u1_to_f8_convert(u1 a);
+	ASSERTF8(u1_to_f8_convert(0), (u1)0);
+	ASSERTF8(u1_to_f8_convert(U1_MAGIC), (f8)U1_MAGIC);
+	ASSERTF8(u1_to_f8_convert(U1_55), (f8)U1_55);
+	ASSERTF8(u1_to_f8_convert(U1_AA), (f8)U1_AA);
+	ASSERTF8(u1_to_f8_convert(U1_MSB), (f8)U1_MSB);
+	ASSERTF8(u1_to_f8_convert(U1_MAX), (f8)U1_MAX);
+}
+
+TEST u2_to_f8_convert_Main()
+{
+	extern f8 u2_to_f8_convert(u2 a);
+	ASSERTF8(u2_to_f8_convert(0), (u2)0);
+	ASSERTF8(u2_to_f8_convert(U2_MAGIC), (f8)U2_MAGIC);
+	ASSERTF8(u2_to_f8_convert(U2_55), (f8)U2_55);
+	ASSERTF8(u2_to_f8_convert(U2_AA), (f8)U2_AA);
+	ASSERTF8(u2_to_f8_convert(U2_MSB), (f8)U2_MSB);
+	ASSERTF8(u2_to_f8_convert(U2_MAX), (f8)U2_MAX);
+}
+
+TEST u4_to_f8_convert_Main()
+{
+	extern f8 u4_to_f8_convert(u4 a);
+	ASSERTF8(u4_to_f8_convert(0), (u4)0);
+	ASSERTF8(u4_to_f8_convert(U4_MAGIC), (f8)U4_MAGIC);
+	ASSERTF8(u4_to_f8_convert(U4_55), (f8)U4_55);
+	ASSERTF8(u4_to_f8_convert(U4_AA), (f8)U4_AA);
+	ASSERTF8(u4_to_f8_convert(U4_MSB), (f8)U4_MSB);
+	ASSERTF8(u4_to_f8_convert(U4_MAX), (f8)U4_MAX);
+}
+
+TEST f8_to_i1_convert_Main()
+{
+	extern i1 f8_to_i1_convert(f8 a);
+	ASSERTI1(f8_to_i1_convert((f8)0), 0);
+	ASSERTI1(f8_to_i1_convert(-(f8)0), 0);
+	ASSERTI1(f8_to_i1_convert((f8)0), 0);
+	ASSERTI1(f8_to_i1_convert(-(f8)0), 0);
+	ASSERTI1(f8_to_i1_convert((f8)-1), -1);
+	ASSERTI1(f8_to_i1_convert((f8)I1_MIN), I1_MIN);
+	ASSERTI1(f8_to_i1_convert((f8)I1_MAX), I1_MAX);
+	ASSERTI1(f8_to_i1_convert((f8)U1_55), U1_55);
+	ASSERTI1(f8_to_i1_convert((f8)U1_AA), -U1_56);
+	ASSERTI1(f8_to_i1_convert((f8)-U1_55), -U1_55);
+	ASSERTI1(f8_to_i1_convert((f8)-U1_AA), U1_56);
+	ASSERTI1(f8_to_i1_convert((f8)PI_SHORT), 3);
+	ASSERTI1(f8_to_i1_convert((f8)-PI_SHORT), -3);
+	ASSERTI1(f8_to_i1_convert((f8)M_PI), 3);
+	ASSERTI1(f8_to_i1_convert((f8)-M_PI), -3);
+	ASSERTI1(f8_to_i1_convert((f8)M_PIl), 3);
+	ASSERTI1(f8_to_i1_convert((f8)-M_PIl), -3);
+	//ASSERTI1(f8_to_i1_convert((f8)FLT_MAX), 0);
+	ASSERTI1(f8_to_i1_convert((f8)-FLT_MAX), 0);
+	ASSERTI1(f8_to_i1_convert((f8)FLT_MIN), 0);
+	ASSERTI1(f8_to_i1_convert((f8)-FLT_MIN), 0);
+	//ASSERTI1(f8_to_i1_convert((f8)DBL_MAX), 0);
+	ASSERTI1(f8_to_i1_convert((f8)-DBL_MAX), 0);
+	ASSERTI1(f8_to_i1_convert((f8)DBL_MIN), 0);
+	ASSERTI1(f8_to_i1_convert((f8)-DBL_MIN), 0);
+	ASSERTI1(f8_to_i1_convert((f8)U1_MAX), -1);
+}
+
+TEST f8_to_i2_convert_Main()
+{
+	extern i2 f8_to_i2_convert(f8 a);
+	ASSERTI2(f8_to_i2_convert((f8)0), 0);
+	ASSERTI2(f8_to_i2_convert(-(f8)0), 0);
+	ASSERTI2(f8_to_i2_convert((f8)0), 0);
+	ASSERTI2(f8_to_i2_convert(-(f8)0), 0);
+	ASSERTI2(f8_to_i2_convert((f8)-1), -1);
+	ASSERTI2(f8_to_i2_convert((f8)I2_MIN), I2_MIN);
+	ASSERTI2(f8_to_i2_convert((f8)I2_MAX), I2_MAX);
+	ASSERTI2(f8_to_i2_convert((f8)U2_55), U2_55);
+	ASSERTI2(f8_to_i2_convert((f8)U2_AA), -U2_56);
+	ASSERTI2(f8_to_i2_convert((f8)-U1_55), -U1_55);
+	ASSERTI2(f8_to_i2_convert((f8)-U1_AA), -U1_AA);
+	ASSERTI2(f8_to_i2_convert((f8)-U2_55), -U2_55);
+	ASSERTI2(f8_to_i2_convert((f8)-U2_AA), U2_56);
+	ASSERTI2(f8_to_i2_convert((f8)PI_SHORT), 3);
+	ASSERTI2(f8_to_i2_convert((f8)-PI_SHORT), -3);
+	ASSERTI2(f8_to_i2_convert((f8)M_PI), 3);
+	ASSERTI2(f8_to_i2_convert((f8)-M_PI), -3);
+	ASSERTI2(f8_to_i2_convert((f8)M_PIl), 3);
+	ASSERTI2(f8_to_i2_convert((f8)-M_PIl), -3);
+	//ASSERTI2(f8_to_i2_convert((f8)FLT_MAX), 0);
+	ASSERTI2(f8_to_i2_convert((f8)-FLT_MAX), 0);
+	ASSERTI2(f8_to_i2_convert((f8)FLT_MIN), 0);
+	ASSERTI2(f8_to_i2_convert((f8)-FLT_MIN), 0);
+	//ASSERTI2(f8_to_i2_convert((f8)DBL_MAX), 0);
+	ASSERTI2(f8_to_i2_convert((f8)-DBL_MAX), 0);
+	ASSERTI2(f8_to_i2_convert((f8)DBL_MIN), 0);
+	ASSERTI2(f8_to_i2_convert((f8)-DBL_MIN), 0);
+	ASSERTI2(f8_to_i2_convert((f8)U2_MAX), -1);
+}
+
+TEST f8_to_i4_convert_Main()
+{
+	extern i4 f8_to_i4_convert(f8 a);
+	ASSERTI4(f8_to_i4_convert((f8)0), 0);
+	ASSERTI4(f8_to_i4_convert(-(f8)0), 0);
+	ASSERTI4(f8_to_i4_convert((f8)0), 0);
+	ASSERTI4(f8_to_i4_convert(-(f8)0), 0);
+	ASSERTI4(f8_to_i4_convert((f8)-1), -1);
+	ASSERTI4(f8_to_i4_convert((f8)I4_MIN), I4_MIN);
+	ASSERTI4(f8_to_i4_convert((f8)I4_MAX), I4_MAX);
+	ASSERTI4(f8_to_i4_convert((f8)U4_55), U4_55);
+	//ASSERTI4(f8_to_i4_convert((f8)U4_AA), I4_MIN);
+	ASSERTI4(f8_to_i4_convert((f8)-U1_55), -U1_55);
+	ASSERTI4(f8_to_i4_convert((f8)-U1_AA), -U1_AA);
+	ASSERTI4(f8_to_i4_convert((f8)-U2_55), -U2_55);
+	ASSERTI4(f8_to_i4_convert((f8)-U2_AA), -U2_AA);
+	ASSERTI4(f8_to_i4_convert((f8)-U4_55), -U4_55);
+	ASSERTI4(f8_to_i4_convert((f8)PI_SHORT), 3);
+	ASSERTI4(f8_to_i4_convert((f8)-PI_SHORT), -3);
+	ASSERTI4(f8_to_i4_convert((f8)M_PI), 3);
+	ASSERTI4(f8_to_i4_convert((f8)-M_PI), -3);
+	ASSERTI4(f8_to_i4_convert((f8)M_PIl), 3);
+	ASSERTI4(f8_to_i4_convert((f8)-M_PIl), -3);
+	//ASSERTI4(f8_to_i4_convert((f8)FLT_MAX), I4_MIN);
+	//ASSERTI4(f8_to_i4_convert((f8)-FLT_MAX), I4_MIN);
+	ASSERTI4(f8_to_i4_convert((f8)FLT_MIN), 0);
+	ASSERTI4(f8_to_i4_convert((f8)-FLT_MIN), 0);
+	//ASSERTI4(f8_to_i4_convert((f8)DBL_MAX), I4_MIN);
+	//ASSERTI4(f8_to_i4_convert((f8)-DBL_MAX), I4_MIN);
+	ASSERTI4(f8_to_i4_convert((f8)DBL_MIN), 0);
+	ASSERTI4(f8_to_i4_convert((f8)-DBL_MIN), 0);
+	//ASSERTI4(f8_to_i4_convert((f8)U4_MAX), I4_MIN);
+}
+
+TEST f8_to_u1_convert_Main()
+{
+	extern u1 f8_to_u1_convert(f8 a);
+	ASSERTU1(f8_to_u1_convert(0), 0);
+	ASSERTU1(f8_to_u1_convert((f8)0), 0);
+	ASSERTU1(f8_to_u1_convert(-(f8)0), 0);
+	ASSERTU1(f8_to_u1_convert((f8)-1), U1_MAX);
+	ASSERTU1(f8_to_u1_convert((f8)I1_MIN), U1_MSB);
+	ASSERTU1(f8_to_u1_convert((f8)I1_MAX), I1_MAX);
+	ASSERTU1(f8_to_u1_convert((f8)U1_55), U1_55);
+	ASSERTU1(f8_to_u1_convert((f8)U1_AA), U1_AA);
+	ASSERTU1(f8_to_u1_convert((f8)-U1_55), U1_AB);
+	ASSERTU1(f8_to_u1_convert((f8)-U1_AA), U1_56);
+	ASSERTU1(f8_to_u1_convert((f8)PI_SHORT), 3);
+	ASSERTU1(f8_to_u1_convert((f8)-PI_SHORT), 0xfd);
+	ASSERTU1(f8_to_u1_convert((f8)M_PI), 3);
+	ASSERTU1(f8_to_u1_convert((f8)-M_PI), 0xfd);
+	ASSERTU1(f8_to_u1_convert((f8)M_PIl), 3);
+	ASSERTU1(f8_to_u1_convert((f8)-M_PIl), 0xfd);
+	//ASSERTU1(f8_to_u1_convert((f8)FLT_MAX), 0);
+	ASSERTU1(f8_to_u1_convert((f8)-FLT_MAX), 0);
+	ASSERTU1(f8_to_u1_convert((f8)FLT_MIN), 0);
+	ASSERTU1(f8_to_u1_convert((f8)-FLT_MIN), 0);
+	//ASSERTU1(f8_to_u1_convert((f8)DBL_MAX), 0);
+	ASSERTU1(f8_to_u1_convert((f8)-DBL_MAX), 0);
+	ASSERTU1(f8_to_u1_convert((f8)DBL_MIN), 0);
+	ASSERTU1(f8_to_u1_convert((f8)-DBL_MIN), 0);
+	ASSERTU1(f8_to_u1_convert((f8)U1_MAX), U1_MAX);
+}
+
+TEST f8_to_u2_convert_Main()
+{
+	extern u2 f8_to_u2_convert(f8 a);
+	ASSERTU2(f8_to_u2_convert(0), 0);
+	ASSERTU2(f8_to_u2_convert((f8)0), 0);
+	ASSERTU2(f8_to_u2_convert(-(f8)0), 0);
+	ASSERTU2(f8_to_u2_convert((f8)-1), U2_MAX);
+	ASSERTU2(f8_to_u2_convert((f8)I2_MIN), U2_MSB);
+	ASSERTU2(f8_to_u2_convert((f8)I2_MAX), I2_MAX);
+	ASSERTU2(f8_to_u2_convert((f8)U2_55), U2_55);
+	ASSERTU2(f8_to_u2_convert((f8)U2_AA), U2_AA);
+	ASSERTU2(f8_to_u2_convert((f8)-U1_55), U21_AB);
+	ASSERTU2(f8_to_u2_convert((f8)-U1_AA), U21_56);
+	ASSERTU2(f8_to_u2_convert((f8)-U2_55), U2_AB);
+	ASSERTU2(f8_to_u2_convert((f8)-U2_AA), U2_56);
+	ASSERTU2(f8_to_u2_convert((f8)PI_SHORT), 3);
+	ASSERTU2(f8_to_u2_convert((f8)-PI_SHORT), 0xfffd);
+	ASSERTU2(f8_to_u2_convert((f8)M_PI), 0x3);
+	ASSERTU2(f8_to_u2_convert((f8)-M_PI), 0xfffd);
+	ASSERTU2(f8_to_u2_convert((f8)M_PIl), 0x3);
+	ASSERTU2(f8_to_u2_convert((f8)-M_PIl), 0xfffd);
+	//ASSERTU2(f8_to_u2_convert((f8)FLT_MAX), 0);
+	ASSERTU2(f8_to_u2_convert((f8)-FLT_MAX), 0);
+	ASSERTU2(f8_to_u2_convert((f8)FLT_MIN), 0);
+	ASSERTU2(f8_to_u2_convert((f8)-FLT_MIN), 0);
+	//ASSERTU2(f8_to_u2_convert((f8)DBL_MAX), 0);
+	ASSERTU2(f8_to_u2_convert((f8)-DBL_MAX), 0);
+	ASSERTU2(f8_to_u2_convert((f8)DBL_MIN), 0);
+	ASSERTU2(f8_to_u2_convert((f8)-DBL_MIN), 0);
+	ASSERTU2(f8_to_u2_convert((f8)U2_MAX), U2_MAX);
+}
+
+TEST f8_to_u4_convert_Main()
+{
+	extern u4 f8_to_u4_convert(f8 a);
+	ASSERTU4(f8_to_u4_convert(0), 0);
+	ASSERTU4(f8_to_u4_convert((f8)0), 0);
+	ASSERTU4(f8_to_u4_convert(-(f8)0), 0);
+	ASSERTU4(f8_to_u4_convert((f8)-1), U4_MAX);
+	ASSERTU4(f8_to_u4_convert((f8)I4_MIN), U4_MSB);
+	ASSERTU4(f8_to_u4_convert((f8)I4_MAX), I4_MAX);
+	ASSERTU4(f8_to_u4_convert((f8)U4_55), U4_55);
+	ASSERTU4(f8_to_u4_convert((f8)U4_AA), U4_AA);
+	ASSERTU4(f8_to_u4_convert((f8)-U1_55), U41_AB);
+	ASSERTU4(f8_to_u4_convert((f8)-U1_AA), U41_56);
+	ASSERTU4(f8_to_u4_convert((f8)-U2_55), U42_AB);
+	ASSERTU4(f8_to_u4_convert((f8)-U2_AA), U42_56);
+	ASSERTU4(f8_to_u4_convert((f8)-U4_55), U4_AB);
+	ASSERTU4(f8_to_u4_convert((f8)-U4_AA), U4_56);
+	ASSERTU4(f8_to_u4_convert((f8)PI_SHORT), 3);
+	ASSERTU4(f8_to_u4_convert((f8)-PI_SHORT), 0xfffffffd);
+	ASSERTU4(f8_to_u4_convert((f8)M_PI), 3);
+	ASSERTU4(f8_to_u4_convert((f8)-M_PI), 0xfffffffd);
+	ASSERTU4(f8_to_u4_convert((f8)M_PIl), 3);
+	ASSERTU4(f8_to_u4_convert((f8)-M_PIl), 0xfffffffd);
+	//ASSERTU4(f8_to_u4_convert((f8)FLT_MAX), 0);
+	ASSERTU4(f8_to_u4_convert((f8)-FLT_MAX), 0);
+	ASSERTU4(f8_to_u4_convert((f8)FLT_MIN), 0);
+	ASSERTU4(f8_to_u4_convert((f8)-FLT_MIN), 0);
+	//ASSERTU4(f8_to_u4_convert((f8)DBL_MAX), 0);
+	ASSERTU4(f8_to_u4_convert((f8)-DBL_MAX), 0);
+	ASSERTU4(f8_to_u4_convert((f8)DBL_MIN), 0);
+	ASSERTU4(f8_to_u4_convert((f8)-DBL_MIN), 0);
+	ASSERTU4(f8_to_u4_convert((f8)U4_MAX), U4_MAX);
+}
+
+#if defined(HAS_LONGLONG)
+
+TEST i8_to_f8_convert_Main()
+{
+	extern f8 i8_to_f8_convert(i8 a);
+	ASSERTF8(i8_to_f8_convert(0), (i8)0);
+	ASSERTF8(i8_to_f8_convert(U8_MAGIC), (f8)U8_MAGIC);
+	ASSERTF8(i8_to_f8_convert(U8_55), (f8)U8_55);
+	ASSERTF8(i8_to_f8_convert(-U8_56), (f8)-U8_56);
+	ASSERTF8(i8_to_f8_convert(I8_MIN), (f8)I8_MIN);
+	ASSERTF8(i8_to_f8_convert(I8_MAX), (f8)I8_MAX);
+	ASSERTF8(i8_to_f8_convert(-1), (f8)-1);
+}
+
+TEST f8_to_i8_convert_Main()
+{
+	extern i8 f8_to_i8_convert(f8 a);
+	ASSERTI8(f8_to_i8_convert((f8)0), 0);
+	ASSERTI8(f8_to_i8_convert(-(f8)0), 0);
+	ASSERTI8(f8_to_i8_convert((f8)0), 0);
+	ASSERTI8(f8_to_i8_convert(-(f8)0), 0);
+	ASSERTI8(f8_to_i8_convert((f8)-1), -1);
+	ASSERTI8(f8_to_i8_convert((f8)I8_MIN), I8_MIN);
+	ASSERTI8(f8_to_i8_convert((f8)I8_MAX), I8_MIN);
+	ASSERTI8(f8_to_i8_convert((f8)U8_55), 0x5555555555555400);
+	//ASSERTI8(f8_to_i8_convert((f8)U8_AA), I8_MIN);
+	ASSERTI8(f8_to_i8_convert((f8)-U1_55), -U1_55);
+	ASSERTI8(f8_to_i8_convert((f8)-U1_AA), -U1_AA);
+	ASSERTI8(f8_to_i8_convert((f8)-U2_55), -U2_55);
+	ASSERTI8(f8_to_i8_convert((f8)-U2_AA), -U2_AA);
+	ASSERTI8(f8_to_i8_convert((f8)-U4_55), -U4_55);
+	ASSERTI8(f8_to_i8_convert((f8)-U8_AA), 0x5555555555555400);
+	ASSERTI8(f8_to_i8_convert((f8)PI_SHORT), 3);
+	ASSERTI8(f8_to_i8_convert((f8)-PI_SHORT), -3);
+	ASSERTI8(f8_to_i8_convert((f8)M_PI), 3);
+	ASSERTI8(f8_to_i8_convert((f8)-M_PI), -3);
+	ASSERTI8(f8_to_i8_convert((f8)M_PIl), 3);
+	ASSERTI8(f8_to_i8_convert((f8)-M_PIl), -3);
+	//ASSERTI8(f8_to_i8_convert((f8)FLT_MAX), I8_MIN);
+	//ASSERTI8(f8_to_i8_convert((f8)-FLT_MAX), I8_MIN);
+	ASSERTI8(f8_to_i8_convert((f8)FLT_MIN), 0);
+	ASSERTI8(f8_to_i8_convert((f8)-FLT_MIN), 0);
+	//ASSERTI8(f8_to_i8_convert((f8)DBL_MAX), I8_MIN);
+	//ASSERTI8(f8_to_i8_convert((f8)-DBL_MAX), I8_MIN);
+	ASSERTI8(f8_to_i8_convert((f8)DBL_MIN), 0);
+	ASSERTI8(f8_to_i8_convert((f8)-DBL_MIN), 0);
+	//ASSERTI8(f8_to_i8_convert((f8)U8_MAX), I8_MIN);
+}
+
+TEST u8_to_f8_convert_Main()
+{
+	extern f8 u8_to_f8_convert(u8 a);
+	ASSERTF8(u8_to_f8_convert(0), (u8)0);
+	ASSERTF8(u8_to_f8_convert(U8_MAGIC), (f8)U8_MAGIC);
+	ASSERTF8(u8_to_f8_convert(U8_55), (f8)U8_55);
+	ASSERTF8(u8_to_f8_convert(U8_AA), (f8)U8_AA);
+	ASSERTF8(u8_to_f8_convert(U8_MSB), (f8)U8_MSB);
+	ASSERTF8(u8_to_f8_convert(U8_MAX), (f8)U8_MAX);
+}
+
+TEST f8_to_u8_convert_Main()
+{
+	extern u8 f8_to_u8_convert(f8 a);
+	ASSERTU8(f8_to_u8_convert(0), 0);
+	ASSERTU8(f8_to_u8_convert((f8)0), 0);
+	ASSERTU8(f8_to_u8_convert(-(f8)0), 0);
+	//ASSERTU8(f8_to_u8_convert((f8)-1), U8_MAX);
+	ASSERTU8(f8_to_u8_convert((f8)I8_MIN), U8_MSB);
+	ASSERTU8(f8_to_u8_convert((f8)I8_MAX), U8_MSB);
+	ASSERTU8(f8_to_u8_convert((f8)U8_55), 0x5555555555555400);
+	ASSERTU8(f8_to_u8_convert((f8)U8_AA), 0xaaaaaaaaaaaaa800);
+	//ASSERTU8(f8_to_u8_convert((f8)-U1_55), U81_AB);
+	//ASSERTU8(f8_to_u8_convert((f8)-U1_AA), U81_56);
+	//ASSERTU8(f8_to_u8_convert((f8)-U2_55), U82_AB);
+	//ASSERTU8(f8_to_u8_convert((f8)-U2_AA), U82_56);
+	//ASSERTU8(f8_to_u8_convert((f8)-U4_55), U84_AB);
+	ASSERTU8(f8_to_u8_convert((f8)-U4_AA), U4_56);
+	//ASSERTU8(f8_to_u8_convert((f8)-U8_55), 0xaaaaaaaaaaaaac00);
+	ASSERTU8(f8_to_u8_convert((f8)-U8_AA), 0x5555555555555400);
+	ASSERTU8(f8_to_u8_convert((f8)PI_SHORT), 3);
+	//ASSERTU8(f8_to_u8_convert((f8)-PI_SHORT), 0xfffffffffffffffd);
+	ASSERTU8(f8_to_u8_convert((f8)M_PI), 3);
+	//ASSERTU8(f8_to_u8_convert((f8)-M_PI), 0xfffffffffffffffd);
+	//ASSERTU8(f8_to_u8_convert((f8)FLT_MAX), 0);
+	//ASSERTU8(f8_to_u8_convert((f8)-FLT_MAX), U8_MSB);
+	ASSERTU8(f8_to_u8_convert((f8)FLT_MIN), 0);
+	//ASSERTU8(f8_to_u8_convert((f8)U8_MAX), 0);
+}
+
+#endif // HAS_LONGLONG
+
+#if defined(HAS_FLOAT)
+
+TEST f8_to_f4_convert_Main()
+{
+	extern f4 f8_to_f4_convert(f8 a);
+	ASSERTF4(f8_to_f4_convert((f8)0), (f4)0);
+	ASSERTF4(f8_to_f4_convert(-(f8)0), -(f4)0);
+	ASSERTF4(f8_to_f4_convert((f8)U8_MAGIC), (f4)U8_MAGIC);
+	ASSERTF4(f8_to_f4_convert((f8)U8_55), (f4)U8_55);
+	ASSERTF4(f8_to_f4_convert((f8)FLT_MAX), (f4)FLT_MAX);
+	ASSERTF4(f8_to_f4_convert((f8)FLT_MIN), (f4)FLT_MIN);
+	ASSERTF4(f8_to_f4_convert((f8)DBL_MIN), (f4)0);
+	ASSERTF4(f8_to_f4_convert((f8)PI_SHORT), (f4)PI_SHORT);
+	ASSERTF4(f8_to_f4_convert((f8)M_PI), (f4)M_PI);
+	ASSERTF4(f8_to_f4_convert((f8)M_PIl), (f4)M_PI);
+	ASSERTF4(f8_to_f4_convert((f8)-FLT_MAX), (f4)-FLT_MAX);
+	ASSERTF4(f8_to_f4_convert((f8)-FLT_MIN), (f4)-FLT_MIN);
+	ASSERTF4(f8_to_f4_convert((f8)-DBL_MIN), -(f4)0);
+	ASSERTF4(f8_to_f4_convert((f8)-PI_SHORT), (f4)-PI_SHORT);
+	ASSERTF4(f8_to_f4_convert((f8)-M_PI), (f4)-M_PI);
+	ASSERTF4(f8_to_f4_convert((f8)-M_PIl), (f4)-M_PIl);
+}
+
+TEST f4_to_f8_convert_Main()
+{
+	extern f8 f4_to_f8_convert(f4 a);
+	ASSERTF8(f4_to_f8_convert((f4)0), (f8)0);
+	ASSERTF8(f4_to_f8_convert(-(f4)0), -(f8)0);
+	ASSERTF8(f4_to_f8_convert((f4)U4_MAGIC), (f8)0x14131220);
+	ASSERTF8(f4_to_f8_convert((f4)U4_55), (f8)0x55555580);
+	ASSERTF8(f4_to_f8_convert((f4)FLT_MAX), (f8)FLT_MAX);
+	ASSERTF8(f4_to_f8_convert((f4)FLT_MIN), (f8)FLT_MIN);
+	ASSERTF8(f4_to_f8_convert((f4)-FLT_MAX), (f8)-FLT_MAX);
+	ASSERTF8(f4_to_f8_convert((f4)-FLT_MIN), (f8)-FLT_MIN);
+}
+
+#endif // HAS_FLOAT
+
+MAIN CONVERT_DOUBLE_main() { }
+
+#endif  // HAS_DOUBLE
\ No newline at end of file
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_FLOAT.test b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_FLOAT.test
new file mode 100644
index 0000000000..4499687d1d
--- /dev/null
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_FLOAT.test
@@ -0,0 +1,320 @@
+#if defined(HAS_FLOAT)
+
+#include "pcode_test.h"
+
+TEST f4_to_f4_convert_Main()
+{
+	extern f4 f4_to_f4_convert(f4 a);
+	ASSERTF4(f4_to_f4_convert((f4)0), (f4)0);
+	ASSERTF4(f4_to_f4_convert(-(f4)0), -(f4)0);
+	ASSERTF4(f4_to_f4_convert((f4)U4_MAGIC), (f4)U4_MAGIC);
+	ASSERTF4(f4_to_f4_convert((f4)U4_55), (f4)U4_55);
+	ASSERTF4(f4_to_f4_convert((f4)FLT_MAX), (f4)FLT_MAX);
+	ASSERTF4(f4_to_f4_convert((f4)FLT_MIN), (f4)FLT_MIN);
+	ASSERTF4(f4_to_f4_convert((f4)PI_SHORT), (f4)PI_SHORT);
+	ASSERTF4(f4_to_f4_convert((f4)M_PI), (f4)M_PI);
+	ASSERTF4(f4_to_f4_convert((f4)-FLT_MAX), (f4)-FLT_MAX);
+	ASSERTF4(f4_to_f4_convert((f4)-FLT_MIN), (f4)-FLT_MIN);
+	ASSERTF4(f4_to_f4_convert((f4)-PI_SHORT), (f4)-PI_SHORT);
+	ASSERTF4(f4_to_f4_convert((f4)-M_PI), (f4)-M_PI);
+}
+
+TEST i1_to_f4_convert_Main()
+{
+	extern f4 i1_to_f4_convert(i1 a);
+	ASSERTF4(i1_to_f4_convert(0), (i1)0);
+	ASSERTF4(i1_to_f4_convert(U1_MAGIC), (f4)U1_MAGIC);
+	ASSERTF4(i1_to_f4_convert(U1_55), (f4)U1_55);
+	ASSERTF4(i1_to_f4_convert(-U1_56), (f4)-U1_56);
+	ASSERTF4(i1_to_f4_convert(I1_MIN), (f4)I1_MIN);
+	ASSERTF4(i1_to_f4_convert(I1_MAX), (f4)I1_MAX);
+	ASSERTF4(i1_to_f4_convert(-1), (f4)-1);
+}
+
+TEST i2_to_f4_convert_Main()
+{
+	extern f4 i2_to_f4_convert(i2 a);
+	ASSERTF4(i2_to_f4_convert(0), (i2)0);
+	ASSERTF4(i2_to_f4_convert(U2_MAGIC), (f4)U2_MAGIC);
+	ASSERTF4(i2_to_f4_convert(U2_55), (f4)U2_55);
+	ASSERTF4(i2_to_f4_convert(-U2_56), (f4)-U2_56);
+	ASSERTF4(i2_to_f4_convert(I2_MIN), (f4)I2_MIN);
+	ASSERTF4(i2_to_f4_convert(I2_MAX), (f4)I2_MAX);
+	ASSERTF4(i2_to_f4_convert(-1), (f4)-1);
+}
+
+TEST i4_to_f4_convert_Main()
+{
+	extern f4 i4_to_f4_convert(i4 a);
+	ASSERTF4(i4_to_f4_convert(0), (i4)0);
+	ASSERTF4(i4_to_f4_convert(U4_MAGIC), (f4)U4_MAGIC);
+	ASSERTF4(i4_to_f4_convert(U4_55), (f4)U4_55);
+	ASSERTF4(i4_to_f4_convert(-U4_56), (f4)-U4_56);
+	ASSERTF4(i4_to_f4_convert(I4_MIN), (f4)I4_MIN);
+	ASSERTF4(i4_to_f4_convert(I4_MAX), (f4)I4_MAX);
+	ASSERTF4(i4_to_f4_convert(-1), (f4)-1);
+}
+
+TEST u1_to_f4_convert_Main()
+{
+	extern f4 u1_to_f4_convert(u1 a);
+	ASSERTF4(u1_to_f4_convert(0), (u1)0);
+	ASSERTF4(u1_to_f4_convert(U1_MAGIC), (f4)U1_MAGIC);
+	ASSERTF4(u1_to_f4_convert(U1_55), (f4)U1_55);
+	ASSERTF4(u1_to_f4_convert(U1_AA), (f4)U1_AA);
+	ASSERTF4(u1_to_f4_convert(U1_MSB), (f4)U1_MSB);
+	ASSERTF4(u1_to_f4_convert(U1_MAX), (f4)U1_MAX);
+}
+
+TEST u2_to_f4_convert_Main()
+{
+	extern f4 u2_to_f4_convert(u2 a);
+	ASSERTF4(u2_to_f4_convert(0), (u2)0);
+	ASSERTF4(u2_to_f4_convert(U2_MAGIC), (f4)U2_MAGIC);
+	ASSERTF4(u2_to_f4_convert(U2_55), (f4)U2_55);
+	ASSERTF4(u2_to_f4_convert(U2_AA), (f4)U2_AA);
+	ASSERTF4(u2_to_f4_convert(U2_MSB), (f4)U2_MSB);
+	ASSERTF4(u2_to_f4_convert(U2_MAX), (f4)U2_MAX);
+}
+
+TEST u4_to_f4_convert_Main()
+{
+	extern f4 u4_to_f4_convert(u4 a);
+	ASSERTF4(u4_to_f4_convert(0), (u4)0);
+	ASSERTF4(u4_to_f4_convert(U4_MAGIC), (f4)U4_MAGIC);
+	ASSERTF4(u4_to_f4_convert(U4_55), (f4)U4_55);
+	ASSERTF4(u4_to_f4_convert(U4_AA), (f4)U4_AA);
+	ASSERTF4(u4_to_f4_convert(U4_MSB), (f4)U4_MSB);
+	ASSERTF4(u4_to_f4_convert(U4_MAX), (f4)U4_MAX);
+}
+
+TEST f4_to_i1_convert_Main()
+{
+	extern i1 f4_to_i1_convert(f4 a);
+	ASSERTI1(f4_to_i1_convert((f4)0), 0);
+	ASSERTI1(f4_to_i1_convert(-(f4)0), 0);
+	ASSERTI1(f4_to_i1_convert(-1), -1);
+	ASSERTI1(f4_to_i1_convert(I1_MIN), I1_MIN);
+	ASSERTI1(f4_to_i1_convert(I1_MAX), I1_MAX);
+	ASSERTI1(f4_to_i1_convert(U1_55), U1_55);
+	ASSERTI1(f4_to_i1_convert(U1_AA), -U1_56);
+	ASSERTI1(f4_to_i1_convert(-U1_55), -U1_55);
+	ASSERTI1(f4_to_i1_convert(-U1_AA), U1_56);
+	ASSERTI1(f4_to_i1_convert((f4)PI_SHORT), 3);
+	ASSERTI1(f4_to_i1_convert((f4)-PI_SHORT), -3);
+	ASSERTI1(f4_to_i1_convert((f4)M_PI), 3);
+	ASSERTI1(f4_to_i1_convert((f4)-M_PI), -3);
+	//ASSERTI1(f4_to_i1_convert((f4)FLT_MAX), 0);
+	ASSERTI1(f4_to_i1_convert((f4)-FLT_MAX), 0);
+	ASSERTI1(f4_to_i1_convert((f4)FLT_MIN), 0);
+	ASSERTI1(f4_to_i1_convert(U1_MAX), -1);
+}
+
+TEST f4_to_i2_convert_Main()
+{
+	extern i2 f4_to_i2_convert(f4 a);
+	ASSERTI2(f4_to_i2_convert((f4)0), 0);
+	ASSERTI2(f4_to_i2_convert(-(f4)0), 0);
+	ASSERTI2(f4_to_i2_convert(-1), -1);
+	ASSERTI2(f4_to_i2_convert(I2_MIN), I2_MIN);
+	ASSERTI2(f4_to_i2_convert(I2_MAX), I2_MAX);
+	ASSERTI2(f4_to_i2_convert(U2_55), U2_55);
+	ASSERTI2(f4_to_i2_convert(U2_AA), -U2_56);
+	ASSERTI2(f4_to_i2_convert(-U1_55), -U1_55);
+	ASSERTI2(f4_to_i2_convert(-U1_AA), -U1_AA);
+	ASSERTI2(f4_to_i2_convert(-U2_55), -U2_55);
+	ASSERTI2(f4_to_i2_convert(-U2_AA), U2_56);
+	ASSERTI2(f4_to_i2_convert((f4)PI_SHORT), 3);
+	ASSERTI2(f4_to_i2_convert((f4)-PI_SHORT), -3);
+	ASSERTI2(f4_to_i2_convert((f4)M_PI), 3);
+	ASSERTI2(f4_to_i2_convert((f4)-M_PI), -3);
+	//ASSERTI2(f4_to_i2_convert((f4)FLT_MAX), 0);
+	ASSERTI2(f4_to_i2_convert((f4)-FLT_MAX), 0);
+	ASSERTI2(f4_to_i2_convert((f4)FLT_MIN), 0);
+	ASSERTI2(f4_to_i2_convert(U2_MAX), -1);
+}
+
+TEST f4_to_i4_convert_Main()
+{
+	extern i4 f4_to_i4_convert(f4 a);
+	ASSERTI4(f4_to_i4_convert((f4)0), 0);
+	ASSERTI4(f4_to_i4_convert(-(f4)0), 0);
+	ASSERTI4(f4_to_i4_convert(-1), -1);
+	ASSERTI4(f4_to_i4_convert(I4_MIN), I4_MIN);
+	ASSERTI4(f4_to_i4_convert(I4_MAX), I4_MIN);
+	ASSERTI4(f4_to_i4_convert(U4_55), 0x55555580);
+	//ASSERTI4(f4_to_i4_convert(U4_AA), I4_MIN);
+	ASSERTI4(f4_to_i4_convert(-U1_55), -U1_55);
+	ASSERTI4(f4_to_i4_convert(-U1_AA), -U1_AA);
+	ASSERTI4(f4_to_i4_convert(-U2_55), -U2_55);
+	ASSERTI4(f4_to_i4_convert(-U2_AA), -U2_AA);
+	ASSERTI4(f4_to_i4_convert(-U4_55), -0x55555580);
+	ASSERTI4(f4_to_i4_convert(-U4_AA), 0x55555580);
+	ASSERTI4(f4_to_i4_convert((f4)PI_SHORT), 3);
+	ASSERTI4(f4_to_i4_convert((f4)-PI_SHORT), -3);
+	ASSERTI4(f4_to_i4_convert((f4)M_PI), 3);
+	ASSERTI4(f4_to_i4_convert((f4)-M_PI), -3);
+	//ASSERTI4(f4_to_i4_convert((f4)FLT_MAX), I4_MIN);
+	//ASSERTI4(f4_to_i4_convert((f4)-FLT_MAX), I4_MIN);
+	ASSERTI4(f4_to_i4_convert((f4)FLT_MIN), 0);
+	//ASSERTI4(f4_to_i4_convert(U4_MAX), I4_MIN);
+}
+
+TEST f4_to_u1_convert_Main()
+{
+	extern u1 f4_to_u1_convert(f4 a);
+	ASSERTU1(f4_to_u1_convert((f4)0), 0);
+	ASSERTU1(f4_to_u1_convert(-(f4)0), 0);
+	ASSERTU1(f4_to_u1_convert(-1), U1_MAX);
+	ASSERTU1(f4_to_u1_convert(I1_MIN), U1_MSB);
+	ASSERTU1(f4_to_u1_convert(I1_MAX), I1_MAX);
+	ASSERTU1(f4_to_u1_convert(U1_55), U1_55);
+	ASSERTU1(f4_to_u1_convert(U1_AA), U1_AA);
+	ASSERTU1(f4_to_u1_convert(-U1_55), U1_AB);
+	ASSERTU1(f4_to_u1_convert(-U1_AA), U1_56);
+	ASSERTU1(f4_to_u1_convert((f4)PI_SHORT), 3);
+	ASSERTU1(f4_to_u1_convert((f4)-PI_SHORT), 0xfd);
+	ASSERTU1(f4_to_u1_convert((f4)M_PI), 3);
+	ASSERTU1(f4_to_u1_convert((f4)-M_PI), 0xfd);
+	//ASSERTU1(f4_to_u1_convert((f4)FLT_MAX), 0);
+	ASSERTU1(f4_to_u1_convert((f4)-FLT_MAX), 0);
+	ASSERTU1(f4_to_u1_convert((f4)FLT_MIN), 0);
+	ASSERTU1(f4_to_u1_convert(U1_MAX), U1_MAX);
+}
+
+TEST f4_to_u2_convert_Main()
+{
+	extern u2 f4_to_u2_convert(f4 a);
+	ASSERTU2(f4_to_u2_convert((f4)0), 0);
+	ASSERTU2(f4_to_u2_convert(-(f4)0), 0);
+	ASSERTU2(f4_to_u2_convert(-1), U2_MAX);
+	ASSERTU2(f4_to_u2_convert(I2_MIN), U2_MSB);
+	ASSERTU2(f4_to_u2_convert(I2_MAX), I2_MAX);
+	ASSERTU2(f4_to_u2_convert(U2_55), U2_55);
+	ASSERTU2(f4_to_u2_convert(U2_AA), U2_AA);
+	ASSERTU2(f4_to_u2_convert(-U1_55), U21_AB);
+	ASSERTU2(f4_to_u2_convert(-U1_AA), U21_56);
+	ASSERTU2(f4_to_u2_convert(-U2_55), U2_AB);
+	ASSERTU2(f4_to_u2_convert(-U2_AA), U2_56);
+	ASSERTU2(f4_to_u2_convert((f4)PI_SHORT), 3);
+	ASSERTU2(f4_to_u2_convert((f4)-PI_SHORT), 0xfffd);
+	ASSERTU2(f4_to_u2_convert((f4)M_PI), 0x3);
+	ASSERTU2(f4_to_u2_convert((f4)-M_PI), 0xfffd);
+	//ASSERTU2(f4_to_u2_convert((f4)FLT_MAX), 0);
+	ASSERTU2(f4_to_u2_convert((f4)-FLT_MAX), 0);
+	ASSERTU2(f4_to_u2_convert((f4)FLT_MIN), 0);
+	ASSERTU2(f4_to_u2_convert(U2_MAX), U2_MAX);
+}
+
+TEST f4_to_u4_convert_Main()
+{
+	extern u4 f4_to_u4_convert(f4 a);
+	ASSERTU4(f4_to_u4_convert((f4)0), 0);
+	ASSERTU4(f4_to_u4_convert(-(f4)0), 0);
+	ASSERTU4(f4_to_u4_convert(-1), U4_MAX);
+	ASSERTU4(f4_to_u4_convert(I4_MIN), U4_MSB);
+	ASSERTU4(f4_to_u4_convert(I4_MAX), U4_MSB);
+	ASSERTU4(f4_to_u4_convert(U4_55), 0x55555580);
+	ASSERTU4(f4_to_u4_convert(U4_AA), 0xaaaaab00);
+	ASSERTU4(f4_to_u4_convert(-U1_55), U41_AB);
+	ASSERTU4(f4_to_u4_convert(-U1_AA), U41_56);
+	ASSERTU4(f4_to_u4_convert(-U2_55), U42_AB);
+	ASSERTU4(f4_to_u4_convert(-U2_AA), U42_56);
+	ASSERTU4(f4_to_u4_convert(-U4_55), 0xaaaaaa80);
+	ASSERTU4(f4_to_u4_convert(-U4_AA), 0x55555580);
+	ASSERTU4(f4_to_u4_convert((f4)PI_SHORT), 3);
+	ASSERTU4(f4_to_u4_convert((f4)-PI_SHORT), 0xfffffffd);
+	ASSERTU4(f4_to_u4_convert((f4)M_PI), 3);
+	ASSERTU4(f4_to_u4_convert((f4)-M_PI), 0xfffffffd);
+	//ASSERTU4(f4_to_u4_convert((f4)FLT_MAX), 0);
+	ASSERTU4(f4_to_u4_convert((f4)-FLT_MAX), 0);
+	ASSERTU4(f4_to_u4_convert((f4)FLT_MIN), 0);
+	ASSERTU4(f4_to_u4_convert(U4_MAX), 0);
+}
+
+#if defined(HAS_LONGLONG)
+
+TEST i8_to_f4_convert_Main()
+{
+	extern f4 i8_to_f4_convert(i8 a);
+	ASSERTF4(i8_to_f4_convert(0), (i8)0);
+	ASSERTF4(i8_to_f4_convert(U8_MAGIC), (f4)U8_MAGIC);
+	ASSERTF4(i8_to_f4_convert(U8_55), (f4)U8_55);
+	ASSERTF4(i8_to_f4_convert(-U8_56), (f4)-U8_56);
+	ASSERTF4(i8_to_f4_convert(I8_MIN), (f4)I8_MIN);
+	ASSERTF4(i8_to_f4_convert(I8_MAX), (f4)I8_MAX);
+	ASSERTF4(i8_to_f4_convert(-1), (f4)-1);
+}
+
+TEST f4_to_i8_convert_Main()
+{
+	extern i8 f4_to_i8_convert(f4 a);
+	ASSERTI8(f4_to_i8_convert((f4)0), 0);
+	ASSERTI8(f4_to_i8_convert(-(f4)0), 0);
+	ASSERTI8(f4_to_i8_convert(-1), -1);
+	ASSERTI8(f4_to_i8_convert(I8_MIN), I8_MIN);
+	ASSERTI8(f4_to_i8_convert(I8_MAX), I8_MIN);
+	ASSERTI8(f4_to_i8_convert(U8_55), 0x5555558000000000);
+	//ASSERTI8(f4_to_i8_convert(U8_AA), I8_MIN);
+	ASSERTI8(f4_to_i8_convert(-U1_55), -U1_55);
+	ASSERTI8(f4_to_i8_convert(-U1_AA), -U1_AA);
+	ASSERTI8(f4_to_i8_convert(-U2_55), -U2_55);
+	ASSERTI8(f4_to_i8_convert(-U2_AA), -U2_AA);
+	ASSERTI8(f4_to_i8_convert(-U4_55), -0x55555580);
+	ASSERTI8(f4_to_i8_convert(-U4_AA), 0x0000000055555580);
+	ASSERTI8(f4_to_i8_convert(-U8_55), -0x5555558000000000);
+	ASSERTI8(f4_to_i8_convert(-U8_AA), 0x5555558000000000);
+	ASSERTI8(f4_to_i8_convert((f4)PI_SHORT), 3);
+	ASSERTI8(f4_to_i8_convert((f4)-PI_SHORT), -3);
+	ASSERTI8(f4_to_i8_convert((f4)M_PI), 3);
+	ASSERTI8(f4_to_i8_convert((f4)-M_PI), -3);
+	//ASSERTI8(f4_to_i8_convert((f4)FLT_MAX), I8_MIN);
+	//ASSERTI8(f4_to_i8_convert((f4)-FLT_MAX), I8_MIN);
+	ASSERTI8(f4_to_i8_convert((f4)FLT_MIN), 0);
+	//ASSERTI8(f4_to_i8_convert(U8_MAX), I8_MIN);
+}
+
+TEST u8_to_f4_convert_Main()
+{
+	extern f4 u8_to_f4_convert(u8 a);
+	ASSERTF4(u8_to_f4_convert(0), (u8)0);
+	ASSERTF4(u8_to_f4_convert(U8_MAGIC), (f4)U8_MAGIC);
+	ASSERTF4(u8_to_f4_convert(U8_55), (f4)U8_55);
+	ASSERTF4(u8_to_f4_convert(U8_AA), (f4)U8_AA);
+	ASSERTF4(u8_to_f4_convert(U8_MSB), (f4)U8_MSB);
+	ASSERTF4(u8_to_f4_convert(U8_MAX), (f4)U8_MAX);
+}
+
+TEST f4_to_u8_convert_Main()
+{
+	extern u8 f4_to_u8_convert(f4 a);
+	ASSERTU8(f4_to_u8_convert((f4)0), 0);
+	ASSERTU8(f4_to_u8_convert(-(f4)0), 0);
+	//ASSERTU8(f4_to_u8_convert(-1), U8_MAX);
+	ASSERTU8(f4_to_u8_convert(I8_MIN), U8_MSB);
+	ASSERTU8(f4_to_u8_convert(I8_MAX), U8_MSB);
+	ASSERTU8(f4_to_u8_convert(U8_55), 0x5555558000000000);
+	ASSERTU8(f4_to_u8_convert(U8_AA), 0xaaaaab0000000000);
+	//ASSERTU8(f4_to_u8_convert(-U1_55), U81_AB);
+	//ASSERTU8(f4_to_u8_convert(-U1_AA), U81_56);
+	//ASSERTU8(f4_to_u8_convert(-U2_55), U82_AB);
+	//ASSERTU8(f4_to_u8_convert(-U2_AA), U82_56);
+	//ASSERTU8(f4_to_u8_convert(-U4_55), 0xffffffffaaaaaa80);
+	ASSERTU8(f4_to_u8_convert(-U4_AA), 0x0000000055555580);
+	ASSERTU8(f4_to_u8_convert(-U8_55), 0xaaaaaa8000000000);
+	ASSERTU8(f4_to_u8_convert(-U8_AA), 0x5555558000000000);
+	ASSERTU8(f4_to_u8_convert((f4)PI_SHORT), 3);
+	//ASSERTU8(f4_to_u8_convert((f4)-PI_SHORT), 0xfffffffffffffffd);
+	ASSERTU8(f4_to_u8_convert((f4)M_PI), 3);
+	//ASSERTU8(f4_to_u8_convert((f4)-M_PI), 0xfffffffffffffffd);
+	//ASSERTU8(f4_to_u8_convert((f4)FLT_MAX), 0);
+	//ASSERTU8(f4_to_u8_convert((f4)-FLT_MAX), U8_MSB);
+	ASSERTU8(f4_to_u8_convert((f4)FLT_MIN), 0);
+	//ASSERTU8(f4_to_u8_convert(U8_MAX), 0);
+}
+
+#endif // HAS_LONGLONG
+
+MAIN CONVERT_FLOAT_main() { }
+
+#endif // HAS_FLOAT
\ No newline at end of file
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_LONGLONG.test b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_LONGLONG.test
new file mode 100644
index 0000000000..37c9f8081a
--- /dev/null
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/CONVERT_LONGLONG.test
@@ -0,0 +1,533 @@
+#if defined(HAS_LONGLONG)
+
+#include "pcode_test.h"
+
+TEST i8_to_i1_convert_Main()
+{
+	extern i1 i8_to_i1_convert(i8 a);
+	ASSERTI1(i8_to_i1_convert(U8_MAGIC), U1_MAGIC);
+	ASSERTI1(i8_to_i1_convert(0), 0);
+	ASSERTI1(i8_to_i1_convert(-1), -1);
+	ASSERTI1(i8_to_i1_convert(U1_55), U1_55);
+	ASSERTI1(i8_to_i1_convert(U1_AA), -U1_56);
+	ASSERTI1(i8_to_i1_convert(U2_55), U1_55);
+	ASSERTI1(i8_to_i1_convert(U2_AA), -U1_56);
+	ASSERTI1(i8_to_i1_convert(U4_55), U1_55);
+	ASSERTI1(i8_to_i1_convert(U4_AA), -U1_56);
+	ASSERTI1(i8_to_i1_convert(U8_55), U1_55);
+	ASSERTI1(i8_to_i1_convert(U4_AA), -U1_56);
+	ASSERTI1(i8_to_i1_convert(-U1_55), -U1_55);
+	ASSERTI1(i8_to_i1_convert(-U1_AA), U1_56);
+	ASSERTI1(i8_to_i1_convert(-U2_55), -U1_55);
+	ASSERTI1(i8_to_i1_convert(-U2_AA), U1_56);
+	ASSERTI1(i8_to_i1_convert(-U4_55), -U1_55);
+	ASSERTI1(i8_to_i1_convert(-U8_55), -U1_55);
+	ASSERTI1(i8_to_i1_convert(I8_MIN), 0);
+	ASSERTI1(i8_to_i1_convert(I8_MAX), -1);
+	ASSERTI1(i8_to_i1_convert(I1_MAX), I1_MAX);
+	ASSERTI1(i8_to_i1_convert(I1_MIN), I1_MIN);
+	ASSERTI1(i8_to_i1_convert(U1_MAX), -1);
+}
+
+TEST i8_to_i2_convert_Main()
+{
+	extern i2 i8_to_i2_convert(i8 a);
+	ASSERTI2(i8_to_i2_convert(U8_MAGIC), U2_MAGIC);
+	ASSERTI2(i8_to_i2_convert(0), 0);
+	ASSERTI2(i8_to_i2_convert(-1), -1);
+	ASSERTI2(i8_to_i2_convert(U1_55), U1_55);
+	ASSERTI2(i8_to_i2_convert(U1_AA), U1_AA);
+	ASSERTI2(i8_to_i2_convert(U2_55), U2_55);
+	ASSERTI2(i8_to_i2_convert(U2_AA), -U2_56);
+	ASSERTI2(i8_to_i2_convert(U4_55), U2_55);
+	ASSERTI2(i8_to_i2_convert(U4_AA), -U2_56);
+	ASSERTI2(i8_to_i2_convert(U8_55), U2_55);
+	ASSERTI2(i8_to_i2_convert(-U1_55), -U1_55);
+	ASSERTI2(i8_to_i2_convert(-U1_AA), -U1_AA);
+	ASSERTI2(i8_to_i2_convert(-U2_55), -U2_55);
+	ASSERTI2(i8_to_i2_convert(-U2_AA), U2_56);
+	ASSERTI2(i8_to_i2_convert(-U4_55), -U2_55);
+	ASSERTI2(i8_to_i2_convert(-U8_55), -U2_55);
+	ASSERTI2(i8_to_i2_convert(I8_MIN), 0);
+	ASSERTI2(i8_to_i2_convert(I8_MAX), -1);
+	ASSERTI2(i8_to_i2_convert(I2_MAX), I2_MAX);
+	ASSERTI2(i8_to_i2_convert(I2_MIN), I2_MIN);
+	ASSERTI2(i8_to_i2_convert(U2_MAX), -1);
+}
+
+TEST i8_to_i4_convert_Main()
+{
+	extern i4 i8_to_i4_convert(i8 a);
+	ASSERTI4(i8_to_i4_convert(U8_MAGIC), U4_MAGIC);
+	ASSERTI4(i8_to_i4_convert(0), 0);
+	ASSERTI4(i8_to_i4_convert(-1), -1);
+	ASSERTI4(i8_to_i4_convert(U1_55), U1_55);
+	ASSERTI4(i8_to_i4_convert(U1_AA), U1_AA);
+	ASSERTI4(i8_to_i4_convert(U2_55), U2_55);
+	ASSERTI4(i8_to_i4_convert(U2_AA), U2_AA);
+	ASSERTI4(i8_to_i4_convert(U4_55), U4_55);
+	ASSERTI4(i8_to_i4_convert(U4_AA), -U4_56);
+	ASSERTI4(i8_to_i4_convert(U8_55), U4_55);
+	ASSERTI4(i8_to_i4_convert(-U1_55), -U1_55);
+	ASSERTI4(i8_to_i4_convert(-U1_AA), -U1_AA);
+	ASSERTI4(i8_to_i4_convert(-U2_55), -U2_55);
+	ASSERTI4(i8_to_i4_convert(-U2_AA), -U2_AA);
+	ASSERTI4(i8_to_i4_convert(-U4_55), -U4_55);
+	ASSERTI4(i8_to_i4_convert(-U8_55), -U4_55);
+	ASSERTI4(i8_to_i4_convert(I8_MIN), 0);
+	ASSERTI4(i8_to_i4_convert(I8_MAX), -1);
+	ASSERTI4(i8_to_i4_convert(I4_MAX), I4_MAX);
+	ASSERTI4(i8_to_i4_convert(I4_MIN), I4_MIN);
+	ASSERTI4(i8_to_i4_convert(U4_MAX), -1);
+}
+
+TEST i1_to_i8_convert_Main()
+{
+	extern i8 i1_to_i8_convert(i1 a);
+	ASSERTI8(i1_to_i8_convert(U1_MAGIC), U1_MAGIC);
+	ASSERTI8(i1_to_i8_convert(0), 0);
+	ASSERTI8(i1_to_i8_convert(-1), -1);
+	ASSERTI8(i1_to_i8_convert(U1_55), U1_55);
+	ASSERTI8(i1_to_i8_convert(-U1_55), -U1_55);
+	ASSERTI8(i1_to_i8_convert(I1_MIN), I1_MIN);
+	ASSERTI8(i1_to_i8_convert(I1_MAX), I1_MAX);
+}
+
+TEST i2_to_i8_convert_Main()
+{
+	extern i8 i2_to_i8_convert(i2 a);
+	ASSERTI8(i2_to_i8_convert(U2_MAGIC), U2_MAGIC);
+	ASSERTI8(i2_to_i8_convert(0), 0);
+	ASSERTI8(i2_to_i8_convert(-1), -1);
+	ASSERTI8(i2_to_i8_convert(U1_55), U1_55);
+	ASSERTI8(i2_to_i8_convert(U1_AA), U1_AA);
+	ASSERTI8(i2_to_i8_convert(U2_55), U2_55);
+	ASSERTI8(i2_to_i8_convert(-U1_55), -U1_55);
+	ASSERTI8(i2_to_i8_convert(-U1_AA), -U1_AA);
+	ASSERTI8(i2_to_i8_convert(-U2_55), -U2_55);
+	ASSERTI8(i2_to_i8_convert(I2_MIN), I2_MIN);
+	ASSERTI8(i2_to_i8_convert(I2_MAX), I2_MAX);
+}
+
+TEST i4_to_i8_convert_Main()
+{
+	extern i8 i4_to_i8_convert(i4 a);
+	ASSERTI8(i4_to_i8_convert(U4_MAGIC), U4_MAGIC);
+	ASSERTI8(i4_to_i8_convert(0), 0);
+	ASSERTI8(i4_to_i8_convert(-1), -1);
+	ASSERTI8(i4_to_i8_convert(U1_55), U1_55);
+	ASSERTI8(i4_to_i8_convert(U1_AA), U1_AA);
+	ASSERTI8(i4_to_i8_convert(U2_55), U2_55);
+	ASSERTI8(i4_to_i8_convert(U2_AA), U2_AA);
+	ASSERTI8(i4_to_i8_convert(U4_55), U4_55);
+	ASSERTI8(i4_to_i8_convert(-U1_55), -U1_55);
+	ASSERTI8(i4_to_i8_convert(-U1_AA), -U1_AA);
+	ASSERTI8(i4_to_i8_convert(-U2_55), -U2_55);
+	ASSERTI8(i4_to_i8_convert(-U2_AA), -U2_AA);
+	ASSERTI8(i4_to_i8_convert(-U4_55), -U4_55);
+	ASSERTI8(i4_to_i8_convert(I4_MAX), I4_MAX);
+	ASSERTI8(i4_to_i8_convert(I4_MIN), I4_MIN);
+}
+
+TEST i8_to_i8_convert_Main()
+{
+	extern i8 i8_to_i8_convert(i8 a);
+	ASSERTI8(i8_to_i8_convert(U8_MAGIC), U8_MAGIC);
+	ASSERTI8(i8_to_i8_convert(0), 0);
+	ASSERTI8(i8_to_i8_convert(-1), -1);
+	ASSERTI8(i8_to_i8_convert(U1_55), U1_55);
+	ASSERTI8(i8_to_i8_convert(U1_AA), U1_AA);
+	ASSERTI8(i8_to_i8_convert(U2_55), U2_55);
+	ASSERTI8(i8_to_i8_convert(U2_AA), U2_AA);
+	ASSERTI8(i8_to_i8_convert(U4_55), U4_55);
+	ASSERTI8(i8_to_i8_convert(U4_AA), U4_AA);
+	ASSERTI8(i8_to_i8_convert(U8_55), U8_55);
+	ASSERTI8(i8_to_i8_convert(-U1_55), -U1_55);
+	ASSERTI8(i8_to_i8_convert(-U1_AA), -U1_AA);
+	ASSERTI8(i8_to_i8_convert(-U2_55), -U2_55);
+	ASSERTI8(i8_to_i8_convert(-U2_AA), -U2_AA);
+	ASSERTI8(i8_to_i8_convert(-U4_55), -U4_55);
+	ASSERTI8(i8_to_i8_convert(-U8_55), -U8_55);
+	ASSERTI8(i8_to_i8_convert(I8_MAX), I8_MAX);
+	ASSERTI8(i8_to_i8_convert(I8_MIN), I8_MIN);
+}
+
+TEST u1_to_i8_convert_Main()
+{
+	extern i8 u1_to_i8_convert(u1 a);
+	ASSERTI8(u1_to_i8_convert(U1_MAGIC), U1_MAGIC);
+	ASSERTI8(u1_to_i8_convert(0), 0);
+	ASSERTI8(u1_to_i8_convert(U1_55), U1_55);
+	ASSERTI8(u1_to_i8_convert(U1_AA), U1_AA);
+	ASSERTI8(u1_to_i8_convert(U1_MAX), U1_MAX);
+	ASSERTI8(u1_to_i8_convert(U1_MSB), U1_MSB);
+	ASSERTI8(u1_to_i8_convert(I1_MAX), I1_MAX);
+}
+
+TEST u2_to_i8_convert_Main()
+{
+	extern i8 u2_to_i8_convert(u2 a);
+	ASSERTI8(u2_to_i8_convert(U2_MAGIC), U2_MAGIC);
+	ASSERTI8(u2_to_i8_convert(0), 0);
+	ASSERTI8(u2_to_i8_convert(U1_55), U1_55);
+	ASSERTI8(u2_to_i8_convert(U1_AA), U1_AA);
+	ASSERTI8(u2_to_i8_convert(U2_55), U2_55);
+	ASSERTI8(u2_to_i8_convert(U2_AA), U2_AA);
+	ASSERTI8(u2_to_i8_convert(U2_MAX), U2_MAX);
+	ASSERTI8(u2_to_i8_convert(U2_MSB), U2_MSB);
+	ASSERTI8(u2_to_i8_convert(I2_MAX), I2_MAX);
+}
+
+TEST u4_to_i8_convert_Main()
+{
+	extern i8 u4_to_i8_convert(u4 a);
+	ASSERTI8(u4_to_i8_convert(U4_MAGIC), U4_MAGIC);
+	ASSERTI8(u4_to_i8_convert(0), 0);
+	ASSERTI8(u4_to_i8_convert(U4_MAX), U4_MAX);
+	ASSERTI8(u4_to_i8_convert(U1_55), U1_55);
+	ASSERTI8(u4_to_i8_convert(U1_AA), U1_AA);
+	ASSERTI8(u4_to_i8_convert(U2_55), U2_55);
+	ASSERTI8(u4_to_i8_convert(U2_AA), U2_AA);
+	ASSERTI8(u4_to_i8_convert(U4_55), U4_55);
+	ASSERTI8(u4_to_i8_convert(U4_AA), U4_AA);
+	ASSERTI8(u4_to_i8_convert(U4_MSB), U4_MSB);
+	ASSERTI8(u4_to_i8_convert(I4_MAX), I4_MAX);
+}
+
+TEST i8_to_u1_convert_Main()
+{
+	extern u1 i8_to_u1_convert(i8 a);
+	ASSERTU1(i8_to_u1_convert(0), 0);
+	ASSERTU1(i8_to_u1_convert(-1), U1_MAX);
+	ASSERTU1(i8_to_u1_convert(U1_55), U1_55);
+	ASSERTU1(i8_to_u1_convert(U1_AA), U1_AA);
+	ASSERTU1(i8_to_u1_convert(U2_55), U1_55);
+	ASSERTU1(i8_to_u1_convert(U2_AA), U1_AA);
+	ASSERTU1(i8_to_u1_convert(U4_55), U1_55);
+	ASSERTU1(i8_to_u1_convert(U4_AA), U1_AA);
+	ASSERTU1(i8_to_u1_convert(U8_55), U1_55);
+	ASSERTU1(i8_to_u1_convert(-U1_55), U1_AB);
+	ASSERTU1(i8_to_u1_convert(-U1_AA), U1_56);
+	ASSERTU1(i8_to_u1_convert(-U2_55), U1_AB);
+	ASSERTU1(i8_to_u1_convert(-U2_AA), U1_56);
+	ASSERTU1(i8_to_u1_convert(-U4_55), U1_AB);
+	ASSERTU1(i8_to_u1_convert(-U8_55), U1_AB);
+	ASSERTU1(i8_to_u1_convert(I8_MAX), U1_MAX);
+	ASSERTU1(i8_to_u1_convert(I8_MIN), 0);
+	ASSERTU1(i8_to_u1_convert(U8_MAGIC), U1_MAGIC);
+}
+
+TEST i8_to_u2_convert_Main()
+{
+	extern u2 i8_to_u2_convert(i8 a);
+	ASSERTU2(i8_to_u2_convert(0), 0);
+	ASSERTU2(i8_to_u2_convert(-1), U2_MAX);
+	ASSERTU2(i8_to_u2_convert(U1_55), U1_55);
+	ASSERTU2(i8_to_u2_convert(U1_AA), U1_AA);
+	ASSERTU2(i8_to_u2_convert(U2_55), U2_55);
+	ASSERTU2(i8_to_u2_convert(U2_AA), U2_AA);
+	ASSERTU2(i8_to_u2_convert(U4_55), U2_55);
+	ASSERTU2(i8_to_u2_convert(U4_AA), U2_AA);
+	ASSERTU2(i8_to_u2_convert(U8_55), U2_55);
+	ASSERTU2(i8_to_u2_convert(-U1_55), U21_AB);
+	ASSERTU2(i8_to_u2_convert(-U1_AA), U21_56);
+	ASSERTU2(i8_to_u2_convert(-U2_55), U2_AB);
+	ASSERTU2(i8_to_u2_convert(-U2_AA), U2_56);
+	ASSERTU2(i8_to_u2_convert(-U4_55), U2_AB);
+	ASSERTU2(i8_to_u2_convert(-U8_55), U2_AB);
+	ASSERTU2(i8_to_u2_convert(I8_MAX), U2_MAX);
+	ASSERTU2(i8_to_u2_convert(I8_MIN), 0);
+	ASSERTU2(i8_to_u2_convert(U8_MAGIC), U2_MAGIC);
+}
+
+TEST i8_to_u4_convert_Main()
+{
+	extern u4 i8_to_u4_convert(i8 a);
+	ASSERTU4(i8_to_u4_convert(0), 0);
+	ASSERTU4(i8_to_u4_convert(-1), U4_MAX);
+	ASSERTU4(i8_to_u4_convert(U1_55), U1_55);
+	ASSERTU4(i8_to_u4_convert(U1_AA), U1_AA);
+	ASSERTU4(i8_to_u4_convert(U2_55), U2_55);
+	ASSERTU4(i8_to_u4_convert(U2_AA), U2_AA);
+	ASSERTU4(i8_to_u4_convert(U4_55), U4_55);
+	ASSERTU4(i8_to_u4_convert(U4_AA), U4_AA);
+	ASSERTU4(i8_to_u4_convert(U8_55), U4_55);
+	ASSERTU4(i8_to_u4_convert(-U1_55), U41_AB);
+	ASSERTU4(i8_to_u4_convert(-U1_AA), U41_56);
+	ASSERTU4(i8_to_u4_convert(-U2_55), U42_AB);
+	ASSERTU4(i8_to_u4_convert(-U2_AA), U42_56);
+	ASSERTU4(i8_to_u4_convert(-U4_55), U4_AB);
+	ASSERTU4(i8_to_u4_convert(-U8_55), U4_AB);
+	ASSERTU4(i8_to_u4_convert(I8_MAX), U4_MAX);
+	ASSERTU4(i8_to_u4_convert(I8_MIN), 0);
+	ASSERTU4(i8_to_u4_convert(U8_MAGIC), U4_MAGIC);
+}
+
+TEST u8_to_i1_convert_Main()
+{
+	extern i1 u8_to_i1_convert(u8 a);
+	ASSERTI1(u8_to_i1_convert(U8_MAGIC), U1_MAGIC);
+	ASSERTI1(u8_to_i1_convert(0), 0);
+	ASSERTI1(u8_to_i1_convert(U1_55), U1_55);
+	ASSERTI1(u8_to_i1_convert(U1_AA), -U1_56);
+	ASSERTI1(u8_to_i1_convert(U2_55), U1_55);
+	ASSERTI1(u8_to_i1_convert(U2_AA), -U1_56);
+	ASSERTI1(u8_to_i1_convert(U4_55), U1_55);
+	ASSERTI1(u8_to_i1_convert(U4_AA), -U1_56);
+	ASSERTI1(u8_to_i1_convert(U8_55), U1_55);
+	ASSERTI1(u8_to_i1_convert(U8_AA), -U1_56);
+	ASSERTI1(u8_to_i1_convert(U8_MAX), -1);
+	ASSERTI1(u8_to_i1_convert(U1_MAX), -1);
+	ASSERTI1(u8_to_i1_convert(I8_MAX), -1);
+	ASSERTI1(u8_to_i1_convert(U8_MSB), 0);
+	ASSERTI1(u8_to_i1_convert(I1_MAX), I1_MAX);
+	ASSERTI1(u8_to_i1_convert(U1_MSB), I1_MIN);
+}
+
+TEST u8_to_i2_convert_Main()
+{
+	extern i2 u8_to_i2_convert(u8 a);
+	ASSERTI2(u8_to_i2_convert(U8_MAGIC), U2_MAGIC);
+	ASSERTI2(u8_to_i2_convert(0), 0);
+	ASSERTI2(u8_to_i2_convert(U1_55), U1_55);
+	ASSERTI2(u8_to_i2_convert(U1_AA), U1_AA);
+	ASSERTI2(u8_to_i2_convert(U2_55), U2_55);
+	ASSERTI2(u8_to_i2_convert(U2_AA), -U2_56);
+	ASSERTI2(u8_to_i2_convert(U4_55), U2_55);
+	ASSERTI2(u8_to_i2_convert(U4_AA), -U2_56);
+	ASSERTI2(u8_to_i2_convert(U8_55), U2_55);
+	ASSERTI2(u8_to_i2_convert(U8_AA), -U2_56);
+	ASSERTI2(u8_to_i2_convert(U8_MAX), -1);
+	ASSERTI2(u8_to_i2_convert(U2_MAX), -1);
+	ASSERTI2(u8_to_i2_convert(I8_MAX), -1);
+	ASSERTI2(u8_to_i2_convert(U8_MSB), 0);
+	ASSERTI2(u8_to_i2_convert(I2_MAX), I2_MAX);
+	ASSERTI2(u8_to_i2_convert(U2_MSB), I2_MIN);
+}
+
+TEST u8_to_i4_convert_Main()
+{
+	extern i4 u8_to_i4_convert(u8 a);
+	ASSERTI4(u8_to_i4_convert(U8_MAGIC), U4_MAGIC);
+	ASSERTI4(u8_to_i4_convert(0), 0);
+	ASSERTI4(u8_to_i4_convert(U1_55), U1_55);
+	ASSERTI4(u8_to_i4_convert(U1_AA), U1_AA);
+	ASSERTI4(u8_to_i4_convert(U2_55), U2_55);
+	ASSERTI4(u8_to_i4_convert(U2_AA), U2_AA);
+	ASSERTI4(u8_to_i4_convert(U4_55), U4_55);
+	ASSERTI4(u8_to_i4_convert(U4_AA), -U4_56);
+	ASSERTI4(u8_to_i4_convert(U8_55), U4_55);
+	ASSERTI4(u8_to_i4_convert(U8_AA), -U4_56);
+	ASSERTI4(u8_to_i4_convert(U8_MAX), -1);
+	ASSERTI4(u8_to_i4_convert(U4_MAX), -1);
+	ASSERTI4(u8_to_i4_convert(I8_MAX), -1);
+	ASSERTI4(u8_to_i4_convert(U8_MSB), 0);
+	ASSERTI4(u8_to_i4_convert(I4_MAX), I4_MAX);
+	ASSERTI4(u8_to_i4_convert(U4_MSB), I4_MIN);
+}
+
+TEST u8_to_u1_convert_Main()
+{
+	extern u1 u8_to_u1_convert(u8 a);
+	ASSERTU1(u8_to_u1_convert(0), 0);
+	ASSERTU1(u8_to_u1_convert(U1_55), U1_55);
+	ASSERTU1(u8_to_u1_convert(U1_AA), U1_AA);
+	ASSERTU1(u8_to_u1_convert(U2_55), U1_55);
+	ASSERTU1(u8_to_u1_convert(U2_AA), U1_AA);
+	ASSERTU1(u8_to_u1_convert(U4_55), U1_55);
+	ASSERTU1(u8_to_u1_convert(U4_AA), U1_AA);
+	ASSERTU1(u8_to_u1_convert(U8_55), U1_55);
+	ASSERTU1(u8_to_u1_convert(U8_AA), U1_AA);
+	ASSERTU1(u8_to_u1_convert(U8_MAX), U1_MAX);
+	ASSERTU1(u8_to_u1_convert(I8_MAX), U1_MAX);
+	ASSERTU1(u8_to_u1_convert(U8_MSB), 0);
+	ASSERTU1(u8_to_u1_convert(U8_MAGIC), U1_MAGIC);
+}
+
+TEST u8_to_u2_convert_Main()
+{
+	extern u2 u8_to_u2_convert(u8 a);
+	ASSERTU2(u8_to_u2_convert(0), 0);
+	ASSERTU2(u8_to_u2_convert(U1_55), U1_55);
+	ASSERTU2(u8_to_u2_convert(U1_AA), U1_AA);
+	ASSERTU2(u8_to_u2_convert(U2_55), U2_55);
+	ASSERTU2(u8_to_u2_convert(U2_AA), U2_AA);
+	ASSERTU2(u8_to_u2_convert(U4_55), U2_55);
+	ASSERTU2(u8_to_u2_convert(U4_AA), U2_AA);
+	ASSERTU2(u8_to_u2_convert(U8_55), U2_55);
+	ASSERTU2(u8_to_u2_convert(U8_AA), U2_AA);
+	ASSERTU2(u8_to_u2_convert(U8_MAX), U2_MAX);
+	ASSERTU2(u8_to_u2_convert(I8_MAX), U2_MAX);
+	ASSERTU2(u8_to_u2_convert(U8_MSB), 0);
+	ASSERTU2(u8_to_u2_convert(U8_MAGIC), U2_MAGIC);
+}
+
+TEST u8_to_u4_convert_Main()
+{
+	extern u4 u8_to_u4_convert(u8 a);
+	ASSERTU4(u8_to_u4_convert(0), 0);
+	ASSERTU4(u8_to_u4_convert(U1_55), U1_55);
+	ASSERTU4(u8_to_u4_convert(U1_AA), U1_AA);
+	ASSERTU4(u8_to_u4_convert(U2_55), U2_55);
+	ASSERTU4(u8_to_u4_convert(U2_AA), U2_AA);
+	ASSERTU4(u8_to_u4_convert(U4_55), U4_55);
+	ASSERTU4(u8_to_u4_convert(U4_AA), U4_AA);
+	ASSERTU4(u8_to_u4_convert(U8_55), U4_55);
+	ASSERTU4(u8_to_u4_convert(U8_AA), U4_AA);
+	ASSERTU4(u8_to_u4_convert(U8_MAX), U4_MAX);
+	ASSERTU4(u8_to_u4_convert(I8_MAX), U4_MAX);
+	ASSERTU4(u8_to_u4_convert(U8_MSB), 0);
+	ASSERTU4(u8_to_u4_convert(U8_MAGIC), U4_MAGIC);
+}
+
+TEST i1_to_u8_convert_Main()
+{
+	extern u8 i1_to_u8_convert(i1 a);
+	ASSERTU8(i1_to_u8_convert(0), 0);
+	ASSERTU8(i1_to_u8_convert(-1), U8_MAX);
+	ASSERTU8(i1_to_u8_convert(U1_55), U1_55);
+	ASSERTU8(i1_to_u8_convert(I1_MIN), U81_MSB);
+	ASSERTU8(i1_to_u8_convert(I1_MAX), I1_MAX);
+	ASSERTU8(i1_to_u8_convert(U1_MAGIC), U1_MAGIC);
+}
+
+TEST i2_to_u8_convert_Main()
+{
+	extern u8 i2_to_u8_convert(i2 a);
+	ASSERTU8(i2_to_u8_convert(0), 0);
+	ASSERTU8(i2_to_u8_convert(-1), U8_MAX);
+	ASSERTU8(i2_to_u8_convert(U1_55), U1_55);
+	ASSERTU8(i2_to_u8_convert(U1_AA), U1_AA);
+	ASSERTU8(i2_to_u8_convert(U2_55), U2_55);
+	ASSERTU8(i2_to_u8_convert(-U1_55), U81_AB);
+	ASSERTU8(i2_to_u8_convert(-U1_AA), U81_56);
+	ASSERTU8(i2_to_u8_convert(-U2_55), U82_AB);
+	ASSERTU8(i2_to_u8_convert(I2_MIN), U82_MSB);
+	ASSERTU8(i2_to_u8_convert(I2_MAX), I2_MAX);
+	ASSERTU8(i2_to_u8_convert(U2_MAGIC), U2_MAGIC);
+}
+
+TEST i4_to_u8_convert_Main()
+{
+	extern u8 i4_to_u8_convert(i4 a);
+	ASSERTU8(i4_to_u8_convert(0), U8_MIN);
+	ASSERTU8(i4_to_u8_convert(-1), U8_MAX);
+	ASSERTU8(i4_to_u8_convert(U1_55), U1_55);
+	ASSERTU8(i4_to_u8_convert(U1_AA), U1_AA);
+	ASSERTU8(i4_to_u8_convert(U2_55), U2_55);
+	ASSERTU8(i4_to_u8_convert(U2_AA), U2_AA);
+	ASSERTU8(i4_to_u8_convert(U4_55), U4_55);
+	ASSERTU8(i4_to_u8_convert(-U1_55), U81_AB);
+	ASSERTU8(i4_to_u8_convert(-U1_AA), U81_56);
+	ASSERTU8(i4_to_u8_convert(-U2_55), U82_AB);
+	ASSERTU8(i4_to_u8_convert(-U2_AA), U82_56);
+	ASSERTU8(i4_to_u8_convert(-U4_55), U84_AB);
+	ASSERTU8(i4_to_u8_convert(I4_MAX), I4_MAX);
+	ASSERTU8(i4_to_u8_convert(I4_MIN), U84_MSB);
+	ASSERTU8(i4_to_u8_convert(U4_MAGIC), U4_MAGIC);
+}
+
+TEST u1_to_u8_convert_Main()
+{
+	extern u8 u1_to_u8_convert(u1 a);
+	ASSERTU8(u1_to_u8_convert(0), 0);
+	ASSERTU8(u1_to_u8_convert(U1_55), U1_55);
+	ASSERTU8(u1_to_u8_convert(U1_AA), U1_AA);
+	ASSERTU8(u1_to_u8_convert(U1_MAX), U1_MAX);
+	ASSERTU8(u1_to_u8_convert(U1_MSB), U1_MSB);
+	ASSERTU8(u1_to_u8_convert(I1_MAX), I1_MAX);
+	ASSERTU8(u1_to_u8_convert(U1_MAGIC), U1_MAGIC);
+}
+
+TEST u2_to_u8_convert_Main()
+{
+	extern u8 u2_to_u8_convert(u2 a);
+	ASSERTU8(u2_to_u8_convert(0), 0);
+	ASSERTU8(u2_to_u8_convert(U1_55), U1_55);
+	ASSERTU8(u2_to_u8_convert(U1_AA), U1_AA);
+	ASSERTU8(u2_to_u8_convert(U2_55), U2_55);
+	ASSERTU8(u2_to_u8_convert(U2_AA), U2_AA);
+	ASSERTU8(u2_to_u8_convert(U2_MAX), U2_MAX);
+	ASSERTU8(u2_to_u8_convert(U2_MSB), U2_MSB);
+	ASSERTU8(u2_to_u8_convert(I2_MAX), I2_MAX);
+	ASSERTU8(u2_to_u8_convert(U2_MAGIC), U2_MAGIC);
+}
+
+TEST u4_to_u8_convert_Main()
+{
+	extern u8 u4_to_u8_convert(u4 a);
+	ASSERTU8(u4_to_u8_convert(0), 0);
+	ASSERTU8(u4_to_u8_convert(U1_55), U1_55);
+	ASSERTU8(u4_to_u8_convert(U1_AA), U1_AA);
+	ASSERTU8(u4_to_u8_convert(U2_55), U2_55);
+	ASSERTU8(u4_to_u8_convert(U2_AA), U2_AA);
+	ASSERTU8(u4_to_u8_convert(U4_55), U4_55);
+	ASSERTU8(u4_to_u8_convert(U4_AA), U4_AA);
+	ASSERTU8(u4_to_u8_convert(U4_MAX), U4_MAX);
+	ASSERTU8(u4_to_u8_convert(U4_MSB), U4_MSB);
+	ASSERTU8(u4_to_u8_convert(I4_MAX), I4_MAX);
+	ASSERTU8(u4_to_u8_convert(U4_MAGIC), U4_MAGIC);
+}
+
+TEST u8_to_u8_convert_Main()
+{
+	extern u8 u8_to_u8_convert(u8 a);
+	ASSERTU8(u8_to_u8_convert(0), 0);
+	ASSERTU8(u8_to_u8_convert(U1_55), U1_55);
+	ASSERTU8(u8_to_u8_convert(U1_AA), U1_AA);
+	ASSERTU8(u8_to_u8_convert(U2_55), U2_55);
+	ASSERTU8(u8_to_u8_convert(U2_AA), U2_AA);
+	ASSERTU8(u8_to_u8_convert(U4_55), U4_55);
+	ASSERTU8(u8_to_u8_convert(U4_AA), U4_AA);
+	ASSERTU8(u8_to_u8_convert(U8_55), U8_55);
+	ASSERTU8(u8_to_u8_convert(U8_AA), U8_AA);
+	ASSERTU8(u8_to_u8_convert(U8_MAX), U8_MAX);
+	ASSERTU8(u8_to_u8_convert(U8_MSB), U8_MSB);
+	ASSERTU8(u8_to_u8_convert(I8_MAX), I8_MAX);
+	ASSERTU8(u8_to_u8_convert(U8_MAGIC), U8_MAGIC);
+}
+
+TEST u8_to_i8_convert_Main()
+{
+	extern i8 u8_to_i8_convert(u8 a);
+	ASSERTI8(u8_to_i8_convert(U8_MAGIC), U8_MAGIC);
+	ASSERTI8(u8_to_i8_convert(0), 0);
+	ASSERTI8(u8_to_i8_convert(U1_55), U1_55);
+	ASSERTI8(u8_to_i8_convert(U1_AA), U1_AA);
+	ASSERTI8(u8_to_i8_convert(U2_55), U2_55);
+	ASSERTI8(u8_to_i8_convert(U2_AA), U2_AA);
+	ASSERTI8(u8_to_i8_convert(U4_55), U4_55);
+	ASSERTI8(u8_to_i8_convert(U4_AA), U4_AA);
+	ASSERTI8(u8_to_i8_convert(U8_55), U8_55);
+	ASSERTI8(u8_to_i8_convert(U8_AA), -U8_56);
+	ASSERTI8(u8_to_i8_convert(U8_MAX), -1);
+	ASSERTI8(u8_to_i8_convert(U8_MSB), I8_MIN);
+	ASSERTI8(u8_to_i8_convert(I8_MAX), I8_MAX);
+}
+
+TEST i8_to_u8_convert_Main()
+{
+	extern u8 i8_to_u8_convert(i8 a);
+	ASSERTU8(i8_to_u8_convert(0), 0);
+	ASSERTU8(i8_to_u8_convert(-1), U8_MAX);
+	ASSERTU8(i8_to_u8_convert(U1_55), U1_55);
+	ASSERTU8(i8_to_u8_convert(U1_AA), U1_AA);
+	ASSERTU8(i8_to_u8_convert(U2_55), U2_55);
+	ASSERTU8(i8_to_u8_convert(U2_AA), U2_AA);
+	ASSERTU8(i8_to_u8_convert(U4_55), U4_55);
+	ASSERTU8(i8_to_u8_convert(U4_AA), U4_AA);
+	ASSERTU8(i8_to_u8_convert(U8_55), U8_55);
+	ASSERTU8(i8_to_u8_convert(-U1_55), U81_AB);
+	ASSERTU8(i8_to_u8_convert(-U1_AA), U81_56);
+	ASSERTU8(i8_to_u8_convert(-U2_55), U82_AB);
+	ASSERTU8(i8_to_u8_convert(-U2_AA), U82_56);
+	ASSERTU8(i8_to_u8_convert(-U4_55), U84_AB);
+	ASSERTU8(i8_to_u8_convert(-U8_55), U8_AB);
+	ASSERTU8(i8_to_u8_convert(I8_MAX), I8_MAX);
+	ASSERTU8(i8_to_u8_convert(I8_MIN), U8_MSB);
+	ASSERTU8(i8_to_u8_convert(U8_MAGIC), U8_MAGIC);
+}
+
+MAIN CONVERT_LONGLONG_main() { }
+
+#endif
\ No newline at end of file
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/GlobalVariables.test b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/GlobalVariables.test
index 7e084b0175..12699c6cb2 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/GlobalVariables.test
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/GlobalVariables.test
@@ -18,7 +18,7 @@ TEST pcode_AccessAndModifyGlobal_Main()
 
 TEST pcode_AccessGlobal_Main()
 {
-	extern i4 pcode_AccessGlobal();
+	extern i4 pcode_AccessGlobal(void);
 	i4 ret = pcode_AccessGlobal();
 	ASSERTI4(GLOBAL, GLOBAL);
 }
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/GlobalVariables_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/GlobalVariables_BODY.c
index 23a6e512fa..8e3cd24713 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/GlobalVariables_BODY.c
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/GlobalVariables_BODY.c
@@ -31,7 +31,7 @@ i4 pcode_AccessAndModifyGlobal(i4 arg1)
 	return tmp;
 }
 
-i4 pcode_AccessGlobal()
+i4 pcode_AccessGlobal(void)
 {
 	return GLOBAL;
 }
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/IterativeProcessingDoWhile_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/IterativeProcessingDoWhile_BODY.c
index 14c8b8d3c7..b2def3366b 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/IterativeProcessingDoWhile_BODY.c
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/IterativeProcessingDoWhile_BODY.c
@@ -15,7 +15,7 @@
  */
 #include "pcode_test.h"
 
-i4 pcode_StandardPostIncDoWhileLoop()
+i4 pcode_StandardPostIncDoWhileLoop(void)
 {
 	i4 ii = 0;
 	i4 accum = 0;
@@ -26,7 +26,7 @@ i4 pcode_StandardPostIncDoWhileLoop()
 	return accum;
 }
 
-i4 pcode_StandardPreIncDoWhileLoop()
+i4 pcode_StandardPreIncDoWhileLoop(void)
 {
 	i4 ii = 0;
 	i4 accum = 0;
@@ -37,7 +37,7 @@ i4 pcode_StandardPreIncDoWhileLoop()
 	return accum;
 }
 
-i4 pcode_StandardPostDecDoWhileLoop()
+i4 pcode_StandardPostDecDoWhileLoop(void)
 {
 	i4 ii = 5;
 	i4 accum = 0;
@@ -48,7 +48,7 @@ i4 pcode_StandardPostDecDoWhileLoop()
 	return accum;
 }
 
-i4 pcode_StandardPreDecDoWhileLoop()
+i4 pcode_StandardPreDecDoWhileLoop(void)
 {
 	i4 ii = 5;
 	i4 accum = 0;
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/IterativeProcessingFor_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/IterativeProcessingFor_BODY.c
index 296b2f4427..f6580c6f58 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/IterativeProcessingFor_BODY.c
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/IterativeProcessingFor_BODY.c
@@ -15,7 +15,7 @@
  */
 #include "pcode_test.h"
 
-i4 pcode_StandardPostIncForLoop()
+i4 pcode_StandardPostIncForLoop(void)
 {
 	i4 ii;
 	i4 accum = 0;
@@ -26,7 +26,7 @@ i4 pcode_StandardPostIncForLoop()
 	return accum;
 }
 
-i4 pcode_StandardPreIncForLoop()
+i4 pcode_StandardPreIncForLoop(void)
 {
 	i4 ii;
 	i4 accum = 0;
@@ -37,7 +37,7 @@ i4 pcode_StandardPreIncForLoop()
 	return accum;
 }
 
-i4 pcode_StandardPostDecForLoop()
+i4 pcode_StandardPostDecForLoop(void)
 {
 	i4 ii;
 	i4 accum = 0;
@@ -48,7 +48,7 @@ i4 pcode_StandardPostDecForLoop()
 	return accum;
 }
 
-i4 pcode_StandardPreDecForLoop()
+i4 pcode_StandardPreDecForLoop(void)
 {
 	i4 ii;
 	i4 accum = 0;
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/IterativeProcessingWhile_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/IterativeProcessingWhile_BODY.c
index bbf14e8804..1f60559a68 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/IterativeProcessingWhile_BODY.c
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/IterativeProcessingWhile_BODY.c
@@ -15,7 +15,7 @@
  */
 #include "pcode_test.h"
 
-i4 pcode_StandardPostIncWhileLoop()
+i4 pcode_StandardPostIncWhileLoop(void)
 {
 	i4 ii = 0;
 	i4 accum = 0;
@@ -26,7 +26,7 @@ i4 pcode_StandardPostIncWhileLoop()
 	return accum;
 }
 
-i4 pcode_StandardPreIncWhileLoop()
+i4 pcode_StandardPreIncWhileLoop(void)
 {
 	i4 ii = 0;
 	i4 accum = 0;
@@ -37,7 +37,7 @@ i4 pcode_StandardPreIncWhileLoop()
 	return accum;
 }
 
-i4 pcode_StandardPostDecWhileLoop()
+i4 pcode_StandardPostDecWhileLoop(void)
 {
 	i4 ii = 5;
 	i4 accum = 0;
@@ -48,7 +48,7 @@ i4 pcode_StandardPostDecWhileLoop()
 	return accum;
 }
 
-i4 pcode_StandardPreDecWhileLoop()
+i4 pcode_StandardPreDecWhileLoop(void)
 {
 	i4 ii = 5;
 	i4 accum = 0;
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/pcode_test.h b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/pcode_test.h
index 6787ee493b..85cfd83179 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/pcode_test.h
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/pcode_test.h
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -103,5 +103,1005 @@ NOINLINE i4 breakOnSubDone(const char *file, int line, const char *func);
 #define ASSERTF4(val, exp)  assertF4(__FILE__, __LINE__, 0, val, exp);
 #define ASSERTF8(val, exp)  assertF8(__FILE__, __LINE__, 0, val, exp);
 
-#endif /* PCODE_TEST_H */
 
+
+/**
+ * Macros for basic operations for a type.  Tries to shift values when possible
+ * to other registers to hopefully exercise more more SLEIGH code paths and
+ * corner cases based on specific register usage.
+ * TODO  `-fno-ipa-sra` would be nice for the dummy argument, not sure how to
+ *       get around that w/o or if it is even worth the dummy argument.
+ */
+
+#ifndef PCODE_COMPLEX_LOGIC
+#define PCODE_COMPLEX_LOGIC(typ)			\
+typ typ##_complexLogic(					\
+			typ a,				\
+			typ b,				\
+			typ c,				\
+			typ d,				\
+			typ e,				\
+			typ f)				\
+{							\
+	typ ret = 0;					\
+							\
+	if (a > b && b > c || d < e && f < e)		\
+		ret += 1;				\
+	if (a != b || a != c && d != e || f != e)	\
+		ret += 2;				\
+	if (a && b && c || d && e && f)			\
+		ret += 4;				\
+	if (a || b || c && d || e || f)			\
+		ret += 8;				\
+	return ret;					\
+}
+#endif
+#ifndef PCODE_COMPARE_LOGIC
+#define PCODE_COMPARE_LOGIC(typ)	\
+typ typ##_compareLogic(			\
+			typ lhs,	\
+			typ rhs)	\
+{					\
+	if (lhs == 0)			\
+		lhs += 1;		\
+	if (lhs < rhs)			\
+		lhs += 2;		\
+	if (lhs > rhs)			\
+		lhs += 4;		\
+	if (lhs != rhs)			\
+		lhs += 8;		\
+	if (lhs == rhs)			\
+		lhs += 16;		\
+	return lhs;			\
+}
+#endif
+#ifndef PCODE_SUBTRACT
+#define PCODE_SUBTRACT(typ)					\
+    static __attribute__((noinline))				\
+    typ typ##_subtract0(					\
+			typ lhs,				\
+			typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs - rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_subtract1(					\
+			__attribute__((unused))typ dummy,	\
+			typ lhs,				\
+			typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs - rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_subtract2(					\
+			typ rhs,				\
+			typ lhs)				\
+    {								\
+	typ z;							\
+	z = lhs - rhs;						\
+	return z;						\
+    }								\
+    typ typ##_subtract(						\
+		       typ lhs,					\
+		       typ rhs)					\
+    {								\
+	return typ##_subtract0(lhs,rhs) &			\
+	    typ##_subtract1(0,lhs,rhs) &			\
+	    typ##_subtract2(rhs, lhs);				\
+								\
+    }
+#endif
+#ifndef PCODE_SUBTRACT_FLOAT
+#define PCODE_SUBTRACT_FLOAT(typ)				\
+    typ typ##_subtract(typ lhs, typ rhs)			\
+    {								\
+	return lhs - rhs;					\
+    }
+#endif
+#ifndef PCODE_ADDITION
+#define PCODE_ADDITION(typ)					\
+    static __attribute__((noinline))				\
+    typ typ##_addition0(					\
+			typ lhs,				\
+			typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs + rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_addition1(					\
+			__attribute__((unused))typ dummy,	\
+			typ lhs,				\
+			typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs + rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_addition2(					\
+			typ rhs,				\
+			typ lhs)				\
+    {								\
+	typ z;							\
+	z = lhs + rhs;						\
+	return z;						\
+    }								\
+    typ typ##_addition(						\
+		       typ lhs,					\
+		       typ rhs)					\
+    {								\
+	return typ##_addition0(lhs, rhs) &			\
+	    typ##_addition1(0, lhs, rhs) &			\
+	    typ##_addition2(rhs, lhs);				\
+    }
+#endif
+#ifndef PCODE_ADDITION_FLOAT
+#define PCODE_ADDITION_FLOAT(typ)				\
+    typ typ##_addition(typ lhs, typ rhs)			\
+    {								\
+	return lhs + rhs;					\
+    }
+#endif
+#ifndef PCODE_BITWISE_AND
+#define PCODE_BITWISE_AND(typ)					\
+    static __attribute__((noinline))				\
+    typ typ##_bitwiseAnd0(					\
+			  typ lhs,				\
+			  typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs & rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_bitwiseAnd1(					\
+			  __attribute__((unused))typ dummy,	\
+			  typ lhs,				\
+			  typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs & rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_bitwiseAnd2(					\
+			  typ rhs,				\
+			  typ lhs)				\
+    {								\
+	typ z;							\
+	z = lhs & rhs;						\
+	return z;						\
+    }								\
+    typ typ##_bitwiseAnd(					\
+			 typ lhs,				\
+			 typ rhs)				\
+    {								\
+	return typ##_bitwiseAnd0(lhs, rhs) &			\
+	    typ##_bitwiseAnd1(0, lhs, rhs) &			\
+	    typ##_bitwiseAnd2(rhs, lhs);			\
+    }
+#endif
+#ifndef PCODE_BITWISE_AND_FLOAT
+#define PCODE_BITWISE_AND_FLOAT(typ)				\
+    typ typ##_bitwiseAnd(typ lhs, typ rhs)			\
+    {								\
+	return lhs & rhs;					\
+    }
+#endif
+#ifndef PCODE_BITWISE_OR
+#define PCODE_BITWISE_OR(typ)					\
+    static __attribute__((noinline))				\
+    typ typ##_bitwiseOr0(					\
+			typ lhs,				\
+			typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs | rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_bitwiseOr1(					\
+			__attribute__((unused))typ dummy,	\
+			typ lhs,				\
+			typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs | rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_bitwiseOr2(					\
+			typ rhs,				\
+			typ lhs)				\
+    {								\
+	typ z;							\
+	z = lhs | rhs;						\
+	return z;						\
+    }								\
+    typ typ##_bitwiseOr(					\
+			typ lhs,				\
+			typ rhs)				\
+    {								\
+	return typ##_bitwiseOr0(lhs, rhs) &			\
+	    typ##_bitwiseOr1(0, lhs, rhs) &			\
+	    typ##_bitwiseOr2(rhs, lhs);				\
+    }
+#endif
+#ifndef PCODE_BITWISE_OR_FLOAT
+#define PCODE_BITWISE_OR_FLOAT(typ)				\
+    typ typ##_bitwiseOr(typ lhs, typ rhs)			\
+    {								\
+	return lhs | rhs;					\
+    }
+#endif
+#ifndef PCODE_LOGICAL_AND
+#define PCODE_LOGICAL_AND(typ)					\
+    static __attribute__((noinline))				\
+    typ typ##_logicalAnd0(					\
+			 typ lhs,				\
+			 typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs && rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_logicalAnd1(					\
+			 __attribute__((unused))typ dummy,	\
+			 typ lhs,				\
+			 typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs && rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_logicalAnd2(					\
+			 typ rhs,				\
+			 typ lhs)				\
+    {								\
+	typ z;							\
+	z = lhs && rhs;						\
+	return z;						\
+    }								\
+    typ typ##_logicalAnd(					\
+			 typ lhs,				\
+			 typ rhs)				\
+    {								\
+	return typ##_logicalAnd0(lhs, rhs) &			\
+	    typ##_logicalAnd1(0, lhs, rhs) &			\
+	    typ##_logicalAnd2(rhs, lhs);			\
+    }
+#endif
+#ifndef PCODE_LOGICAL_AND_FLOAT
+#define PCODE_LOGICAL_AND_FLOAT(typ)					\
+    typ typ##_logicalAnd(typ lhs, typ rhs)			\
+    {								\
+	return lhs && rhs;					\
+    }
+#endif
+#ifndef PCODE_LOGICAL_OR
+#define PCODE_LOGICAL_OR(typ)					\
+    static __attribute__((noinline))				\
+    typ typ##_logicalOr0(					\
+			typ lhs,				\
+			typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs || rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_logicalOr1(					\
+			__attribute__((unused))typ dummy,	\
+			typ lhs,				\
+			typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs || rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_logicalOr2(					\
+			typ rhs,				\
+			typ lhs)				\
+    {								\
+	typ z;							\
+	z = lhs || rhs;						\
+	return z;						\
+    }								\
+    typ typ##_logicalOr(						\
+		       typ lhs,					\
+		       typ rhs)					\
+    {								\
+	return typ##_logicalOr0(lhs, rhs) &			\
+	    typ##_logicalOr1(0, lhs, rhs) &			\
+	    typ##_logicalOr2(rhs, lhs);				\
+    }
+#endif
+#ifndef PCODE_LOGICAL_OR_FLOAT
+#define PCODE_LOGICAL_OR_FLOAT(typ)				\
+    typ typ##_logicalOr(typ lhs, typ rhs)			\
+    {								\
+	return lhs || rhs;					\
+    }
+#endif
+#ifndef PCODE_LESSTHANEQUALS
+#define PCODE_LESSTHANEQUALS(typ)				\
+    static __attribute__((noinline))				\
+    typ typ##_lessThanEquals0(					\
+			      typ lhs,				\
+			      typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs <= rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_lessThanEquals1(					\
+			      __attribute__((unused))typ dummy,	\
+			      typ lhs,				\
+			      typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs <= rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_lessThanEquals2(					\
+			      typ rhs,				\
+			      typ lhs)				\
+    {								\
+	typ z;							\
+	z = lhs <= rhs;						\
+	return z;						\
+    }								\
+    typ typ##_lessThanEquals(					\
+			     typ lhs,				\
+			     typ rhs)				\
+    {								\
+	return typ##_lessThanEquals0(lhs, rhs) &		\
+	    typ##_lessThanEquals1(0, lhs, rhs) &		\
+	    typ##_lessThanEquals2(rhs, lhs);			\
+    }
+#endif
+#ifndef PCODE_LESSTHANEQUALS_FLOAT
+#define PCODE_LESSTHANEQUALS_FLOAT(typ)				\
+    typ typ##_lessThanEquals(typ lhs, typ rhs)			\
+    {								\
+	return lhs <= rhs;					\
+    }
+#endif
+#ifndef PCODE_LESSTHAN
+#define PCODE_LESSTHAN(typ)					\
+    static __attribute__((noinline))				\
+    typ typ##_lessThan0(					\
+			typ lhs,				\
+			typ rhs)				\
+    {								\
+	typ z;							\
+	z = lhs < rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_lessThan1(					\
+			__attribute__((unused))typ dummy,	\
+			typ lhs,				\
+			typ rhs)				\
+    {								\
+        typ z;							\
+	z = lhs < rhs;						\
+	return z;						\
+    }								\
+    static __attribute__((noinline))				\
+    typ typ##_lessThan2(					\
+			typ rhs,				\
+			typ lhs)				\
+    {								\
+	typ z;							\
+	z = lhs < rhs;						\
+	return z;						\
+    }								\
+    typ typ##_lessThan(						\
+		       typ lhs,					\
+		       typ rhs)					\
+    {								\
+	return typ##_lessThan0(lhs, rhs) &			\
+	    typ##_lessThan1(0, lhs, rhs) &			\
+	    typ##_lessThan2(rhs, lhs);				\
+    }
+#endif
+#ifndef PCODE_LESSTHAN_FLOAT
+#define PCODE_LESSTHAN_FLOAT(typ)				\
+    typ typ##_lessThan(typ lhs, typ rhs)				\
+    {								\
+	return (typ)(lhs < rhs);					\
+    }
+#endif
+#ifndef PCODE_GREATERTHANEQUALS
+#define PCODE_GREATERTHANEQUALS(typ)					\
+    static __attribute__((noinline))					\
+    typ typ##_greaterThanEquals0(					\
+				 typ lhs,				\
+				 typ rhs)				\
+    {									\
+	typ z;								\
+	z = lhs >= rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_greaterThanEquals1(					\
+				 __attribute__((unused))typ dummy,	\
+				 typ lhs,				\
+				 typ rhs)				\
+    {									\
+	typ z;								\
+	z = lhs >= rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_greaterThanEquals2(					\
+				 typ rhs,				\
+				 typ lhs)				\
+    {									\
+	typ z;								\
+	z = lhs >= rhs;							\
+	return z;							\
+    }									\
+    typ typ##_greaterThanEquals(					\
+				typ lhs,				\
+				typ rhs)				\
+    {									\
+	return typ##_greaterThanEquals0(lhs, rhs) &			\
+	    typ##_greaterThanEquals1(0, lhs, rhs) &			\
+	    typ##_greaterThanEquals2(rhs, lhs);				\
+    }
+#endif
+#ifndef PCODE_GREATERTHANEQUALS_FLOAT
+#define PCODE_GREATERTHANEQUALS_FLOAT(typ)				\
+    typ typ##_greaterThanEquals(typ lhs, typ rhs)			\
+    {									\
+	return lhs >= rhs;						\
+    }
+#endif
+#ifndef PCODE_GREATERTHAN
+#define PCODE_GREATERTHAN(typ)						\
+    static __attribute__((noinline))					\
+    typ typ##_greaterThan0(						\
+			   typ lhs,					\
+			   typ rhs)					\
+    {									\
+	typ z;								\
+	z = lhs > rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_greaterThan1(						\
+			   __attribute__((unused))typ dummy,		\
+			   typ lhs,					\
+			   typ rhs)					\
+    {									\
+	typ z;								\
+	z = lhs > rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_greaterThan2(						\
+			   typ rhs,					\
+			   typ lhs)					\
+    {									\
+	typ z;								\
+	z = lhs > rhs;							\
+	return z;							\
+    }									\
+    typ typ##_greaterThan(						\
+			  typ lhs,					\
+			  typ rhs)					\
+    {									\
+	return typ##_greaterThan0(lhs, rhs) &				\
+	    typ##_greaterThan1(0, lhs, rhs) &				\
+	    typ##_greaterThan2(rhs, lhs);				\
+    }
+#endif
+#ifndef PCODE_GREATERTHAN_FLOAT
+#define PCODE_GREATERTHAN_FLOAT(typ)					\
+    typ typ##_greaterThan(typ lhs, typ rhs)				\
+    {									\
+	return lhs > rhs;						\
+    }
+#endif
+#ifndef PCODE_EQUALS
+#define PCODE_EQUALS(typ)						\
+    static __attribute__((noinline))					\
+    typ typ##_equals0(							\
+		      typ lhs,						\
+		      typ rhs)						\
+    {									\
+	typ z;								\
+	z = lhs == rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_equals1(							\
+		      __attribute__((unused))typ dummy,			\
+		      typ lhs,						\
+		      typ rhs)						\
+    {									\
+	typ z;								\
+	z = lhs == rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_equals2(							\
+		      typ rhs,						\
+		      typ lhs)						\
+    {									\
+	typ z;								\
+	z = lhs == rhs;							\
+	return z;							\
+    }									\
+    typ typ##_equals(							\
+		     typ lhs,						\
+		     typ rhs)						\
+    {									\
+	return typ##_equals0(lhs, rhs) &				\
+	    typ##_equals1(0, lhs, rhs) &				\
+	    typ##_equals2(rhs, lhs);					\
+    }
+#endif
+#ifndef PCODE_EQUALS_FLOAT
+#define PCODE_EQUALS_FLOAT(typ)						\
+    typ typ##_equals(typ lhs, typ rhs)					\
+    {									\
+	return lhs == rhs;						\
+    }
+#endif
+#ifndef PCODE_NOTEQUALS
+#define PCODE_NOTEQUALS(typ)						\
+    static __attribute__((noinline))					\
+    typ typ##_notEquals0(						\
+			typ lhs,					\
+			typ rhs)					\
+    {									\
+        typ z;								\
+	z = lhs != rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_notEquals1(						\
+			__attribute__((unused))typ dummy,		\
+			typ lhs,					\
+			typ rhs)					\
+    {									\
+	typ z;								\
+	z = lhs != rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_notEquals2(						\
+			typ rhs,					\
+			typ lhs)					\
+    {									\
+	typ z;								\
+	z = lhs != rhs;							\
+	return z;							\
+    }									\
+    typ typ##_notEquals(						\
+			typ lhs,					\
+			typ rhs)					\
+    {									\
+	return typ##_notEquals0(lhs, rhs) &				\
+	    typ##_notEquals1(0, lhs, rhs) &				\
+	    typ##_notEquals2(rhs, lhs);					\
+    }
+#endif
+#ifndef PCODE_NOTEQUALS_FLOAT
+#define PCODE_NOTEQUALS_FLOAT(typ)					\
+    typ typ##_notEquals(typ lhs, typ rhs)				\
+    {									\
+	return lhs != rhs;						\
+    }
+#endif
+#ifndef PCODE_XOR
+#define PCODE_XOR(typ)							\
+    static __attribute__((noinline))					\
+    typ typ##_bitwiseXor0(						\
+			 typ lhs,					\
+			 typ rhs)					\
+    {									\
+	typ z;								\
+	z = lhs ^ rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_bitwiseXor1(						\
+			 __attribute__((unused))typ dummy,		\
+			 typ lhs,					\
+			 typ rhs)					\
+    {									\
+	typ z;								\
+	z = lhs ^ rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_bitwiseXor2(						\
+			 typ rhs,					\
+			 typ lhs)					\
+    {									\
+	typ z;								\
+	z = lhs ^ rhs;							\
+	return z;							\
+    }									\
+    typ typ##_bitwiseXor(						\
+			 typ lhs,					\
+			 typ rhs)					\
+    {									\
+	return typ##_bitwiseXor0(lhs, rhs) &				\
+	    typ##_bitwiseXor1(0, lhs, rhs) &				\
+	    typ##_bitwiseXor2(rhs, lhs);				\
+    }
+#endif
+#ifndef PCODE_XOR_FLOAT
+#define PCODE_XOR_FLOAT(typ)						\
+    typ typ##_bitwiseXor(typ lhs, typ rhs)				\
+    {									\
+	return lhs ^ rhs;						\
+    }
+#endif
+#ifndef PCODE_SHIFTLEFT
+#define PCODE_SHIFTLEFT(typ)						\
+    static __attribute__((noinline))					\
+    typ typ##_shiftLeft0(						\
+			typ lhs,					\
+			typ rhs)					\
+    {									\
+	typ z;								\
+	z = lhs << rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_shiftLeft1(						\
+			__attribute__((unused))typ dummy,		\
+			typ lhs,					\
+			typ rhs)					\
+    {									\
+	typ z;								\
+	z = lhs << rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_shiftLeft2(						\
+			typ rhs,					\
+			typ lhs)					\
+    {									\
+	typ z;								\
+	z = lhs << rhs;							\
+	return z;							\
+    }									\
+    typ typ##_shiftLeft(						\
+			typ lhs,					\
+			typ rhs)					\
+    {									\
+	return typ##_shiftLeft0(lhs, rhs) &				\
+	    typ##_shiftLeft1(0, lhs, rhs) &				\
+	    typ##_shiftLeft2(rhs, lhs);					\
+    }
+#endif
+#ifndef PCODE_SHIFTLEFT_FLOAT
+#define PCODE_SHIFTLEFT_FLOAT(typ)					\
+    typ typ##_shiftLeft(typ lhs, typ rhs)				\
+    {									\
+	return lhs << rhs;						\
+    }
+#endif
+#ifndef PCODE_SHIFTRIGHT
+#define PCODE_SHIFTRIGHT(typ)						\
+    static __attribute__((noinline))					\
+    typ typ##_shiftRight0(						\
+			 typ lhs,					\
+			 typ rhs)					\
+    {									\
+	typ z;								\
+	z = lhs >> rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_shiftRight1(						\
+			 __attribute__((unused))typ dummy,		\
+			 typ lhs,					\
+			 typ rhs)					\
+    {									\
+	typ z;								\
+	z = lhs >> rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_shiftRight2(						\
+			 typ rhs,					\
+			 typ lhs)					\
+    {									\
+	typ z;								\
+	z = lhs >> rhs;							\
+	return z;							\
+    }									\
+    typ typ##_shiftRight(						\
+			 typ lhs,					\
+			 typ rhs)					\
+    {									\
+	return typ##_shiftRight0(lhs, rhs) &				\
+	    typ##_shiftRight1(0, lhs, rhs) &				\
+	    typ##_shiftRight2(rhs, lhs);				\
+    }
+#endif
+#ifndef PCODE_SHIFTRIGHT_FLOAT
+#define PCODE_SHIFTRIGHT_FLOAT(typ)					\
+    typ typ##_shiftRight(typ lhs, typ rhs)				\
+    {									\
+	return lhs >> rhs;						\
+    }
+#endif
+#ifndef PCODE_LOGICAL_NOT
+#define PCODE_LOGICAL_NOT(typ)						\
+    static __attribute__((noinline))					\
+    typ typ##_logicalNot0(typ a)					\
+    {									\
+	typ z;								\
+	z = !a;								\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_logicalNot1(__attribute__((unused))typ dummy,		\
+			  typ a)					\
+    {									\
+	typ z;								\
+	z = !a;								\
+	return z;							\
+    }									\
+    typ typ##_logicalNot(typ a)						\
+    {									\
+	return typ##_logicalNot0(a) &					\
+	    typ##_logicalNot1(0, a);					\
+    }
+#endif
+#ifndef PCODE_LOGICAL_NOT_FLOAT
+#define PCODE_LOGICAL_NOT_FLOAT(typ)					\
+    typ typ##_logicalNot(typ a)						\
+    {									\
+	return !a;							\
+    }
+#endif
+#ifndef PCODE_UNARY_PLUS
+#define PCODE_UNARY_PLUS(typ)						\
+    static __attribute__((noinline))					\
+    typ typ##_unaryPlus0(typ a)						\
+    {									\
+	typ z;								\
+	z = +a;								\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_unaryPlus1(__attribute__((unused))typ dummy,		\
+			 typ a)						\
+    {									\
+	typ z;								\
+	z = +a;								\
+	return z;							\
+    }									\
+    typ typ##_unaryPlus(typ a)						\
+    {									\
+	return typ##_unaryPlus0(a) &					\
+	    typ##_unaryPlus1(0, a);					\
+    }
+#endif
+#ifndef PCODE_UNARY_PLUS_FLOAT
+#define PCODE_UNARY_PLUS_FLOAT(typ)					\
+    typ typ##_unaryPlus(typ a)						\
+    {									\
+	return +a;							\
+    }
+#endif
+#ifndef PCODE_UNARY_MINUS
+#define PCODE_UNARY_MINUS(typ)						\
+    static __attribute__((noinline))					\
+    typ typ##_unaryMinus0(typ a)					\
+    {									\
+	typ z;								\
+	z = -a;								\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_unaryMinus1(__attribute__((unused))typ dummy,		\
+			  typ a)					\
+    {									\
+	typ z;								\
+	z = -a;								\
+	return z;							\
+    }									\
+    typ typ##_unaryMinus(typ a)						\
+    {									\
+	return typ##_unaryMinus0(a) &					\
+	    typ##_unaryMinus1(0, a);					\
+    }
+#endif
+#ifndef PCODE_UNARY_MINUS_FLOAT
+#define PCODE_UNARY_MINUS_FLOAT(typ)					\
+    typ typ##_unaryMinus(typ a)						\
+    {									\
+	return -a;							\
+    }
+#endif
+#ifndef PCODE_DIV
+#define PCODE_DIV(typ)							\
+    static __attribute__((noinline))					\
+    typ typ##_divide0(							\
+		      typ lhs,						\
+		      typ rhs)						\
+    {									\
+	typ z;								\
+	z = lhs / rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_divide1(							\
+		      __attribute__((unused))typ dummy,			\
+		      typ lhs,						\
+		      typ rhs)						\
+    {									\
+	typ z;								\
+	z = lhs / rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_divide2(							\
+		      typ rhs,						\
+		      typ lhs)						\
+    {									\
+	typ z;								\
+	z = lhs / rhs;							\
+	return z;							\
+    }									\
+    typ typ##_divide(							\
+		     typ lhs,						\
+		     typ rhs)						\
+    {									\
+	return typ##_divide0(lhs, rhs) &				\
+	    typ##_divide1(0, lhs, rhs) &				\
+	    typ##_divide2(rhs, lhs);					\
+    }
+#endif
+#ifndef PCODE_DIV_FLOAT
+#define PCODE_DIV_FLOAT(typ)						\
+    typ typ##_divide(typ lhs, typ rhs)					\
+    {									\
+	return lhs / rhs;						\
+    }
+#endif
+#ifndef PCODE_REM
+#define PCODE_REM(typ)							\
+    static __attribute__((noinline))					\
+    typ typ##_remainder0(						\
+			 typ lhs,					\
+			 typ rhs)					\
+    {									\
+	typ z;								\
+	z = lhs % rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_remainder1(						\
+			 __attribute__((unused))typ dummy,		\
+			 typ lhs,					\
+			 typ rhs)					\
+    {									\
+	typ z;								\
+	z = lhs % rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_remainder2(						\
+			 typ rhs,					\
+			 typ lhs)					\
+    {									\
+	typ z;								\
+	z = lhs % rhs;							\
+	return z;							\
+    }									\
+    typ typ##_remainder(						\
+			typ lhs,					\
+			typ rhs)					\
+    {									\
+	return typ##_remainder0(lhs, rhs) &				\
+	    typ##_remainder1(0, lhs, rhs) &				\
+	    typ##_remainder2(rhs, lhs);					\
+    }
+#endif
+#ifndef PCODE_REM_FLOAT
+#define PCODE_REM_FLOAT(typ)						\
+    typ typ##_remainder(typ lhs, typ rhs)				\
+    {									\
+	return lhs % rhs;						\
+    }
+#endif
+#ifndef PCODE_MUL
+#define PCODE_MUL(typ)							\
+    static __attribute__((noinline))					\
+    typ typ##_multiply0(						\
+			typ lhs,					\
+			typ rhs)					\
+    {									\
+	typ z;								\
+	z = lhs * rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_multiply1(						\
+			__attribute__((unused))typ dummy,		\
+			typ lhs,					\
+			typ rhs)					\
+    {									\
+	typ z;								\
+	z = lhs * rhs;							\
+	return z;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ typ##_multiply2(						\
+			typ rhs,					\
+			typ lhs)					\
+    {									\
+	typ z;								\
+	z = lhs * rhs;							\
+	return z;							\
+    }									\
+    typ typ##_multiply(							\
+		       typ lhs,						\
+		       typ rhs)						\
+    {									\
+	return typ##_multiply0(lhs, rhs) &				\
+	    typ##_multiply1(0, lhs, rhs) &				\
+	    typ##_multiply2(rhs, lhs);					\
+    }
+#endif
+#ifndef PCODE_MUL_FLOAT
+#define PCODE_MUL_FLOAT(typ)						\
+    typ typ##_multiply(typ lhs, typ rhs)				\
+    {									\
+	return lhs * rhs;						\
+    }
+#endif
+#ifndef PCODE_CONVERT
+#define PCODE_CONVERT(typ, typ0)					\
+    static __attribute__((noinline))					\
+    typ0 typ##_to_##typ0##_convert0(typ a)				\
+    {									\
+	typ x = a;							\
+	typ0 y = (typ0)x;						\
+	return y;							\
+    }									\
+    static __attribute__((noinline))					\
+    typ0 typ##_to_##typ0##_convert1(__attribute__((unused))typ dummy,	\
+				    typ a)				\
+    {									\
+	typ x = a;							\
+	typ0 y = (typ0)x;						\
+	return y;							\
+    }									\
+    typ0 typ##_to_##typ0##_convert(typ a)				\
+    {									\
+	return typ##_to_##typ0##_convert0(a) &				\
+	    typ##_to_##typ0##_convert1(0, a);				\
+    }
+#endif
+#ifndef PCODE_CONVERT_FLOAT
+#define PCODE_CONVERT_FLOAT(typ, typ0)					\
+    typ0 typ##_to_##typ0##_convert(typ a)				\
+    {									\
+        return (typ0)a;							\
+    }
+#endif
+#endif /* PCODE_TEST_H */
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/types.h b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/types.h
index d02681a4ee..ed40f139d3 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/types.h
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/types.h
@@ -310,45 +310,65 @@ typedef i1 size_t;
 #define I8_MAX                   9223372036854775807LL
 #define I8_MIN                   (-I8_MAX - 1LL)
 
+/* made up useful defines */
+#define U1_MSB   0x80
+#define U2_MSB   0x8000
+#define U21_MSB  0xff80
+#define U4_MSB   0x80000000
+#define U41_MSB  0xffffff80
+#define U42_MSB  0xffff8000
+#define U8_MSB   0x8000000000000000
+#define U81_MSB  0xffffffffffffff80
+#define U82_MSB  0xffffffffffff8000
+#define U84_MSB  0xffffffff80000000
+#define U1_MAGIC 0x11
+#define U2_MAGIC 0x1211
+#define U4_MAGIC 0x14131211
+#define U8_MAGIC 0x1817161514131211
+#define U1_55    0x55
+#define U1_56    0x56
+#define U1_AA    0xAA
+#define U1_AB    0xAB
+#define U2_55    0x5555
+#define U2_56    0x5556
+#define U2_AA    0xAAAA
+#define U2_AB    0xAAAB
+#define U21_AB   0xFFAB
+#define U21_56   0xFF56
+#define U4_55    0x55555555
+#define U4_56    0x55555556
+#define U4_AA    0xAAAAAAAA
+#define U4_AB    0xAAAAAAAB
+#define U41_56   0xFFFFFF56
+#define U41_AB   0xFFFFFFAB
+#define U42_56   0xFFFF5556
+#define U42_AB   0xFFFFAAAB
+#define U8_55    0x5555555555555555
+#define U8_56    0x5555555555555556
+#define U8_AA    0xAAAAAAAAAAAAAAAA
+#define U8_AB    0xAAAAAAAAAAAAAAAB
+#define U81_AB   0xFFFFFFFFFFFFFFAB
+#define U82_AB   0xFFFFFFFFFFFFAAAB
+#define U84_AB   0xFFFFFFFFAAAAAAAB
+#define U81_56   0xFFFFFFFFFFFFFF56
+#define U82_56   0xFFFFFFFFFFFF5556
+
+
+
 /* Simulate float.h assumes IEEE standard format and 4 8 10 byte formats (FLT_, DBL_, LDBL_) (FLT_ maps to F4, DBL_ maps to F8) */
+#define DBL_MAX                  ((double)1.79769313486231570814527423731704357e+308L)
+#define DBL_MIN                  ((double)2.22507385850720138309023271733240406e-308L)
 
-#define DBL_DIG                  15
-#define DBL_EPSILON              2.2204460492503131e-16
-#define DBL_MANT_DIG             53
-#define DBL_MAX_10_EXP           308
-#define DBL_MAX                  1.7976931348623157e+308
-
-#define DBL_MAX_EXP              1024
-#define DBL_MIN_10_EXP           (-307)
-#define DBL_MIN                  2.2250738585072014e-308
-#define DBL_MIN_EXP              (-1021)
-
-#define LDBL_DIG                 18
-#define LDBL_EPSILON             1.08420217248550443401e-19L
-#define LDBL_MANT_DIG            64
-#define LDBL_MAX_10_EXP          4932
-#define LDBL_MAX_EXP             16384
-
-#define LDBL_MAX                 1.18973149535723176502e+4932L
-#define LDBL_MIN_10_EXP          (-4931)
-#define LDBL_MIN_EXP             (-16381)
-#define LDBL_MIN                 3.36210314311209350626e-4932L
-
-#define FLT_DIG                  6
-#define FLT_EPSILON              1.19209290e-7F
-#define FLT_MANT_DIG             24
-#define FLT_MAX_10_EXP           38
-#define FLT_MAX_EXP              128
-
-#define FLT_MAX                  3.40282347e+38F
-#define FLT_MIN_10_EXP           (-37)
-#define FLT_MIN_EXP              (-125)
-#define FLT_MIN                  1.17549435e-38F
-#define FLT_RADIX                2
-
-#define FLT_ROUNDS               1
+#define LDBL_MAX                 ((long double)1.18973149535723176502126385303097021e+4932L)
+#define LDBL_MIN                 ((long double)3.36210314311209350626267781732175260e-4932L)
+
+#define FLT_MAX                  ((float)3.40282346638528859811704183484516925e+38F)
+#define FLT_MIN                  ((float)1.17549435082228750796873653722224568e-38F)
 
 #define PI_SHORT 3.14
+#define M_PI     ((float)3.14159265358979323846)
+#define M_PIl    ((double)3.141592653589793238462643383279502884L)
+
 
 #ifdef HAS_LIBC
 #include <stdio.h>
@@ -366,3 +386,174 @@ void print_ulong(char *file, int line, char *func, unsigned long expected, unsig
 void print_float(char *file, int line, char *func, float expected, float val, char *ok);
 void print_val(char *name, int val);
 #endif
+
+
+/**
+ *  @attn  This is extremely unportable for endianess
+ *
+ *  Any checks that use `y` should be careful, there is no real good
+ *  way to do bitfield access with endianess correctly here it looks like.
+ */
+
+typedef union u1bits {
+    struct {
+	u1 b0:1;
+	u1 b1:1;
+	u1 b2:1;
+	u1 b3:1;
+	u1 b4:1;
+	u1 b5:1;
+	u1 b6:1;
+	u1 b7:1;
+    } x;
+    struct {
+	u1 w0:2;
+	u1 w1:4;
+	u1 w2:1;
+    } y;
+    u1 z;
+} u1bits;
+typedef union u2bits {
+    struct {
+	u2 b0:1;
+	u2 b1:1;
+	u2 b2:1;
+	u2 b3:1;
+	u2 b4:1;
+	u2 b5:1;
+	u2 b6:1;
+	u2 b7:1;
+	u2 b8:1;
+	u2 b9:1;
+	u2 b10:1;
+	u2 b11:1;
+	u2 b12:1;
+	u2 b13:1;
+	u2 b14:1;
+	u2 b15:1;
+    } x;
+    struct {
+	u2 w0:4;
+	u2 w1:8;
+	u2 w2:1;
+    } y;
+    u2 z;
+} u2bits;
+typedef union u4bits {
+    struct {
+	u4 b0:1;
+	u4 b1:1;
+	u4 b2:1;
+	u4 b3:1;
+	u4 b4:1;
+	u4 b5:1;
+	u4 b6:1;
+	u4 b7:1;
+	u4 b8:1;
+	u4 b9:1;
+	u4 b10:1;
+	u4 b11:1;
+	u4 b12:1;
+	u4 b13:1;
+	u4 b14:1;
+	u4 b15:1;
+	u4 b16:1;
+	u4 b17:1;
+	u4 b18:1;
+	u4 b19:1;
+	u4 b20:1;
+	u4 b21:1;
+	u4 b22:1;
+	u4 b23:1;
+	u4 b24:1;
+	u4 b25:1;
+	u4 b26:1;
+	u4 b27:1;
+	u4 b28:1;
+	u4 b29:1;
+	u4 b30:1;
+	u4 b31:1;
+    } x;
+    struct {
+	u4 w0:8;
+	u4 w1:16;
+	u4 w2:1;
+    } y;
+    u4 z;
+} u4bits;
+#ifdef HAS_LONGLONG
+typedef union u8bits {
+    struct {
+	u8 b0:1;
+	u8 b1:1;
+	u8 b2:1;
+	u8 b3:1;
+	u8 b4:1;
+	u8 b5:1;
+	u8 b6:1;
+	u8 b7:1;
+	u8 b8:1;
+	u8 b9:1;
+	u8 b10:1;
+	u8 b11:1;
+	u8 b12:1;
+	u8 b13:1;
+	u8 b14:1;
+	u8 b15:1;
+	u8 b16:1;
+	u8 b17:1;
+	u8 b18:1;
+	u8 b19:1;
+	u8 b20:1;
+	u8 b21:1;
+	u8 b22:1;
+	u8 b23:1;
+	u8 b24:1;
+	u8 b25:1;
+	u8 b26:1;
+	u8 b27:1;
+	u8 b28:1;
+	u8 b29:1;
+	u8 b30:1;
+	u8 b31:1;
+	u8 b32:1;
+	u8 b33:1;
+	u8 b34:1;
+	u8 b35:1;
+	u8 b36:1;
+	u8 b37:1;
+	u8 b38:1;
+	u8 b39:1;
+	u8 b40:1;
+	u8 b41:1;
+	u8 b42:1;
+	u8 b43:1;
+	u8 b44:1;
+	u8 b45:1;
+	u8 b46:1;
+	u8 b47:1;
+	u8 b48:1;
+	u8 b49:1;
+	u8 b50:1;
+	u8 b51:1;
+	u8 b52:1;
+	u8 b53:1;
+	u8 b54:1;
+	u8 b55:1;
+	u8 b56:1;
+	u8 b57:1;
+	u8 b58:1;
+	u8 b59:1;
+	u8 b60:1;
+	u8 b61:1;
+	u8 b62:1;
+	u8 b63:1;
+    } x;
+    struct {
+	u8 w0:16;
+	u8 w1:32;
+	u8 w2:1;
+    } y;
+    u8 z;
+} u8bits;
+#endif
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/defaults.py b/Ghidra/Extensions/SleighDevTools/pcodetest/defaults.py
index e397992c1f..982a3718f8 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/defaults.py
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/defaults.py
@@ -37,6 +37,7 @@ PCodeTest.defaults.has_float = 1
 PCodeTest.defaults.has_longlong = 1
 PCodeTest.defaults.has_shortfloat = 0
 PCodeTest.defaults.has_vector = 0
+PCodeTest.defaults.has_builtin = 0
 PCodeTest.defaults.small_build = 0
 PCodeTest.defaults.ld_library_path = ''
 PCodeTest.defaults.toolchain_type = 'gcc'
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py b/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py
index dd5dc2db57..000871e47c 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py
@@ -722,3 +722,76 @@ PCodeTest({
     'language_id': 'Xtensa:BE:32:default',
     'ccflags': '-L %(toolchain_dir)s/lib/gcc/xtensa-elf/%(gcc_version)s',
 })
+
+PCodeTest({
+    'name': 'RV64GC',
+    'build_all': 1,
+    'toolchain': 'RISCV/riscv64-elf',
+    'language_id': 'RISCV:LE:64:RV64GC',
+    'architecture_test': 'RISCV',
+    'ccflags': '-lgcc -march=rv64gc -mabi=lp64d',
+    'has_float': 1,
+    'has_double': 1,
+    'has_longlong': 1,
+    'has_builtin': 1,
+})
+
+PCodeTest({
+    'name': 'RV64G',
+    'build_all': 1,
+    'toolchain': 'RISCV/riscv64-elf',
+    'language_id': 'RISCV:LE:64:RV64G',
+    'architecture_test': 'RISCV',
+    'ccflags': '-lgcc -march=rv64g -mabi=lp64d',
+    'has_float': 1,
+    'has_double': 1,
+    'has_longlong': 1,
+})
+
+PCodeTest({
+    'name': 'RV32G',
+    'build_all': 1,
+    'toolchain': 'RISCV/riscv-elf',
+    'language_id': 'RISCV:LE:32:RV32G',
+    'architecture_test': 'RISCV',
+    'ccflags': '-lgcc -march=rv32g -mabi=ilp32d',
+    'has_float': 1,
+    'has_double': 1,
+    'has_longlong': 1,
+})
+
+PCodeTest({
+    'name': 'RV32GC',
+    'build_all': 1,
+    'toolchain': 'RISCV/riscv-elf',
+    'language_id': 'RISCV:LE:32:RV32GC',
+    'architecture_test': 'RISCV',
+    'ccflags': '-lgcc -march=rv32gc -mabi=ilp32d',
+    'has_float': 1,
+    'has_double': 1,
+    'has_longlong': 1,
+})
+
+PCodeTest({
+    'name': 'RV32IMC',
+    'build_all': 1,
+    'toolchain': 'RISCV/riscv-elf',
+    'language_id': 'RISCV:LE:32:RV32IMC',
+    'architecture_test': 'RISCV',
+    'ccflags': '-lgcc -march=rv32imc -mabi=ilp32',
+    'has_float': 0,
+    'has_double': 0,
+    'has_longlong': 0,
+})
+
+PCodeTest({
+    'name': 'RV32IM',
+    'build_all': 1,
+    'toolchain': 'RISCV/riscv-elf',
+    'language_id': 'RISCV:LE:32:RV32IM',
+    'architecture_test': 'RISCV',
+    'ccflags': '-lgcc -march=rv32im -mabi=ilp32',
+    'has_float': 0,
+    'has_double': 0,
+    'has_longlong': 0,
+})
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/pcodetest.py b/Ghidra/Extensions/SleighDevTools/pcodetest/pcodetest.py
index 3580e40a20..ab1a87a7cd 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/pcodetest.py
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/pcodetest.py
@@ -232,6 +232,11 @@ class PCodeBuildSDCC(PCodeTestBuild):
         f += ['-DHAS_FLOAT=1' if self.config.has_float else '-DHAS_FLOAT_OVERRIDE=1']
         f += ['-DHAS_DOUBLE=1' if self.config.has_double else '-DHAS_DOUBLE_OVERRIDE=1']
         f += ['-DHAS_LONGLONG=1' if self.config.has_longlong else '-DHAS_LONGLONG_OVERRIDE=1']
+
+        # this is just in case for future platforms, breaking logic out now
+        f += ['-DHAS_MULTIPLY=1']
+        f += ['-DHAS_DIVIDE=1']
+
         if self.config.has_shortfloat: f += ['-DHAS_SHORTFLOAT=1']
         if self.config.has_vector: f += ['-DHAS_VECTOR=1']
         if self.config.has_decimal128: f += ['-DHAS_DECIMAL128=1']
@@ -281,6 +286,11 @@ class PCodeBuildCCS(PCodeTestBuild):
         f += ['-DHAS_FLOAT=1' if self.config.has_float else '-DHAS_FLOAT_OVERRIDE=1']
         f += ['-DHAS_DOUBLE=1' if self.config.has_double else '-DHAS_DOUBLE_OVERRIDE=1']
         f += ['-DHAS_LONGLONG=1' if self.config.has_longlong else '-DHAS_LONGLONG_OVERRIDE=1']
+
+        # this is just in case for future platforms, breaking logic out now
+        f += ['-DHAS_MULTIPLY=1']
+        f += ['-DHAS_DIVIDE=1']
+
         if self.config.has_shortfloat: f += ['-DHAS_SHORTFLOAT=1']
         if self.config.has_vector: f += ['-DHAS_VECTOR=1']
         if self.config.has_decimal128: f += ['-DHAS_DECIMAL128=1']
@@ -383,6 +393,11 @@ class PCodeBuildGCC(PCodeTestBuild):
         f += ['-DHAS_FLOAT=1' if self.config.has_float else '-DHAS_FLOAT_OVERRIDE=1']
         f += ['-DHAS_DOUBLE=1' if self.config.has_double else '-DHAS_DOUBLE_OVERRIDE=1']
         f += ['-DHAS_LONGLONG=1' if self.config.has_longlong else '-DHAS_LONGLONG_OVERRIDE=1']
+
+        # this is just in case for future platforms, breaking logic out now
+        f += ['-DHAS_MULTIPLY=1']
+        f += ['-DHAS_DIVIDE=1']
+
         if self.config.has_shortfloat: f += ['-DHAS_SHORTFLOAT=1']
         if self.config.has_vector: f += ['-DHAS_VECTOR=1']
         if self.config.has_decimal128: f += ['-DHAS_DECIMAL128=1']
@@ -396,7 +411,8 @@ class PCodeBuildGCC(PCodeTestBuild):
         # or maybe f += ['-Xlinker', '--no-data-init']
         # This helps to alleviate undefined main, etc
         f += ['--entry', 'main']
-        f += ['-static', '-Wno-unused-macros', '-nodefaultlibs', '-nostartfiles', '-fno-builtin']
+        # f += ['-static', '-Wno-unused-macros', '-nodefaultlibs', '-nostartfiles', '-fno-stack-protector']
+        if not self.config.has_builtin: f += ['-fno-builtin']
         # can pass this if weak symbols aren't defined
         # f += ['-Xlinker', '--unresolved-symbols=ignore-all']
 
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/tpp.py b/Ghidra/Extensions/SleighDevTools/pcodetest/tpp.py
index 6c6246eabe..c796388b51 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/tpp.py
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/tpp.py
@@ -72,7 +72,8 @@ static const char %(main)s_NAME [] = "%(main)s";
         self.data['num'] = str(len(re.findall(r'^\s+ASSERT', self.data['body'], flags=re.MULTILINE)))
         self.c_write('''#define %(name)s_NUMB %(num)s
 static const char %(name)s_NAME [] = "%(name)s";
-static void %(name)s()
+static void %(name)s(void);
+static void %(name)s(void)
 {
 	noteTestMain(__FILE__, __LINE__, %(name)s_NAME);
 	{
@@ -122,7 +123,7 @@ static GroupInfo Info = {
  * get optimized away.
  **/
 
-GroupInfo *%(main)s_Force() {
+GroupInfo *%(main)s_Force(void) {
 	return &Info;
 }
 
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/test/processors/support/ProcessorEmulatorTestAdapter.java b/Ghidra/Features/Base/src/main/java/ghidra/test/processors/support/ProcessorEmulatorTestAdapter.java
index 0936a9b85d..86b95be77d 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/test/processors/support/ProcessorEmulatorTestAdapter.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/test/processors/support/ProcessorEmulatorTestAdapter.java
@@ -2254,4 +2254,23 @@ public abstract class ProcessorEmulatorTestAdapter extends TestCase implements E
 		// stub
 	}
 
+	public final void test_CONVERT() {
+		// stub
+	}
+
+	public final void test_CONVERT_DOUBLE() {
+		// stub
+	}
+
+	public final void test_CONVERT_FLOAT() {
+		// stub
+	}
+
+	public final void test_CONVERT_LONGLONG() {
+		// stub
+	}
+
+	public final void test_BUILTIN() {
+		// stub
+	}
 }
-- 
2.43.0

