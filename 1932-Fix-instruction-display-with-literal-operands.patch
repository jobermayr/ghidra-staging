From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan=20Sch=C3=A4r?= <jscissr@gmail.com>
Date: Wed, 3 Jun 2020 00:52:32 +0200
Subject: [PATCH] 1932: Fix instruction display with literal operands

For instructions which only have literal string operands
(such as the Z80 IM 0/IM 1/IM2 instructions), previously
the operand was missing in the assembly view and in the search result
view, and could also not be found by search.
ALso fixes #550.
---
 ...structionMnemonicOperandFieldSearcher.java |  8 ++--
 .../util/viewer/field/OperandFieldHelper.java | 39 ++++++++++++-------
 .../program/model/listing/CodeUnitFormat.java | 20 +++++-----
 3 files changed, 40 insertions(+), 27 deletions(-)

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/searchtext/databasesearcher/InstructionMnemonicOperandFieldSearcher.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/searchtext/databasesearcher/InstructionMnemonicOperandFieldSearcher.java
index 16a4e1a454..d66cd07418 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/searchtext/databasesearcher/InstructionMnemonicOperandFieldSearcher.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/searchtext/databasesearcher/InstructionMnemonicOperandFieldSearcher.java
@@ -172,10 +172,12 @@ public class InstructionMnemonicOperandFieldSearcher extends ProgramDatabaseFiel
 			}
 		}
 		// check for separator before first operand
-		if (nOperands > 0) {
-			String separator = instruction.getSeparator(0);
-			if (separator != null) {
+		String separator = instruction.getSeparator(0);
+		if (separator != null) {
+			if (nOperands > 0) {
 				opStrings[0] = separator + opStrings[0];
+			} else {
+				return new String[] {separator};
 			}
 		}
 		return opStrings;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/viewer/field/OperandFieldHelper.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/viewer/field/OperandFieldHelper.java
index c3d456b94f..9faefb37fb 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/viewer/field/OperandFieldHelper.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/viewer/field/OperandFieldHelper.java
@@ -420,19 +420,28 @@ abstract class OperandFieldHelper extends FieldFactory {
 
 	private ListingField getFieldForInstruction(Instruction inst, ProxyObj<?> proxy, int varWidth) {
 		int numOperands = inst.getNumOperands();
-		if (numOperands == 0) {
-			return null;
-		}
 
-		List<OperandFieldElement> elements = new ArrayList<>();
-		int characterOffset = createSeparatorFieldElement(inst, 0, 0, 0, 0, elements);
+		List<FieldElement> elements = new ArrayList<>();
+		if (numOperands == 0) {
+			String separator = inst.getSeparator(0);
+			if (separator == null) {
+				return null;
+			}
 
-		for (int opIndex = 0; opIndex < numOperands; opIndex++) {
-			OperandRepresentationList operandRepresentationList =
-				codeUnitFormat.getOperandRepresentationList(inst, opIndex);
-			characterOffset = addElementsForOperand(inst, elements, opIndex,
-				operandRepresentationList, characterOffset);
-			characterOffset = 0;
+			AttributedString as = new AttributedString(separator, separatorAttributes.colorAttribute,
+				getMetrics(separatorAttributes.styleAttribute));
+			FieldElement fieldElement = new TextFieldElement(as, 0, 0);
+			elements.add(fieldElement);
+		} else {
+			int characterOffset = createSeparatorFieldElement(inst, 0, 0, 0, 0, elements);
+
+			for (int opIndex = 0; opIndex < numOperands; opIndex++) {
+				OperandRepresentationList operandRepresentationList =
+					codeUnitFormat.getOperandRepresentationList(inst, opIndex);
+				characterOffset = addElementsForOperand(inst, elements, opIndex,
+					operandRepresentationList, characterOffset);
+				characterOffset = 0;
+			}
 		}
 
 		// There may be operands with no representation objects, so we don't want to create a composite field element.
@@ -443,7 +452,7 @@ abstract class OperandFieldHelper extends FieldFactory {
 			new CompositeFieldElement(elements), startX + varWidth, width, hlProvider);
 	}
 
-	private int addElementsForOperand(Instruction inst, List<OperandFieldElement> elements,
+	private int addElementsForOperand(Instruction inst, List<FieldElement> elements,
 			int opIndex, OperandRepresentationList opRepList, int characterOffset) {
 		int subOpIndex = 0;
 		if (opRepList == null || opRepList.hasError()) {
@@ -466,7 +475,7 @@ abstract class OperandFieldHelper extends FieldFactory {
 			characterOffset, elements);
 	}
 
-	private int addElements(Instruction inst, List<OperandFieldElement> elements, List<?> objList,
+	private int addElements(Instruction inst, List<FieldElement> elements, List<?> objList,
 			int opIndex, int subOpIndex, boolean underline, int characterOffset) {
 		for (Object element : objList) {
 			characterOffset = addElement(inst, elements, element, underline, opIndex, subOpIndex,
@@ -475,7 +484,7 @@ abstract class OperandFieldHelper extends FieldFactory {
 		return characterOffset;
 	}
 
-	private int addElement(Instruction inst, List<OperandFieldElement> elements, Object opElem,
+	private int addElement(Instruction inst, List<FieldElement> elements, Object opElem,
 			boolean underline, int opIndex, int subOpIndex, int characterOffset) {
 
 		if (opElem instanceof VariableOffset) {
@@ -498,7 +507,7 @@ abstract class OperandFieldHelper extends FieldFactory {
 	}
 
 	private int createSeparatorFieldElement(Instruction instruction, int separatorIndex,
-			int opIndex, int subOpIndex, int characterOffset, List<OperandFieldElement> elements) {
+			int opIndex, int subOpIndex, int characterOffset, List<FieldElement> elements) {
 		String separator = instruction.getSeparator(separatorIndex);
 		if (separator == null) {
 			return characterOffset;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/program/model/listing/CodeUnitFormat.java b/Ghidra/Features/Base/src/main/java/ghidra/program/model/listing/CodeUnitFormat.java
index f91fc128d0..d24fc4d0e9 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/program/model/listing/CodeUnitFormat.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/program/model/listing/CodeUnitFormat.java
@@ -115,17 +115,19 @@ public class CodeUnitFormat {
 		if (cu instanceof Instruction) {
 			Instruction instr = (Instruction) cu;
 			int n = instr.getNumOperands();
+			String separator = instr.getSeparator(0);
+			if (separator != null || n != 0) {
+				stringBuffer.append(" ");
+			}
+			if (separator != null) {
+				stringBuffer.append(separator);
+			}
 			for (int i = 0; i < n; i++) {
-				if (i == 0) {
-					stringBuffer.append(" ");
-				}
-				else {
-					String separator = instr.getSeparator(i);
-					if (separator != null && separator.length() != 0) {
-						stringBuffer.append(separator);
-					}
-				}
 				stringBuffer.append(getOperandRepresentationString(cu, i));
+				separator = instr.getSeparator(i + 1);
+				if (separator != null) {
+					stringBuffer.append(separator);
+				}
 			}
 		}
 		else { // data always has one operand
-- 
2.43.0

