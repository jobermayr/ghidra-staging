From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Shawn Shchory <shawn@oxeye.io>
Date: Sun, 4 Dec 2022 15:54:23 +0200
Subject: [PATCH] 4796: Adding skip capabilities

Add skip mannager capablities to oxeye ghidra

Add skip mannager capablities to oxeye ghidra
---
 .../function/NewFunctionStackAnalysisCmd.java |  7 ++-
 .../app/util/headless/HeadlessAnalyzer.java   |  2 +-
 .../program/disassemble/Disassembler.java     |  9 ++++
 .../Framework/Utility/certification.manifest  |  1 +
 .../main/java/ghidra/util/SkipManager.java    | 48 +++++++++++++++++++
 .../src/main/java/ghidra/util/Skipper.java    | 21 ++++++++
 6 files changed, 86 insertions(+), 2 deletions(-)
 create mode 100644 Ghidra/Framework/Utility/src/main/java/ghidra/util/SkipManager.java
 create mode 100644 Ghidra/Framework/Utility/src/main/java/ghidra/util/Skipper.java

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/function/NewFunctionStackAnalysisCmd.java b/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/function/NewFunctionStackAnalysisCmd.java
index 1bb46f308b..47af8f4430 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/function/NewFunctionStackAnalysisCmd.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/function/NewFunctionStackAnalysisCmd.java
@@ -31,6 +31,7 @@ import ghidra.program.model.scalar.Scalar;
 import ghidra.program.model.symbol.*;
 import ghidra.program.util.*;
 import ghidra.util.Msg;
+import ghidra.util.SkipManager;
 import ghidra.util.exception.*;
 import ghidra.util.task.TaskMonitor;
 
@@ -112,16 +113,20 @@ public class NewFunctionStackAnalysisCmd extends BackgroundCommand<Program> {
 
 		monitor.initialize(numAddresses);
 		FunctionIterator functions = program.getFunctionManager().getFunctions(entryPoints, true);
+		SkipManager m = SkipManager.getInstance();
 		while (functions.hasNext()) {
 			if (monitor.isCancelled()) {
 				break;
 			}
 
 			Function func = functions.next();
+			boolean shouldSkip = m.shouldSkip(func.getName());
 			monitor.setProgress(++count);
 
 			monitor.setMessage("Stack " + func.getName());
-
+			if (shouldSkip) {
+				continue;
+			}
 			try {
 				if (!analyzeFunction(func, monitor)) {
 					setStatusMsg("Function overlaps an existing function body");
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/headless/HeadlessAnalyzer.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/headless/HeadlessAnalyzer.java
index d1d69c923f..26f586e85f 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/headless/HeadlessAnalyzer.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/headless/HeadlessAnalyzer.java
@@ -891,7 +891,7 @@ public class HeadlessAnalyzer {
 					Class<?> c = Class.forName(className, true, classLoaderForDotClassScripts);
 
 					// Get parent folder to pass to GhidraScript
-					File parentFile = new File(c.getResource(c.getSimpleName() + ".class").toURI())
+					File parentFile = new File(c.getResource(c.getSimpleName() + ".class").getPath())
 							.getParentFile();
 
 					currScript = (GhidraScript) c.getConstructor().newInstance();
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/disassemble/Disassembler.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/disassemble/Disassembler.java
index b6c80be916..7d26bbfe98 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/disassemble/Disassembler.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/disassemble/Disassembler.java
@@ -36,6 +36,7 @@ import ghidra.program.model.util.CodeUnitInsertionException;
 import ghidra.program.util.AbstractProgramContext;
 import ghidra.program.util.ProgramContextImpl;
 import ghidra.util.Msg;
+import ghidra.util.SkipManager;
 import ghidra.util.SystemUtilities;
 import ghidra.util.exception.CancelledException;
 import ghidra.util.task.TaskMonitor;
@@ -677,6 +678,7 @@ public class Disassembler implements DisassemblerConflictHandler {
 		Address fallThruAddr = firstBlock.getStartAddress(); // allow us to enter loop with initial block
 
 		InstructionBlock nextBlock;
+		SkipManager m = SkipManager.getInstance();
 		while ((nextBlock = disassemblerQueue.getNextBlockToBeDisassembled(fallThruAddr,
 			programMemBuffer.getMemory(), monitor)) != null) {
 
@@ -695,6 +697,13 @@ public class Disassembler implements DisassemblerConflictHandler {
 				}
 			}
 
+			boolean shouldSkip = m.shouldSkip(blockAddr.getOffset());
+			if (shouldSkip) {
+				programMemBuffer.setPosition(blockAddr);
+				fallThruAddr = nextBlock.getFallThrough();
+				continue;
+			}
+
 			if (!disassemblerContext.isFlowActive()) {
 				disassemblerContext.flowStart(blockAddr);
 			}
diff --git a/Ghidra/Framework/Utility/certification.manifest b/Ghidra/Framework/Utility/certification.manifest
index bf64a959e6..3f2ed3562b 100644
--- a/Ghidra/Framework/Utility/certification.manifest
+++ b/Ghidra/Framework/Utility/certification.manifest
@@ -1,3 +1,4 @@
 ##VERSION: 2.0
 Module.manifest||GHIDRA||reviewed||END|
 README.md||GHIDRA||||END|
+src/main/java/ghidra/util/SkipManager.java||GHIDRA||||END|
diff --git a/Ghidra/Framework/Utility/src/main/java/ghidra/util/SkipManager.java b/Ghidra/Framework/Utility/src/main/java/ghidra/util/SkipManager.java
new file mode 100644
index 0000000000..d845f50a87
--- /dev/null
+++ b/Ghidra/Framework/Utility/src/main/java/ghidra/util/SkipManager.java
@@ -0,0 +1,48 @@
+/* ###
+* IP: GHIDRA
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package ghidra.util;
+
+import java.util.ArrayList;
+
+public class SkipManager implements Skipper {
+    ArrayList<Skipper> skippers;
+    private static SkipManager inst;
+    private SkipManager() {
+        this.skippers = new ArrayList<Skipper>();
+    }
+
+    public static SkipManager getInstance() {
+        if(inst == null) {
+            inst = new SkipManager();
+        }
+        return inst;
+    }
+
+    public void registerSkipper(Skipper s) {
+        this.skippers.add(s);
+    }
+
+    @Override
+    public boolean shouldSkip(String functionName) {
+        return this.skippers.stream().anyMatch(skipper -> skipper.shouldSkip(functionName));
+    }
+
+    @Override
+    public boolean shouldSkip(long addr) {
+        return this.skippers.stream().anyMatch(skipper -> skipper.shouldSkip(addr));
+    }
+}
diff --git a/Ghidra/Framework/Utility/src/main/java/ghidra/util/Skipper.java b/Ghidra/Framework/Utility/src/main/java/ghidra/util/Skipper.java
new file mode 100644
index 0000000000..78b38a7344
--- /dev/null
+++ b/Ghidra/Framework/Utility/src/main/java/ghidra/util/Skipper.java
@@ -0,0 +1,21 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.util;
+
+public interface Skipper {
+    public boolean shouldSkip(String functionName);
+    public boolean shouldSkip(long addr);
+}
-- 
2.45.1

