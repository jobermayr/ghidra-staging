From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Vladimir Kononovich <meffi@lab313.ru>
Date: Mon, 29 Apr 2019 21:03:47 +0300
Subject: [PATCH] 0537: IDA Pro o_displ references exporting

Squashed:
Fixed exporting IDA references with o_displ flag. Added masking for memory reference addresses.
---
 .../IDAPro/Python/6xx/plugins/xmlexp.py       | 44 ++++++++++++-------
 .../IDAPro/Python/7xx/python/idaxml.py        | 43 +++++++++++-------
 2 files changed, 56 insertions(+), 31 deletions(-)

diff --git a/GhidraBuild/IDAPro/Python/6xx/plugins/xmlexp.py b/GhidraBuild/IDAPro/Python/6xx/plugins/xmlexp.py
index 5f0a831bca..304ce739a5 100644
--- a/GhidraBuild/IDAPro/Python/6xx/plugins/xmlexp.py
+++ b/GhidraBuild/IDAPro/Python/6xx/plugins/xmlexp.py
@@ -124,6 +124,7 @@ class XmlExporter:
         self.state = idaapi.setStat(idaapi.st_Work)
         self.indent_level = 0
         self.seg_addr = False
+        self.bitness = 1
         self.has_overlays = False
         self.hexrays = False
         self.options = None
@@ -1296,7 +1297,9 @@ class XmlExporter:
                 target = ri.target
             elif idaapi.isCode(f) == True:
                 idaapi.decode_insn(addr)
-                target = idaapi.cmd.Operands[op].value - ri.tdelta + ri.base
+                opnd = idaapi.cmd.Operands[op]
+                value = opnd.addr if opnd.type == idaapi.o_displ else opnd.value
+                target = value - ri.tdelta + ri.base
             elif idaapi.isData(f) == True:
                 target = self.get_data_value(addr) - ri.tdelta + ri.base;
             else:
@@ -1305,6 +1308,14 @@ class XmlExporter:
             return
         if idaapi.isEnabled(target) == False:
             return
+
+        if self.bitness == 0:
+            target &= 0xFFFF
+        elif self.bitness == 2:
+            target &= 0xFFFFFFFFFFFFFFFF
+        else:
+            target &= 0xFFFFFFFF
+
         self.start_element(MEMORY_REFERENCE)
         self.write_address_attribute(ADDRESS, addr)
         self.write_numeric_attribute(OPERAND_INDEX, op, 10)
@@ -1323,10 +1334,9 @@ class XmlExporter:
         f = idaapi.getFlags(addr)
         for op in range(idaapi.UA_MAXOP):
             if idaapi.isOff(f, op) == True and (idaapi.isData(f) == True or
-                    (idaapi.isCode(f) == True and
-                    self.is_imm_op(addr, op) == True)):
+               (idaapi.isCode(f) == True and self.is_imm_or_displ_op(addr, op) == True)):
                 self.export_memory_reference(addr, op)
-    
+
 
     def export_memory_section(self, seg, binfilename):
         """
@@ -1412,28 +1422,28 @@ class XmlExporter:
             byte_order ="little"
         self.write_attribute(ENDIAN, byte_order)
         self.seg_addr = False
-        bitness = 1
+        self.bitness = 1
         model_warning = False
         nsegs = idaapi.get_segm_qty()
         if (nsegs > 0):
-            bitness = idaapi.getnseg(0).bitness
+            self.bitness = idaapi.getnseg(0).bitness
             for i in range(1,nsegs):
                 seg = idaapi.getnseg(i)
-                if (seg.bitness != bitness):
+                if (seg.bitness != self.bitness):
                     model_warning = True
-                if (seg.bitness > bitness):
-                    bitness = seg.bitness
+                if (seg.bitness > self.bitness):
+                    self.bitness = seg.bitness
         addr_model = "32-bit"
-        if (bitness == 0):
+        if (self.bitness == 0):
             addr_model = "16-bit"
-        elif (bitness == 2):
+        elif (self.bitness == 2):
             addr_model = "64-bit"
         self.write_attribute(ADDRESS_MODEL, addr_model)
         self.close_tag()
         if (model_warning):
             idaapi.msg("WARNING: Segments do not have same " +
                        "addressing model!\n")
-        if (idaapi.ph.id == idaapi.PLFM_386 and bitness == 0):
+        if (idaapi.ph.id == idaapi.PLFM_386 and self.bitness == 0):
             self.seg_addr = True
         # find any overlayed memory before processing addressable items
         self.find_overlay_memory()
@@ -2146,20 +2156,22 @@ class XmlExporter:
         return "unknown"
 
 
-    def is_imm_op(self, addr, op):
+    def is_imm_or_displ_op(self, addr, op):
         """
-        Returns true if instruction operand at address is an immediate value.
+        Returns true if instruction operand at address is an immediate or
+        displaced (with base address) value.
         
         Args:
             addr: Integer representing instruction address.
             op: Integer representing operand index (0-based).
             
         Returns:
-            True if instruction operand at address is an immediate value.
+            True if instruction operand at address is an immediate or
+            displaced (with base address) value.
             False otherwise.
         """
         idaapi.decode_insn(addr)
-        if (idaapi.cmd.Operands[op].type == idaapi.o_imm):
+        if (idaapi.cmd.Operands[op].type in [idaapi.o_imm, idaapi.o_displ]):
             return True
         return False
         
diff --git a/GhidraBuild/IDAPro/Python/7xx/python/idaxml.py b/GhidraBuild/IDAPro/Python/7xx/python/idaxml.py
index f77b602721..53f5b88b73 100644
--- a/GhidraBuild/IDAPro/Python/7xx/python/idaxml.py
+++ b/GhidraBuild/IDAPro/Python/7xx/python/idaxml.py
@@ -266,6 +266,7 @@ class XmlExporter(IdaXml):
         IdaXml.__init__(self, arg)
         self.indent_level = 0
         self.seg_addr = False
+        self.bitness = 1
         self.has_overlays = False
         self.hexrays = False
         
@@ -1233,6 +1234,9 @@ class XmlExporter(IdaXml):
                 insn = ida_ua.insn_t()
                 ida_ua.decode_insn(insn, addr)
                 target = (insn.ops[op].value - ri.tdelta + ri.base) & ((1 << 64) - 1)
+                opnd = insn.ops[op]
+                value = opnd.addr if opnd.type == idc.o_displ else opnd.value
+                target = value - ri.tdelta + ri.base
             elif idc.is_data(f) == True:
                 target = (self.get_data_value(addr) - ri.tdelta + ri.base) & ((1 << 64) - 1)
             else:
@@ -1241,6 +1245,14 @@ class XmlExporter(IdaXml):
             return
         if ida_bytes.is_mapped(target) == False:
             return
+
+        if self.bitness == 0:
+            target &= 0xFFFF
+        elif self.bitness == 2:
+            target &= 0xFFFFFFFFFFFFFFFF
+        else:
+            target &= 0xFFFFFFFF
+
         self.start_element(MEMORY_REFERENCE)
         self.write_address_attribute(ADDRESS, addr)
         self.write_numeric_attribute(OPERAND_INDEX, op, 10)
@@ -1259,10 +1271,9 @@ class XmlExporter(IdaXml):
         f = idc.get_full_flags(addr)
         for op in range(ida_ida.UA_MAXOP):
             if ida_bytes.is_off(f, op) == True and (idc.is_data(f) == True or
-                    (idc.is_code(f) == True and
-                    self.is_imm_op(addr, op) == True)):
+               (idc.is_code(f) == True and self.is_imm_or_displ_op(addr, op) == True)):
                 self.export_memory_reference(addr, op)
-    
+
 
     def export_memory_section(self, seg, binfilename):
         """
@@ -1344,28 +1355,28 @@ class XmlExporter(IdaXml):
             byte_order ="little"
         self.write_attribute(ENDIAN, byte_order)
         self.seg_addr = False
-        bitness = 1
+        self.bitness = 1
         model_warning = False
         nsegs = ida_segment.get_segm_qty()
         if (nsegs > 0):
-            bitness = ida_segment.getnseg(0).bitness
+            self.bitness = ida_segment.getnseg(0).bitness
             for i in range(1,nsegs):
                 seg = ida_segment.getnseg(i)
-                if (seg.bitness != bitness):
+                if (seg.bitness != self.bitness):
                     model_warning = True
-                if (seg.bitness > bitness):
-                    bitness = seg.bitness
+                if (seg.bitness > self.bitness):
+                    self.bitness = seg.bitness
         addr_model = "32-bit"
-        if (bitness == 0):
+        if (self.bitness == 0):
             addr_model = "16-bit"
-        elif (bitness == 2):
+        elif (self.bitness == 2):
             addr_model = "64-bit"
         self.write_attribute(ADDRESS_MODEL, addr_model)
         self.close_tag()
         if (model_warning):
             idc.msg("WARNING: Segments do not have same " +
                        "addressing model!\n")
-        if (ida_idp.ph.id == ida_idp.PLFM_386 and bitness == 0):
+        if (ida_idp.ph.id == ida_idp.PLFM_386 and self.bitness == 0):
             self.seg_addr = True
         # find any overlayed memory before processing addressable items
         self.find_overlay_memory()
@@ -2019,21 +2030,23 @@ class XmlExporter(IdaXml):
         return "unknown"
 
 
-    def is_imm_op(self, addr, op):
+    def is_imm_or_displ_op(self, addr, op):
         """
-        Returns true if instruction operand at address is an immediate value.
+        Returns true if instruction operand at address is an immediate or
+        displaced (with base address) value.
         
         Args:
             addr: Integer representing instruction address.
             op: Integer representing operand index (0-based).
             
         Returns:
-            True if instruction operand at address is an immediate value.
+            True if instruction operand at address is an immediate or
+            displaced (with base address) value.
             False otherwise.
         """
         insn = ida_ua.insn_t()
         ida_ua.decode_insn(insn, addr)
-        if (insn.ops[op].type == idc.o_imm):
+        if (insn.ops[op].type in [idc.o_imm, idc.o_displ]):
             return True
         return False
         
-- 
2.45.1

