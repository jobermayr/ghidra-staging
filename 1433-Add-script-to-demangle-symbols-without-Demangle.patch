From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Matt Borgerson <contact@mborgerson.com>
Date: Tue, 14 Jan 2020 16:37:06 -0700
Subject: [PATCH] 1433: Add script to demangle symbols without DemangleCmd

---
 Ghidra/Features/Jython/certification.manifest |  1 +
 .../Jython/ghidra_scripts/DemangleMore.py     | 78 +++++++++++++++++++
 2 files changed, 79 insertions(+)
 create mode 100644 Ghidra/Features/Jython/ghidra_scripts/DemangleMore.py

diff --git a/Ghidra/Features/Jython/certification.manifest b/Ghidra/Features/Jython/certification.manifest
index d3b4b1eb36..68c0355ce5 100644
--- a/Ghidra/Features/Jython/certification.manifest
+++ b/Ghidra/Features/Jython/certification.manifest
@@ -3,6 +3,7 @@
 ##MODULE IP: LGPL 2.1
 Module.manifest||GHIDRA||||END|
 data/jython.theme.properties||GHIDRA||||END|
+ghidra_scripts/DemangleMore.py||GHIDRA||||END|
 src/main/help/help/TOC_Source.xml||GHIDRA||||END|
 src/main/help/help/topics/Jython/interpreter.html||GHIDRA||||END|
 src/main/resources/images/python.png||GHIDRA||||END|
diff --git a/Ghidra/Features/Jython/ghidra_scripts/DemangleMore.py b/Ghidra/Features/Jython/ghidra_scripts/DemangleMore.py
new file mode 100644
index 0000000000..409990e215
--- /dev/null
+++ b/Ghidra/Features/Jython/ghidra_scripts/DemangleMore.py
@@ -0,0 +1,78 @@
+# Attempts to more aggressively demangle any Microsoft-style mangled symbols.
+# DemanglerCmd is not used as it will filter by program format (e.g. Microsoft
+# Demangler will not be used if the executable format is not PE/COFF). Instead,
+# this script invokes the MicrosoftDemangler directly on any symbol prefixed by
+# `?`. Additionally, this script handles `@name@X` (fastcall) and `_name@X`
+# (stdcall) mangles.
+# @author: Matt Borgerson
+# @category: Symbol
+from ghidra.app.util.demangler import DemanglerOptions
+from ghidra.app.util.demangler.microsoft import MicrosoftDemangler
+from ghidra.program.model.symbol import SourceType
+import re
+
+st = currentProgram.getSymbolTable()
+n = currentProgram.getNamespaceManager().getGlobalNamespace()
+
+numDemangled = 0
+failures = []
+
+for s in st.getSymbols(n):
+  name = s.getName()
+  addr = s.getAddress()
+
+  if name.startswith('?'):
+    # Attempt using Microsoft demangler
+    try:
+      print('Demangling with Microsoft Demangler: %s' % name)
+      demangled = MicrosoftDemangler().demangle(name, True)
+      s.delete()
+      demangled.applyTo(currentProgram, addr, DemanglerOptions(), monitor)
+    except:
+      print('Failed to demangle %s' % name)
+      failures.append(name)
+
+  elif name.startswith('@') or name.startswith('_'):
+    # Attempt decoding @func@0 (__fastcall) and _func@0 (__stdcall) style mangle
+    # https://en.wikipedia.org/wiki/Name_mangling#Standardised_name_mangling_in_C++
+    isFastcall, isStdcall = False, False
+    realName, bytesInParams = '', 0
+
+    m = re.match('^@(\w+)@([0-9]+)$', name)
+    if m is not None:
+      isFastcall = True
+      realName, bytesInParams = m.groups()
+    else:
+      m = re.match('^_(\w+)@([0-9]+)$', name)
+      if m is not None:
+        isStdcall = True
+        realName, bytesInParams = m.groups()
+
+    if isFastcall or isStdcall:
+      print('Demangling: %s' % name)
+      bytesInParams = int(bytesInParams)
+
+      # Get or create the function
+      s.delete()
+      f = getFunctionAt(addr)
+      if f is None:
+        f = createFunction(addr, realName)
+
+      if f is None:
+        print('Couldn\'t create function for %s' % realName)
+        failures.append(name)
+      else:
+        f.setName(realName, SourceType.ANALYSIS)
+        f.setComment(name)
+        convention = '__fastcall' if isFastcall else '__stdcall'
+        f.setCallingConvention(convention)
+  else:
+    continue
+
+  numDemangled += 1
+
+print('Demangled %d names' % numDemangled)
+if len(failures) > 0:
+  print('Failed to demangle (%d):' % len(failures))
+  for n in sorted(failures):
+    print('- %s' % n)
-- 
2.45.1

