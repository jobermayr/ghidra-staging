From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Sleigh-InSPECtor <sleighinspector@outlook.com>
Date: Tue, 21 May 2024 10:57:21 +0930
Subject: [PATCH] 6558: x86: Fix interaction between REX.X and 67 prefix

---
 Ghidra/Processors/x86/data/languages/ia.sinc | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/Ghidra/Processors/x86/data/languages/ia.sinc b/Ghidra/Processors/x86/data/languages/ia.sinc
index 128f6c2676..8aad5def79 100644
--- a/Ghidra/Processors/x86/data/languages/ia.sinc
+++ b/Ghidra/Processors/x86/data/languages/ia.sinc
@@ -1010,17 +1010,17 @@ addr32: [Rmr32 + imm32]					is mod=2 & Rmr32; imm32                      { local
 addr32: [Rmr32]							is mod=2 & r_m!=4 & Rmr32; imm32=0           { local tmp=Rmr32; export tmp; }
 addr32: [imm32]							is mod=0 & r_m=5; imm32                      { export *[const]:4 imm32; }
 addr32: [Base + Index*ss]				is mod=0 & r_m=4; Index & Base & ss          { local tmp=Base+Index*ss; export tmp; }
-addr32: [Base]							is mod=0 & r_m=4; index=4 & Base             { local tmp=Base; export tmp; }
+addr32: [Base]							is mod=0 & r_m=4; rexXprefix=0 & index=4 & Base             { local tmp=Base; export tmp; }
 addr32: [Index*ss + imm32]				is mod=0 & r_m=4; Index & base=5 & ss; imm32 { local tmp=imm32+Index*ss; export tmp; }
-addr32: [imm32]							is mod=0 & r_m=4; index=4 & base=5; imm32    { export *[const]:4 imm32; }
+addr32: [imm32]							is mod=0 & r_m=4; rexXprefix=0 & index=4 & base=5; imm32    { export *[const]:4 imm32; }
 addr32: [Base + Index*ss + simm8_32]	is mod=1 & r_m=4; Index & Base & ss; simm8_32    { local tmp=simm8_32+Base+Index*ss; export tmp; }
-addr32: [Base + simm8_32]				is mod=1 & r_m=4; index=4 & Base; simm8_32   { local tmp=simm8_32+Base; export tmp; }
+addr32: [Base + simm8_32]				is mod=1 & r_m=4; rexXprefix=0 & index=4 & Base; simm8_32   { local tmp=simm8_32+Base; export tmp; }
 addr32: [Base + Index*ss]				is mod=1 & r_m=4; Index & Base & ss; simm8=0 { local tmp=Base+Index*ss; export tmp; }
-addr32: [Base]							is mod=1 & r_m=4; index=4 & Base; simm8=0    { local tmp=Base; export tmp; }
+addr32: [Base]							is mod=1 & r_m=4; rexXprefix=0 & index=4 & Base; simm8=0    { local tmp=Base; export tmp; }
 addr32: [Base + Index*ss + imm32]		is mod=2 & r_m=4; Index & Base & ss; imm32   { local tmp=imm32+Base+Index*ss; export tmp; }
-addr32: [Base + imm32]					is mod=2 & r_m=4; index=4 & Base; imm32      { local tmp=imm32+Base; export tmp; }
+addr32: [Base + imm32]					is mod=2 & r_m=4; rexXprefix=0 & index=4 & Base; imm32      { local tmp=imm32+Base; export tmp; }
 addr32: [Base + Index*ss]				is mod=2 & r_m=4; Index & Base & ss; imm32=0 { local tmp=Base+Index*ss; export tmp; }
-addr32: [Base]							is mod=2 & r_m=4; index=4 & Base; imm32=0    { local tmp=Base; export tmp; }
+addr32: [Base]							is mod=2 & r_m=4; rexXprefix=0 & index=4 & Base; imm32=0    { local tmp=Base; export tmp; }
 @ifdef IA64
 
 Addr32_64: [pcRelSimm32_32]				is mod=0 & r_m=5; pcRelSimm32_32                { export *[const]:8 pcRelSimm32_32; }
-- 
2.45.1

