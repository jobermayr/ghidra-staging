From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Pavlo Shevchenko <pshevchenko@gradle.com>
Date: Mon, 8 Nov 2021 15:31:42 +0100
Subject: [PATCH] 3612: Optimize Gradle build with focus on incremental build
 support and output caching

---
 .../Framework-TraceModeling/build.gradle      | 12 +++++
 .../Extensions/bundle_examples/build.gradle   |  5 --
 Ghidra/Features/FunctionID/build.gradle       | 13 ++++-
 .../Common/support/buildExtension.gradle      | 49 +++++++++++++++--
 gradle.properties                             |  1 +
 gradle/distributableGhidraExtension.gradle    |  5 --
 gradle/distributableGhidraModule.gradle       |  2 +-
 gradle/externalGhidraExtension.gradle         |  5 --
 gradle/helpProject.gradle                     | 53 ++++++++++++++++---
 gradle/root/distribution.gradle               | 20 +++----
 gradle/support/extensionCommon.gradle         |  4 +-
 gradle/support/ip.gradle                      | 11 +++-
 settings.gradle                               |  1 +
 13 files changed, 140 insertions(+), 41 deletions(-)

diff --git a/Ghidra/Debug/Framework-TraceModeling/build.gradle b/Ghidra/Debug/Framework-TraceModeling/build.gradle
index c96d296ec8..dd230eba57 100644
--- a/Ghidra/Debug/Framework-TraceModeling/build.gradle
+++ b/Ghidra/Debug/Framework-TraceModeling/build.gradle
@@ -22,6 +22,18 @@ apply from: "${rootProject.projectDir}/gradle/javadoc.gradle"
 apply plugin: 'eclipse'
 eclipse.project.name = 'Debug Framework-TraceModeling'
 
+// The generation timestamp included in these help files
+// makes them different on every build which causes all consuming tasks to be re-executed every time
+// By excluding these files from crucial inputs using runtime classpath normalization,
+// we are able to re-use build artifacts of this project on incremental builds
+normalization {
+    runtimeClasspath {
+        ignore '**/help/*_HelpSet.hs'
+        ignore '**/help/*_map.xml'
+        ignore '**/help/*_TOC.xml'
+    }
+}
+
 dependencies {
 	api project(':Generic')
 	api project(':SoftwareModeling')
diff --git a/Ghidra/Extensions/bundle_examples/build.gradle b/Ghidra/Extensions/bundle_examples/build.gradle
index eb0b31dc45..ad780c95d4 100644
--- a/Ghidra/Extensions/bundle_examples/build.gradle
+++ b/Ghidra/Extensions/bundle_examples/build.gradle
@@ -140,10 +140,5 @@ rootProject.createInstallationZip {
 			ZIP_DIR_PREFIX + "/Extensions/Ghidra"
 		}
 	}
-	doLast {
-		this.project.zipExtensions.outputs.each {
-			delete it
-		}
-	}
 }
 
diff --git a/Ghidra/Features/FunctionID/build.gradle b/Ghidra/Features/FunctionID/build.gradle
index cf40dd0947..7ea8972d30 100644
--- a/Ghidra/Features/FunctionID/build.gradle
+++ b/Ghidra/Features/FunctionID/build.gradle
@@ -39,7 +39,18 @@ def fidDbFiles = fileTree(depsDir.exists() ? depsDir : binRepoDir) {
 }
 
 task unpackFidDatabases {
-	def p = project.file('build/data')
+	def p = project.file("$buildDir/data")
+
+	inputs.files(fidDbFiles.getFiles())
+			.withPropertyName("fidDbFiles")
+			.withPathSensitivity(PathSensitivity.RELATIVE)
+	// Adding task output to make use of Gradle's up-to-date check
+	// However, outputs in form of file trees are not supported by Gradle's build cache
+	// We would need to write these files to a separate folder if we'd like to enable caching
+	outputs.files fileTree(p).matching {
+		include "*.fidbf"
+	}
+
 	doLast {
 		fidDbFiles.each { file ->
 		
diff --git a/Ghidra/RuntimeScripts/Common/support/buildExtension.gradle b/Ghidra/RuntimeScripts/Common/support/buildExtension.gradle
index a01ac955b5..21389931c6 100644
--- a/Ghidra/RuntimeScripts/Common/support/buildExtension.gradle
+++ b/Ghidra/RuntimeScripts/Common/support/buildExtension.gradle
@@ -312,6 +312,43 @@ tasks.register('cleanHelp') {
 	}
 }
 
+// CommandLineArgumentProvider that supplies indexHelp task with relative help file paths
+// This allows build cache artifacts to be relocate-able across workspaces and machines.
+class HelpFilesPathProvider implements CommandLineArgumentProvider {
+	@InputDirectory
+	@PathSensitive(PathSensitivity.RELATIVE)
+	File helpFilePath
+
+	@Override
+	Iterable<String> asArguments() {
+		[helpFilePath.absolutePath]
+	}
+}
+
+// CommandLineArgumentProvider that supplies indexHelp task with the absolute path to the help output directory
+// This allows build cache artifacts to be relocate-able across workspaces and machines.
+class HelpOutputPathProvider implements CommandLineArgumentProvider {
+	@OutputDirectory
+	File helpOutputPath
+
+	@Override
+	Iterable<String> asArguments() {
+		["-db ${helpOutputPath.absolutePath}".toString()]
+	}
+}
+
+// CommandLineArgumentProvider that supplies indexHelp task with help config file
+// This allows build cache artifacts to be relocate-able across workspaces and machines.
+class HelpConfigFileProvider implements CommandLineArgumentProvider {
+	@InputFile
+	File helpConfigFile
+
+	@Override
+	Iterable<String> asArguments() {
+		["-c", "${helpConfigFile}".toString()]
+	}
+}
+
 // Task for calling the java help indexer, which creates a searchable index of the help contents
 tasks.register('indexHelp', JavaExec) {
 	group = "Ghidra Private"
@@ -319,8 +356,12 @@ tasks.register('indexHelp', JavaExec) {
 	File helpRootDir = file('src/main/help/help')		
 	File outputFile = file("build/help/main/help/${project.name}_JavaHelpSearch")	
 
-	inputs.dir helpRootDir skipWhenEmpty()
+	inputs.dir(helpRootDir)
+			.withPropertyName('helpRootDir')
+			.withPathSensitivity(PathSensitivity.RELATIVE)
+			skipWhenEmpty()
 	outputs.dir outputFile
+	outputs.cacheIf { true }
 	
 	classpath = sourceSets.main.runtimeClasspath
 	
@@ -344,15 +385,15 @@ tasks.register('indexHelp', JavaExec) {
 		configFile.write "IndexRemove ${helpRootDir.absolutePath}" + File.separator + "\n"
 	
 		// pass the config file we created as an argument to the indexer
-		args '-c',"$configFile"	
+		argumentProviders.add(new HelpConfigFileProvider(helpConfigFile: configFile))
 
 		// tell the indexer where send its output	
-		args '-db', outputFile.absolutePath
+		argumentProviders.add(new HelpOutputPathProvider(helpOutputPath: outputFile))
 			
 		
 		// for each help file that was found, add it as an argument to the indexer
 		helpFiles.each { File file ->
-			args "${file.absolutePath}"
+			argumentProviders.add(new HelpFilesPathProvider(helpFilePath: file))
 		}	
 	}
 }
diff --git a/gradle.properties b/gradle.properties
index 506214ca9e..c60ff6d8d9 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -7,3 +7,4 @@ org.gradle.archives.use-file-system-permissions=true
 
 # Set Ghidra protobuf version
 ghidra.protobuf.java.version=4.31.0
+org.gradle.caching=true
diff --git a/gradle/distributableGhidraExtension.gradle b/gradle/distributableGhidraExtension.gradle
index fb029f2782..0ff9b15f29 100644
--- a/gradle/distributableGhidraExtension.gradle
+++ b/gradle/distributableGhidraExtension.gradle
@@ -32,10 +32,5 @@ rootProject.createInstallationZip {
 		into  {
 			ZIP_DIR_PREFIX + "/Extensions/Ghidra"
 		}
-	} 
-	doLast {
-		this.project.zipExtensions.outputs.each {
-			delete it
-		}
 	}
 }
diff --git a/gradle/distributableGhidraModule.gradle b/gradle/distributableGhidraModule.gradle
index 5a7ab5ffef..ba20486eb3 100644
--- a/gradle/distributableGhidraModule.gradle
+++ b/gradle/distributableGhidraModule.gradle
@@ -47,7 +47,7 @@ rootProject.assembleDistribution {
 		into { "${zipPath}/data" }
 	}
 	
-	from ("${p.projectDir}/build/LICENSE.txt") {
+	from (ip) {
 		into { zipPath }
 	}
 
diff --git a/gradle/externalGhidraExtension.gradle b/gradle/externalGhidraExtension.gradle
index abda7a1d7e..870589bcde 100644
--- a/gradle/externalGhidraExtension.gradle
+++ b/gradle/externalGhidraExtension.gradle
@@ -18,10 +18,5 @@ apply from: "$rootProject.projectDir/gradle/support/extensionCommon.gradle"
 
 rootProject.createExternalExtensions {
 	from (this.project.zipExtensions)
-	doLast {
-		this.project.zipExtensions.outputs.each {
-			delete it
-		}
-	}
 }
 
diff --git a/gradle/helpProject.gradle b/gradle/helpProject.gradle
index fc74917c21..934770db53 100644
--- a/gradle/helpProject.gradle
+++ b/gradle/helpProject.gradle
@@ -226,8 +226,45 @@ tasks.register('cleanHelp') {
 	}
 }
 
-// Task for calling the java help indexer, which creates a searchable index of the help contents
-tasks.register('indexHelp', JavaExec) {
+// CommandLineArgumentProvider that supplies indexHelp task with relative help file paths
+// This allows build cache artifacts to be relocate-able across workspaces and machines.
+class HelpFilesPathProvider implements CommandLineArgumentProvider {
+	@InputDirectory
+	@PathSensitive(PathSensitivity.RELATIVE)
+	File helpFilePath
+
+	@Override
+	Iterable<String> asArguments() {
+		[helpFilePath.absolutePath]
+	}
+}
+
+// CommandLineArgumentProvider that supplies indexHelp task with the absolute path to the help output directory
+// This allows build cache artifacts to be relocate-able across workspaces and machines.
+class HelpOutputPathProvider implements CommandLineArgumentProvider {
+	@OutputDirectory
+	File helpOutputPath
+
+	@Override
+	Iterable<String> asArguments() {
+		["-db","${helpOutputPath.absolutePath}".toString()]
+	}
+}
+
+// CommandLineArgumentProvider that supplies indexHelp task with help config file
+// This allows build cache artifacts to be relocate-able across workspaces and machines.
+class HelpConfigFileProvider implements CommandLineArgumentProvider {
+	@InputFile
+	File helpConfigFile
+
+	@Override
+	Iterable<String> asArguments() {
+		["-c", "${helpConfigFile}".toString()]
+	}
+}
+
+// Task for calling the java help indexer, which creates a searchable index of the help contents.
+task indexHelp(type: JavaExec) {
 
 	group = "private"
 	description = "indexes the helps files for this module.  [gradle/helpProject.gradle]"
@@ -235,10 +272,13 @@ tasks.register('indexHelp', JavaExec) {
 	File helpRootDir = file('src/main/help/help')		
 	File outputFile = file("build/help/main/help/${project.name}_JavaHelpSearch")	
 
+	dependsOn configurations.runtimeClasspath
+
 	onlyIf ("There is no help root directory") { helpRootDir.exists() }
 
 	inputs.dir helpRootDir
 	outputs.dir outputFile
+	outputs.cacheIf { true }
 	
 	classpath = configurations.helpIndex
 	
@@ -269,17 +309,14 @@ tasks.register('indexHelp', JavaExec) {
 		configFile.write "IndexRemove ${helpRootDir.absolutePath}" + File.separator + "\n"
 	
 		// pass the config file we created as an argument to the indexer
-		args '-c',"$configFile"	
+		argumentProviders.add(new HelpConfigFileProvider(helpConfigFile: configFile))
 
 		// tell the indexer where send its output	
-		args '-db', outputFile.absolutePath			
-		
-		// debug
-		// args '-verbose'		
+		argumentProviders.add(new HelpOutputPathProvider(helpOutputPath: outputFile))
 		
 		// for each help file that was found, add it as an argument to the indexer
 		helpFiles.each { File file ->
-			args "${file.absolutePath}"
+			argumentProviders.add(new HelpFilesPathProvider(helpFilePath: file))
 		}	
 	}
 }
diff --git a/gradle/root/distribution.gradle b/gradle/root/distribution.gradle
index c1485effa4..b444e803bc 100644
--- a/gradle/root/distribution.gradle
+++ b/gradle/root/distribution.gradle
@@ -634,6 +634,16 @@ def updateSlaFilesTimestamp(String distributionDirectoryPath, int timeOffsetMinu
 	//println "updateSlaFilesTimestamp: Updated timestamps to $numFilesAdded .sla files."
 }
 
+String ghidraExtensionsDirPath = DISTRIBUTION_DIR.getPath() + "/" + ZIP_DIR_PREFIX + "/Ghidra/Extensions"
+task createGhidraExtensionsDir {
+    outputs.dir ghidraExtensionsDirPath
+    doLast {
+        // We always want the extensions directory to exist in the zip, even if there's nothing
+        // installed there.
+        new File(ghidraExtensionsDirPath).mkdirs()
+    }
+}
+
 /*********************************************************************************
  *
  * Assemble all targets.
@@ -648,6 +658,7 @@ task assembleAll() {
 	dependsOn assembleSource
 	dependsOn assembleMarkdownToHtml
 	dependsOn "assembleDistribution_$currentPlatform"
+	dependsOn createGhidraExtensionsDir
 
 	if (project.hasProperty("allPlatforms")) {
 		project.PLATFORMS.each { platform ->
@@ -656,11 +667,6 @@ task assembleAll() {
 	}
 
 	doFirst {
-		// We always want the extensions directory to exist in the zip, even if there's nothing
-		// installed there.
-		new File( DISTRIBUTION_DIR.getPath() + "/" + ZIP_DIR_PREFIX + "/Ghidra/Extensions").mkdirs()
-
-
 		// The dependent tasks copy the sla and slaspec files into "extractTo/<release name>/ghidra/"
 		// and then later to "extractTo/<release name>/dist/", which this zip task compresses. The copy 
 		// tasks do not preserve the file modification times. If slaspec timestamp > sla timestamp, 
@@ -697,10 +703,6 @@ task createInstallationZip(type: Zip) { t ->
 	from (DISTRIBUTION_DIR.getPath() + "/" +  ZIP_DIR_PREFIX) {
 		into ZIP_DIR_PREFIX
 	}
-	
-	doLast {
-		delete file(DISTRIBUTION_DIR.getPath() + "/" + ZIP_DIR_PREFIX)
-	}
 }
 
 
diff --git a/gradle/support/extensionCommon.gradle b/gradle/support/extensionCommon.gradle
index e355a64841..1be0bc8bd7 100644
--- a/gradle/support/extensionCommon.gradle
+++ b/gradle/support/extensionCommon.gradle
@@ -113,8 +113,8 @@ task zipExtensions (type: Zip) {
 	from (p.projectDir.toString() + "/build/data") {
 		into { getBaseProjectName(p) + "/data" }
 	}
-	
-	from (p.projectDir.toString() + "/build/LICENSE.txt") {
+
+	from (ip) {
 		into { getBaseProjectName(p) }
 	}
 	
diff --git a/gradle/support/ip.gradle b/gradle/support/ip.gradle
index df1b5d414c..0fcfadb90c 100644
--- a/gradle/support/ip.gradle
+++ b/gradle/support/ip.gradle
@@ -33,7 +33,16 @@
  *********************************************************************************/
 task ip {
 	def p = project
-	
+
+    inputs.file(file("certification.manifest"))
+			.withPropertyName("ipCertificationFile")
+			.withPathSensitivity(PathSensitivity.RELATIVE)
+    inputs.file(file("Module.manifest"))
+			.withPropertyName("ipModuleManifest")
+			.withPathSensitivity(PathSensitivity.RELATIVE)
+    outputs.cacheIf { true}
+    outputs.file file("$buildDir/LICENSE.txt")
+
 	doLast {
 		
 		// scans all the files in the module, reads ip from header, verifies ip, and creates mapping
diff --git a/settings.gradle b/settings.gradle
index b890a0bcd3..eb4ab178c8 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+rootProject.name = "ghidra"
 apply from: "gradle/support/settingsUtil.gradle"
 
 /*******************************************************************************************
-- 
2.45.1

