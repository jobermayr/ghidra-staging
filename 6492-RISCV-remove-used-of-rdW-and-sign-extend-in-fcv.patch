From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Sleigh-InSPECtor <166091708+Sleigh-InSPECtor@users.noreply.github.com>
Date: Wed, 8 May 2024 11:39:03 +0930
Subject: [PATCH] 6492: RISCV: remove used of rdW and sign extend in fcvt/fmv

RISCV: remove used of rdW and sign extend
---
 .../RISCV/data/languages/riscv.rv32d.sinc     | 10 +++--
 .../RISCV/data/languages/riscv.rv32f.sinc     | 16 ++++----
 .../RISCV/data/languages/riscv.table.sinc     |  5 ---
 .../RISCV/data/languages/riscv.zfh.sinc       | 40 ++++++++++---------
 4 files changed, 36 insertions(+), 35 deletions(-)

diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.rv32d.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.rv32d.sinc
index e8d298bfbe..10a446e9dc 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.rv32d.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.rv32d.sinc
@@ -61,17 +61,19 @@
 
 
 # fcvt.w.d d,S,m c2000053 fff0007f SIMPLE (0, 0) 
-:fcvt.w.d rdW,frs1D,FRM is frs1D & FRM & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x61 & op2024=0x0
+:fcvt.w.d rd,frs1D,FRM is frs1D & FRM & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x61 & op2024=0x0
 {
-	rdW = trunc(frs1D);
+	local tmp:$(WXLEN) = trunc(frs1D);
+	rd = sext(tmp);
 }
 
 
 # fcvt.wu.d d,S,m c2100053 fff0007f SIMPLE (0, 0) 
-:fcvt.wu.d rdW,frs1D,FRM is frs1D & FRM & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x61 & op2024=0x1
+:fcvt.wu.d rd,frs1D,FRM is frs1D & FRM & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x61 & op2024=0x1
 {
+	local tmp:$(WXLEN) = trunc(frs1D);
 	#TODO  unsigned
-	rdW = trunc(frs1D);
+	rd = sext(tmp);
 }
 
 
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.rv32f.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.rv32f.sinc
index e830008391..dd2f772a4c 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.rv32f.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.rv32f.sinc
@@ -45,17 +45,19 @@
 
 
 # fcvt.w.s d,S,m c0000053 fff0007f SIMPLE (0, 0) 
-:fcvt.w.s rdW,frs1S,FRM is frs1S & FRM & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x60 & op2024=0x0
+:fcvt.w.s rd,frs1S,FRM is frs1S & FRM & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x60 & op2024=0x0
 {
-	rdW = trunc(frs1S);
+	local tmp:$(WXLEN) = trunc(frs1S);
+	rd = sext(tmp);
 }
 
 
 # fcvt.wu.s d,S,m c0100053 fff0007f SIMPLE (0, 0) 
-:fcvt.wu.s rdW,frs1S,FRM is frs1S & FRM & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x60 & op2024=0x1
+:fcvt.wu.s rd,frs1S,FRM is frs1S & FRM & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x60 & op2024=0x1
 {
+	local tmp:$(WXLEN) = trunc(frs1S);
 	#TODO  unsigned
-	rdW = trunc(frs1S);
+	rd = sext(tmp);
 }
 
 
@@ -159,11 +161,9 @@
 }
 
 # fmv.x.w d,S e0000053 fff0707f SIMPLE (0, 0) 
-:fmv.x.w rdW,frs1S is frs1S & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct3=0x0 & funct7=0x70 & op2024=0x0
+:fmv.x.w rd,frs1S is frs1S & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct3=0x0 & funct7=0x70 & op2024=0x0
 {
-	local tmpreg:4 = &frs1S;
-	local tmp:4 = *[register]:4 tmpreg;
-	rdW = tmp;
+	rd = sext(frs1S);
 }
 
 
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.table.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.table.sinc
index a592fa2e18..0fd49ee75d 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.table.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.table.sinc
@@ -41,11 +41,6 @@ rs1W: zero is r1519 & zero & op1519=0 { export 0:$(WXLEN); }
 rs2W: r2024 is r2024 { local tmp:$(WXLEN) = r2024:$(WXLEN); export tmp; }
 rs2W: zero is r2024 & zero & op2024=0 { export 0:$(WXLEN); }
 
-#TODO  dest may be bad, might need an assign macro
-rdW: r0711 is r0711 { local tmp:$(WXLEN) = r0711:$(WXLEN); export tmp; }
-rdW: zero is r0711 & zero & op0711=0 { export 0:$(WXLEN); }
-
-
 
 #TODO  does this need to be in an if/endif
 @if ADDRSIZE == "64"
diff --git a/Ghidra/Processors/RISCV/data/languages/riscv.zfh.sinc b/Ghidra/Processors/RISCV/data/languages/riscv.zfh.sinc
index f8e0c69a4b..a405a74926 100644
--- a/Ghidra/Processors/RISCV/data/languages/riscv.zfh.sinc
+++ b/Ghidra/Processors/RISCV/data/languages/riscv.zfh.sinc
@@ -141,50 +141,54 @@
 	fassignS(frd, tmp);
 }
 
-:fcvt.w.h rdW,frs1S,FRM is frs1S & FRM & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x62 & op2024=0x0
+:fcvt.w.h rd,frs1S,FRM is frs1S & FRM & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x62 & op2024=0x0
 {
-	rdW = trunc(frs1S);
+	local tmp:$(WXLEN) = trunc(frs1S);
+	rd = sext(tmp);
 }
 
-:fcvt.wu.h rdW,frs1S,FRM is frs1S & FRM & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x62 & op2024=0x1
+:fcvt.wu.h rd,frs1S,FRM is frs1S & FRM & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x62 & op2024=0x1
 {
-	rdW = trunc(frs1S);
+	local tmp:$(WXLEN) = trunc(frs1S);
+	rd = sext(tmp);
 }
 
-:fcvt.h.w rdW,frs1S,FRM is frs1S & FRM & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x6a & op2024=0x0
+:fcvt.h.w rd,frs1S,FRM is frs1S & FRM & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x6a & op2024=0x0
 {
-	rdW = frs1S;
+	rd = trunc(frs1S);
 }
 
-:fcvt.h.wu rdW,frs1S,FRM is frs1S & FRM & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x6a & op2024=0x1
+:fcvt.h.wu rd,frs1S,FRM is frs1S & FRM & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x6a & op2024=0x1
 {
-	rdW = frs1S;
+	rd = trunc(frs1S);
 }
 
-:fcvt.l.h rdW,frs1S,FRM is frs1S & FRM & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x62 & op2024=0x02
+:fcvt.l.h rd,frs1S,FRM is frs1S & FRM & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x62 & op2024=0x02
 {
-	rdW = trunc(frs1S);
+	local tmp:$(WXLEN) = trunc(frs1S);
+	rd = sext(tmp);
 }
 
-:fcvt.lu.h rdW,frs1S,FRM is frs1S & FRM & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x62 & op2024=0x03
+:fcvt.lu.h rd,frs1S,FRM is frs1S & FRM & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x62 & op2024=0x03
 {
-	rdW = trunc(frs1S);
+	local tmp:$(WXLEN) = trunc(frs1S);
+	rd = sext(tmp);
 }
 
-:fcvt.h.l rdW,frs1S,FRM is frs1S & FRM & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x6a & op2024=0x02
+:fcvt.h.l rd,frs1S,FRM is frs1S & FRM & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x6a & op2024=0x02
 {
-	rdW = frs1S;
+	rd = trunc(frs1S);
 }
 
-:fcvt.h.lu rdW,frs1S,FRM is frs1S & FRM & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x6a & op2024=0x03
+:fcvt.h.lu rd,frs1S,FRM is frs1S & FRM & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & funct7=0x6a & op2024=0x03
 {
-	rdW = frs1S;
+	rd = trunc(frs1S);
 }
 
 # the fmv instructions copy bits unchanged, without integer to float conversion
 define pcodeop fmv_x_h;
-:fmv.x.h rdW,frs1S is frs1S & rdW & op0001=0x3 & op0204=0x4 & op0506=0x2 & op2024=0x0 & funct3=0x0 & funct7=0x72 {
-    rdW=fmv_x_h(frs1S);
+:fmv.x.h rd,frs1S is frs1S & rd & op0001=0x3 & op0204=0x4 & op0506=0x2 & op2024=0x0 & funct3=0x0 & funct7=0x72 {
+    rd=fmv_x_h(frs1S);
 }
 
 define pcodeop fmv_h_x;
-- 
2.45.1

