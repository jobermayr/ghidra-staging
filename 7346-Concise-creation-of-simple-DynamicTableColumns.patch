From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Florian Magin <fmagin@users.noreply.github.com>
Date: Fri, 3 Jan 2025 13:52:23 +0100
Subject: [PATCH] 7346: Concise creation of simple DynamicTableColumns

---
 .../widgets/table/TableColumnDescriptor.java  | 60 +++++++++++++++++++
 1 file changed, 60 insertions(+)

diff --git a/Ghidra/Framework/Docking/src/main/java/docking/widgets/table/TableColumnDescriptor.java b/Ghidra/Framework/Docking/src/main/java/docking/widgets/table/TableColumnDescriptor.java
index 51eaf135f0..a6f7d32f21 100644
--- a/Ghidra/Framework/Docking/src/main/java/docking/widgets/table/TableColumnDescriptor.java
+++ b/Ghidra/Framework/Docking/src/main/java/docking/widgets/table/TableColumnDescriptor.java
@@ -98,6 +98,54 @@ public class TableColumnDescriptor<ROW_TYPE> {
 		addVisibleColumn(column, -1, true);
 	}
 
+	/**
+	 * Adds a column to the descriptor via an anonymous accessor function instead of an anonymous object
+	 *
+	 * The column type needs to be explicitly specified because there is no way to prevent erasure of the generic
+	 * types of an anonymous function
+	 *
+	 */
+	public <COLUMN_TYPE> void addColumn(String name, Class<COLUMN_TYPE> columnTypeClass, RowObjectAccessor<ROW_TYPE, COLUMN_TYPE> rowObjectAccessor, boolean visible) {
+		AbstractDynamicTableColumn<ROW_TYPE, COLUMN_TYPE, Object> column = new AbstractDynamicTableColumn<>() {
+			@Override
+			public String getColumnName() {
+				return name;
+			}
+
+			@Override
+			public COLUMN_TYPE getValue(ROW_TYPE rowObject, Settings settings, Object data, ServiceProvider serviceProvider) throws IllegalArgumentException {
+				return rowObjectAccessor.access(rowObject);
+			}
+
+			@Override
+			public Class<COLUMN_TYPE> getColumnClass() {
+				return columnTypeClass;
+			}
+
+			@Override
+			public Class<ROW_TYPE> getSupportedRowType() {
+				// The reflection tricks in the regular implementation won't work and will always return null
+				// because of type erasure
+				return null;
+			}
+		};
+		if (visible)  {
+			addVisibleColumn(column);
+		} else {
+			addHiddenColumn(column);
+		}
+	}
+	/**
+	 * Adds a visible column to the descriptor via an anonymous accessor function instead of an anonymous object
+	 *
+	 * The column type needs to be explicitly specified because there is no way to prevent erasure of the generic
+	 * types of an anonymous function
+	 *
+	 */
+	public <COLUMN_TYPE> void addColumn(String name, Class<COLUMN_TYPE> columnTypeClass, RowObjectAccessor<ROW_TYPE, COLUMN_TYPE> rowObjectAccessor) {
+		addColumn(name, columnTypeClass, rowObjectAccessor, true);
+	}
+
 	/**
 	 * @param column the column to add
 	 * @param sortOrdinal the <b>ordinal (i.e., 1, 2, 3...n)</b>, not the index (i.e, 0, 1, 2...n).
@@ -225,4 +273,16 @@ public class TableColumnDescriptor<ROW_TYPE> {
 			return sortIndex - o.sortIndex;
 		}
 	}
+
+	/**
+	 * A functional interface for accessing a column value from a row object
+	 * This allows for the creation of columns with anonymous functions via {@link #addColumn}
+	 * @param <ROW_TYPE>
+	 * @param <COLUMN_TYPE>
+	 */
+	@FunctionalInterface
+	public interface RowObjectAccessor<ROW_TYPE, COLUMN_TYPE> {
+		public COLUMN_TYPE access(ROW_TYPE rowObject) throws IllegalArgumentException;
+	}
+
 }
-- 
2.45.1

