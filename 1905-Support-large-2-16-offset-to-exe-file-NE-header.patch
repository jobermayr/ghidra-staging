From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Matthew Duggan <mgithub@guarana.org>
Date: Thu, 28 May 2020 14:47:38 +0900
Subject: [PATCH] 1905: Support large (>2^16) offset to exe file NE header

This is the case for Phar Lap 286|DOS-Extender exes.
---
 .../ghidra/app/util/bin/format/ne/EntryTable.java  |  4 ++--
 .../app/util/bin/format/ne/ImportedNameTable.java  |  8 ++++----
 .../app/util/bin/format/ne/InformationBlock.java   |  4 ++--
 .../util/bin/format/ne/ModuleReferenceTable.java   |  4 ++--
 .../app/util/bin/format/ne/NewExecutable.java      |  2 +-
 .../app/util/bin/format/ne/ResidentNameTable.java  |  4 ++--
 .../app/util/bin/format/ne/ResourceTable.java      |  8 ++++----
 .../app/util/bin/format/ne/SegmentTable.java       |  4 ++--
 .../app/util/bin/format/ne/WindowsHeader.java      | 14 +++++++-------
 9 files changed, 26 insertions(+), 26 deletions(-)

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/EntryTable.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/EntryTable.java
index 11de9e6d90..5da30b39ed 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/EntryTable.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/EntryTable.java
@@ -35,9 +35,9 @@ public class EntryTable {
      * @param index the index where the entry table begins
      * @param byteCount the length in bytes of the entry table
      */
-	EntryTable(BinaryReader reader, short index, short byteCount) throws IOException {
+	EntryTable(BinaryReader reader, int index, int byteCount) throws IOException {
         long oldIndex = reader.getPointerIndex();
-        reader.setPointerIndex(Conv.shortToInt(index));
+        reader.setPointerIndex(index);
 
         ArrayList<EntryTableBundle> list = new ArrayList<EntryTableBundle>();
         while (true) {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ImportedNameTable.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ImportedNameTable.java
index 1b7d9d7959..f37badbb7b 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ImportedNameTable.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ImportedNameTable.java
@@ -26,15 +26,15 @@ import ghidra.util.Conv;
  * 
  */
 public class ImportedNameTable {
-	private BinaryReader reader;
-    private short index;
+    private BinaryReader reader;
+    private int index;
 
     /**
      * Constructs a new imported name table.
      * @param reader the binary reader
      * @param index the index where the table begins
      */
-	ImportedNameTable(BinaryReader reader, short index) {
+	ImportedNameTable(BinaryReader reader, int index) {
         this.reader = reader;
         this.index = index;
     }
@@ -49,7 +49,7 @@ public class ImportedNameTable {
      */
     public LengthStringSet getNameAt(short offset) throws IOException {
         long oldIndex = reader.getPointerIndex();
-        int newIndex = Conv.shortToInt(index)+Conv.shortToInt(offset);
+        int newIndex = index + Conv.shortToInt(offset);
         reader.setPointerIndex(newIndex);
         LengthStringSet lss = new LengthStringSet(reader);
         reader.setPointerIndex(oldIndex);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/InformationBlock.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/InformationBlock.java
index b074f92799..57cb9720ee 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/InformationBlock.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/InformationBlock.java
@@ -195,10 +195,10 @@ public class InformationBlock {
 	private short ne_swaparea;     // Minimum code swap area size
 	private short ne_expver;       // Expected windows version number
 
-	InformationBlock(BinaryReader reader, short index)
+	InformationBlock(BinaryReader reader, int index)
 			throws InvalidWindowsHeaderException, IOException {
 		long oldIndex = reader.getPointerIndex();
-		reader.setPointerIndex(Conv.shortToInt(index));
+		reader.setPointerIndex(index);
 
 		ne_magic = reader.readNextShort();
 
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ModuleReferenceTable.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ModuleReferenceTable.java
index 1ca55925f3..7ef8b46094 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ModuleReferenceTable.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ModuleReferenceTable.java
@@ -37,10 +37,10 @@ public class ModuleReferenceTable {
      * @param count the count of modules referenced
      * @param imp the imported name table
      */
-	ModuleReferenceTable(BinaryReader reader, short index, short count, ImportedNameTable imp)
+	ModuleReferenceTable(BinaryReader reader, int index, short count, ImportedNameTable imp)
 			throws IOException {
         long oldIndex = reader.getPointerIndex();
-        reader.setPointerIndex(Conv.shortToInt(index));
+        reader.setPointerIndex(index);
 
         offsets = new short[Conv.shortToInt(count)];
         for (short i = 0 ; i < count ; ++i) {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/NewExecutable.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/NewExecutable.java
index 58f7c48bab..fdb33ad69f 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/NewExecutable.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/NewExecutable.java
@@ -44,7 +44,7 @@ public class NewExecutable {
 
         if (dosHeader.isDosSignature()) {
             try {
-				winHeader = new WindowsHeader(reader, baseAddr, (short) dosHeader.e_lfanew());
+				winHeader = new WindowsHeader(reader, baseAddr, dosHeader.e_lfanew());
             }
             catch (InvalidWindowsHeaderException e) {
             }
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ResidentNameTable.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ResidentNameTable.java
index a4a639df8c..ef62998c77 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ResidentNameTable.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ResidentNameTable.java
@@ -28,9 +28,9 @@ import ghidra.util.Conv;
 public class ResidentNameTable {
     private LengthStringOrdinalSet [] names;
 
-	ResidentNameTable(BinaryReader reader, short index) throws IOException {
+	ResidentNameTable(BinaryReader reader, int index) throws IOException {
         long oldIndex = reader.getPointerIndex();
-        reader.setPointerIndex(Conv.shortToInt(index));
+        reader.setPointerIndex(index);
 
         ArrayList<LengthStringOrdinalSet> list = new ArrayList<LengthStringOrdinalSet>();
         while (true) {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ResourceTable.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ResourceTable.java
index 15e7728350..0a357e5595 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ResourceTable.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/ResourceTable.java
@@ -29,7 +29,7 @@ import ghidra.util.Conv;
  * 
  */
 public class ResourceTable {
-    private short index;
+    private int index;
     private short alignmentShiftCount;
     private ResourceType [] types;
     private ResourceName [] names;
@@ -40,11 +40,11 @@ public class ResourceTable {
      * @param index  the byte index where the Resource Table begins,
      *               (this is relative to the beginning of the file
      */
-	ResourceTable(BinaryReader reader, short index) throws IOException {
+	ResourceTable(BinaryReader reader, int index) throws IOException {
         this.index = index;
 
         long oldIndex = reader.getPointerIndex();
-        reader.setPointerIndex(Conv.shortToInt(index));
+        reader.setPointerIndex(index);
 
         alignmentShiftCount = reader.readNextShort();
 
@@ -99,7 +99,7 @@ public class ResourceTable {
      * relative to the beginning of the file.
      * @return the byte index where the resource table begins
      */
-    public short getIndex() {
+    public int getIndex() {
         return index;
     }
 }
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/SegmentTable.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/SegmentTable.java
index 925a3669a8..e390058b1c 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/SegmentTable.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/SegmentTable.java
@@ -29,10 +29,10 @@ import ghidra.util.Conv;
 public class SegmentTable {
     private Segment [] segments;
 
-	SegmentTable(BinaryReader reader, SegmentedAddress baseAddr, short index, short segmentCount,
+	SegmentTable(BinaryReader reader, SegmentedAddress baseAddr, int index, short segmentCount,
 			short shiftAlignCount) throws IOException {
         long oldIndex = reader.getPointerIndex();
-        reader.setPointerIndex(Conv.shortToInt(index));
+        reader.setPointerIndex(index);
 
         //create a value of the shift count...
         shiftAlignCount = (short)(0x01 << shiftAlignCount);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/WindowsHeader.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/WindowsHeader.java
index 7411b4cf72..f098f120d4 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/WindowsHeader.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/ne/WindowsHeader.java
@@ -49,10 +49,10 @@ public class WindowsHeader {
 	 * @throws IOException for problems reading the header bytes
 	 */
 	public WindowsHeader(BinaryReader reader, SegmentedAddress baseAddr,
-			short index) throws InvalidWindowsHeaderException, IOException {
+			int index) throws InvalidWindowsHeaderException, IOException {
         this.infoBlock = new InformationBlock(reader, index);
 
-        short segTableIndex = (short)(infoBlock.getSegmentTableOffset() + index);
+        int segTableIndex = infoBlock.getSegmentTableOffset() + index;
         this.segTable = new SegmentTable(reader,
 			baseAddr, segTableIndex, infoBlock.getSegmentCount(),
 			infoBlock.getSegmentAlignmentShiftCount());
@@ -60,22 +60,22 @@ public class WindowsHeader {
         //if resource table offset == resident name table offset, then
         //we do not have any resources...
         if (infoBlock.getResourceTableOffset() != infoBlock.getResidentNameTableOffset()) {
-            short rsrcTableIndex = (short)(infoBlock.getResourceTableOffset() + index);
+            int rsrcTableIndex = infoBlock.getResourceTableOffset() + index;
             this.rsrcTable = new ResourceTable(reader, rsrcTableIndex);
         }
 
-        short resNameTableIndex = (short)(infoBlock.getResidentNameTableOffset() + index);
+        int resNameTableIndex = infoBlock.getResidentNameTableOffset() + index;
         this.resNameTable = new ResidentNameTable(reader, resNameTableIndex);
 
-        short impNameTableIndex = (short)(infoBlock.getImportedNamesTableOffset() + index);
+        int impNameTableIndex = infoBlock.getImportedNamesTableOffset() + index;
         this.impNameTable = new ImportedNameTable(reader, impNameTableIndex);
 
-        short modRefTableIndex = (short)(infoBlock.getModuleReferenceTableOffset() + index);
+        int modRefTableIndex = infoBlock.getModuleReferenceTableOffset() + index;
         this.modRefTable = new ModuleReferenceTable(reader, modRefTableIndex,
                                         infoBlock.getModuleReferenceTableCount(),
                                         impNameTable);
 
-        short entryTableIndex = (short)(infoBlock.getEntryTableOffset() + index);
+        int entryTableIndex = infoBlock.getEntryTableOffset() + index;
         this.entryTable = new EntryTable(reader, entryTableIndex, infoBlock.getEntryTableSize());
 
         this.nonResNameTable = new NonResidentNameTable(reader,
-- 
2.43.0

