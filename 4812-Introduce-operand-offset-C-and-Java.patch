From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Klaus=20K=C3=A4mpf?= <kkaempf@gmail.com>
Date: Sun, 30 Oct 2022 20:01:10 +0100
Subject: [PATCH] 4812: Introduce operand offset (C++ and Java)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Introduce operand_offset

Signed-off-by: Klaus Kämpf <kkaempf@gmail.com>

Add operand_offset to sleigh Java

Signed-off-by: Klaus Kämpf <kkaempf@gmail.com>
---
 .../src/decompile/cpp/pcodeparse.cc           |  843 ++++----
 .../Decompiler/src/decompile/cpp/pcodeparse.y |    6 +
 .../Decompiler/src/decompile/cpp/semantics.cc |    8 +
 .../Decompiler/src/decompile/cpp/semantics.hh |    2 +-
 .../src/decompile/cpp/slgh_compile.cc         |    2 +
 .../Decompiler/src/decompile/cpp/slghparse.cc | 1891 +++++++++--------
 .../Decompiler/src/decompile/cpp/slghparse.hh |   12 +-
 .../Decompiler/src/decompile/cpp/slghparse.y  |    4 +
 .../src/decompile/cpp/slghpatexpress.cc       |    2 +
 .../src/decompile/cpp/slghpatexpress.hh       |   14 +
 .../Decompiler/src/decompile/cpp/slghscan.cc  |    3 +
 .../Decompiler/src/decompile/cpp/slghscan.l   |    3 +
 .../src/decompile/cpp/slghsymbol.cc           |   66 +
 .../src/decompile/cpp/slghsymbol.hh           |   19 +-
 .../ghidra/sleigh/grammar/SleighCompiler.g    |    6 +
 .../sleigh/SleighAssemblerBuilder.java        |    3 +
 .../expression/OffsetInstructionValue.java    |   83 +
 .../sleigh/expression/PatternExpression.java  |    2 +
 .../sleigh/symbol/OffsetSymbol.java           |   82 +
 .../processors/sleigh/symbol/SymbolTable.java |    2 +
 .../ghidra/pcodeCPort/semantics/ConstTpl.java |    9 +-
 .../slgh_compile/SleighCompile.java           |    2 +
 .../pcodeCPort/slgh_compile/Yylval.java       |    1 +
 .../OffsetInstructionValue.java               |   67 +
 .../slghpatexpress/PatternExpression.java     |    3 +
 .../pcodeCPort/slghsymbol/OffsetSymbol.java   |  109 +
 .../pcodeCPort/slghsymbol/SymbolTable.java    |    3 +
 .../pcodeCPort/slghsymbol/symbol_type.java    |    1 +
 .../program/model/lang/PcodeParser.java       |    1 +
 29 files changed, 1874 insertions(+), 1375 deletions(-)
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/OffsetInstructionValue.java
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/OffsetSymbol.java
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/OffsetInstructionValue.java
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghsymbol/OffsetSymbol.java

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.cc
index 136d42435..e9eaa6d71 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.cc
@@ -198,9 +198,10 @@ extern int pcodedebug;
     VARSYM = 311,                  /* VARSYM  */
     OPERANDSYM = 312,              /* OPERANDSYM  */
     STARTSYM = 313,                /* STARTSYM  */
-    ENDSYM = 314,                  /* ENDSYM  */
-    NEXT2SYM = 315,                /* NEXT2SYM  */
-    LABELSYM = 316                 /* LABELSYM  */
+    OFFSETSYM = 314,               /* OFFSETSYM  */
+    ENDSYM = 315,                  /* ENDSYM  */
+    NEXT2SYM = 316,                /* NEXT2SYM  */
+    LABELSYM = 317                 /* LABELSYM  */
   };
   typedef enum pcodetokentype pcodetoken_kind_t;
 #endif
@@ -223,6 +224,7 @@ union PCODESTYPE
   UserOpSymbol *useropsym;
   LabelSymbol *labelsym;
   StartSymbol *startsym;
+  OffsetSymbol *offsetsym;
   EndSymbol *endsym;
   Next2Symbol *next2sym;
   OperandSymbol *operandsym;
@@ -320,29 +322,30 @@ enum yysymbol_kind_t
   YYSYMBOL_VARSYM = 69,                    /* VARSYM  */
   YYSYMBOL_OPERANDSYM = 70,                /* OPERANDSYM  */
   YYSYMBOL_STARTSYM = 71,                  /* STARTSYM  */
-  YYSYMBOL_ENDSYM = 72,                    /* ENDSYM  */
-  YYSYMBOL_NEXT2SYM = 73,                  /* NEXT2SYM  */
-  YYSYMBOL_LABELSYM = 74,                  /* LABELSYM  */
-  YYSYMBOL_75_ = 75,                       /* ':'  */
-  YYSYMBOL_76_ = 76,                       /* '='  */
-  YYSYMBOL_77_ = 77,                       /* '('  */
-  YYSYMBOL_78_ = 78,                       /* ')'  */
-  YYSYMBOL_79_ = 79,                       /* '['  */
-  YYSYMBOL_80_ = 80,                       /* ','  */
-  YYSYMBOL_81_ = 81,                       /* ']'  */
-  YYSYMBOL_YYACCEPT = 82,                  /* $accept  */
-  YYSYMBOL_rtl = 83,                       /* rtl  */
-  YYSYMBOL_rtlmid = 84,                    /* rtlmid  */
-  YYSYMBOL_statement = 85,                 /* statement  */
-  YYSYMBOL_expr = 86,                      /* expr  */
-  YYSYMBOL_sizedstar = 87,                 /* sizedstar  */
-  YYSYMBOL_jumpdest = 88,                  /* jumpdest  */
-  YYSYMBOL_varnode = 89,                   /* varnode  */
-  YYSYMBOL_integervarnode = 90,            /* integervarnode  */
-  YYSYMBOL_lhsvarnode = 91,                /* lhsvarnode  */
-  YYSYMBOL_label = 92,                     /* label  */
-  YYSYMBOL_specificsymbol = 93,            /* specificsymbol  */
-  YYSYMBOL_paramlist = 94                  /* paramlist  */
+  YYSYMBOL_OFFSETSYM = 72,                 /* OFFSETSYM  */
+  YYSYMBOL_ENDSYM = 73,                    /* ENDSYM  */
+  YYSYMBOL_NEXT2SYM = 74,                  /* NEXT2SYM  */
+  YYSYMBOL_LABELSYM = 75,                  /* LABELSYM  */
+  YYSYMBOL_76_ = 76,                       /* ':'  */
+  YYSYMBOL_77_ = 77,                       /* '='  */
+  YYSYMBOL_78_ = 78,                       /* '('  */
+  YYSYMBOL_79_ = 79,                       /* ')'  */
+  YYSYMBOL_80_ = 80,                       /* '['  */
+  YYSYMBOL_81_ = 81,                       /* ','  */
+  YYSYMBOL_82_ = 82,                       /* ']'  */
+  YYSYMBOL_YYACCEPT = 83,                  /* $accept  */
+  YYSYMBOL_rtl = 84,                       /* rtl  */
+  YYSYMBOL_rtlmid = 85,                    /* rtlmid  */
+  YYSYMBOL_statement = 86,                 /* statement  */
+  YYSYMBOL_expr = 87,                      /* expr  */
+  YYSYMBOL_sizedstar = 88,                 /* sizedstar  */
+  YYSYMBOL_jumpdest = 89,                  /* jumpdest  */
+  YYSYMBOL_varnode = 90,                   /* varnode  */
+  YYSYMBOL_integervarnode = 91,            /* integervarnode  */
+  YYSYMBOL_lhsvarnode = 92,                /* lhsvarnode  */
+  YYSYMBOL_label = 93,                     /* label  */
+  YYSYMBOL_specificsymbol = 94,            /* specificsymbol  */
+  YYSYMBOL_paramlist = 95                  /* paramlist  */
 };
 typedef enum yysymbol_kind_t yysymbol_kind_t;
 
@@ -670,19 +673,19 @@ union yyalloc
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  3
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   1968
+#define YYLAST   1831
 
 /* YYNTOKENS -- Number of terminals.  */
-#define YYNTOKENS  82
+#define YYNTOKENS  83
 /* YYNNTS -- Number of nonterminals.  */
 #define YYNNTS  13
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  120
+#define YYNRULES  121
 /* YYNSTATES -- Number of states.  */
-#define YYNSTATES  298
+#define YYNSTATES  299
 
 /* YYMAXUTOK -- Last valid token kind.  */
-#define YYMAXUTOK   316
+#define YYMAXUTOK   317
 
 
 /* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
@@ -700,12 +703,12 @@ static const yytype_int8 yytranslate[] =
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,    40,     2,     2,     2,    35,     9,     2,
-      77,    78,    33,    29,    80,    30,     2,    34,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,    75,     7,
-      14,    76,    15,     2,     2,     2,     2,     2,     2,     2,
+      78,    79,    33,    29,    81,    30,     2,    34,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,    76,     7,
+      14,    77,    15,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,    79,     2,    81,     8,     2,     2,     2,     2,     2,
+       2,    80,     2,    82,     8,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     6,     2,    41,     2,     2,     2,
@@ -727,26 +730,26 @@ static const yytype_int8 yytranslate[] =
       36,    37,    38,    39,    42,    43,    44,    45,    46,    47,
       48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
       58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
-      68,    69,    70,    71,    72,    73,    74
+      68,    69,    70,    71,    72,    73,    74,    75
 };
 
 #if PCODEDEBUG
 /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
 static const yytype_uint8 yyrline[] =
 {
-       0,   113,   113,   115,   116,   117,   118,   120,   121,   122,
-     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
-     133,   134,   135,   136,   137,   138,   140,   141,   142,   143,
-     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
-     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
-     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
-     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
-     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
-     194,   195,   196,   197,   198,   199,   200,   201,   202,   204,
-     205,   206,   207,   209,   210,   211,   212,   213,   214,   215,
-     216,   218,   219,   220,   222,   223,   224,   225,   226,   228,
-     229,   231,   232,   234,   235,   236,   237,   238,   240,   241,
-     242
+       0,   115,   115,   117,   118,   119,   120,   122,   123,   124,
+     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
+     135,   136,   137,   138,   139,   140,   142,   143,   144,   145,
+     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
+     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
+     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
+     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
+     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
+     196,   197,   198,   199,   200,   201,   202,   203,   204,   206,
+     207,   208,   209,   211,   212,   213,   214,   215,   216,   217,
+     218,   220,   221,   222,   224,   225,   226,   227,   228,   230,
+     231,   233,   234,   236,   237,   238,   239,   240,   241,   243,
+     244,   245
 };
 #endif
 
@@ -774,10 +777,11 @@ static const char *const yytname[] =
   "OP_CEIL", "OP_FLOOR", "OP_ROUND", "OP_INT2FLOAT", "OP_FLOAT2FLOAT",
   "OP_TRUNC", "OP_NEW", "BADINTEGER", "GOTO_KEY", "CALL_KEY", "RETURN_KEY",
   "IF_KEY", "ENDOFSTREAM", "LOCAL_KEY", "INTEGER", "STRING", "SPACESYM",
-  "USEROPSYM", "VARSYM", "OPERANDSYM", "STARTSYM", "ENDSYM", "NEXT2SYM",
-  "LABELSYM", "':'", "'='", "'('", "')'", "'['", "','", "']'", "$accept",
-  "rtl", "rtlmid", "statement", "expr", "sizedstar", "jumpdest", "varnode",
-  "integervarnode", "lhsvarnode", "label", "specificsymbol", "paramlist", YY_NULLPTR
+  "USEROPSYM", "VARSYM", "OPERANDSYM", "STARTSYM", "OFFSETSYM", "ENDSYM",
+  "NEXT2SYM", "LABELSYM", "':'", "'='", "'('", "')'", "'['", "','", "']'",
+  "$accept", "rtl", "rtlmid", "statement", "expr", "sizedstar", "jumpdest",
+  "varnode", "integervarnode", "lhsvarnode", "label", "specificsymbol",
+  "paramlist", YY_NULLPTR
 };
 
 static const char *
@@ -787,7 +791,7 @@ yysymbol_name (yysymbol_kind_t yysymbol)
 }
 #endif
 
-#define YYPACT_NINF (-68)
+#define YYPACT_NINF (-67)
 
 #define yypact_value_is_default(Yyn) \
   ((Yyn) == YYPACT_NINF)
@@ -801,36 +805,36 @@ yysymbol_name (yysymbol_kind_t yysymbol)
    STATE-NUM.  */
 static const yytype_int16 yypact[] =
 {
-     -68,     9,  1480,   -68,   459,   -40,   -46,   -68,   564,   672,
-      -1,  1430,   -68,   -23,   -45,   -48,   -41,   -68,   -68,   -68,
-     -68,   -68,   -68,  1430,   -67,   -68,   -22,   -68,   -12,   -68,
-     -28,   -68,   -68,    29,    30,   -13,    -5,   -68,    -7,   -68,
-     -68,   -68,   -68,  1430,    58,   -68,  1430,    59,   -68,  1430,
-    1430,  1430,  1430,  1430,    -3,     5,     8,    11,    12,    28,
-      66,    67,    68,    70,    71,    72,    74,    75,   117,   151,
-    1430,  1551,  1430,   -68,   -24,     4,    -6,    10,    16,  1430,
-    1430,  1398,    19,    41,  1430,   164,   785,   -68,   -68,   -68,
-      -4,   172,   150,   -68,   187,   -68,   277,   -68,   -68,   -68,
-     -68,  1430,  1430,  1430,  1430,  1430,  1430,  1430,  1430,  1430,
-    1430,  1430,  1430,  1430,  1430,  1430,  1430,   534,  1430,  1430,
-    1430,  1430,  1430,  1430,  1430,  1430,  1430,  1430,  1430,  1430,
-    1430,  1430,  1430,  1430,  1430,  1430,  1430,  1430,  1430,  1430,
-    1430,  1430,  1430,  1430,  1430,  1430,  1430,  1430,  1430,  1430,
-    1430,  1430,  1430,  1430,   888,   -68,   175,    -2,   176,   -68,
-     178,  1430,   -68,   -68,   170,  1608,  1867,   -20,  1430,   171,
-     173,  1645,   168,   -68,   174,   169,    69,   245,   246,   571,
-     351,   642,   424,   461,   679,   750,   787,   858,   895,   966,
-    1003,  1074,  1111,   314,    -9,   -68,  1903,   387,   387,  1037,
-    1144,  1251,  1355,  1355,  1355,  1355,  1929,  1929,  1929,  1929,
-    1929,  1929,  1929,  1929,  1929,  1929,  1929,  1929,   -14,   -14,
-     -14,   199,   199,   199,   199,   -68,   -68,   -68,   -68,   -68,
-     -68,   -68,   247,   -68,   177,   179,     7,  1682,  1430,   -68,
-     250,  1430,  1719,   -68,   -68,   -68,   193,   195,   -68,   -68,
-     -68,   -68,   -68,  1430,   -68,  1430,  1430,   -68,   -68,   -68,
-     -68,   -68,   -68,   -68,   -68,   -68,   -68,  1430,   -68,   -68,
-     -68,   196,   -68,  1430,   -68,  1756,   -68,  1867,   -68,   182,
-     -68,  1182,  1219,  1290,  1327,   183,  1793,   -68,   189,   -68,
-     -68,   -68,   -68,   -68,   -68,  1430,  1830,   -68
+     -67,     9,  1189,   -67,  1139,   -58,   -46,   -67,    -7,  1076,
+      -1,  1122,   -67,   -51,   -66,   -52,   -41,   -67,   -67,   -67,
+     -67,   -67,   -67,   -67,  1122,   -22,   -67,   -45,   -67,   -25,
+     -67,   -27,   -67,   -67,    38,    42,     3,     8,   -67,    -9,
+     -67,   -67,   -67,   -67,  1122,    69,   -67,  1122,    77,   -67,
+    1122,  1122,  1122,  1122,  1122,    28,    29,    67,    70,    71,
+      72,    74,    75,   117,   152,   154,   156,   157,   158,   159,
+     160,  1122,  1261,  1122,   -67,   -49,     4,    13,    24,   164,
+    1122,  1122,  1089,   174,   175,  1122,   176,  1172,   -67,   -67,
+     -67,   162,   180,   151,   -67,   188,   -67,   278,   -67,   -67,
+     -67,   -67,  1122,  1122,  1122,  1122,  1122,  1122,  1122,  1122,
+    1122,  1122,  1122,  1122,  1122,  1122,  1122,  1122,   473,  1122,
+    1122,  1122,  1122,  1122,  1122,  1122,  1122,  1122,  1122,  1122,
+    1122,  1122,  1122,  1122,  1122,  1122,  1122,  1122,  1122,  1122,
+    1122,  1122,  1122,  1122,  1122,  1122,  1122,  1122,  1122,  1122,
+    1122,  1122,  1122,  1122,  1122,    12,   -67,   177,     7,   183,
+     -67,   184,  1122,   -67,   -67,   173,  1318,  1577,   -18,  1122,
+     178,   172,  1355,   171,   -67,   182,   179,   246,   247,   249,
+     511,   353,   550,   394,   432,   588,   627,   665,   704,   742,
+     781,   819,   858,   896,   315,    65,   -67,  1613,  1647,  1647,
+    1679,  1710,  1740,  1766,  1766,  1766,  1766,  1792,  1792,  1792,
+    1792,  1792,  1792,  1792,  1792,  1792,  1792,  1792,  1792,  1272,
+    1272,  1272,    11,    11,    11,    11,   -67,   -67,   -67,   -67,
+     -67,   -67,   -67,   252,   -67,   181,   185,     5,  1392,  1122,
+     -67,   255,  1122,  1429,   -67,   -67,   -67,   199,   200,   -67,
+     -67,   -67,   -67,   -67,  1122,   -67,  1122,  1122,   -67,   -67,
+     -67,   -67,   -67,   -67,   -67,   -67,   -67,   -67,  1122,   -67,
+     -67,   -67,   202,   -67,  1122,   -67,  1466,   -67,  1577,   -67,
+     186,   -67,   935,   973,  1012,  1050,   187,  1503,   -67,   194,
+     -67,   -67,   -67,   -67,   -67,   -67,  1122,  1540,   -67
 };
 
 /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
@@ -840,48 +844,48 @@ static const yytype_int8 yydefact[] =
 {
        3,     0,     0,     1,     0,     0,    92,   105,     0,     0,
        0,     0,     2,     0,   104,   103,     0,   113,   114,   115,
-     116,   117,     4,     0,     0,   102,     0,    25,   101,   103,
-       0,   107,   101,     0,     0,     0,     0,    97,    96,   100,
-      93,    94,    95,     0,     0,    99,     0,     0,    23,     0,
+     116,   117,   118,     4,     0,     0,   102,     0,    25,   101,
+     103,     0,   107,   101,     0,     0,     0,     0,    97,    96,
+     100,    93,    94,    95,     0,     0,    99,     0,     0,    23,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,    26,   101,     0,     0,     0,     0,     0,
-     118,     0,     0,     0,     0,     0,     0,   112,   111,    91,
-       0,     0,     0,    18,     0,    21,     0,    41,    68,    54,
-      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   118,     0,     0,     0,
+       0,     0,     0,     0,    26,   101,     0,     0,     0,     0,
+       0,   119,     0,     0,     0,     0,     0,     0,   112,   111,
+      91,     0,     0,     0,    18,     0,    21,     0,    41,    68,
+      54,    42,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   119,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,    27,     0,     0,     0,     5,
-       0,     0,    12,   106,     0,     0,   119,     0,     0,     0,
-       0,     0,     0,   108,    90,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
+       5,     0,     0,    12,   106,     0,     0,   120,     0,     0,
+       0,     0,     0,     0,   108,    90,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,    28,    57,    56,    55,    45,
-      43,    44,    31,    32,    58,    59,    33,    36,    34,    35,
-      37,    38,    39,    40,    60,    61,    62,    63,    46,    47,
-      48,    29,    30,    64,    65,    49,    50,    52,    51,    53,
-      66,    67,     0,    86,     0,     0,     0,     0,     0,     9,
-       0,     0,     0,    16,    17,     7,     0,     0,    98,    20,
-      22,    24,    72,     0,    71,     0,     0,    78,    69,    70,
-      80,    81,    82,    77,    76,    79,    83,     0,    88,    19,
-      85,     0,     6,     0,     8,     0,    14,   120,    13,     0,
-      89,     0,     0,     0,     0,     0,     0,    11,     0,    73,
-      74,    75,    84,    87,    10,     0,     0,    15
+       0,     0,     0,     0,     0,     0,    28,    57,    56,    55,
+      45,    43,    44,    31,    32,    58,    59,    33,    36,    34,
+      35,    37,    38,    39,    40,    60,    61,    62,    63,    46,
+      47,    48,    29,    30,    64,    65,    49,    50,    52,    51,
+      53,    66,    67,     0,    86,     0,     0,     0,     0,     0,
+       9,     0,     0,     0,    16,    17,     7,     0,     0,    98,
+      20,    22,    24,    72,     0,    71,     0,     0,    78,    69,
+      70,    80,    81,    82,    77,    76,    79,    83,     0,    88,
+      19,    85,     0,     6,     0,     8,     0,    14,   121,    13,
+       0,    89,     0,     0,     0,     0,     0,     0,    11,     0,
+      73,    74,    75,    84,    87,    10,     0,     0,    15
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-     -68,   -68,   -68,   -68,   -11,   264,    -8,     1,   110,   -68,
-     267,     0,   154
+     -67,   -67,   -67,   -67,   -11,   270,    -8,     0,   115,   -67,
+     272,     1,   161
 };
 
 /* YYDEFGOTO[NTERM-NUM].  */
 static const yytype_uint8 yydefgoto[] =
 {
-       0,     1,     2,    22,   166,    72,    44,    73,    25,    26,
-      45,    74,   167
+       0,     1,     2,    23,   167,    73,    45,    74,    26,    27,
+      46,    75,   168
 };
 
 /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
@@ -889,368 +893,326 @@ static const yytype_uint8 yydefgoto[] =
    number is the opposite.  If YYTABLE_NINF, syntax error.  */
 static const yytype_int16 yytable[] =
 {
-      71,    47,    28,    24,    32,    31,    48,     4,    82,     3,
-      83,   159,    81,    76,   272,   143,   144,   145,   146,   147,
-     148,   149,   150,   151,   152,   153,    33,    78,    79,    35,
-      77,  -110,    92,    36,    34,    94,    80,    86,    96,    97,
-      98,    99,   100,    75,    87,    88,    17,    18,    19,    20,
-      21,   156,    89,   157,    84,   158,     7,    85,   240,   117,
-     241,   155,    90,    14,  -109,    93,    95,  -109,   165,   268,
-     162,   241,    91,   171,   101,   163,   249,   174,    49,   160,
-     161,   164,   102,   273,   169,   103,    32,   173,   104,   105,
-     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
-     189,   190,   191,   192,   193,   106,   170,   196,   197,   198,
+      72,    48,    25,    29,    32,    33,    49,     5,    34,     3,
+      78,   160,   273,    82,    77,    76,     4,    35,    17,    18,
+      19,    20,    21,    22,    79,    80,     5,   157,  -110,   158,
+      36,   159,    85,    93,    37,    86,    95,    81,    87,    97,
+      98,    99,   100,   101,   148,   149,   150,   151,   152,   153,
+     154,    38,  -109,    88,    83,  -109,    84,    89,    39,    40,
+     118,   241,   156,   242,    41,     7,    42,    43,    90,   166,
+      38,    92,    14,    44,   172,    91,    94,    39,    40,    50,
+     161,   162,   274,    41,    96,    42,    43,   174,    33,   164,
+     163,   180,   181,   182,   183,   184,   185,   186,   187,   188,
+     189,   190,   191,   192,   193,   194,   102,   103,   197,   198,
      199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
      209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
      219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
-     229,   230,   231,   107,   108,   109,   232,   110,   111,   112,
-     237,   113,   114,   118,   119,   120,   121,   242,   122,   123,
+     229,   230,   231,   232,   269,   104,   242,   233,   105,   106,
+     107,   238,   108,   109,   119,   120,   121,   122,   243,   123,
      124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
      134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
      144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
-     118,   119,   120,   121,   115,   122,   123,   124,   125,   126,
+     154,   119,   120,   121,   122,   110,   123,   124,   125,   126,
      127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
      137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
-     147,   148,   149,   150,   151,   152,   153,   275,   116,   172,
-     277,   176,   147,   148,   149,   150,   151,   152,   153,   175,
-     233,   235,   281,   236,   282,   283,   238,   243,   246,   247,
-     248,   244,   250,   251,   269,   270,   284,   276,   279,   271,
-     280,   285,   286,   288,   293,   295,    23,   234,   177,    27,
-     194,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     118,   119,   120,   121,   296,   122,   123,   124,   125,   126,
+     147,   148,   149,   150,   151,   152,   153,   154,   276,   165,
+     111,   278,   112,   177,   113,   114,   115,   116,   117,   170,
+     171,   173,   234,   282,   175,   283,   284,   176,   236,   237,
+     239,   245,   247,   250,   251,   244,   252,   285,   248,   270,
+     271,   249,   277,   287,   280,   281,   272,   286,   289,   294,
+     178,   296,    24,   235,    28,     0,     0,     0,   195,     0,
+       0,   119,   120,   121,   122,   297,   123,   124,   125,   126,
      127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
      137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
-     147,   148,   149,   150,   151,   152,   153,   118,   119,   120,
-     121,     0,   122,   123,   124,   125,   126,   127,   128,   129,
+     147,   148,   149,   150,   151,   152,   153,   154,   119,   120,
+     121,   122,     0,   123,   124,   125,   126,   127,   128,   129,
      130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
      140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
-     150,   151,   152,   153,   118,   119,   120,   121,   178,   122,
+     150,   151,   152,   153,   154,     0,   119,   120,   121,   122,
+     179,   123,   124,   125,   126,   127,   128,   129,   130,   131,
+     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
+     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
+     152,   153,   154,     0,   267,     0,   268,   119,   120,   121,
+     122,     0,   123,   124,   125,   126,   127,   128,   129,   130,
+     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
+     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
+     151,   152,   153,   154,   254,   119,   120,   121,   122,     0,
      123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
      133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
      143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
-     153,     0,   266,   121,   267,   122,   123,   124,   125,   126,
+     153,   154,     0,     0,     0,   256,   119,   120,   121,   122,
+       0,   123,   124,   125,   126,   127,   128,   129,   130,   131,
+     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
+     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
+     152,   153,   154,   257,   119,   120,   121,   122,     0,   123,
+     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
+     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
+     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
+     154,     0,   196,   119,   120,   121,   122,     0,   123,   124,
+     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
+     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
+     253,   119,   120,   121,   122,     0,   123,   124,   125,   126,
      127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
      137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
-     147,   148,   149,   150,   151,   152,   153,   118,   119,   120,
-     121,   253,   122,   123,   124,   125,   126,   127,   128,   129,
-     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
-     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
-     150,   151,   152,   153,   118,   119,   120,   121,     4,   122,
-     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
-     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
-     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
-     153,     0,     0,     0,   255,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     7,     0,     0,
-       0,     0,     0,     0,    14,    29,     0,     0,    17,    18,
-      19,    20,    21,     0,    30,     0,     0,   118,   119,   120,
-     121,   256,   122,   123,   124,   125,   126,   127,   128,   129,
+     147,   148,   149,   150,   151,   152,   153,   154,     0,   255,
+     119,   120,   121,   122,     0,   123,   124,   125,   126,   127,
+     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
+     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
+     148,   149,   150,   151,   152,   153,   154,   258,   119,   120,
+     121,   122,     0,   123,   124,   125,   126,   127,   128,   129,
      130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
      140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
-     150,   151,   152,   153,   118,   119,   120,   121,     5,   122,
+     150,   151,   152,   153,   154,     0,   259,   119,   120,   121,
+     122,     0,   123,   124,   125,   126,   127,   128,   129,   130,
+     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
+     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
+     151,   152,   153,   154,   260,   119,   120,   121,   122,     0,
      123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
      133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
      143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
-     153,     0,   195,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,    37,     0,     0,     0,     0,     0,     0,    38,
-      39,     0,     0,     0,     0,    40,    41,    42,     0,     0,
-       0,     0,     0,    43,     0,   118,   119,   120,   121,   252,
-     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
-     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
-     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
-     152,   153,   118,   119,   120,   121,     5,   122,   123,   124,
-     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
-     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
-     145,   146,   147,   148,   149,   150,   151,   152,   153,     0,
-     254,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-      37,     0,     0,     0,     0,     0,     0,    38,    39,     0,
-       0,     0,     0,    40,    41,    42,     0,     0,     0,     0,
-       0,    46,     0,   118,   119,   120,   121,   257,   122,   123,
+     153,   154,     0,   261,   119,   120,   121,   122,     0,   123,
      124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
      134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
      144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
-     118,   119,   120,   121,     4,   122,   123,   124,   125,   126,
-     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
-     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
-     147,   148,   149,   150,   151,   152,   153,     0,   258,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     7,     0,     0,     0,     0,     0,     0,
-      14,    29,     0,     0,    17,    18,    19,    20,    21,     0,
-       0,   118,   119,   120,   121,   259,   122,   123,   124,   125,
+     154,   262,   119,   120,   121,   122,     0,   123,   124,   125,
      126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
      136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
-     146,   147,   148,   149,   150,   151,   152,   153,   118,   119,
-     120,   121,     5,   122,   123,   124,   125,   126,   127,   128,
-     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
-     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
-     149,   150,   151,   152,   153,     0,   260,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
-       0,     0,     0,    38,    39,     0,     0,     0,     0,    40,
-      41,    42,     0,     0,     0,     0,     0,     0,     0,   118,
-     119,   120,   121,   261,   122,   123,   124,   125,   126,   127,
-     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
-     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
-     148,   149,   150,   151,   152,   153,   118,   119,   120,   121,
-       0,   122,   123,   124,   125,   126,   127,   128,   129,   130,
-     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
-     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
-     151,   152,   153,     0,   262,   122,   123,   124,   125,   126,
+     146,   147,   148,   149,   150,   151,   152,   153,   154,     0,
+     263,   119,   120,   121,   122,     0,   123,   124,   125,   126,
      127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
      137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
-     147,   148,   149,   150,   151,   152,   153,   118,   119,   120,
-     121,   263,   122,   123,   124,   125,   126,   127,   128,   129,
+     147,   148,   149,   150,   151,   152,   153,   154,   264,   119,
+     120,   121,   122,     0,   123,   124,   125,   126,   127,   128,
+     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
+     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
+     149,   150,   151,   152,   153,   154,     0,   265,   119,   120,
+     121,   122,     0,   123,   124,   125,   126,   127,   128,   129,
      130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
      140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
-     150,   151,   152,   153,   118,   119,   120,   121,     0,   122,
+     150,   151,   152,   153,   154,   266,   119,   120,   121,   122,
+       0,   123,   124,   125,   126,   127,   128,   129,   130,   131,
+     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
+     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
+     152,   153,   154,     0,   290,   119,   120,   121,   122,     0,
      123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
      133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
      143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
-     153,     0,   264,   123,   124,   125,   126,   127,   128,   129,
-     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
-     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
-     150,   151,   152,   153,     0,   118,   119,   120,   121,   265,
-     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
-     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
-     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
-     152,   153,   118,   119,   120,   121,     0,   122,   123,   124,
+     153,   154,   291,   119,   120,   121,   122,     0,   123,   124,
      125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
      135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
-     145,   146,   147,   148,   149,   150,   151,   152,   153,     0,
-     289,   124,   125,   126,   127,   128,   129,   130,   131,   132,
-     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
-     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
-     153,     0,     0,   118,   119,   120,   121,   290,   122,   123,
+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
+       5,   292,   119,   120,   121,   122,     0,   123,   124,   125,
+     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
+     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
+     146,   147,   148,   149,   150,   151,   152,   153,   154,   293,
+       0,     4,     0,     0,    38,     0,     0,     0,     0,     0,
+       0,    39,    40,     0,     0,     0,     0,    41,     4,    42,
+      43,     0,    51,     0,    52,     6,    47,     0,     0,     0,
+       0,     0,    53,    54,    55,    56,   169,    57,    58,    59,
+      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
+       7,     4,     0,     0,     0,     0,     0,    14,    30,     0,
+      70,    17,    18,    19,    20,    21,    22,     7,     4,     0,
+      71,     0,     0,     5,    14,    30,     0,     0,    17,    18,
+      19,    20,    21,    22,     0,    31,     0,     0,     0,     0,
+       0,     0,     6,     0,     0,     0,     0,     0,     0,     0,
+       7,     0,     0,     0,     0,     0,     0,    14,    30,     0,
+       0,    17,    18,    19,    20,    21,    22,     7,     8,     9,
+      10,    11,    12,    13,    14,    15,     0,    16,    17,    18,
+      19,    20,    21,    22,   119,   120,   121,   122,     0,   123,
      124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
      134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
      144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
-     118,   119,   120,   121,     0,   122,   123,   124,   125,   126,
+     154,   144,   145,   146,   147,   148,   149,   150,   151,   152,
+     153,   154,     0,     0,     0,     0,     0,     0,     0,     0,
+     155,   119,   120,   121,   122,   240,   123,   124,   125,   126,
      127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
      137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
-     147,   148,   149,   150,   151,   152,   153,     0,   291,   128,
-     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
-     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
-     149,   150,   151,   152,   153,     0,     0,     0,     0,     0,
-       0,   118,   119,   120,   121,   292,   122,   123,   124,   125,
-     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
-     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
-     146,   147,   148,   149,   150,   151,   152,   153,     0,     4,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-      50,     0,    51,     6,     0,     0,     0,     0,     0,     0,
-      52,    53,    54,    55,   168,    56,    57,    58,    59,    60,
-      61,    62,    63,    64,    65,    66,    67,    68,     7,     4,
-       0,     0,     0,     0,     5,    14,    29,     0,    69,    17,
-      18,    19,    20,    21,     0,     0,     0,    70,     0,     0,
-       0,     0,     0,     6,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     7,     8,
-       9,    10,    11,    12,    13,    14,    15,     0,    16,    17,
-      18,    19,    20,    21,   118,   119,   120,   121,     0,   122,
+     147,   148,   149,   150,   151,   152,   153,   154,   119,   120,
+     121,   122,   246,   123,   124,   125,   126,   127,   128,   129,
+     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
+     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
+     150,   151,   152,   153,   154,   119,   120,   121,   122,   275,
      123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
      133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
      143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
-     153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     154,   118,   119,   120,   121,   239,   122,   123,   124,   125,
+     153,   154,   119,   120,   121,   122,   279,   123,   124,   125,
      126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
      136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
-     146,   147,   148,   149,   150,   151,   152,   153,   118,   119,
-     120,   121,   245,   122,   123,   124,   125,   126,   127,   128,
+     146,   147,   148,   149,   150,   151,   152,   153,   154,   119,
+     120,   121,   122,   288,   123,   124,   125,   126,   127,   128,
      129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
      139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
-     149,   150,   151,   152,   153,   118,   119,   120,   121,   274,
-     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
+     149,   150,   151,   152,   153,   154,   119,   120,   121,   122,
+     295,   123,   124,   125,   126,   127,   128,   129,   130,   131,
      132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
      142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
-     152,   153,   118,   119,   120,   121,   278,   122,   123,   124,
+     152,   153,   154,   119,   120,   121,   122,   298,   123,   124,
      125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
      135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
-     145,   146,   147,   148,   149,   150,   151,   152,   153,   118,
-     119,   120,   121,   287,   122,   123,   124,   125,   126,   127,
+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
+     119,   120,   121,   122,     0,   123,   124,   125,   126,   127,
      128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
      138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
-     148,   149,   150,   151,   152,   153,   118,   119,   120,   121,
-     294,   122,   123,   124,   125,   126,   127,   128,   129,   130,
-     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
-     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
-     151,   152,   153,   118,   119,   120,   121,   297,   122,   123,
-     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
-     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
-     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
-     118,   119,   120,   121,     0,   122,   123,   124,   125,   126,
-     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
-     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
-     147,   148,   149,   150,   151,   152,   153,   119,   120,   121,
-       0,   122,   123,   124,   125,   126,   127,   128,   129,   130,
-     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
-     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
-     151,   152,   153,  -111,  -111,  -111,  -111,  -111,  -111,  -111,
-    -111,  -111,  -111,  -111,  -111,   140,   141,   142,   143,   144,
-     145,   146,   147,   148,   149,   150,   151,   152,   153
+     148,   149,   150,   151,   152,   153,   154,   120,   121,   122,
+       0,   123,   124,   125,   126,   127,   128,   129,   130,   131,
+     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
+     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
+     152,   153,   154,   122,     0,   123,   124,   125,   126,   127,
+     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
+     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
+     148,   149,   150,   151,   152,   153,   154,   123,   124,   125,
+     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
+     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
+     146,   147,   148,   149,   150,   151,   152,   153,   154,   124,
+     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
+     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
+     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
+     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
+     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
+     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
+     149,   150,   151,   152,   153,   154,  -111,  -111,  -111,  -111,
+    -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,   141,   142,
+     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
+     153,   154
 };
 
 static const yytype_int16 yycheck[] =
 {
-      11,     9,     2,     2,     4,     4,     7,     9,    75,     0,
-      77,     7,    23,    13,     7,    29,    30,    31,    32,    33,
-      34,    35,    36,    37,    38,    39,    66,    75,    76,    75,
-      75,    79,    43,    79,    74,    46,    77,    65,    49,    50,
-      51,    52,    53,    66,    15,    15,    69,    70,    71,    72,
-      73,    75,    65,    77,    76,    79,    58,    79,    78,    70,
-      80,    72,    67,    65,    76,     7,     7,    79,    79,    78,
-      76,    80,    79,    84,    77,    65,     7,    81,    79,    75,
-      76,    65,    77,    76,    65,    77,    86,    86,    77,    77,
-     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
-     111,   112,   113,   114,   115,    77,    65,   118,   119,   120,
+      11,     9,     2,     2,     4,     4,     7,    14,    66,     0,
+      76,     7,     7,    24,    13,    66,     9,    75,    69,    70,
+      71,    72,    73,    74,    76,    77,    14,    76,    80,    78,
+      76,    80,    77,    44,    80,    80,    47,    78,    65,    50,
+      51,    52,    53,    54,    33,    34,    35,    36,    37,    38,
+      39,    58,    77,    15,    76,    80,    78,    15,    65,    66,
+      71,    79,    73,    81,    71,    58,    73,    74,    65,    80,
+      58,    80,    65,    80,    85,    67,     7,    65,    66,    80,
+      76,    77,    77,    71,     7,    73,    74,    87,    87,    65,
+      77,   102,   103,   104,   105,   106,   107,   108,   109,   110,
+     111,   112,   113,   114,   115,   116,    78,    78,   119,   120,
      121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
      131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
      141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
-     151,   152,   153,    77,    77,    77,   154,    77,    77,    77,
-     161,    77,    77,     3,     4,     5,     6,   168,     8,     9,
-      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
-      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-       3,     4,     5,     6,    77,     8,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,   238,    77,    65,
-     241,    81,    33,    34,    35,    36,    37,    38,    39,    67,
-      65,    65,   253,    65,   255,   256,    76,    76,    80,    75,
-      81,    78,     7,     7,     7,    78,   267,     7,    65,    80,
-      65,    65,   273,    81,    81,    76,     2,   157,    81,     2,
-     116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-       3,     4,     5,     6,   295,     8,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,     3,     4,     5,
-       6,    -1,     8,     9,    10,    11,    12,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,     3,     4,     5,     6,    81,     8,
+     151,   152,   153,   154,    79,    78,    81,   155,    78,    78,
+      78,   162,    78,    78,     3,     4,     5,     6,   169,     8,
        9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
       29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    -1,    78,     6,    80,     8,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,     3,     4,     5,
-       6,    80,     8,     9,    10,    11,    12,    13,    14,    15,
+      39,     3,     4,     5,     6,    78,     8,     9,    10,    11,
+      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
+      32,    33,    34,    35,    36,    37,    38,    39,   239,    65,
+      78,   242,    78,    82,    78,    78,    78,    78,    78,    65,
+      65,    65,    65,   254,    82,   256,   257,    67,    65,    65,
+      77,    79,    81,     7,     7,    77,     7,   268,    76,     7,
+      79,    82,     7,   274,    65,    65,    81,    65,    82,    82,
+      82,    77,     2,   158,     2,    -1,    -1,    -1,   117,    -1,
+      -1,     3,     4,     5,     6,   296,     8,     9,    10,    11,
+      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
+      32,    33,    34,    35,    36,    37,    38,    39,     3,     4,
+       5,     6,    -1,     8,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    -1,     3,     4,     5,     6,
+      82,     8,     9,    10,    11,    12,    13,    14,    15,    16,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+      37,    38,    39,    -1,    79,    -1,    81,     3,     4,     5,
+       6,    -1,     8,     9,    10,    11,    12,    13,    14,    15,
       16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,     3,     4,     5,     6,     9,     8,
+      36,    37,    38,    39,    81,     3,     4,     5,     6,    -1,
+       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
+      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
+      38,    39,    -1,    -1,    -1,    81,     3,     4,     5,     6,
+      -1,     8,     9,    10,    11,    12,    13,    14,    15,    16,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+      37,    38,    39,    81,     3,     4,     5,     6,    -1,     8,
        9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
       29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,
-      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    69,    70,
-      71,    72,    73,    -1,    75,    -1,    -1,     3,     4,     5,
-       6,    80,     8,     9,    10,    11,    12,    13,    14,    15,
+      39,    -1,    79,     3,     4,     5,     6,    -1,     8,     9,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
+      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+      79,     3,     4,     5,     6,    -1,     8,     9,    10,    11,
+      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
+      32,    33,    34,    35,    36,    37,    38,    39,    -1,    79,
+       3,     4,     5,     6,    -1,     8,     9,    10,    11,    12,
+      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
+      33,    34,    35,    36,    37,    38,    39,    79,     3,     4,
+       5,     6,    -1,     8,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    -1,    79,     3,     4,     5,
+       6,    -1,     8,     9,    10,    11,    12,    13,    14,    15,
       16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,     3,     4,     5,     6,    14,     8,
-       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    58,    -1,    -1,    -1,    -1,    -1,    -1,    65,
-      66,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
-      -1,    -1,    -1,    79,    -1,     3,     4,     5,     6,    78,
+      36,    37,    38,    39,    79,     3,     4,     5,     6,    -1,
        8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,     3,     4,     5,     6,    14,     8,     9,    10,
+      38,    39,    -1,    79,     3,     4,     5,     6,    -1,     8,
+       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    79,     3,     4,     5,     6,    -1,     8,     9,    10,
       11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
       31,    32,    33,    34,    35,    36,    37,    38,    39,    -1,
-      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      58,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
-      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
-      -1,    79,    -1,     3,     4,     5,     6,    78,     8,     9,
-      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
-      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-       3,     4,     5,     6,     9,     8,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    -1,    78,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    58,    -1,    -1,    -1,    -1,    -1,    -1,
-      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
-      -1,     3,     4,     5,     6,    78,     8,     9,    10,    11,
+      79,     3,     4,     5,     6,    -1,     8,     9,    10,    11,
       12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,     3,     4,
-       5,     6,    14,     8,     9,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    -1,    78,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,    -1,
-      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
-      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
-       4,     5,     6,    78,     8,     9,    10,    11,    12,    13,
+      32,    33,    34,    35,    36,    37,    38,    39,    79,     3,
+       4,     5,     6,    -1,     8,     9,    10,    11,    12,    13,
       14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
       24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
-      34,    35,    36,    37,    38,    39,     3,     4,     5,     6,
+      34,    35,    36,    37,    38,    39,    -1,    79,     3,     4,
+       5,     6,    -1,     8,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    79,     3,     4,     5,     6,
       -1,     8,     9,    10,    11,    12,    13,    14,    15,    16,
       17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    -1,    78,     8,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,     3,     4,     5,
-       6,    78,     8,     9,    10,    11,    12,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,     3,     4,     5,     6,    -1,     8,
-       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    -1,    78,     9,    10,    11,    12,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    -1,     3,     4,     5,     6,    78,
+      37,    38,    39,    -1,    79,     3,     4,     5,     6,    -1,
        8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,     3,     4,     5,     6,    -1,     8,     9,    10,
-      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
-      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
-      31,    32,    33,    34,    35,    36,    37,    38,    39,    -1,
-      78,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    -1,    -1,     3,     4,     5,     6,    78,     8,     9,
+      38,    39,    79,     3,     4,     5,     6,    -1,     8,     9,
       10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
       20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
       30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-       3,     4,     5,     6,    -1,     8,     9,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    -1,    78,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    -1,    -1,    -1,    -1,    -1,
-      -1,     3,     4,     5,     6,    78,     8,     9,    10,    11,
-      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    -1,     9,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      30,    -1,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
-      40,    41,    42,    43,    76,    45,    46,    47,    48,    49,
-      50,    51,    52,    53,    54,    55,    56,    57,    58,     9,
-      -1,    -1,    -1,    -1,    14,    65,    66,    -1,    68,    69,
-      70,    71,    72,    73,    -1,    -1,    -1,    77,    -1,    -1,
-      -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
-      60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
-      70,    71,    72,    73,     3,     4,     5,     6,    -1,     8,
+      14,    79,     3,     4,     5,     6,    -1,     8,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
+      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
+      31,    32,    33,    34,    35,    36,    37,    38,    39,    79,
+      -1,     9,    -1,    -1,    58,    -1,    -1,    -1,    -1,    -1,
+      -1,    65,    66,    -1,    -1,    -1,    -1,    71,     9,    73,
+      74,    -1,    30,    -1,    32,    33,    80,    -1,    -1,    -1,
+      -1,    -1,    40,    41,    42,    43,    77,    45,    46,    47,
+      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
+      58,     9,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
+      68,    69,    70,    71,    72,    73,    74,    58,     9,    -1,
+      78,    -1,    -1,    14,    65,    66,    -1,    -1,    69,    70,
+      71,    72,    73,    74,    -1,    76,    -1,    -1,    -1,    -1,
+      -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      58,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
+      -1,    69,    70,    71,    72,    73,    74,    58,    59,    60,
+      61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
+      71,    72,    73,    74,     3,     4,     5,     6,    -1,     8,
        9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
       29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      39,    29,    30,    31,    32,    33,    34,    35,    36,    37,
+      38,    39,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       59,     3,     4,     5,     6,     7,     8,     9,    10,    11,
       12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
@@ -1284,63 +1246,79 @@ static const yytype_int16 yycheck[] =
       -1,     8,     9,    10,    11,    12,    13,    14,    15,    16,
       17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    14,    15,    16,    17,    18,    19,    20,
+      37,    38,    39,     6,    -1,     8,     9,    10,    11,    12,
+      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
+      33,    34,    35,    36,    37,    38,    39,     8,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
-      31,    32,    33,    34,    35,    36,    37,    38,    39
+      31,    32,    33,    34,    35,    36,    37,    38,    39,     9,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
+      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
+      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    14,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
+      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
+      38,    39
 };
 
 /* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
    state STATE-NUM.  */
 static const yytype_int8 yystos[] =
 {
-       0,    83,    84,     0,     9,    14,    33,    58,    59,    60,
+       0,    84,    85,     0,     9,    14,    33,    58,    59,    60,
       61,    62,    63,    64,    65,    66,    68,    69,    70,    71,
-      72,    73,    85,    87,    89,    90,    91,    92,    93,    66,
-      75,    89,    93,    66,    74,    75,    79,    58,    65,    66,
-      71,    72,    73,    79,    88,    92,    79,    88,     7,    79,
-      30,    32,    40,    41,    42,    43,    45,    46,    47,    48,
-      49,    50,    51,    52,    53,    54,    55,    56,    57,    68,
-      77,    86,    87,    89,    93,    66,    93,    75,    75,    76,
-      77,    86,    75,    77,    76,    79,    65,    15,    15,    65,
-      67,    79,    86,     7,    86,     7,    86,    86,    86,    86,
-      86,    77,    77,    77,    77,    77,    77,    77,    77,    77,
-      77,    77,    77,    77,    77,    77,    77,    86,     3,     4,
-       5,     6,     8,     9,    10,    11,    12,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    59,    86,    75,    77,    79,     7,
-      75,    76,    76,    65,    65,    86,    86,    94,    76,    65,
-      65,    86,    65,    89,    81,    67,    81,    81,    81,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    94,    78,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    88,    65,    90,    65,    65,    86,    76,     7,
-      78,    80,    86,    76,    78,     7,    80,    75,    81,     7,
-       7,     7,    78,    80,    78,    80,    80,    78,    78,    78,
-      78,    78,    78,    78,    78,    78,    78,    80,    78,     7,
-      78,    80,     7,    76,     7,    86,     7,    86,     7,    65,
-      65,    86,    86,    86,    86,    65,    86,     7,    81,    78,
-      78,    78,    78,    81,     7,    76,    86,     7
+      72,    73,    74,    86,    88,    90,    91,    92,    93,    94,
+      66,    76,    90,    94,    66,    75,    76,    80,    58,    65,
+      66,    71,    73,    74,    80,    89,    93,    80,    89,     7,
+      80,    30,    32,    40,    41,    42,    43,    45,    46,    47,
+      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
+      68,    78,    87,    88,    90,    94,    66,    94,    76,    76,
+      77,    78,    87,    76,    78,    77,    80,    65,    15,    15,
+      65,    67,    80,    87,     7,    87,     7,    87,    87,    87,
+      87,    87,    78,    78,    78,    78,    78,    78,    78,    78,
+      78,    78,    78,    78,    78,    78,    78,    78,    87,     3,
+       4,     5,     6,     8,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    59,    87,    76,    78,    80,
+       7,    76,    77,    77,    65,    65,    87,    87,    95,    77,
+      65,    65,    87,    65,    90,    82,    67,    82,    82,    82,
+      87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
+      87,    87,    87,    87,    87,    95,    79,    87,    87,    87,
+      87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
+      87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
+      87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
+      87,    87,    87,    89,    65,    91,    65,    65,    87,    77,
+       7,    79,    81,    87,    77,    79,     7,    81,    76,    82,
+       7,     7,     7,    79,    81,    79,    81,    81,    79,    79,
+      79,    79,    79,    79,    79,    79,    79,    79,    81,    79,
+       7,    79,    81,     7,    77,     7,    87,     7,    87,     7,
+      65,    65,    87,    87,    87,    87,    65,    87,     7,    82,
+      79,    79,    79,    79,    82,     7,    77,    87,     7
 };
 
 /* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
 static const yytype_int8 yyr1[] =
 {
-       0,    82,    83,    84,    84,    84,    84,    85,    85,    85,
-      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
-      85,    85,    85,    85,    85,    85,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
+       0,    83,    84,    85,    85,    85,    85,    86,    86,    86,
       86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    87,
-      87,    87,    87,    88,    88,    88,    88,    88,    88,    88,
-      88,    89,    89,    89,    90,    90,    90,    90,    90,    91,
-      91,    92,    92,    93,    93,    93,    93,    93,    94,    94,
-      94
+      86,    86,    86,    86,    86,    86,    87,    87,    87,    87,
+      87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
+      87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
+      87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
+      87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
+      87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
+      87,    87,    87,    87,    87,    87,    87,    87,    87,    88,
+      88,    88,    88,    89,    89,    89,    89,    89,    89,    89,
+      89,    90,    90,    90,    91,    91,    91,    91,    91,    92,
+      92,    93,    93,    94,    94,    94,    94,    94,    94,    95,
+      95,    95
 };
 
 /* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
@@ -1357,8 +1335,8 @@ static const yytype_int8 yyr2[] =
        4,     4,     4,     4,     6,     4,     3,     6,     4,     6,
        4,     3,     1,     1,     1,     1,     1,     1,     4,     1,
        1,     1,     1,     1,     1,     1,     3,     2,     4,     1,
-       1,     3,     3,     1,     1,     1,     1,     1,     0,     1,
-       3
+       1,     3,     3,     1,     1,     1,     1,     1,     1,     0,
+       1,     3
 };
 
 
@@ -2325,23 +2303,27 @@ yyreduce:
                                 { (yyval.specsym) = (yyvsp[0].startsym); }
     break;
 
-  case 116: /* specificsymbol: ENDSYM  */
+  case 116: /* specificsymbol: OFFSETSYM  */
+                                { (yyval.specsym) = (yyvsp[0].offsetsym); }
+    break;
+
+  case 117: /* specificsymbol: ENDSYM  */
                                 { (yyval.specsym) = (yyvsp[0].endsym); }
     break;
 
-  case 117: /* specificsymbol: NEXT2SYM  */
+  case 118: /* specificsymbol: NEXT2SYM  */
                                 { (yyval.specsym) = (yyvsp[0].next2sym); }
     break;
 
-  case 118: /* paramlist: %empty  */
+  case 119: /* paramlist: %empty  */
                                 { (yyval.param) = new vector<ExprTree *>; }
     break;
 
-  case 119: /* paramlist: expr  */
+  case 120: /* paramlist: expr  */
                                 { (yyval.param) = new vector<ExprTree *>; (yyval.param)->push_back((yyvsp[0].tree)); }
     break;
 
-  case 120: /* paramlist: paramlist ',' expr  */
+  case 121: /* paramlist: paramlist ',' expr  */
                                 { (yyval.param) = (yyvsp[-2].param); (yyval.param)->push_back((yyvsp[0].tree)); }
     break;
 
@@ -3052,6 +3034,9 @@ int4 PcodeSnippet::lex(void)
       case SleighSymbol::start_symbol:
 	yylval.startsym = (StartSymbol *)sym;
 	return STARTSYM;
+      case SleighSymbol::offset_symbol:
+	yylval.offsetsym = (OffsetSymbol *)sym;
+	return OFFSETSYM;
       case SleighSymbol::end_symbol:
 	yylval.endsym = (EndSymbol *)sym;
 	return ENDSYM;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.y b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.y
index 11b058a94..1eee53d8f 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.y
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.y
@@ -48,6 +48,7 @@ extern int pcodeerror(const char *str );
   UserOpSymbol *useropsym;
   LabelSymbol *labelsym;
   StartSymbol *startsym;
+  OffsetSymbol *offsetsym;
   EndSymbol *endsym;
   Next2Symbol *next2sym;
   OperandSymbol *operandsym;
@@ -87,6 +88,7 @@ extern int pcodeerror(const char *str );
 %token <varsym> VARSYM
 %token <operandsym> OPERANDSYM
 %token <startsym> STARTSYM
+%token <offsetsym> OFFSETSYM
 %token <endsym> ENDSYM
 %token <next2sym> NEXT2SYM
 %token <labelsym> LABELSYM
@@ -234,6 +236,7 @@ label: '<' LABELSYM '>'         { $$ = $2; }
 specificsymbol: VARSYM		{ $$ = $1; }
   | OPERANDSYM			{ $$ = $1; }
   | STARTSYM			{ $$ = $1; }
+  | OFFSETSYM			{ $$ = $1; }
   | ENDSYM			{ $$ = $1; }
   | NEXT2SYM			{ $$ = $1; }
   ;
@@ -755,6 +758,9 @@ int4 PcodeSnippet::lex(void)
       case SleighSymbol::start_symbol:
 	yylval.startsym = (StartSymbol *)sym;
 	return STARTSYM;
+      case SleighSymbol::offset_symbol:
+	yylval.offsetsym = (OffsetSymbol *)sym;
+	return OFFSETSYM;
       case SleighSymbol::end_symbol:
 	yylval.endsym = (EndSymbol *)sym;
 	return ENDSYM;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/semantics.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/semantics.cc
index c5bd75599..c4da597d2 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/semantics.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/semantics.cc
@@ -123,6 +123,8 @@ uintb ConstTpl::fix(const ParserWalker &walker) const
   switch(type) {
   case j_start:
     return walker.getAddr().getOffset(); // Fill in starting address placeholder with real address
+  case j_offset:
+    return walker.getAddr().getOffset(); // Fill in starting address placeholder with real address
   case j_next:
     return walker.getNaddr().getOffset(); // Fill in next address placeholder with real address
   case j_next2:
@@ -352,6 +354,9 @@ void ConstTpl::saveXml(ostream &s) const
   case j_start:
     s << "start\"/>";
     break;
+  case j_offset:
+    s << "operand_offset\"/>";
+    break;
   case j_next:
     s << "next\"/>";
     break;
@@ -410,6 +415,9 @@ void ConstTpl::restoreXml(const Element *el,const AddrSpaceManager *manage)
   else if (typestring=="start") {
     type = j_start;
   }
+  else if (typestring=="operand_offset") {
+    type = j_offset;
+  }
   else if (typestring=="next") {
     type = j_next;
   }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/semantics.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/semantics.hh
index 652600c16..7f19abb4b 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/semantics.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/semantics.hh
@@ -34,7 +34,7 @@ class ConstTpl {
 public:
   enum const_type { real=0, handle=1, j_start=2, j_next=3, j_next2=4, j_curspace=5, 
 		    j_curspace_size=6, spaceid=7, j_relative=8,
-		    j_flowref=9, j_flowref_size=10, j_flowdest=11, j_flowdest_size=12 };
+		    j_flowref=9, j_flowref_size=10, j_flowdest=11, j_flowdest_size=12, j_offset=13 };
   enum v_field { v_space=0, v_offset=1, v_size=2, v_offset_plus=3 };
 private:
   const_type type;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc
index e2004f714..60744b71c 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc
@@ -1817,6 +1817,8 @@ void SleighCompile::predefinedSymbols(void)
   symtab.addSymbol(spacesym);
   StartSymbol *startsym = new StartSymbol("inst_start",getConstantSpace());
   symtab.addSymbol(startsym);
+  OffsetSymbol *offsetsym = new OffsetSymbol("operand_offset",getConstantSpace());
+  symtab.addSymbol(offsetsym);
   EndSymbol *endsym = new EndSymbol("inst_next",getConstantSpace());
   symtab.addSymbol(endsym);
   Next2Symbol *next2sym = new Next2Symbol("inst_next2",getConstantSpace());
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc
index 4326ff244..75ab98733 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc
@@ -241,92 +241,93 @@ enum yysymbol_kind_t
   YYSYMBOL_VARLISTSYM = 123,               /* VARLISTSYM  */
   YYSYMBOL_OPERANDSYM = 124,               /* OPERANDSYM  */
   YYSYMBOL_STARTSYM = 125,                 /* STARTSYM  */
-  YYSYMBOL_ENDSYM = 126,                   /* ENDSYM  */
-  YYSYMBOL_NEXT2SYM = 127,                 /* NEXT2SYM  */
-  YYSYMBOL_MACROSYM = 128,                 /* MACROSYM  */
-  YYSYMBOL_LABELSYM = 129,                 /* LABELSYM  */
-  YYSYMBOL_SUBTABLESYM = 130,              /* SUBTABLESYM  */
-  YYSYMBOL_131_ = 131,                     /* '}'  */
-  YYSYMBOL_132_ = 132,                     /* '='  */
-  YYSYMBOL_133_ = 133,                     /* '('  */
-  YYSYMBOL_134_ = 134,                     /* ')'  */
-  YYSYMBOL_135_ = 135,                     /* ','  */
-  YYSYMBOL_136_ = 136,                     /* '['  */
-  YYSYMBOL_137_ = 137,                     /* ']'  */
-  YYSYMBOL_138_ = 138,                     /* '{'  */
-  YYSYMBOL_139_ = 139,                     /* ':'  */
-  YYSYMBOL_140_ = 140,                     /* ' '  */
-  YYSYMBOL_YYACCEPT = 141,                 /* $accept  */
-  YYSYMBOL_spec = 142,                     /* spec  */
-  YYSYMBOL_definition = 143,               /* definition  */
-  YYSYMBOL_constructorlike = 144,          /* constructorlike  */
-  YYSYMBOL_endiandef = 145,                /* endiandef  */
-  YYSYMBOL_aligndef = 146,                 /* aligndef  */
-  YYSYMBOL_tokendef = 147,                 /* tokendef  */
-  YYSYMBOL_tokenprop = 148,                /* tokenprop  */
-  YYSYMBOL_contextdef = 149,               /* contextdef  */
-  YYSYMBOL_contextprop = 150,              /* contextprop  */
-  YYSYMBOL_fielddef = 151,                 /* fielddef  */
-  YYSYMBOL_contextfielddef = 152,          /* contextfielddef  */
-  YYSYMBOL_spacedef = 153,                 /* spacedef  */
-  YYSYMBOL_spaceprop = 154,                /* spaceprop  */
-  YYSYMBOL_varnodedef = 155,               /* varnodedef  */
-  YYSYMBOL_bitrangedef = 156,              /* bitrangedef  */
-  YYSYMBOL_bitrangelist = 157,             /* bitrangelist  */
-  YYSYMBOL_bitrangesingle = 158,           /* bitrangesingle  */
-  YYSYMBOL_pcodeopdef = 159,               /* pcodeopdef  */
-  YYSYMBOL_valueattach = 160,              /* valueattach  */
-  YYSYMBOL_nameattach = 161,               /* nameattach  */
-  YYSYMBOL_varattach = 162,                /* varattach  */
-  YYSYMBOL_macrodef = 163,                 /* macrodef  */
-  YYSYMBOL_withblockstart = 164,           /* withblockstart  */
-  YYSYMBOL_withblockmid = 165,             /* withblockmid  */
-  YYSYMBOL_withblock = 166,                /* withblock  */
-  YYSYMBOL_id_or_nil = 167,                /* id_or_nil  */
-  YYSYMBOL_bitpat_or_nil = 168,            /* bitpat_or_nil  */
-  YYSYMBOL_macrostart = 169,               /* macrostart  */
-  YYSYMBOL_rtlbody = 170,                  /* rtlbody  */
-  YYSYMBOL_constructor = 171,              /* constructor  */
-  YYSYMBOL_constructprint = 172,           /* constructprint  */
-  YYSYMBOL_subtablestart = 173,            /* subtablestart  */
-  YYSYMBOL_pexpression = 174,              /* pexpression  */
-  YYSYMBOL_pequation = 175,                /* pequation  */
-  YYSYMBOL_elleq = 176,                    /* elleq  */
-  YYSYMBOL_ellrt = 177,                    /* ellrt  */
-  YYSYMBOL_atomic = 178,                   /* atomic  */
-  YYSYMBOL_constraint = 179,               /* constraint  */
-  YYSYMBOL_contextblock = 180,             /* contextblock  */
-  YYSYMBOL_contextlist = 181,              /* contextlist  */
-  YYSYMBOL_section_def = 182,              /* section_def  */
-  YYSYMBOL_rtlfirstsection = 183,          /* rtlfirstsection  */
-  YYSYMBOL_rtlcontinue = 184,              /* rtlcontinue  */
-  YYSYMBOL_rtl = 185,                      /* rtl  */
-  YYSYMBOL_rtlmid = 186,                   /* rtlmid  */
-  YYSYMBOL_statement = 187,                /* statement  */
-  YYSYMBOL_expr = 188,                     /* expr  */
-  YYSYMBOL_sizedstar = 189,                /* sizedstar  */
-  YYSYMBOL_jumpdest = 190,                 /* jumpdest  */
-  YYSYMBOL_varnode = 191,                  /* varnode  */
-  YYSYMBOL_integervarnode = 192,           /* integervarnode  */
-  YYSYMBOL_lhsvarnode = 193,               /* lhsvarnode  */
-  YYSYMBOL_label = 194,                    /* label  */
-  YYSYMBOL_exportvarnode = 195,            /* exportvarnode  */
-  YYSYMBOL_familysymbol = 196,             /* familysymbol  */
-  YYSYMBOL_specificsymbol = 197,           /* specificsymbol  */
-  YYSYMBOL_charstring = 198,               /* charstring  */
-  YYSYMBOL_intblist = 199,                 /* intblist  */
-  YYSYMBOL_intbpart = 200,                 /* intbpart  */
-  YYSYMBOL_stringlist = 201,               /* stringlist  */
-  YYSYMBOL_stringpart = 202,               /* stringpart  */
-  YYSYMBOL_anystringlist = 203,            /* anystringlist  */
-  YYSYMBOL_anystringpart = 204,            /* anystringpart  */
-  YYSYMBOL_valuelist = 205,                /* valuelist  */
-  YYSYMBOL_valuepart = 206,                /* valuepart  */
-  YYSYMBOL_varlist = 207,                  /* varlist  */
-  YYSYMBOL_varpart = 208,                  /* varpart  */
-  YYSYMBOL_paramlist = 209,                /* paramlist  */
-  YYSYMBOL_oplist = 210,                   /* oplist  */
-  YYSYMBOL_anysymbol = 211                 /* anysymbol  */
+  YYSYMBOL_OFFSETSYM = 126,                /* OFFSETSYM  */
+  YYSYMBOL_ENDSYM = 127,                   /* ENDSYM  */
+  YYSYMBOL_NEXT2SYM = 128,                 /* NEXT2SYM  */
+  YYSYMBOL_MACROSYM = 129,                 /* MACROSYM  */
+  YYSYMBOL_LABELSYM = 130,                 /* LABELSYM  */
+  YYSYMBOL_SUBTABLESYM = 131,              /* SUBTABLESYM  */
+  YYSYMBOL_132_ = 132,                     /* '}'  */
+  YYSYMBOL_133_ = 133,                     /* '='  */
+  YYSYMBOL_134_ = 134,                     /* '('  */
+  YYSYMBOL_135_ = 135,                     /* ')'  */
+  YYSYMBOL_136_ = 136,                     /* ','  */
+  YYSYMBOL_137_ = 137,                     /* '['  */
+  YYSYMBOL_138_ = 138,                     /* ']'  */
+  YYSYMBOL_139_ = 139,                     /* '{'  */
+  YYSYMBOL_140_ = 140,                     /* ':'  */
+  YYSYMBOL_141_ = 141,                     /* ' '  */
+  YYSYMBOL_YYACCEPT = 142,                 /* $accept  */
+  YYSYMBOL_spec = 143,                     /* spec  */
+  YYSYMBOL_definition = 144,               /* definition  */
+  YYSYMBOL_constructorlike = 145,          /* constructorlike  */
+  YYSYMBOL_endiandef = 146,                /* endiandef  */
+  YYSYMBOL_aligndef = 147,                 /* aligndef  */
+  YYSYMBOL_tokendef = 148,                 /* tokendef  */
+  YYSYMBOL_tokenprop = 149,                /* tokenprop  */
+  YYSYMBOL_contextdef = 150,               /* contextdef  */
+  YYSYMBOL_contextprop = 151,              /* contextprop  */
+  YYSYMBOL_fielddef = 152,                 /* fielddef  */
+  YYSYMBOL_contextfielddef = 153,          /* contextfielddef  */
+  YYSYMBOL_spacedef = 154,                 /* spacedef  */
+  YYSYMBOL_spaceprop = 155,                /* spaceprop  */
+  YYSYMBOL_varnodedef = 156,               /* varnodedef  */
+  YYSYMBOL_bitrangedef = 157,              /* bitrangedef  */
+  YYSYMBOL_bitrangelist = 158,             /* bitrangelist  */
+  YYSYMBOL_bitrangesingle = 159,           /* bitrangesingle  */
+  YYSYMBOL_pcodeopdef = 160,               /* pcodeopdef  */
+  YYSYMBOL_valueattach = 161,              /* valueattach  */
+  YYSYMBOL_nameattach = 162,               /* nameattach  */
+  YYSYMBOL_varattach = 163,                /* varattach  */
+  YYSYMBOL_macrodef = 164,                 /* macrodef  */
+  YYSYMBOL_withblockstart = 165,           /* withblockstart  */
+  YYSYMBOL_withblockmid = 166,             /* withblockmid  */
+  YYSYMBOL_withblock = 167,                /* withblock  */
+  YYSYMBOL_id_or_nil = 168,                /* id_or_nil  */
+  YYSYMBOL_bitpat_or_nil = 169,            /* bitpat_or_nil  */
+  YYSYMBOL_macrostart = 170,               /* macrostart  */
+  YYSYMBOL_rtlbody = 171,                  /* rtlbody  */
+  YYSYMBOL_constructor = 172,              /* constructor  */
+  YYSYMBOL_constructprint = 173,           /* constructprint  */
+  YYSYMBOL_subtablestart = 174,            /* subtablestart  */
+  YYSYMBOL_pexpression = 175,              /* pexpression  */
+  YYSYMBOL_pequation = 176,                /* pequation  */
+  YYSYMBOL_elleq = 177,                    /* elleq  */
+  YYSYMBOL_ellrt = 178,                    /* ellrt  */
+  YYSYMBOL_atomic = 179,                   /* atomic  */
+  YYSYMBOL_constraint = 180,               /* constraint  */
+  YYSYMBOL_contextblock = 181,             /* contextblock  */
+  YYSYMBOL_contextlist = 182,              /* contextlist  */
+  YYSYMBOL_section_def = 183,              /* section_def  */
+  YYSYMBOL_rtlfirstsection = 184,          /* rtlfirstsection  */
+  YYSYMBOL_rtlcontinue = 185,              /* rtlcontinue  */
+  YYSYMBOL_rtl = 186,                      /* rtl  */
+  YYSYMBOL_rtlmid = 187,                   /* rtlmid  */
+  YYSYMBOL_statement = 188,                /* statement  */
+  YYSYMBOL_expr = 189,                     /* expr  */
+  YYSYMBOL_sizedstar = 190,                /* sizedstar  */
+  YYSYMBOL_jumpdest = 191,                 /* jumpdest  */
+  YYSYMBOL_varnode = 192,                  /* varnode  */
+  YYSYMBOL_integervarnode = 193,           /* integervarnode  */
+  YYSYMBOL_lhsvarnode = 194,               /* lhsvarnode  */
+  YYSYMBOL_label = 195,                    /* label  */
+  YYSYMBOL_exportvarnode = 196,            /* exportvarnode  */
+  YYSYMBOL_familysymbol = 197,             /* familysymbol  */
+  YYSYMBOL_specificsymbol = 198,           /* specificsymbol  */
+  YYSYMBOL_charstring = 199,               /* charstring  */
+  YYSYMBOL_intblist = 200,                 /* intblist  */
+  YYSYMBOL_intbpart = 201,                 /* intbpart  */
+  YYSYMBOL_stringlist = 202,               /* stringlist  */
+  YYSYMBOL_stringpart = 203,               /* stringpart  */
+  YYSYMBOL_anystringlist = 204,            /* anystringlist  */
+  YYSYMBOL_anystringpart = 205,            /* anystringpart  */
+  YYSYMBOL_valuelist = 206,                /* valuelist  */
+  YYSYMBOL_valuepart = 207,                /* valuepart  */
+  YYSYMBOL_varlist = 208,                  /* varlist  */
+  YYSYMBOL_varpart = 209,                  /* varpart  */
+  YYSYMBOL_paramlist = 210,                /* paramlist  */
+  YYSYMBOL_oplist = 211,                   /* oplist  */
+  YYSYMBOL_anysymbol = 212                 /* anysymbol  */
 };
 typedef enum yysymbol_kind_t yysymbol_kind_t;
 
@@ -654,19 +655,19 @@ union yyalloc
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  5
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   2673
+#define YYLAST   2701
 
 /* YYNTOKENS -- Number of terminals.  */
-#define YYNTOKENS  141
+#define YYNTOKENS  142
 /* YYNNTS -- Number of nonterminals.  */
 #define YYNNTS  71
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  346
+#define YYNRULES  348
 /* YYNSTATES -- Number of states.  */
-#define YYNSTATES  724
+#define YYNSTATES  726
 
 /* YYMAXUTOK -- Last valid token kind.  */
-#define YYMAXUTOK   372
+#define YYMAXUTOK   373
 
 
 /* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
@@ -683,16 +684,16 @@ static const yytype_uint8 yytranslate[] =
        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,   140,    43,     2,     2,     2,    38,    11,     2,
-     133,   134,    36,    32,   135,    33,     2,    37,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,   139,     8,
-      17,   132,    18,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,   141,    43,     2,     2,     2,    38,    11,     2,
+     134,   135,    36,    32,   136,    33,     2,    37,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,   140,     8,
+      17,   133,    18,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,   136,     2,   137,     9,     2,     2,     2,     2,     2,
+       2,   137,     2,   138,     9,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,   138,     6,   131,    44,     2,     2,     2,
+       2,     2,     2,   139,     6,   132,    44,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
@@ -717,48 +718,48 @@ static const yytype_uint8 yytranslate[] =
       98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
      108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
-     128,   129,   130
+     128,   129,   130,   131
 };
 
 #if SLEIGHDEBUG
 /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
 static const yytype_int16 yyrline[] =
 {
-       0,   160,   160,   161,   162,   163,   165,   166,   167,   168,
-     169,   170,   171,   172,   173,   174,   176,   177,   178,   179,
-     181,   182,   184,   186,   188,   189,   190,   191,   192,   194,
-     196,   197,   200,   201,   202,   203,   204,   205,   206,   208,
-     209,   210,   211,   212,   213,   214,   215,   217,   219,   220,
-     221,   222,   223,   224,   225,   227,   229,   231,   233,   234,
-     236,   239,   241,   243,   245,   247,   250,   252,   253,   254,
-     256,   258,   259,   260,   263,   264,   267,   269,   270,   271,
-     273,   274,   276,   277,   278,   279,   280,   281,   282,   283,
-     284,   286,   287,   288,   289,   291,   293,   296,   297,   298,
-     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
-     310,   311,   312,   313,   315,   316,   318,   319,   321,   322,
-     324,   325,   326,   327,   328,   329,   330,   333,   334,   335,
-     336,   338,   339,   341,   342,   343,   344,   345,   346,   348,
-     349,   351,   353,   354,   356,   357,   358,   359,   360,   362,
-     363,   364,   365,   367,   368,   369,   370,   371,   372,   373,
-     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
-     384,   385,   386,   387,   388,   389,   390,   391,   393,   394,
-     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
-     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
-     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
-     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
-     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
-     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
-     455,   456,   457,   458,   459,   461,   462,   463,   464,   466,
-     467,   468,   469,   470,   471,   472,   473,   474,   476,   477,
-     478,   479,   481,   482,   483,   484,   485,   487,   488,   489,
-     491,   492,   494,   495,   496,   497,   498,   499,   501,   502,
-     503,   504,   505,   507,   508,   509,   510,   511,   512,   514,
-     515,   517,   518,   519,   521,   522,   523,   525,   526,   527,
-     530,   531,   533,   534,   535,   537,   539,   540,   541,   542,
-     544,   545,   546,   548,   549,   550,   551,   552,   554,   555,
-     557,   558,   560,   561,   564,   565,   566,   568,   569,   570,
-     572,   573,   574,   575,   576,   577,   578,   579,   580,   581,
-     582,   583,   584,   585,   586,   587,   588
+       0,   162,   162,   163,   164,   165,   167,   168,   169,   170,
+     171,   172,   173,   174,   175,   176,   178,   179,   180,   181,
+     183,   184,   186,   188,   190,   191,   192,   193,   194,   196,
+     198,   199,   202,   203,   204,   205,   206,   207,   208,   210,
+     211,   212,   213,   214,   215,   216,   217,   219,   221,   222,
+     223,   224,   225,   226,   227,   229,   231,   233,   235,   236,
+     238,   241,   243,   245,   247,   249,   252,   254,   255,   256,
+     258,   260,   261,   262,   265,   266,   269,   271,   272,   273,
+     275,   276,   278,   279,   280,   281,   282,   283,   284,   285,
+     286,   288,   289,   290,   291,   293,   295,   298,   299,   300,
+     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
+     312,   313,   314,   315,   317,   318,   320,   321,   323,   324,
+     326,   327,   328,   329,   330,   331,   332,   335,   336,   337,
+     338,   340,   341,   343,   344,   345,   346,   347,   348,   350,
+     351,   353,   355,   356,   358,   359,   360,   361,   362,   364,
+     365,   366,   367,   369,   370,   371,   372,   373,   374,   375,
+     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
+     386,   387,   388,   389,   390,   391,   392,   393,   395,   396,
+     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
+     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
+     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
+     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
+     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
+     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
+     457,   458,   459,   460,   461,   463,   464,   465,   466,   468,
+     469,   470,   471,   472,   473,   474,   475,   476,   478,   479,
+     480,   481,   483,   484,   485,   486,   487,   489,   490,   491,
+     493,   494,   496,   497,   498,   499,   500,   501,   503,   504,
+     505,   506,   507,   509,   510,   511,   512,   513,   514,   515,
+     517,   518,   520,   521,   522,   524,   525,   526,   528,   529,
+     530,   533,   534,   536,   537,   538,   540,   542,   543,   544,
+     545,   547,   548,   549,   551,   552,   553,   554,   555,   557,
+     558,   560,   561,   563,   564,   567,   568,   569,   571,   572,
+     573,   575,   576,   577,   578,   579,   580,   581,   582,   583,
+     584,   585,   586,   587,   588,   589,   590,   591,   592
 };
 #endif
 
@@ -797,23 +798,23 @@ static const char *const yytname[] =
   "INTEGER", "INTB", "STRING", "SYMBOLSTRING", "SPACESYM", "SECTIONSYM",
   "TOKENSYM", "USEROPSYM", "VALUESYM", "VALUEMAPSYM", "CONTEXTSYM",
   "NAMESYM", "VARSYM", "BITSYM", "SPECSYM", "VARLISTSYM", "OPERANDSYM",
-  "STARTSYM", "ENDSYM", "NEXT2SYM", "MACROSYM", "LABELSYM", "SUBTABLESYM",
-  "'}'", "'='", "'('", "')'", "','", "'['", "']'", "'{'", "':'", "' '",
-  "$accept", "spec", "definition", "constructorlike", "endiandef",
-  "aligndef", "tokendef", "tokenprop", "contextdef", "contextprop",
-  "fielddef", "contextfielddef", "spacedef", "spaceprop", "varnodedef",
-  "bitrangedef", "bitrangelist", "bitrangesingle", "pcodeopdef",
-  "valueattach", "nameattach", "varattach", "macrodef", "withblockstart",
-  "withblockmid", "withblock", "id_or_nil", "bitpat_or_nil", "macrostart",
-  "rtlbody", "constructor", "constructprint", "subtablestart",
-  "pexpression", "pequation", "elleq", "ellrt", "atomic", "constraint",
-  "contextblock", "contextlist", "section_def", "rtlfirstsection",
-  "rtlcontinue", "rtl", "rtlmid", "statement", "expr", "sizedstar",
-  "jumpdest", "varnode", "integervarnode", "lhsvarnode", "label",
-  "exportvarnode", "familysymbol", "specificsymbol", "charstring",
-  "intblist", "intbpart", "stringlist", "stringpart", "anystringlist",
-  "anystringpart", "valuelist", "valuepart", "varlist", "varpart",
-  "paramlist", "oplist", "anysymbol", YY_NULLPTR
+  "STARTSYM", "OFFSETSYM", "ENDSYM", "NEXT2SYM", "MACROSYM", "LABELSYM",
+  "SUBTABLESYM", "'}'", "'='", "'('", "')'", "','", "'['", "']'", "'{'",
+  "':'", "' '", "$accept", "spec", "definition", "constructorlike",
+  "endiandef", "aligndef", "tokendef", "tokenprop", "contextdef",
+  "contextprop", "fielddef", "contextfielddef", "spacedef", "spaceprop",
+  "varnodedef", "bitrangedef", "bitrangelist", "bitrangesingle",
+  "pcodeopdef", "valueattach", "nameattach", "varattach", "macrodef",
+  "withblockstart", "withblockmid", "withblock", "id_or_nil",
+  "bitpat_or_nil", "macrostart", "rtlbody", "constructor",
+  "constructprint", "subtablestart", "pexpression", "pequation", "elleq",
+  "ellrt", "atomic", "constraint", "contextblock", "contextlist",
+  "section_def", "rtlfirstsection", "rtlcontinue", "rtl", "rtlmid",
+  "statement", "expr", "sizedstar", "jumpdest", "varnode",
+  "integervarnode", "lhsvarnode", "label", "exportvarnode", "familysymbol",
+  "specificsymbol", "charstring", "intblist", "intbpart", "stringlist",
+  "stringpart", "anystringlist", "anystringpart", "valuelist", "valuepart",
+  "varlist", "varpart", "paramlist", "oplist", "anysymbol", YY_NULLPTR
 };
 
 static const char *
@@ -823,7 +824,7 @@ yysymbol_name (yysymbol_kind_t yysymbol)
 }
 #endif
 
-#define YYPACT_NINF (-320)
+#define YYPACT_NINF (-327)
 
 #define yypact_value_is_default(Yyn) \
   ((Yyn) == YYPACT_NINF)
@@ -837,79 +838,79 @@ yysymbol_name (yysymbol_kind_t yysymbol)
    STATE-NUM.  */
 static const yytype_int16 yypact[] =
 {
-     -46,   -48,    56,  -320,   -78,  -320,    34,   394,   234,   -15,
-     -52,   -76,   -34,  -320,  -320,  -320,  -320,  -320,   428,  -320,
-    1613,  -320,   218,  -320,  -320,  -320,  -320,  -320,  -320,  -320,
-    -320,    59,  -320,   -23,  -320,    -4,    63,    74,  -320,  -320,
-    2482,     6,  2501,   -84,    33,    84,    41,   -65,   -65,   -65,
-      92,  -320,  -320,   139,  -320,  -320,  -320,   160,  -320,  -320,
-    -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,
-    -320,  -320,  -320,  -320,  -320,   343,   178,  -320,   188,  1574,
-     191,  -320,   193,  -320,   207,   243,  1517,  -320,  -320,  -320,
-    -320,  -320,  1640,  -320,  -320,  -320,  -320,   205,  -320,  1640,
-    -320,  -320,  -320,   205,   370,   375,  -320,  -320,   277,   257,
-    -320,  -320,   289,   396,  -320,   274,     1,  -320,   282,  -320,
-    -320,    88,   288,   -19,   -28,   325,  1640,   304,  -320,  -320,
-    -320,  -320,  -320,   306,   334,  -320,  -320,  -320,  -320,  -320,
-    -320,   335,   190,   361,   363,   352,  1770,  1828,  -320,  -320,
-    -320,  -320,  -320,  -320,   342,  -320,  1640,    19,  -320,  -320,
-     387,  -320,    68,  -320,    19,  -320,  -320,   485,   388,  -320,
-    2376,  -320,   374,  -320,  -320,   -47,  -320,  -320,   -14,  2520,
-     487,   395,  -320,    10,   494,  -320,   -30,   496,  -320,    42,
-     369,   305,   402,   404,   406,   411,  -320,  -320,  -320,  -320,
-    -320,   262,     2,   -20,  -320,   362,   399,    23,  1591,   332,
-     389,   157,   283,   403,   381,    60,   398,  -320,   397,  -320,
-    -320,  -320,  -320,  -320,   401,    43,  -320,  1591,  -117,  -320,
-      61,  -320,    69,  -320,  1555,     7,  1640,  1640,  1640,  -320,
-     -59,  -320,  1555,  1555,  1555,  1555,  1555,  1555,   -59,  -320,
-     416,  -320,  -320,  -320,   392,  -320,   442,  -320,  -320,  -320,
-    -320,  -320,  2402,  -320,  -320,  -320,   429,  -320,  -320,   -27,
-    -320,  -320,  -320,   -75,  -320,  -320,   426,   419,   424,   425,
-     427,   436,  -320,  -320,   453,  -320,  -320,   554,   556,   464,
-     503,  -320,   476,  -320,  -320,  -320,  -320,  -320,  1591,   606,
-    -320,  1591,   608,  -320,  1591,  1591,  1591,  1591,  1591,   518,
-     519,   521,   523,   555,   557,   558,   563,   566,   603,   639,
-     640,   648,   650,   681,   686,   687,   726,   727,  -320,  1591,
-    1898,  1591,  -320,    28,     3,   565,   579,   602,   391,   550,
-     731,  -320,  1485,   814,  -320,   854,   787,  1591,   788,  1591,
-    1591,  1591,  1544,   793,   794,  1591,   796,  1555,  1555,  -320,
-    1555,  1781,  -320,  -320,  -320,   180,   930,  -320,  1482,  -320,
-    -320,  -320,  1781,  1781,  1781,  1781,  1781,  1781,  -320,   865,
-     836,   849,  -320,  -320,  -320,  -320,   874,  -320,  -320,  -320,
-    -320,  -320,  -320,  -320,  -320,   876,   909,   910,   915,   157,
-    -320,  -320,   887,  -320,   914,   327,  -320,   564,  -320,   604,
-    -320,  -320,  -320,  -320,  1591,  1591,  1591,  1591,  1591,  1591,
-    1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,
-    1591,  1591,  1591,   812,  1591,  1591,  1591,  1591,  1591,  1591,
-    1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,
-    1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,
-    1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,
-     307,  -320,    13,   955,   956,  -320,  1591,   958,  -320,   969,
-     161,   996,  -320,   998,  1131,  -320,  1132,  -320,  -320,  -320,
-    -320,  1951,  1013,  2271,   151,  1991,   154,  1591,  1012,  1053,
-    2031,  1051,  -320,  -320,    37,  1555,  1555,  1555,  1555,  1555,
-    1555,  1555,  1555,  1555,  1015,  -320,  1093,  1094,  -320,  -320,
-    -320,   -17,  1129,  1127,  1080,  -320,  1133,  1134,  1136,  1173,
-    -320,  1089,  1171,  1302,  1339,  1342,   852,   689,   894,   729,
-     771,   934,   974,  1016,  1056,  1096,  1138,  1178,  1218,  1260,
-     200,   644,  1300,  1340,   260,  -320,  2310,  2347,  2347,  2381,
-    2413,  2443,  2523,  2523,  2523,  2523,  2549,  2549,  2549,  2549,
-    2549,  2549,  2549,  2549,  2549,  2549,  2549,  2549,  2631,  2631,
-    2631,   440,   440,   440,   440,  -320,  -320,  -320,  -320,  -320,
-    -320,  -320,  1375,  1214,  1249,  -320,  2071,     0,  1381,  1384,
-    1421,   157,  -320,  -320,  -320,  1591,  1424,  1591,  -320,  1461,
-    2111,  -320,  -320,  -320,  1282,  -320,  1657,   285,   344,   386,
-     386,   360,   360,  -320,  -320,  2535,  1555,  1555,  1731,   162,
-    -320,  -320,   323,  1322,   -84,  -320,  -320,  -320,  -320,  1362,
-    -320,  -320,  -320,  -320,  -320,  1591,  -320,  1591,  1591,  -320,
-    -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,
-    1591,  -320,  -320,  -320,  -320,  -320,  1364,  -320,  -320,  1591,
-    -320,  -320,  -320,  -320,  2151,  -320,  2271,  -320,  -320,  1368,
-    1371,  1376,  1739,  1772,  -320,  -320,  1484,  1521,  -320,  -320,
-    1415,  1546,  -320,  1382,  1422,  1462,  1504,  1453,  2191,  -320,
-    1380,  1473,  1475,  -320,  -320,  -320,  -320,  -320,  -320,  -320,
-    -320,  -320,  -320,  -320,  -320,  1591,  1460,  1463,  2231,  1593,
-    1595,  -320,  -320,  -320
+     -53,    19,    12,  -327,   -28,  -327,     0,   215,   112,   -30,
+      11,   -29,   -23,  -327,  -327,  -327,  -327,  -327,   401,  -327,
+     430,  -327,   102,  -327,  -327,  -327,  -327,  -327,  -327,  -327,
+    -327,    58,  -327,   -15,  -327,    -4,    23,    73,  -327,  -327,
+    2530,     2,  2550,   -59,    61,    81,   189,    62,    62,    62,
+     158,  -327,  -327,   170,  -327,  -327,  -327,   190,  -327,  -327,
+    -327,  -327,  -327,  -327,  -327,  -327,  -327,  -327,  -327,  -327,
+    -327,  -327,  -327,  -327,  -327,  -327,   451,   238,  -327,   250,
+     607,   252,  -327,   267,  -327,   270,   274,   325,  -327,  -327,
+    -327,  -327,  -327,   353,  -327,  -327,  -327,  -327,   230,  -327,
+     353,  -327,  -327,  -327,   230,   372,   403,  -327,  -327,   309,
+     284,  -327,  -327,   310,   416,  -327,   294,     3,  -327,   299,
+    -327,  -327,    53,   296,   -11,   -43,   326,   353,   301,  -327,
+    -327,  -327,  -327,  -327,   322,   324,  -327,  -327,  -327,  -327,
+    -327,  -327,   328,   191,   332,   335,   312,  1741,  1562,  -327,
+    -327,  -327,  -327,  -327,  -327,   331,  -327,   353,    18,  -327,
+    -327,   357,  -327,    43,  -327,    18,  -327,  -327,   459,   351,
+    -327,  2422,  -327,   359,  -327,  -327,   -19,  -327,  -327,    84,
+    2570,   465,   373,  -327,    55,   475,  -327,    -1,   481,  -327,
+      60,   354,   260,   396,   397,   400,   404,  -327,  -327,  -327,
+    -327,  -327,   262,   -58,   148,  -327,  1651,  1750,    29,  1601,
+    1621,   389,  1702,   288,   407,   399,    64,   418,  -327,   427,
+    -327,  -327,  -327,  -327,  -327,  -327,   428,   -79,  -327,  1601,
+    -117,  -327,   -46,  -327,   -21,  -327,  1787,    25,   353,   353,
+     353,  -327,   -60,  -327,  1787,  1787,  1787,  1787,  1787,  1787,
+     -60,  -327,   429,  -327,  -327,  -327,   426,  -327,   483,  -327,
+    -327,  -327,  -327,  -327,  2449,  -327,  -327,  -327,   466,  -327,
+    -327,   -24,  -327,  -327,  -327,   -85,  -327,  -327,   468,   437,
+     477,   478,   480,   482,  -327,  -327,   545,  -327,  -327,   636,
+     638,   546,   591,  -327,   563,  -327,  -327,  -327,  -327,  -327,
+    1601,   694,  -327,  1601,   731,  -327,  1601,  1601,  1601,  1601,
+    1601,   608,   641,   642,   650,   652,   683,   684,   689,   690,
+     729,   730,   765,   766,   771,   772,   807,   812,   813,   815,
+    -327,  1601,  1913,  1601,  -327,    33,    -2,   693,   632,   850,
+     370,   726,   900,  -327,  1489,   981,  -327,  1014,   879,  1601,
+     915,  1601,  1601,  1601,  1554,   920,   921,  1601,   923,  1787,
+    1787,  -327,  1787,   283,  -327,  -327,  -327,   278,  1053,  -327,
+     350,  -327,  -327,  -327,   283,   283,   283,   283,   283,   283,
+    -327,   992,   962,   976,  -327,  -327,  -327,  -327,   964,  -327,
+    -327,  -327,  -327,  -327,  -327,  -327,  -327,  1002,  1004,  1037,
+    1038,  1702,  -327,  -327,  1013,  -327,  1040,   327,  -327,   566,
+    -327,   606,  -327,  -327,  -327,  -327,  1601,  1601,  1601,  1601,
+    1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,
+    1601,  1601,  1601,  1601,  1601,   816,  1601,  1601,  1601,  1601,
+    1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,
+    1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,
+    1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,
+    1601,  1601,  1497,  -327,     7,  1046,  1079,  -327,  1601,  1084,
+    -327,  1058,   204,  1087,  -327,  1124,  1227,  -327,  1260,  -327,
+    -327,  -327,  -327,  1966,  1100,  2286,    91,  2006,   139,  1601,
+    1134,  1141,  2046,  1139,  -327,  -327,    37,  1787,  1787,  1787,
+    1787,  1787,  1787,  1787,  1787,  1787,  1143,  -327,  1177,  1182,
+    -327,  -327,  -327,   -14,  1183,  1219,  1210,  -327,  1221,  1223,
+    1256,  1257,  -327,  1258,  1259,  1392,  1425,  1430,   856,   692,
+     898,   732,   774,   939,   979,  1021,  1062,  1102,  1144,  1185,
+    1225,  1267,   193,   646,  1308,  1348,   199,  -327,  2325,  2362,
+    2362,  2396,  2428,  2489,  2571,  2571,  2571,  2571,  2597,  2597,
+    2597,  2597,  2597,  2597,  2597,  2597,  2597,  2597,  2597,  2597,
+    2445,  2445,  2445,   337,   337,   337,   337,  -327,  -327,  -327,
+    -327,  -327,  -327,  -327,  1433,  1304,  1342,  -327,  2086,     6,
+    1473,  1507,  1512,  1702,  -327,  -327,  -327,  1601,  1515,  1601,
+    -327,  1548,  2126,  -327,  -327,  -327,  1371,  -327,  1861,   470,
+     247,   393,   393,   355,   355,  -327,  -327,  1840,  1787,  1787,
+    1672,   212,  -327,  -327,   306,  1413,   -59,  -327,  -327,  -327,
+    -327,  1454,  -327,  -327,  -327,  -327,  -327,  1601,  -327,  1601,
+    1601,  -327,  -327,  -327,  -327,  -327,  -327,  -327,  -327,  -327,
+    -327,  -327,  1601,  -327,  -327,  -327,  -327,  -327,  1456,  -327,
+    -327,  1601,  -327,  -327,  -327,  -327,  2166,  -327,  2286,  -327,
+    -327,  1459,  1462,  1464,  1662,  2464,  -327,  -327,  1571,  1572,
+    -327,  -327,  1465,  1596,  -327,  1390,  1431,  1471,  1513,  1470,
+    2206,  -327,  1477,  1500,  1501,  -327,  -327,  -327,  -327,  -327,
+    -327,  -327,  -327,  -327,  -327,  -327,  -327,  1601,  1488,  1491,
+    2246,  1619,  1620,  -327,  -327,  -327
 };
 
 /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
@@ -922,86 +923,86 @@ static const yytype_int16 yydefact[] =
        0,     8,     0,     9,    10,    11,    12,    13,    14,    17,
       67,     0,    18,     0,    16,     0,     0,     0,    15,    19,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,    73,    72,     0,    92,    91,    23,     0,   330,   331,
-     332,   333,   336,   337,   338,   339,   340,   346,   341,   342,
-     343,   344,   345,   334,   335,    27,     0,    29,     0,    31,
-       0,    47,     0,    54,     0,     0,     0,    70,    68,    69,
-     149,    86,     0,   289,    87,    90,    89,    88,    85,     0,
-      82,    84,    94,    83,     0,     0,    48,    49,     0,     0,
-      28,   301,     0,     0,    30,     0,     0,    58,     0,   311,
-     312,     0,     0,     0,     0,   327,    74,     0,    34,    35,
-      36,    37,    38,     0,     0,    41,    42,    43,    44,    45,
-      46,     0,     0,     0,     0,     0,   144,     0,   278,   279,
-     280,   281,   128,   282,   127,   130,     0,   131,   110,   115,
-     117,   118,   129,   290,   131,    20,    21,     0,     0,   302,
-       0,    61,     0,    57,    59,     0,   313,   314,     0,     0,
-       0,     0,   292,     0,     0,   319,     0,     0,   328,     0,
-     131,    75,     0,     0,     0,     0,    50,    51,    52,    53,
-      65,     0,     0,   248,   263,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   262,   260,     0,   283,     0,   284,
-     285,   286,   287,   288,     0,   261,   150,     0,     0,   259,
-       0,   177,   258,   114,     0,     0,     0,     0,     0,   133,
-       0,   116,     0,     0,     0,     0,     0,     0,     0,    22,
-       0,   303,   300,   304,     0,    56,     0,   317,   315,   316,
-     310,   306,     0,   307,    63,   293,     0,   294,   296,     0,
-      62,   321,   320,     0,    64,    76,     0,     0,     0,     0,
-       0,     0,   260,   261,     0,   265,   258,     0,     0,     0,
-       0,   253,   252,   257,   254,   249,   250,   251,     0,     0,
-     256,     0,     0,   174,     0,     0,     0,     0,     0,     0,
+       0,    73,    72,     0,    92,    91,    23,     0,   331,   332,
+     333,   334,   337,   338,   339,   340,   341,   348,   342,   343,
+     344,   345,   346,   347,   335,   336,    27,     0,    29,     0,
+      31,     0,    47,     0,    54,     0,     0,     0,    70,    68,
+      69,   149,    86,     0,   290,    87,    90,    89,    88,    85,
+       0,    82,    84,    94,    83,     0,     0,    48,    49,     0,
+       0,    28,   302,     0,     0,    30,     0,     0,    58,     0,
+     312,   313,     0,     0,     0,     0,   328,    74,     0,    34,
+      35,    36,    37,    38,     0,     0,    41,    42,    43,    44,
+      45,    46,     0,     0,     0,     0,     0,   144,     0,   278,
+     279,   280,   281,   128,   282,   127,   130,     0,   131,   110,
+     115,   117,   118,   129,   291,   131,    20,    21,     0,     0,
+     303,     0,    61,     0,    57,    59,     0,   314,   315,     0,
+       0,     0,     0,   293,     0,     0,   320,     0,     0,   329,
+       0,   131,    75,     0,     0,     0,     0,    50,    51,    52,
+      53,    65,     0,     0,   248,   263,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   262,   260,     0,   283,     0,
+     284,   285,   286,   287,   288,   289,     0,   261,   150,     0,
+       0,   259,     0,   177,   258,   114,     0,     0,     0,     0,
+       0,   133,     0,   116,     0,     0,     0,     0,     0,     0,
+       0,    22,     0,   304,   301,   305,     0,    56,     0,   318,
+     316,   317,   311,   307,     0,   308,    63,   294,     0,   295,
+     297,     0,    62,   322,   321,     0,    64,    76,     0,     0,
+       0,     0,     0,     0,   260,   261,     0,   265,   258,     0,
+       0,     0,     0,   253,   252,   257,   254,   249,   250,   251,
+       0,     0,   256,     0,     0,   174,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   242,     0,
-       0,     0,   178,   258,     0,     0,     0,     0,     0,     0,
-     147,   277,     0,     0,   272,     0,     0,     0,     0,   324,
-       0,   324,     0,     0,     0,     0,     0,     0,     0,    95,
-       0,   126,    96,    97,   119,   112,   113,   111,     0,    79,
-     149,    80,   121,   122,   124,   125,   123,   120,    81,    24,
-       0,     0,   308,   305,   309,   295,     0,   297,   299,   291,
-     323,   322,   318,   329,    66,     0,     0,     0,     0,     0,
-     271,   270,     0,   247,     0,     0,   169,     0,   172,     0,
-     193,   220,   206,   194,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   324,     0,
-       0,     0,   324,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     242,     0,     0,     0,   178,   258,     0,     0,     0,     0,
+       0,     0,   147,   277,     0,     0,   272,     0,     0,     0,
+       0,   325,     0,   325,     0,     0,     0,     0,     0,     0,
+       0,    95,     0,   126,    96,    97,   119,   112,   113,   111,
+       0,    79,   149,    80,   121,   122,   124,   125,   123,   120,
+      81,    24,     0,     0,   309,   306,   310,   296,     0,   298,
+     300,   292,   324,   323,   319,   330,    66,     0,     0,     0,
+       0,     0,   271,   270,     0,   247,     0,     0,   169,     0,
+     172,     0,   193,   220,   206,   194,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     325,     0,     0,     0,   325,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   179,     0,     0,     0,   151,     0,     0,   158,     0,
-       0,     0,   273,     0,   148,   269,     0,   267,   145,   165,
-     264,     0,     0,   325,     0,     0,     0,     0,     0,     0,
-       0,     0,   108,   109,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   138,     0,     0,   132,   142,
-     149,     0,     0,     0,     0,   298,     0,     0,     0,     0,
-     266,   246,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   180,   209,   208,   207,   197,
-     195,   196,   183,   184,   210,   211,   185,   188,   186,   187,
-     189,   190,   191,   192,   212,   213,   214,   215,   198,   199,
-     200,   181,   182,   216,   217,   201,   202,   204,   203,   205,
-     218,   219,     0,     0,     0,   240,     0,     0,     0,     0,
-       0,     0,   275,   146,   155,     0,     0,     0,   162,     0,
-       0,   164,   163,   153,     0,    98,   105,   106,   104,   102,
-     103,    99,   100,   101,   107,     0,     0,     0,     0,     0,
-      77,   141,     0,     0,     0,    32,    33,    39,    40,     0,
-     255,   171,   173,   175,   224,     0,   223,     0,     0,   230,
-     221,   222,   232,   233,   234,   229,   228,   231,   244,   235,
-       0,   237,   238,   243,   170,   239,     0,   154,   152,     0,
-     168,   167,   166,   274,     0,   160,   326,   176,   159,     0,
-       0,     0,     0,     0,    78,   143,     0,     0,    26,    25,
-       0,     0,   245,     0,     0,     0,     0,     0,     0,   157,
-       0,     0,     0,   134,   137,   139,   140,    60,    55,   225,
-     226,   227,   236,   241,   156,     0,     0,     0,     0,     0,
-       0,   161,   135,   136
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   179,     0,     0,     0,   151,     0,     0,
+     158,     0,     0,     0,   273,     0,   148,   269,     0,   267,
+     145,   165,   264,     0,     0,   326,     0,     0,     0,     0,
+       0,     0,     0,     0,   108,   109,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   138,     0,     0,
+     132,   142,   149,     0,     0,     0,     0,   299,     0,     0,
+       0,     0,   266,   246,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   180,   209,   208,
+     207,   197,   195,   196,   183,   184,   210,   211,   185,   188,
+     186,   187,   189,   190,   191,   192,   212,   213,   214,   215,
+     198,   199,   200,   181,   182,   216,   217,   201,   202,   204,
+     203,   205,   218,   219,     0,     0,     0,   240,     0,     0,
+       0,     0,     0,     0,   275,   146,   155,     0,     0,     0,
+     162,     0,     0,   164,   163,   153,     0,    98,   105,   106,
+     104,   102,   103,    99,   100,   101,   107,     0,     0,     0,
+       0,     0,    77,   141,     0,     0,     0,    32,    33,    39,
+      40,     0,   255,   171,   173,   175,   224,     0,   223,     0,
+       0,   230,   221,   222,   232,   233,   234,   229,   228,   231,
+     244,   235,     0,   237,   238,   243,   170,   239,     0,   154,
+     152,     0,   168,   167,   166,   274,     0,   160,   327,   176,
+     159,     0,     0,     0,     0,     0,    78,   143,     0,     0,
+      26,    25,     0,     0,   245,     0,     0,     0,     0,     0,
+       0,   157,     0,     0,     0,   134,   137,   139,   140,    60,
+      55,   225,   226,   227,   236,   241,   156,     0,     0,     0,
+       0,     0,     0,   161,   135,   136
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-    -320,  -320,  1573,  1577,  -320,  -320,  -320,  -320,  -320,  -320,
-    -320,  -320,  -320,  -320,  -320,  -320,  -320,  1498,  -320,  -320,
-    -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,  1369,
-    -320,  -320,  -320,  -206,   -80,  -320,  1469,  -320,  -320,  -131,
-    -320,   990,  -320,  -320,  1252,  1105,  -320,  -207,  -144,  -202,
-    -136,  1156,  1288,  -143,  -320,   -92,   -62,  1596,  -320,  -320,
-     997,  -320,  -320,  -320,   412,  -320,  -320,  -320,  -319,  -320,
+    -327,  -327,  1598,  1599,  -327,  -327,  -327,  -327,  -327,  -327,
+    -327,  -327,  -327,  -327,  -327,  -327,  -327,  1514,  -327,  -327,
+    -327,  -327,  -327,  -327,  -327,  -327,  -327,  -327,  -327,  1382,
+    -327,  -327,  -327,  -206,   -81,  -327,  1485,  -327,  -327,  -135,
+    -327,  1005,  -327,  -327,  1266,  1117,  -327,  -208,  -145,  -203,
+    -137,  1166,  1297,  -144,  -327,   -93,   -62,  1606,  -327,  -327,
+    1007,  -327,  -327,  -327,   356,  -327,  -327,  -327,  -326,  -327,
        8
 };
 
@@ -1009,13 +1010,13 @@ static const yytype_int16 yypgoto[] =
 static const yytype_int16 yydefgoto[] =
 {
        0,     2,    14,    15,     3,    16,    17,    18,    19,    20,
-      75,    79,    21,    22,    23,    24,   116,   117,    25,    26,
-      27,    28,    29,    30,    31,    32,    53,   190,    33,   371,
-      34,    35,    36,   361,   157,   158,   159,   160,   161,   240,
-     368,   631,   519,   520,   145,   146,   226,   493,   331,   299,
-     332,   229,   230,   300,   343,   362,   333,    97,   184,   269,
-     113,   170,   180,   262,   122,   178,   187,   273,   494,   189,
-      76
+      76,    80,    21,    22,    23,    24,   117,   118,    25,    26,
+      27,    28,    29,    30,    31,    32,    53,   191,    33,   373,
+      34,    35,    36,   363,   158,   159,   160,   161,   162,   242,
+     370,   633,   521,   522,   146,   147,   228,   495,   333,   301,
+     334,   231,   232,   302,   345,   364,   335,    98,   185,   271,
+     114,   171,   181,   264,   123,   179,   188,   275,   496,   190,
+      77
 };
 
 /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
@@ -1023,665 +1024,671 @@ static const yytype_int16 yydefgoto[] =
    number is the opposite.  If YYTABLE_NINF, syntax error.  */
 static const yytype_int16 yytable[] =
 {
-     162,   330,   227,   231,   302,    91,   386,   162,   668,   173,
-     228,   475,   629,   236,   181,   237,   353,   255,   238,   164,
-     352,   369,   354,     1,   201,   236,   111,   237,    80,     4,
-     238,   303,   496,   248,   162,   390,   372,   373,   374,   375,
-     376,   377,    38,   266,   505,   391,   191,   506,   107,   507,
-     110,   119,   112,   120,    37,   162,     5,     6,    51,   277,
-       6,   256,   392,    54,   162,   285,   508,   509,   342,   510,
-     511,   121,    98,   512,   513,   337,   235,   204,    52,   370,
-     271,   387,   242,   388,   232,   243,   244,   245,   246,   182,
-     272,   405,   185,    92,   407,    50,   257,   409,   410,   411,
-     412,   413,   258,    93,   259,    55,    94,    95,   186,   550,
-     389,   115,   287,   554,   630,    90,   289,   183,   267,   290,
-     268,   214,   433,   260,   471,     7,     8,     9,    86,     8,
-       9,   288,   669,   118,    10,   476,    96,    10,   108,   286,
-     491,   364,   477,   495,   162,   162,   162,   335,   500,   286,
-     344,   502,   503,   114,   504,   239,   365,   366,   367,   304,
-      99,   472,   104,   105,   473,    39,    11,   474,   201,    11,
-      93,   615,   363,   100,   101,  -269,   275,   276,   253,  -269,
-     363,   363,   363,   363,   363,   363,    12,   263,   237,    12,
-      87,   238,   347,   355,   115,    13,  -268,   356,    13,   348,
-     247,  -267,   482,   102,   176,  -267,   177,   536,   537,   538,
-     539,   540,   541,   542,   543,   544,   545,   546,   547,   548,
-     549,   204,   551,   552,   553,   125,    81,   556,   557,   558,
-     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
-     569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
-     579,   580,   581,   582,   583,   584,   585,   586,   587,   588,
-     589,   590,   591,   530,   196,   214,   197,   282,   592,   596,
-     384,   599,   686,   201,   600,   687,   286,   217,   126,   219,
-     487,   220,   221,   222,   223,   606,   607,   283,   609,   607,
-     610,    82,   127,    83,   338,   363,   363,   507,   363,   616,
-     617,   618,   619,   620,   621,   622,   623,   624,    84,    85,
-     133,   236,   163,   237,   508,   509,   238,   510,   511,   203,
-     134,   512,   513,   141,   202,   142,   204,    47,    48,    49,
-     434,   435,   436,   437,   658,   607,   438,   286,   439,   143,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
-     214,   291,   282,   508,   509,   144,   510,   511,   165,   202,
-     512,   513,   217,   166,   219,   167,   220,   221,   222,   223,
-     168,   339,   283,   340,   663,   607,   512,   513,   674,   169,
-     676,   284,   201,   217,   171,   219,   172,   220,   221,   222,
-     223,   688,   689,   341,   175,   292,   202,   293,   510,   511,
-     682,   683,   512,   513,   179,   128,   291,   129,   130,   131,
-     132,   294,   295,   296,   297,   188,    56,   192,   693,   193,
-     694,   695,   334,   363,   363,   363,   363,   363,   363,   363,
-     363,   363,   217,   696,   219,   204,   220,   221,   222,   223,
-     123,   124,   698,   291,   533,   673,    40,   194,   195,   198,
-     292,   199,   293,    41,   234,    42,   463,   464,   465,   466,
-     467,   468,   469,   200,   227,   231,   294,   295,   296,   297,
-      43,   241,   228,   249,   254,   264,   250,    44,   298,   214,
-      45,   282,   270,   265,   274,   239,    46,   292,   718,   293,
-     278,   217,   279,   219,   280,   220,   221,   222,   223,   281,
-     346,   283,   336,   294,   295,   296,   297,   345,   380,   350,
-     481,   349,   381,   680,   351,   301,   393,   385,    57,   286,
-      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
-     379,    68,    69,    70,    71,    72,    73,   394,    74,   395,
-     396,   399,   397,   681,   363,   363,   232,   434,   435,   436,
-     437,   398,   400,   438,   401,   439,   402,   440,   441,   442,
+     163,   332,   229,   233,   304,    92,   477,   163,    38,   388,
+     230,   174,     5,     6,   670,   631,     1,   355,   202,   165,
+     371,   354,   182,   356,   238,   392,   239,   498,    81,   240,
+     250,   238,    99,   239,   163,   393,   240,   305,   374,   375,
+     376,   377,   378,   379,   507,   257,   192,   508,   108,   509,
+     111,   112,   289,   394,  -269,   163,   279,   244,  -269,     6,
+     245,   246,   247,   248,   163,   287,   510,   511,   344,   512,
+     513,   205,   290,   514,   515,   339,   237,   186,   113,   372,
+      50,     7,     8,     9,   389,   234,   390,   357,   268,   258,
+      10,   358,   407,    93,   187,   409,     4,   183,   411,   412,
+     413,   414,   415,    94,   552,    37,    95,    96,   556,   273,
+      82,    54,  -267,   116,   391,   215,  -267,    55,   632,   274,
+     100,    51,    11,   435,    91,   473,   184,    87,     8,     9,
+      94,   478,    39,   101,   102,   109,    10,    97,   479,   671,
+     288,   493,    52,    12,   497,   163,   163,   163,   337,   502,
+     288,   346,    13,   504,   505,   241,   506,   367,   368,   369,
+     366,   105,   106,   269,   103,   270,   306,   474,    11,   177,
+     475,   178,   617,   476,   365,    83,   249,    84,   120,   255,
+     121,   115,   365,   365,   365,   365,   365,   365,   265,    12,
+      88,   116,    85,    86,   259,   277,   278,   349,    13,   122,
+     260,  -268,   261,   484,   350,    47,    48,    49,   538,   539,
+     540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
+     550,   551,   262,   553,   554,   555,   608,   609,   558,   559,
+     560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
+     570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
+     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
+     590,   591,   592,   593,   532,   197,   238,   198,   239,   594,
+     598,   240,   386,   202,   611,   609,   510,   511,   288,   512,
+     513,   119,   489,   514,   515,   291,   239,    40,   292,   240,
+     507,   612,   126,   508,    41,   509,    42,   365,   365,   340,
+     365,   618,   619,   620,   621,   622,   623,   624,   625,   626,
+     127,    43,   510,   511,   601,   512,   513,   602,    44,   514,
+     515,    45,   688,   128,   204,   689,   205,    46,   660,   609,
+     436,   437,   438,   439,   665,   609,   440,   164,   441,   288,
+     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
+     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
+     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
+     215,   134,   284,   465,   466,   467,   468,   469,   470,   471,
+     166,   202,   218,   135,   220,   142,   221,   222,   223,   224,
+     225,   514,   515,   285,   690,   691,   341,    40,   342,   676,
+     143,   678,   286,   144,   124,   125,    42,   145,   218,    56,
+     220,   167,   221,   222,   223,   224,   225,   168,   169,   343,
+     170,    43,   684,   685,   172,   512,   513,   173,    44,   514,
+     515,    45,   176,   180,   205,   193,   189,    46,    78,   695,
+     199,   696,   697,   200,   201,   365,   365,   365,   365,   365,
+     365,   365,   365,   365,   698,   516,   194,   148,   195,   252,
+     517,   243,   196,   700,   236,   535,   675,   251,   518,   149,
+     150,   151,   152,   266,   519,   153,   154,   155,   215,   256,
+     284,   267,   509,   272,   156,   229,   233,   157,   520,   276,
+     218,   241,   220,   230,   221,   222,   223,   224,   225,   510,
+     511,   285,   512,   513,   280,   281,   514,   515,   282,   720,
+     483,    57,   283,    58,    59,    60,    61,    62,    63,    64,
+      65,    66,    67,   338,    68,    69,    70,    71,    72,    73,
+      74,   347,    75,   129,   682,   130,   131,   132,   133,   348,
+      79,   288,    58,    59,    60,    61,    62,    63,    64,    65,
+      66,    67,   351,    68,    69,    70,    71,    72,    73,    74,
+     352,    75,   353,   382,   381,   683,   365,   365,   234,   436,
+     437,   438,   439,   383,   387,   440,   396,   441,   395,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   464,   465,   466,   467,   468,   469,   434,   435,   436,
-     437,   403,   404,   438,   406,   439,   408,   440,   441,   442,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   436,
+     437,   438,   439,   397,   398,   440,   399,   441,   400,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   464,   465,   466,   467,   468,   469,   434,   435,   436,
-     437,   414,   415,   438,   416,   439,   417,   440,   441,   442,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   436,
+     437,   438,   439,   401,   402,   440,   403,   441,   404,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   464,   465,   466,   467,   468,   469,   479,   418,   483,
-     419,   420,   434,   435,   436,   437,   421,   478,   438,   422,
-     439,   534,   440,   441,   442,   443,   444,   445,   446,   447,
-     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
-     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
-     468,   469,   434,   435,   436,   437,   423,   480,   438,  -276,
-     439,   535,   440,   441,   442,   443,   444,   445,   446,   447,
-     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
-     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
-     468,   469,   424,   425,   434,   435,   436,   437,   659,   660,
-     438,   426,   439,   427,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   468,   469,   428,   434,   435,   436,   437,   429,
-     430,   438,   488,   439,   645,   440,   441,   442,   443,   444,
-     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
-     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
-     465,   466,   467,   468,   469,   434,   435,   436,   437,   431,
-     432,   438,   489,   439,   647,   440,   441,   442,   443,   444,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   136,
+     137,   138,   139,   140,   141,   436,   437,   438,   439,   405,
+     406,   440,   408,   441,   536,   442,   443,   444,   445,   446,
+     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
+     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
+     467,   468,   469,   470,   471,   436,   437,   438,   439,   410,
+     481,   440,   416,   441,   537,   442,   443,   444,   445,   446,
+     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
+     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
+     467,   468,   469,   470,   471,   417,   418,   436,   437,   438,
+     439,   661,   662,   440,   419,   441,   420,   442,   443,   444,
      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
-     465,   466,   467,   468,   469,   490,   492,   434,   435,   436,
-     437,   498,   499,   438,   501,   439,   648,   440,   441,   442,
-     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
-     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   464,   465,   466,   467,   468,   469,   434,   435,   436,
-     437,   238,   522,   438,   523,   439,   555,   440,   441,   442,
+     465,   466,   467,   468,   469,   470,   471,   421,   422,   436,
+     437,   438,   439,   423,   424,   440,   480,   441,   647,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   464,   465,   466,   467,   468,   469,   434,   435,   436,
-     437,   524,   525,   438,   526,   439,   644,   440,   441,   442,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   436,
+     437,   438,   439,   425,   426,   440,   485,   441,   649,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   464,   465,   466,   467,   468,   469,   527,   528,   434,
-     435,   436,   437,   529,   531,   438,   532,   439,   646,   440,
-     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
-     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
-     461,   462,   463,   464,   465,   466,   467,   468,   469,   434,
-     435,   436,   437,   594,   595,   438,   597,   439,   649,   440,
-     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   427,
+     428,   436,   437,   438,   439,   429,   430,   440,  -276,   441,
+     650,   442,   443,   444,   445,   446,   447,   448,   449,   450,
      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
-     461,   462,   463,   464,   465,   466,   467,   468,   469,   434,
-     435,   436,   437,   598,   601,   438,   602,   439,   650,   440,
-     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
-     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
-     461,   462,   463,   464,   465,   466,   467,   468,   469,  -268,
-     603,   434,   435,   436,   437,   605,   611,   438,   625,   439,
-     651,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
-     469,   434,   435,   436,   437,   612,   614,   438,   634,   439,
-     652,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
-     469,   434,   435,   436,   437,   626,   627,   438,   639,   439,
-     653,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
-     469,   632,   633,   434,   435,   436,   437,   635,   636,   438,
-     637,   439,   654,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
-     467,   468,   469,   434,   435,   436,   437,   638,   640,   438,
-     641,   439,   655,   440,   441,   442,   443,   444,   445,   446,
+     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
+     471,   431,   436,   437,   438,   439,   432,   433,   440,   434,
+     441,   557,   442,   443,   444,   445,   446,   447,   448,   449,
+     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
+     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
+     470,   471,   436,   437,   438,   439,   482,   492,   440,   490,
+     441,   646,   442,   443,   444,   445,   446,   447,   448,   449,
+     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
+     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
+     470,   471,   491,   494,   436,   437,   438,   439,   500,   501,
+     440,   503,   441,   648,   442,   443,   444,   445,   446,   447,
+     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
+     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
+     468,   469,   470,   471,   240,   436,   437,   438,   439,   524,
+     525,   440,   527,   441,   651,   442,   443,   444,   445,   446,
      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
-     467,   468,   469,   434,   435,   436,   437,   642,   665,   438,
-     643,   439,   656,   440,   441,   442,   443,   444,   445,   446,
+     467,   468,   469,   470,   471,   436,   437,   438,   439,   526,
+     528,   440,   529,   441,   652,   442,   443,   444,   445,   446,
      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
-     467,   468,   469,   664,   666,   434,   435,   436,   437,   670,
-     679,   438,   671,   439,   657,   440,   441,   442,   443,   444,
-     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
-     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
-     465,   466,   467,   468,   469,   434,   435,   436,   437,   672,
-     690,   438,   675,   439,   661,   440,   441,   442,   443,   444,
-     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
-     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
-     465,   466,   467,   468,   469,   434,   435,   436,   437,   677,
-     692,   438,   697,   439,   662,   440,   441,   442,   443,   444,
+     467,   468,   469,   470,   471,   530,   531,   436,   437,   438,
+     439,   533,   534,   440,   596,   441,   653,   442,   443,   444,
      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
-     465,   466,   467,   468,   469,   700,   701,   434,   435,   436,
-     437,   702,   715,   438,   705,   439,   709,   440,   441,   442,
-     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
-     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   464,   465,   466,   467,   468,   469,   434,   435,   436,
-     437,   706,   707,   438,   708,   439,   710,   440,   441,   442,
-     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
-     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   464,   465,   466,   467,   468,   469,   514,   357,    40,
-     713,   716,   515,   717,   719,   484,   711,   720,    42,   358,
-     516,   722,   201,   723,    88,   217,   517,   219,    89,   220,
-     221,   222,   223,    43,   174,   485,   233,   378,   685,   518,
-      44,    77,   521,    45,   305,   628,   306,   203,   593,    46,
-     486,   691,   103,     0,   307,   308,   309,   310,   712,   311,
-     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
-     322,   323,   324,   325,   326,   204,   135,   136,   137,   138,
-     139,   140,     0,     0,   359,     0,     0,   506,     0,   507,
-       0,   148,   149,   150,   151,   217,   497,   219,   153,   220,
-     221,   222,   223,     0,     0,     0,   508,   509,   360,   510,
-     511,     0,     0,   512,   513,     0,     0,     0,     0,   214,
-       0,   282,     0,     0,     0,     0,   327,     0,     0,     0,
-       0,   217,   328,   219,     0,   220,   221,   222,   223,     0,
-       0,   283,     0,    78,   329,    58,    59,    60,    61,    62,
-      63,    64,    65,    66,    67,     0,    68,    69,    70,    71,
-      72,    73,   201,    74,   147,     0,   505,   703,   202,   506,
-       0,   507,     0,     0,     0,     0,   148,   149,   150,   151,
-     629,     0,   152,   153,   154,     0,     0,   203,   508,   509,
-     155,   510,   511,   156,     0,   512,   513,     0,     0,   505,
-     704,   201,   506,     0,   507,     0,     0,   202,   505,     0,
-       0,   506,     0,   507,     0,   204,   205,   206,   207,   208,
-       0,   508,   509,     0,   510,   511,   203,     0,   512,   513,
-     508,   509,     0,   510,   511,     0,     0,   512,   513,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   209,
-     210,   211,     0,   213,   204,   205,   206,   207,   208,   214,
-       0,   215,     0,     0,     0,     0,   216,     0,     0,     0,
-       0,   217,   218,   219,     0,   220,   221,   222,   223,   224,
-       0,   225,   684,     0,     0,     0,     0,     0,   209,   210,
-     211,   212,   213,     0,     0,     0,     0,     0,   214,     0,
-     215,     0,     0,     0,     0,   216,     0,     0,     0,     0,
-     217,   218,   219,     0,   220,   221,   222,   223,   224,     0,
-     225,   434,   435,   436,   437,     0,     0,   438,     0,   439,
-       0,   440,   441,   442,   443,   444,   445,   446,   447,   448,
+     465,   466,   467,   468,   469,   470,   471,   597,   436,   437,
+     438,   439,   599,   600,   440,   603,   441,   654,   442,   443,
+     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
+     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
+     464,   465,   466,   467,   468,   469,   470,   471,   436,   437,
+     438,   439,   604,   607,   440,  -268,   441,   655,   442,   443,
+     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
+     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
+     464,   465,   466,   467,   468,   469,   470,   471,   605,   613,
+     436,   437,   438,   439,   614,   616,   440,   627,   441,   656,
+     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
+     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
+     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
+     628,   436,   437,   438,   439,   629,   634,   440,   636,   441,
+     657,   442,   443,   444,   445,   446,   447,   448,   449,   450,
+     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
+     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
+     471,   436,   437,   438,   439,   635,   637,   440,   638,   441,
+     658,   442,   443,   444,   445,   446,   447,   448,   449,   450,
+     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
+     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
+     471,   639,   640,   436,   437,   438,   439,   642,   641,   440,
+     643,   441,   659,   442,   443,   444,   445,   446,   447,   448,
      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
-     469,     0,     0,     0,   148,   149,   150,   151,     0,     0,
-     152,   153,   154,     0,   434,   435,   436,   437,   155,   604,
-     438,   156,   439,   470,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   468,   469,   434,   435,   436,   437,     0,   608,
-     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   468,   469,   434,   435,   436,   437,     0,   613,
-     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   468,   469,   434,   435,   436,   437,     0,   667,
-     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   468,   469,   434,   435,   436,   437,     0,   678,
-     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   468,   469,   434,   435,   436,   437,     0,   699,
-     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   468,   469,   434,   435,   436,   437,     0,   714,
-     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   468,   469,   434,   435,   436,   437,     0,   721,
-     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
+     469,   470,   471,   644,   436,   437,   438,   439,   645,   667,
+     440,   666,   441,   663,   442,   443,   444,   445,   446,   447,
+     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
+     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
+     468,   469,   470,   471,   436,   437,   438,   439,   668,   681,
+     440,   672,   441,   664,   442,   443,   444,   445,   446,   447,
+     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
+     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
+     468,   469,   470,   471,   203,   673,   436,   437,   438,   439,
+     674,   692,   440,   677,   441,   711,   442,   443,   444,   445,
      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   468,   469,   434,   435,   436,   437,     0,     0,
-     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
+     466,   467,   468,   469,   470,   471,   679,   436,   437,   438,
+     439,   293,   694,   440,   699,   441,   712,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
+     465,   466,   467,   468,   469,   470,   471,   702,   703,   486,
+     704,   707,   708,   709,   710,   294,   713,   295,   715,   218,
+     717,   220,   202,   221,   222,   223,   224,   225,   718,   719,
+     487,   296,   297,   721,   298,   299,   722,   724,   725,    89,
+      90,   175,   380,   235,   307,   687,   308,   204,   523,   630,
+     595,   488,   104,   693,   309,   310,   311,   312,   714,   313,
+     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
+     324,   325,   326,   327,   328,   205,     0,     0,   203,   507,
+     705,     0,   508,     0,   509,     0,     0,     0,   149,   150,
+     151,   152,     0,   202,   153,   154,   155,   499,     0,   203,
+       0,   510,   511,   156,   512,   513,   157,     0,   514,   515,
+       0,   631,     0,     0,     0,     0,     0,     0,   204,   215,
+       0,   284,     0,   202,     0,   293,   329,     0,     0,     0,
+       0,   218,   330,   220,     0,   221,   222,   223,   224,   225,
+       0,   336,   285,     0,     0,   331,   205,   206,   207,   208,
+     209,   218,     0,   220,     0,   221,   222,   223,   224,   225,
+       0,     0,   202,     0,     0,     0,     0,     0,   203,   294,
+       0,   295,     0,     0,     0,     0,   205,   203,     0,     0,
+     210,   211,   212,     0,   214,   296,   297,   204,   298,   299,
+     215,     0,   216,     0,     0,     0,     0,   217,   300,     0,
+       0,     0,   218,   219,   220,     0,   221,   222,   223,   224,
+     225,   226,     0,   227,   686,   205,   206,   207,   208,   209,
+     215,     0,   284,     0,   293,     0,     0,     0,     0,     0,
+     359,     0,   218,     0,   220,     0,   221,   222,   223,   224,
+     225,   360,     0,   285,     0,     0,     0,     0,     0,   210,
+     211,   212,   213,   214,     0,     0,     0,     0,     0,   215,
+       0,   216,     0,     0,     0,     0,   217,     0,   294,     0,
+     295,   218,   219,   220,     0,   221,   222,   223,   224,   225,
+     226,   508,   227,   509,   296,   297,     0,   298,   299,     0,
+       0,     0,     0,     0,     0,     0,     0,   303,     0,     0,
+     510,   511,     0,   512,   513,     0,   361,   514,   515,     0,
+       0,     0,     0,   149,   150,   151,   152,   218,     0,   220,
+     154,   221,   222,   223,   224,   225,   436,   437,   438,   439,
+       0,   362,   440,     0,   441,     0,   442,   443,   444,   445,
      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   468,   469,   435,   436,   437,     0,     0,   438,
-       0,   439,     0,   440,   441,   442,   443,   444,   445,   446,
+     466,   467,   468,   469,   470,   471,   149,   150,   151,   152,
+     218,     0,   220,   154,   221,   222,   223,   224,   225,   436,
+     437,   438,   439,     0,   606,   440,     0,   441,   472,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   436,
+     437,   438,   439,     0,   610,   440,     0,   441,     0,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   436,
+     437,   438,   439,     0,   615,   440,     0,   441,     0,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   436,
+     437,   438,   439,     0,   669,   440,     0,   441,     0,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   436,
+     437,   438,   439,     0,   680,   440,     0,   441,     0,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   436,
+     437,   438,   439,     0,   701,   440,     0,   441,     0,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   436,
+     437,   438,   439,     0,   716,   440,     0,   441,     0,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   436,
+     437,   438,   439,     0,   723,   440,     0,   441,     0,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   436,
+     437,   438,   439,     0,     0,   440,     0,   441,     0,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   437,
+     438,   439,     0,     0,   440,     0,   441,     0,   442,   443,
+     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
+     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
+     464,   465,   466,   467,   468,   469,   470,   471,   439,     0,
+       0,   440,     0,   441,     0,   442,   443,   444,   445,   446,
      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
-     467,   468,   469,   437,     0,     0,   438,     0,   439,     0,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
+     467,   468,   469,   470,   471,   440,     0,   441,     0,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   470,   471,   441,
+       0,   442,   443,   444,   445,   446,   447,   448,   449,   450,
+     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
+     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
+     471,   507,   706,     0,   508,     0,   509,   461,   462,   463,
+     464,   465,   466,   467,   468,   469,   470,   471,     0,     0,
+       0,     0,     0,   510,   511,     0,   512,   513,     0,     0,
+     514,   515,   442,   443,   444,   445,   446,   447,   448,   449,
      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
-     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   468,   469,   439,     0,   440,   441,   442,   443,
-     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
-     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
-     464,   465,   466,   467,   468,   469,   440,   441,   442,   443,
-     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
-     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
-     464,   465,   466,   467,   468,   469,   251,     0,    58,    59,
-      60,    61,    62,    63,    64,    65,    66,    67,     0,    68,
-      69,    70,    71,    72,    73,     0,    74,     0,     0,     0,
-       0,     0,   382,   252,    58,    59,    60,    61,    62,    63,
+     470,   471,   253,     0,    58,    59,    60,    61,    62,    63,
       64,    65,    66,    67,     0,    68,    69,    70,    71,    72,
-      73,     0,    74,     0,     0,     0,     0,     0,     0,   383,
-     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
-     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
-     464,   465,   466,   467,   468,   469,  -277,  -277,  -277,  -277,
-    -277,  -277,  -277,  -277,  -277,  -277,  -277,  -277,   456,   457,
+      73,    74,     0,    75,     0,     0,     0,     0,     0,   384,
+     254,    58,    59,    60,    61,    62,    63,    64,    65,    66,
+      67,     0,    68,    69,    70,    71,    72,    73,    74,     0,
+      75,     0,     0,     0,     0,     0,     0,   385,   446,   447,
+     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
-     468,   469,   106,     0,    58,    59,    60,    61,    62,    63,
-      64,    65,    66,    67,     0,    68,    69,    70,    71,    72,
-      73,   109,    74,    58,    59,    60,    61,    62,    63,    64,
-      65,    66,    67,     0,    68,    69,    70,    71,    72,    73,
-     261,    74,    58,    59,    60,    61,    62,    63,    64,    65,
-      66,    67,     0,    68,    69,    70,    71,    72,    73,     0,
-      74,   148,   149,   150,   151,   217,     0,   219,   153,   220,
-     221,   222,   223,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   468,   469
+     468,   469,   470,   471,  -277,  -277,  -277,  -277,  -277,  -277,
+    -277,  -277,  -277,  -277,  -277,  -277,   458,   459,   460,   461,
+     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
+     107,     0,    58,    59,    60,    61,    62,    63,    64,    65,
+      66,    67,     0,    68,    69,    70,    71,    72,    73,    74,
+     110,    75,    58,    59,    60,    61,    62,    63,    64,    65,
+      66,    67,     0,    68,    69,    70,    71,    72,    73,    74,
+     263,    75,    58,    59,    60,    61,    62,    63,    64,    65,
+      66,    67,     0,    68,    69,    70,    71,    72,    73,    74,
+       0,    75
 };
 
 static const yytype_int16 yycheck[] =
 {
-      92,   208,   146,   146,   206,     9,    33,    99,     8,     8,
-     146,     8,    29,     6,    33,     8,   133,    64,    11,    99,
-     227,    80,   139,    69,    11,     6,   110,     8,    20,    77,
-      11,     8,   351,   164,   126,   110,   242,   243,   244,   245,
-     246,   247,     8,    33,     7,   120,   126,    10,    40,    12,
-      42,   116,   136,   118,   132,   147,     0,     1,   110,   190,
-       1,   108,   137,   139,   156,   201,    29,    30,   212,    32,
-      33,   136,     9,    36,    37,   211,   156,    64,   130,   138,
-     110,   108,    14,   110,   146,    17,    18,    19,    20,   108,
-     120,   298,   120,    97,   301,   110,   110,   304,   305,   306,
-     307,   308,   116,   107,   118,   139,   110,   111,   136,   428,
-     137,   110,   110,   432,   131,   138,   136,   136,   108,   139,
-     110,   108,   329,   137,   331,    69,    70,    71,    69,    70,
-      71,   129,   132,    92,    78,   132,   140,    78,   132,   201,
-     347,   134,   139,   350,   236,   237,   238,   209,   355,   211,
-     212,   357,   358,   120,   360,   136,   236,   237,   238,   136,
-      97,   133,    88,    89,   136,   131,   110,   139,    11,   110,
-     107,   134,   234,   110,   111,   132,   134,   135,   170,   136,
-     242,   243,   244,   245,   246,   247,   130,   179,     8,   130,
-     131,    11,   132,   132,   110,   139,   136,   136,   139,   139,
-     132,   132,   338,   140,   116,   136,   118,   414,   415,   416,
-     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
-     427,    64,   429,   430,   431,   133,     8,   434,   435,   436,
-     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
-     467,   468,   469,   399,    74,   108,    76,   110,   470,   476,
-     262,   110,   110,    11,   113,   113,   338,   120,   139,   122,
-     342,   124,   125,   126,   127,   134,   135,   130,   134,   135,
-     497,    73,   132,    75,    11,   357,   358,    12,   360,   505,
-     506,   507,   508,   509,   510,   511,   512,   513,    90,    91,
-     132,     6,   107,     8,    29,    30,    11,    32,    33,    36,
-     132,    36,    37,   132,    17,   132,    64,    93,    94,    95,
-       3,     4,     5,     6,   134,   135,     9,   399,    11,   132,
+      93,   209,   147,   147,   207,     9,     8,   100,     8,    33,
+     147,     8,     0,     1,     8,    29,    69,   134,    11,   100,
+      80,   229,    33,   140,     6,   110,     8,   353,    20,    11,
+     165,     6,     9,     8,   127,   120,    11,     8,   244,   245,
+     246,   247,   248,   249,     7,    64,   127,    10,    40,    12,
+      42,   110,   110,   138,   133,   148,   191,    14,   137,     1,
+      17,    18,    19,    20,   157,   202,    29,    30,   213,    32,
+      33,    64,   130,    36,    37,   212,   157,   120,   137,   139,
+     110,    69,    70,    71,   108,   147,   110,   133,    33,   108,
+      78,   137,   300,    97,   137,   303,    77,   108,   306,   307,
+     308,   309,   310,   107,   430,   133,   110,   111,   434,   110,
+       8,   140,   133,   110,   138,   108,   137,   140,   132,   120,
+      97,   110,   110,   331,   139,   333,   137,    69,    70,    71,
+     107,   133,   132,   110,   111,   133,    78,   141,   140,   133,
+     202,   349,   131,   131,   352,   238,   239,   240,   210,   357,
+     212,   213,   140,   359,   360,   137,   362,   238,   239,   240,
+     135,    88,    89,   108,   141,   110,   137,   134,   110,   116,
+     137,   118,   135,   140,   236,    73,   133,    75,   116,   171,
+     118,   120,   244,   245,   246,   247,   248,   249,   180,   131,
+     132,   110,    90,    91,   110,   135,   136,   133,   140,   137,
+     116,   137,   118,   340,   140,    93,    94,    95,   416,   417,
+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
+     428,   429,   138,   431,   432,   433,   135,   136,   436,   437,
+     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
+     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
+     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
+     468,   469,   470,   471,   401,    74,     6,    76,     8,   472,
+     478,    11,   264,    11,   135,   136,    29,    30,   340,    32,
+      33,    92,   344,    36,    37,   137,     8,    72,   140,    11,
+       7,   499,   134,    10,    79,    12,    81,   359,   360,    11,
+     362,   507,   508,   509,   510,   511,   512,   513,   514,   515,
+     140,    96,    29,    30,   110,    32,    33,   113,   103,    36,
+      37,   106,   110,   133,    36,   113,    64,   112,   135,   136,
+       3,     4,     5,     6,   135,   136,     9,   107,    11,   401,
       13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
       23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
       33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
-     108,    64,   110,    29,    30,   132,    32,    33,     8,    17,
-      36,    37,   120,     8,   122,   108,   124,   125,   126,   127,
-     133,   108,   130,   110,   134,   135,    36,    37,   605,   110,
-     607,   139,    11,   120,     8,   122,   132,   124,   125,   126,
-     127,    88,    89,   130,   132,   108,    17,   110,    32,    33,
-     626,   627,    36,    37,   136,    82,    64,    84,    85,    86,
-      87,   124,   125,   126,   127,   110,     8,   133,   645,   133,
-     647,   648,   110,   505,   506,   507,   508,   509,   510,   511,
-     512,   513,   120,   660,   122,    64,   124,   125,   126,   127,
-      48,    49,   669,    64,   137,   601,    72,   133,   133,   108,
-     108,   108,   110,    79,   132,    81,    36,    37,    38,    39,
-      40,    41,    42,   131,   628,   628,   124,   125,   126,   127,
-      96,   104,   628,     8,   120,     8,   108,   103,   136,   108,
-     106,   110,     8,   108,     8,   136,   112,   108,   715,   110,
-     108,   120,   108,   122,   108,   124,   125,   126,   127,   108,
-     139,   130,   133,   124,   125,   126,   127,   124,   136,   132,
-     139,   133,    90,   625,   133,   136,   110,   108,   110,   601,
-     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
-     134,   123,   124,   125,   126,   127,   128,   138,   130,   135,
-     135,   108,   135,   625,   626,   627,   628,     3,     4,     5,
-       6,   135,    18,     9,    18,    11,   112,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,   108,   136,     9,     8,    11,     8,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,   133,   133,     9,   133,    11,   133,    13,    14,    15,
+     108,   133,   110,    36,    37,    38,    39,    40,    41,    42,
+       8,    11,   120,   133,   122,   133,   124,   125,   126,   127,
+     128,    36,    37,   131,    88,    89,   108,    72,   110,   607,
+     133,   609,   140,   133,    48,    49,    81,   133,   120,     8,
+     122,     8,   124,   125,   126,   127,   128,   108,   134,   131,
+     110,    96,   628,   629,     8,    32,    33,   133,   103,    36,
+      37,   106,   133,   137,    64,   134,   110,   112,     8,   647,
+     108,   649,   650,   108,   132,   507,   508,   509,   510,   511,
+     512,   513,   514,   515,   662,   105,   134,   104,   134,   108,
+     110,   104,   134,   671,   133,   138,   603,     8,   118,   116,
+     117,   118,   119,     8,   124,   122,   123,   124,   108,   120,
+     110,   108,    12,     8,   131,   630,   630,   134,   138,     8,
+     120,   137,   122,   630,   124,   125,   126,   127,   128,    29,
+      30,   131,    32,    33,   108,   108,    36,    37,   108,   717,
+     140,   110,   108,   112,   113,   114,   115,   116,   117,   118,
+     119,   120,   121,   134,   123,   124,   125,   126,   127,   128,
+     129,   124,   131,    82,   627,    84,    85,    86,    87,   140,
+     110,   603,   112,   113,   114,   115,   116,   117,   118,   119,
+     120,   121,   134,   123,   124,   125,   126,   127,   128,   129,
+     133,   131,   134,   137,   135,   627,   628,   629,   630,     3,
+       4,     5,     6,    90,   108,     9,   139,    11,   110,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   136,   136,     9,   136,    11,   136,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   108,    18,     9,    18,    11,   112,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,    82,
+      83,    84,    85,    86,    87,     3,     4,     5,     6,   108,
+     137,     9,     8,    11,   138,    13,    14,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
+      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
+      38,    39,    40,    41,    42,     3,     4,     5,     6,     8,
+     108,     9,   134,    11,   138,    13,    14,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
+      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
+      38,    39,    40,    41,    42,   134,   134,     3,     4,     5,
+       6,   135,   136,     9,   134,    11,   134,    13,    14,    15,
       16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,   108,   133,   139,
-     133,   133,     3,     4,     5,     6,   133,   132,     9,   133,
-      11,   137,    13,    14,    15,    16,    17,    18,    19,    20,
+      36,    37,    38,    39,    40,    41,    42,   134,   134,     3,
+       4,     5,     6,   134,   134,     9,   133,    11,   136,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   134,   134,     9,   140,    11,   136,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,   134,
+     134,     3,     4,     5,     6,   134,   134,     9,     8,    11,
+     136,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
+      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
+      42,   134,     3,     4,     5,     6,   134,   134,     9,   134,
+      11,   135,    13,    14,    15,    16,    17,    18,    19,    20,
       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
       31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,     3,     4,     5,     6,   133,   135,     9,     8,
-      11,   137,    13,    14,    15,    16,    17,    18,    19,    20,
+      41,    42,     3,     4,     5,     6,   136,   108,     9,     8,
+      11,   135,    13,    14,    15,    16,    17,    18,    19,    20,
       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
       31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,   133,   133,     3,     4,     5,     6,   134,   135,
-       9,   133,    11,   133,    13,    14,    15,    16,    17,    18,
+      41,    42,     8,   108,     3,     4,     5,     6,   108,   108,
+       9,   108,    11,   135,    13,    14,    15,    16,    17,    18,
       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
       29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,   133,     3,     4,     5,     6,   133,
-     133,     9,     8,    11,   135,    13,    14,    15,    16,    17,
+      39,    40,    41,    42,    11,     3,     4,     5,     6,    77,
+     108,     9,   108,    11,   135,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
       38,    39,    40,    41,    42,     3,     4,     5,     6,   133,
-     133,     9,     8,    11,   135,    13,    14,    15,    16,    17,
+     108,     9,   108,    11,   135,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
       38,    39,    40,    41,    42,   108,   108,     3,     4,     5,
-       6,   108,   108,     9,   108,    11,   135,    13,    14,    15,
+       6,   138,   112,     9,   108,    11,   135,    13,    14,    15,
       16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,    11,    77,     9,   108,    11,   134,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,   132,   108,     9,   108,    11,   134,    13,    14,    15,
+      36,    37,    38,    39,    40,    41,    42,   108,     3,     4,
+       5,     6,   108,   135,     9,   108,    11,   135,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
+       5,     6,   108,   133,     9,     8,    11,   135,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,     8,   135,
+       3,     4,     5,     6,   133,   136,     9,   134,    11,   135,
+      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
+      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+     133,     3,     4,     5,     6,   133,   133,     9,   108,    11,
+     135,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
+      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
+      42,     3,     4,     5,     6,   136,   135,     9,   135,    11,
+     135,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
+      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
+      42,   135,   135,     3,     4,     5,     6,   138,   140,     9,
+       8,    11,   135,    13,    14,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
+      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+      40,    41,    42,     8,     3,     4,     5,     6,     8,   135,
+       9,     8,    11,   135,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,     3,     4,     5,     6,   136,   108,
+       9,     8,    11,   135,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,    17,     8,     3,     4,     5,     6,
+       8,   108,     9,     8,    11,   135,    13,    14,    15,    16,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+      37,    38,    39,    40,    41,    42,     8,     3,     4,     5,
+       6,    64,   108,     9,   108,    11,   135,    13,    14,    15,
       16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,   108,   108,     3,
-       4,     5,     6,   108,   137,     9,   112,    11,   134,    13,
+      36,    37,    38,    39,    40,    41,    42,   138,   136,   110,
+     136,    30,    30,   138,     8,   108,   135,   110,   138,   120,
+     133,   122,    11,   124,   125,   126,   127,   128,   118,   118,
+     131,   124,   125,   135,   127,   128,   135,     8,     8,    31,
+      31,   117,   250,   148,    33,   630,    35,    36,   372,   522,
+     474,   344,    36,   636,    43,    44,    45,    46,   135,    48,
+      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
+      59,    60,    61,    62,    63,    64,    -1,    -1,    17,     7,
+       8,    -1,    10,    -1,    12,    -1,    -1,    -1,   116,   117,
+     118,   119,    -1,    11,   122,   123,   124,   133,    -1,    17,
+      -1,    29,    30,   131,    32,    33,   134,    -1,    36,    37,
+      -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    36,   108,
+      -1,   110,    -1,    11,    -1,    64,   115,    -1,    -1,    -1,
+      -1,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
+      -1,   110,   131,    -1,    -1,   134,    64,    65,    66,    67,
+      68,   120,    -1,   122,    -1,   124,   125,   126,   127,   128,
+      -1,    -1,    11,    -1,    -1,    -1,    -1,    -1,    17,   108,
+      -1,   110,    -1,    -1,    -1,    -1,    64,    17,    -1,    -1,
+      98,    99,   100,    -1,   102,   124,   125,    36,   127,   128,
+     108,    -1,   110,    -1,    -1,    -1,    -1,   115,   137,    -1,
+      -1,    -1,   120,   121,   122,    -1,   124,   125,   126,   127,
+     128,   129,    -1,   131,   132,    64,    65,    66,    67,    68,
+     108,    -1,   110,    -1,    64,    -1,    -1,    -1,    -1,    -1,
+      33,    -1,   120,    -1,   122,    -1,   124,   125,   126,   127,
+     128,    44,    -1,   131,    -1,    -1,    -1,    -1,    -1,    98,
+      99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,   108,
+      -1,   110,    -1,    -1,    -1,    -1,   115,    -1,   108,    -1,
+     110,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
+     129,    10,   131,    12,   124,   125,    -1,   127,   128,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
+      29,    30,    -1,    32,    33,    -1,   109,    36,    37,    -1,
+      -1,    -1,    -1,   116,   117,   118,   119,   120,    -1,   122,
+     123,   124,   125,   126,   127,   128,     3,     4,     5,     6,
+      -1,   134,     9,    -1,    11,    -1,    13,    14,    15,    16,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+      37,    38,    39,    40,    41,    42,   116,   117,   118,   119,
+     120,    -1,   122,   123,   124,   125,   126,   127,   128,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    65,    13,
       14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
       24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
       34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
-       4,     5,     6,   108,   108,     9,   108,    11,   134,    13,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
       14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
       24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
       34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
-       4,     5,     6,   134,   108,     9,   108,    11,   134,    13,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
       14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
       24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
-      34,    35,    36,    37,    38,    39,    40,    41,    42,     8,
-       8,     3,     4,     5,     6,   132,   134,     9,   133,    11,
-     134,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   132,   135,     9,   108,    11,
-     134,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   132,   132,     9,   139,    11,
-     134,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,   132,   135,     3,     4,     5,     6,   134,   134,     9,
-     134,    11,   134,    13,    14,    15,    16,    17,    18,    19,
-      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,     3,     4,     5,     6,   134,   137,     9,
-       8,    11,   134,    13,    14,    15,    16,    17,    18,    19,
-      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,     3,     4,     5,     6,     8,   134,     9,
-       8,    11,   134,    13,    14,    15,    16,    17,    18,    19,
-      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,     8,   135,     3,     4,     5,     6,     8,
-     108,     9,     8,    11,   134,    13,    14,    15,    16,    17,
-      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
-      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,     3,     4,     5,     6,     8,
-     108,     9,     8,    11,   134,    13,    14,    15,    16,    17,
-      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
-      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,     3,     4,     5,     6,     8,
-     108,     9,   108,    11,   134,    13,    14,    15,    16,    17,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,    -1,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     4,
+       5,     6,    -1,    -1,     9,    -1,    11,    -1,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,     6,    -1,
+      -1,     9,    -1,    11,    -1,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,   137,   135,     3,     4,     5,
-       6,   135,   132,     9,    30,    11,   134,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,    30,   137,     9,     8,    11,   134,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,   105,    33,    72,
-     137,   118,   110,   118,   134,   110,   134,   134,    81,    44,
-     118,     8,    11,     8,    31,   120,   124,   122,    31,   124,
-     125,   126,   127,    96,   116,   130,   147,   248,   628,   137,
-     103,     8,   370,   106,    33,   520,    35,    36,   472,   112,
-     342,   634,    36,    -1,    43,    44,    45,    46,   134,    48,
-      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
-      59,    60,    61,    62,    63,    64,    82,    83,    84,    85,
-      86,    87,    -1,    -1,   109,    -1,    -1,    10,    -1,    12,
-      -1,   116,   117,   118,   119,   120,   132,   122,   123,   124,
-     125,   126,   127,    -1,    -1,    -1,    29,    30,   133,    32,
-      33,    -1,    -1,    36,    37,    -1,    -1,    -1,    -1,   108,
-      -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
-      -1,   120,   121,   122,    -1,   124,   125,   126,   127,    -1,
-      -1,   130,    -1,   110,   133,   112,   113,   114,   115,   116,
-     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
-     127,   128,    11,   130,   104,    -1,     7,     8,    17,    10,
-      -1,    12,    -1,    -1,    -1,    -1,   116,   117,   118,   119,
-      29,    -1,   122,   123,   124,    -1,    -1,    36,    29,    30,
-     130,    32,    33,   133,    -1,    36,    37,    -1,    -1,     7,
-       8,    11,    10,    -1,    12,    -1,    -1,    17,     7,    -1,
-      -1,    10,    -1,    12,    -1,    64,    65,    66,    67,    68,
-      -1,    29,    30,    -1,    32,    33,    36,    -1,    36,    37,
-      29,    30,    -1,    32,    33,    -1,    -1,    36,    37,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
-      99,   100,    -1,   102,    64,    65,    66,    67,    68,   108,
-      -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
-      -1,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
-      -1,   130,   131,    -1,    -1,    -1,    -1,    -1,    98,    99,
-     100,   101,   102,    -1,    -1,    -1,    -1,    -1,   108,    -1,
-     110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,
-     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
-     130,     3,     4,     5,     6,    -1,    -1,     9,    -1,    11,
+      38,    39,    40,    41,    42,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,    11,
       -1,    13,    14,    15,    16,    17,    18,    19,    20,    21,
       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
       32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,    -1,    -1,    -1,   116,   117,   118,   119,    -1,    -1,
-     122,   123,   124,    -1,     3,     4,     5,     6,   130,     8,
-       9,   133,    11,    65,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
-       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
-       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
-       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
-       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
-       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
-       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
-       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     3,     4,     5,     6,    -1,    -1,
-       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     4,     5,     6,    -1,    -1,     9,
-      -1,    11,    -1,    13,    14,    15,    16,    17,    18,    19,
-      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,     6,    -1,    -1,     9,    -1,    11,    -1,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
-       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,    11,    -1,    13,    14,    15,    16,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,    13,    14,    15,    16,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,   110,    -1,   112,   113,
-     114,   115,   116,   117,   118,   119,   120,   121,    -1,   123,
-     124,   125,   126,   127,   128,    -1,   130,    -1,    -1,    -1,
-      -1,    -1,   110,   137,   112,   113,   114,   115,   116,   117,
-     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
-     128,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,    17,    18,    19,    20,
+      42,     7,     8,    -1,    10,    -1,    12,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,    -1,    -1,
+      -1,    -1,    -1,    29,    30,    -1,    32,    33,    -1,    -1,
+      36,    37,    13,    14,    15,    16,    17,    18,    19,    20,
       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
       31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
       41,    42,   110,    -1,   112,   113,   114,   115,   116,   117,
      118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
-     128,   110,   130,   112,   113,   114,   115,   116,   117,   118,
-     119,   120,   121,    -1,   123,   124,   125,   126,   127,   128,
-     110,   130,   112,   113,   114,   115,   116,   117,   118,   119,
-     120,   121,    -1,   123,   124,   125,   126,   127,   128,    -1,
-     130,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
-     125,   126,   127,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42
+     128,   129,    -1,   131,    -1,    -1,    -1,    -1,    -1,   110,
+     138,   112,   113,   114,   115,   116,   117,   118,   119,   120,
+     121,    -1,   123,   124,   125,   126,   127,   128,   129,    -1,
+     131,    -1,    -1,    -1,    -1,    -1,    -1,   138,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
+      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
+     120,   121,    -1,   123,   124,   125,   126,   127,   128,   129,
+     110,   131,   112,   113,   114,   115,   116,   117,   118,   119,
+     120,   121,    -1,   123,   124,   125,   126,   127,   128,   129,
+     110,   131,   112,   113,   114,   115,   116,   117,   118,   119,
+     120,   121,    -1,   123,   124,   125,   126,   127,   128,   129,
+      -1,   131
 };
 
 /* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
    state STATE-NUM.  */
 static const yytype_uint8 yystos[] =
 {
-       0,    69,   142,   145,    77,     0,     1,    69,    70,    71,
-      78,   110,   130,   139,   143,   144,   146,   147,   148,   149,
-     150,   153,   154,   155,   156,   159,   160,   161,   162,   163,
-     164,   165,   166,   169,   171,   172,   173,   132,     8,   131,
+       0,    69,   143,   146,    77,     0,     1,    69,    70,    71,
+      78,   110,   131,   140,   144,   145,   147,   148,   149,   150,
+     151,   154,   155,   156,   157,   160,   161,   162,   163,   164,
+     165,   166,   167,   170,   172,   173,   174,   133,     8,   132,
       72,    79,    81,    96,   103,   106,   112,    93,    94,    95,
-     110,   110,   130,   167,   139,   139,     8,   110,   112,   113,
+     110,   110,   131,   168,   140,   140,     8,   110,   112,   113,
      114,   115,   116,   117,   118,   119,   120,   121,   123,   124,
-     125,   126,   127,   128,   130,   151,   211,     8,   110,   152,
-     211,     8,    73,    75,    90,    91,    69,   131,   143,   144,
-     138,     9,    97,   107,   110,   111,   140,   198,     9,    97,
-     110,   111,   140,   198,    88,    89,   110,   211,   132,   110,
-     211,   110,   136,   201,   120,   110,   157,   158,    92,   116,
-     118,   136,   205,   205,   205,   133,   139,   132,    82,    84,
-      85,    86,    87,   132,   132,    82,    83,    84,    85,    86,
-      87,   132,   132,   132,   132,   185,   186,   104,   116,   117,
-     118,   119,   122,   123,   124,   130,   133,   175,   176,   177,
-     178,   179,   196,   107,   175,     8,     8,   108,   133,   110,
-     202,     8,   132,     8,   158,   132,   116,   118,   206,   136,
-     203,    33,   108,   136,   199,   120,   136,   207,   110,   210,
-     168,   175,   133,   133,   133,   133,    74,    76,   108,   108,
-     131,    11,    17,    36,    64,    65,    66,    67,    68,    98,
-      99,   100,   101,   102,   108,   110,   115,   120,   121,   122,
-     124,   125,   126,   127,   128,   130,   187,   189,   191,   192,
-     193,   194,   197,   177,   132,   175,     6,     8,    11,   136,
-     180,   104,    14,    17,    18,    19,    20,   132,   180,     8,
-     108,   110,   137,   211,   120,    64,   108,   110,   116,   118,
-     137,   110,   204,   211,     8,   108,    33,   108,   110,   200,
-       8,   110,   120,   208,     8,   134,   135,   180,   108,   108,
-     108,   108,   110,   130,   139,   191,   197,   110,   129,   136,
-     139,    64,   108,   110,   124,   125,   126,   127,   136,   190,
-     194,   136,   190,     8,   136,    33,    35,    43,    44,    45,
-      46,    48,    49,    50,    51,    52,    53,    54,    55,    56,
-      57,    58,    59,    60,    61,    62,    63,   115,   121,   133,
-     188,   189,   191,   197,   110,   197,   133,   191,    11,   108,
-     110,   130,   189,   195,   197,   124,   139,   132,   139,   133,
-     132,   133,   188,   133,   139,   132,   136,    33,    44,   109,
-     133,   174,   196,   197,   134,   175,   175,   175,   181,    80,
-     138,   170,   174,   174,   174,   174,   174,   174,   170,   134,
-     136,    90,   110,   137,   211,   108,    33,   108,   110,   137,
-     110,   120,   137,   110,   138,   135,   135,   135,   135,   108,
-      18,    18,   112,   108,   136,   188,     8,   188,     8,   188,
-     188,   188,   188,   188,   133,   133,   133,   133,   133,   133,
-     133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
-     133,   133,   133,   188,     3,     4,     5,     6,     9,    11,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
-      65,   188,   133,   136,   139,     8,   132,   139,   132,   108,
-     135,   139,   191,   139,   110,   130,   193,   197,     8,     8,
-     108,   188,   108,   188,   209,   188,   209,   132,   108,   108,
-     188,   108,   174,   174,   174,     7,    10,    12,    29,    30,
-      32,    33,    36,    37,   105,   110,   118,   124,   137,   183,
-     184,   185,    77,   108,   132,   108,   108,   108,   108,   108,
-     191,   137,   112,   137,   137,   137,   188,   188,   188,   188,
-     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
-     209,   188,   188,   188,   209,   134,   188,   188,   188,   188,
-     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
-     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
-     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
-     188,   188,   190,   192,   108,   108,   188,   108,   134,   110,
-     113,   108,   108,     8,     8,   132,   134,   135,     8,   134,
-     188,   134,   132,     8,   135,   134,   174,   174,   174,   174,
-     174,   174,   174,   174,   174,   133,   132,   132,   186,    29,
-     131,   182,   132,   135,   108,   134,   134,   134,   134,   139,
-     137,     8,     8,     8,   134,   135,   134,   135,   135,   134,
+     125,   126,   127,   128,   129,   131,   152,   212,     8,   110,
+     153,   212,     8,    73,    75,    90,    91,    69,   132,   144,
+     145,   139,     9,    97,   107,   110,   111,   141,   199,     9,
+      97,   110,   111,   141,   199,    88,    89,   110,   212,   133,
+     110,   212,   110,   137,   202,   120,   110,   158,   159,    92,
+     116,   118,   137,   206,   206,   206,   134,   140,   133,    82,
+      84,    85,    86,    87,   133,   133,    82,    83,    84,    85,
+      86,    87,   133,   133,   133,   133,   186,   187,   104,   116,
+     117,   118,   119,   122,   123,   124,   131,   134,   176,   177,
+     178,   179,   180,   197,   107,   176,     8,     8,   108,   134,
+     110,   203,     8,   133,     8,   159,   133,   116,   118,   207,
+     137,   204,    33,   108,   137,   200,   120,   137,   208,   110,
+     211,   169,   176,   134,   134,   134,   134,    74,    76,   108,
+     108,   132,    11,    17,    36,    64,    65,    66,    67,    68,
+      98,    99,   100,   101,   102,   108,   110,   115,   120,   121,
+     122,   124,   125,   126,   127,   128,   129,   131,   188,   190,
+     192,   193,   194,   195,   198,   178,   133,   176,     6,     8,
+      11,   137,   181,   104,    14,    17,    18,    19,    20,   133,
+     181,     8,   108,   110,   138,   212,   120,    64,   108,   110,
+     116,   118,   138,   110,   205,   212,     8,   108,    33,   108,
+     110,   201,     8,   110,   120,   209,     8,   135,   136,   181,
+     108,   108,   108,   108,   110,   131,   140,   192,   198,   110,
+     130,   137,   140,    64,   108,   110,   124,   125,   127,   128,
+     137,   191,   195,   137,   191,     8,   137,    33,    35,    43,
+      44,    45,    46,    48,    49,    50,    51,    52,    53,    54,
+      55,    56,    57,    58,    59,    60,    61,    62,    63,   115,
+     121,   134,   189,   190,   192,   198,   110,   198,   134,   192,
+      11,   108,   110,   131,   190,   196,   198,   124,   140,   133,
+     140,   134,   133,   134,   189,   134,   140,   133,   137,    33,
+      44,   109,   134,   175,   197,   198,   135,   176,   176,   176,
+     182,    80,   139,   171,   175,   175,   175,   175,   175,   175,
+     171,   135,   137,    90,   110,   138,   212,   108,    33,   108,
+     110,   138,   110,   120,   138,   110,   139,   136,   136,   136,
+     136,   108,    18,    18,   112,   108,   137,   189,     8,   189,
+       8,   189,   189,   189,   189,   189,   134,   134,   134,   134,
      134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
-     135,   134,   134,   134,     8,   134,   135,     8,     8,   132,
-       8,     8,     8,   191,   188,     8,   188,     8,     8,   108,
-     196,   197,   174,   174,   131,   182,   110,   113,    88,    89,
-     108,   201,   108,   188,   188,   188,   188,   108,   188,     8,
-     137,   135,   135,     8,     8,    30,    30,   137,     8,   134,
-     134,   134,   134,   137,     8,   132,   118,   118,   188,   134,
-     134,     8,     8,     8
+     134,   134,   134,   134,   134,   189,     3,     4,     5,     6,
+       9,    11,    13,    14,    15,    16,    17,    18,    19,    20,
+      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
+      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
+      41,    42,    65,   189,   134,   137,   140,     8,   133,   140,
+     133,   108,   136,   140,   192,   140,   110,   131,   194,   198,
+       8,     8,   108,   189,   108,   189,   210,   189,   210,   133,
+     108,   108,   189,   108,   175,   175,   175,     7,    10,    12,
+      29,    30,    32,    33,    36,    37,   105,   110,   118,   124,
+     138,   184,   185,   186,    77,   108,   133,   108,   108,   108,
+     108,   108,   192,   138,   112,   138,   138,   138,   189,   189,
+     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
+     189,   189,   210,   189,   189,   189,   210,   135,   189,   189,
+     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
+     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
+     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
+     189,   189,   189,   189,   191,   193,   108,   108,   189,   108,
+     135,   110,   113,   108,   108,     8,     8,   133,   135,   136,
+       8,   135,   189,   135,   133,     8,   136,   135,   175,   175,
+     175,   175,   175,   175,   175,   175,   175,   134,   133,   133,
+     187,    29,   132,   183,   133,   136,   108,   135,   135,   135,
+     135,   140,   138,     8,     8,     8,   135,   136,   135,   136,
+     136,   135,   135,   135,   135,   135,   135,   135,   135,   135,
+     135,   135,   136,   135,   135,   135,     8,   135,   136,     8,
+       8,   133,     8,     8,     8,   192,   189,     8,   189,     8,
+       8,   108,   197,   198,   175,   175,   132,   183,   110,   113,
+      88,    89,   108,   202,   108,   189,   189,   189,   189,   108,
+     189,     8,   138,   136,   136,     8,     8,    30,    30,   138,
+       8,   135,   135,   135,   135,   138,     8,   133,   118,   118,
+     189,   135,   135,     8,     8,     8
 };
 
 /* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
 static const yytype_uint8 yyr1[] =
 {
-       0,   141,   142,   142,   142,   142,   143,   143,   143,   143,
-     143,   143,   143,   143,   143,   143,   144,   144,   144,   144,
-     145,   145,   146,   147,   148,   148,   148,   148,   148,   149,
-     150,   150,   151,   151,   151,   151,   151,   151,   151,   152,
-     152,   152,   152,   152,   152,   152,   152,   153,   154,   154,
-     154,   154,   154,   154,   154,   155,   155,   156,   157,   157,
-     158,   159,   160,   161,   162,   163,   164,   165,   165,   165,
-     166,   167,   167,   167,   168,   168,   169,   170,   170,   170,
-     171,   171,   172,   172,   172,   172,   172,   172,   172,   172,
-     172,   173,   173,   173,   173,   174,   174,   174,   174,   174,
-     174,   174,   174,   174,   174,   174,   174,   174,   174,   174,
-     175,   175,   175,   175,   176,   176,   177,   177,   178,   178,
-     179,   179,   179,   179,   179,   179,   179,   179,   179,   179,
-     179,   180,   180,   181,   181,   181,   181,   181,   181,   182,
-     182,   183,   184,   184,   185,   185,   185,   185,   185,   186,
-     186,   186,   186,   187,   187,   187,   187,   187,   187,   187,
-     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
-     187,   187,   187,   187,   187,   187,   187,   187,   188,   188,
-     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
-     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
+       0,   142,   143,   143,   143,   143,   144,   144,   144,   144,
+     144,   144,   144,   144,   144,   144,   145,   145,   145,   145,
+     146,   146,   147,   148,   149,   149,   149,   149,   149,   150,
+     151,   151,   152,   152,   152,   152,   152,   152,   152,   153,
+     153,   153,   153,   153,   153,   153,   153,   154,   155,   155,
+     155,   155,   155,   155,   155,   156,   156,   157,   158,   158,
+     159,   160,   161,   162,   163,   164,   165,   166,   166,   166,
+     167,   168,   168,   168,   169,   169,   170,   171,   171,   171,
+     172,   172,   173,   173,   173,   173,   173,   173,   173,   173,
+     173,   174,   174,   174,   174,   175,   175,   175,   175,   175,
+     175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
+     176,   176,   176,   176,   177,   177,   178,   178,   179,   179,
+     180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
+     180,   181,   181,   182,   182,   182,   182,   182,   182,   183,
+     183,   184,   185,   185,   186,   186,   186,   186,   186,   187,
+     187,   187,   187,   188,   188,   188,   188,   188,   188,   188,
      188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
-     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
-     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
-     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
-     188,   188,   188,   188,   188,   189,   189,   189,   189,   190,
-     190,   190,   190,   190,   190,   190,   190,   190,   191,   191,
-     191,   191,   192,   192,   192,   192,   192,   193,   193,   193,
-     194,   194,   195,   195,   195,   195,   195,   195,   196,   196,
-     196,   196,   196,   197,   197,   197,   197,   197,   197,   198,
-     198,   199,   199,   199,   200,   200,   200,   200,   200,   200,
-     201,   201,   202,   202,   202,   203,   204,   204,   204,   204,
-     205,   205,   205,   206,   206,   206,   206,   206,   207,   207,
-     208,   208,   208,   208,   209,   209,   209,   210,   210,   210,
-     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
-     211,   211,   211,   211,   211,   211,   211
+     188,   188,   188,   188,   188,   188,   188,   188,   189,   189,
+     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
+     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
+     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
+     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
+     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
+     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
+     189,   189,   189,   189,   189,   190,   190,   190,   190,   191,
+     191,   191,   191,   191,   191,   191,   191,   191,   192,   192,
+     192,   192,   193,   193,   193,   193,   193,   194,   194,   194,
+     195,   195,   196,   196,   196,   196,   196,   196,   197,   197,
+     197,   197,   197,   198,   198,   198,   198,   198,   198,   198,
+     199,   199,   200,   200,   200,   201,   201,   201,   201,   201,
+     201,   202,   202,   203,   203,   203,   204,   205,   205,   205,
+     205,   206,   206,   206,   207,   207,   207,   207,   207,   208,
+     208,   209,   209,   209,   209,   210,   210,   210,   211,   211,
+     211,   212,   212,   212,   212,   212,   212,   212,   212,   212,
+     212,   212,   212,   212,   212,   212,   212,   212,   212
 };
 
 /* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
@@ -1716,12 +1723,12 @@ static const yytype_int8 yyr2[] =
        1,     1,     1,     1,     3,     2,     4,     1,     1,     1,
        3,     3,     1,     2,     4,     3,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-       2,     3,     1,     2,     1,     2,     1,     2,     3,     2,
-       3,     1,     1,     2,     2,     3,     1,     1,     2,     2,
-       3,     1,     1,     1,     1,     2,     2,     2,     3,     1,
-       1,     1,     2,     2,     0,     1,     3,     0,     1,     3,
-       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-       1,     1,     1,     1,     1,     1,     1
+       1,     2,     3,     1,     2,     1,     2,     1,     2,     3,
+       2,     3,     1,     1,     2,     2,     3,     1,     1,     2,
+       2,     3,     1,     1,     1,     1,     2,     2,     2,     3,
+       1,     1,     1,     2,     2,     0,     1,     3,     0,     1,
+       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1
 };
 
 
@@ -3222,247 +3229,255 @@ yyreduce:
                                 { (yyval.specsym) = (yyvsp[0].startsym); }
     break;
 
-  case 287: /* specificsymbol: ENDSYM  */
+  case 287: /* specificsymbol: OFFSETSYM  */
+                                { (yyval.specsym) = (yyvsp[0].offsetsym); }
+    break;
+
+  case 288: /* specificsymbol: ENDSYM  */
                                 { (yyval.specsym) = (yyvsp[0].endsym); }
     break;
 
-  case 288: /* specificsymbol: NEXT2SYM  */
+  case 289: /* specificsymbol: NEXT2SYM  */
                                 { (yyval.specsym) = (yyvsp[0].next2sym); }
     break;
 
-  case 289: /* charstring: CHAR  */
+  case 290: /* charstring: CHAR  */
                                 { (yyval.str) = new string; (*(yyval.str)) += (yyvsp[0].ch); }
     break;
 
-  case 290: /* charstring: charstring CHAR  */
+  case 291: /* charstring: charstring CHAR  */
                                 { (yyval.str) = (yyvsp[-1].str); (*(yyval.str)) += (yyvsp[0].ch); }
     break;
 
-  case 291: /* intblist: '[' intbpart ']'  */
+  case 292: /* intblist: '[' intbpart ']'  */
                                 { (yyval.biglist) = (yyvsp[-1].biglist); }
     break;
 
-  case 292: /* intblist: INTEGER  */
+  case 293: /* intblist: INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 293: /* intblist: '-' INTEGER  */
+  case 294: /* intblist: '-' INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(-intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 294: /* intbpart: INTEGER  */
+  case 295: /* intbpart: INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 295: /* intbpart: '-' INTEGER  */
+  case 296: /* intbpart: '-' INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(-intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 296: /* intbpart: STRING  */
+  case 297: /* intbpart: STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = "Expecting integer but saw: "+*(yyvsp[0].str); delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
                                   (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back((intb)0xBADBEEF); delete (yyvsp[0].str); }
     break;
 
-  case 297: /* intbpart: intbpart INTEGER  */
+  case 298: /* intbpart: intbpart INTEGER  */
                                 { (yyval.biglist) = (yyvsp[-1].biglist); (yyval.biglist)->push_back(intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 298: /* intbpart: intbpart '-' INTEGER  */
+  case 299: /* intbpart: intbpart '-' INTEGER  */
                                 { (yyval.biglist) = (yyvsp[-2].biglist); (yyval.biglist)->push_back(-intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 299: /* intbpart: intbpart STRING  */
+  case 300: /* intbpart: intbpart STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = "Expecting integer but saw: "+*(yyvsp[0].str); delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
                                   (yyval.biglist) = (yyvsp[-1].biglist); (yyval.biglist)->push_back((intb)0xBADBEEF); delete (yyvsp[0].str); }
     break;
 
-  case 300: /* stringlist: '[' stringpart ']'  */
+  case 301: /* stringlist: '[' stringpart ']'  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); }
     break;
 
-  case 301: /* stringlist: STRING  */
+  case 302: /* stringlist: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 302: /* stringpart: STRING  */
+  case 303: /* stringpart: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back( *(yyvsp[0].str) ); delete (yyvsp[0].str); }
     break;
 
-  case 303: /* stringpart: stringpart STRING  */
+  case 304: /* stringpart: stringpart STRING  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 304: /* stringpart: stringpart anysymbol  */
+  case 305: /* stringpart: stringpart anysymbol  */
                                 { string errmsg = (yyvsp[0].anysym)->getName()+": redefined"; slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 305: /* anystringlist: '[' anystringpart ']'  */
+  case 306: /* anystringlist: '[' anystringpart ']'  */
                                      { (yyval.strlist) = (yyvsp[-1].strlist); }
     break;
 
-  case 306: /* anystringpart: STRING  */
+  case 307: /* anystringpart: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back( *(yyvsp[0].str) ); delete (yyvsp[0].str); }
     break;
 
-  case 307: /* anystringpart: anysymbol  */
+  case 308: /* anystringpart: anysymbol  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back( (yyvsp[0].anysym)->getName() ); }
     break;
 
-  case 308: /* anystringpart: anystringpart STRING  */
+  case 309: /* anystringpart: anystringpart STRING  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 309: /* anystringpart: anystringpart anysymbol  */
+  case 310: /* anystringpart: anystringpart anysymbol  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); (yyval.strlist)->push_back((yyvsp[0].anysym)->getName()); }
     break;
 
-  case 310: /* valuelist: '[' valuepart ']'  */
+  case 311: /* valuelist: '[' valuepart ']'  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); }
     break;
 
-  case 311: /* valuelist: VALUESYM  */
+  case 312: /* valuelist: VALUESYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].valuesym)); }
     break;
 
-  case 312: /* valuelist: CONTEXTSYM  */
+  case 313: /* valuelist: CONTEXTSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].contextsym)); }
     break;
 
-  case 313: /* valuepart: VALUESYM  */
+  case 314: /* valuepart: VALUESYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back( (yyvsp[0].valuesym) ); }
     break;
 
-  case 314: /* valuepart: CONTEXTSYM  */
+  case 315: /* valuepart: CONTEXTSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].contextsym)); }
     break;
 
-  case 315: /* valuepart: valuepart VALUESYM  */
+  case 316: /* valuepart: valuepart VALUESYM  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((yyvsp[0].valuesym)); }
     break;
 
-  case 316: /* valuepart: valuepart CONTEXTSYM  */
+  case 317: /* valuepart: valuepart CONTEXTSYM  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((yyvsp[0].contextsym)); }
     break;
 
-  case 317: /* valuepart: valuepart STRING  */
+  case 318: /* valuepart: valuepart STRING  */
                                 { string errmsg = *(yyvsp[0].str)+": is not a value pattern"; delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 318: /* varlist: '[' varpart ']'  */
+  case 319: /* varlist: '[' varpart ']'  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); }
     break;
 
-  case 319: /* varlist: VARSYM  */
+  case 320: /* varlist: VARSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].varsym)); }
     break;
 
-  case 320: /* varpart: VARSYM  */
+  case 321: /* varpart: VARSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].varsym)); }
     break;
 
-  case 321: /* varpart: STRING  */
+  case 322: /* varpart: STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = *(yyvsp[0].str)+": is not a varnode symbol"; delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
 				  (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((SleighSymbol *)0); delete (yyvsp[0].str); }
     break;
 
-  case 322: /* varpart: varpart VARSYM  */
+  case 323: /* varpart: varpart VARSYM  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((yyvsp[0].varsym)); }
     break;
 
-  case 323: /* varpart: varpart STRING  */
+  case 324: /* varpart: varpart STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = *(yyvsp[0].str)+": is not a varnode symbol"; delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
                                   (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((SleighSymbol *)0); delete (yyvsp[0].str); }
     break;
 
-  case 324: /* paramlist: %empty  */
+  case 325: /* paramlist: %empty  */
                                 { (yyval.param) = new vector<ExprTree *>; }
     break;
 
-  case 325: /* paramlist: expr  */
+  case 326: /* paramlist: expr  */
                                 { (yyval.param) = new vector<ExprTree *>; (yyval.param)->push_back((yyvsp[0].tree)); }
     break;
 
-  case 326: /* paramlist: paramlist ',' expr  */
+  case 327: /* paramlist: paramlist ',' expr  */
                                 { (yyval.param) = (yyvsp[-2].param); (yyval.param)->push_back((yyvsp[0].tree)); }
     break;
 
-  case 327: /* oplist: %empty  */
+  case 328: /* oplist: %empty  */
                                 { (yyval.strlist) = new vector<string>; }
     break;
 
-  case 328: /* oplist: STRING  */
+  case 329: /* oplist: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 329: /* oplist: oplist ',' STRING  */
+  case 330: /* oplist: oplist ',' STRING  */
                                 { (yyval.strlist) = (yyvsp[-2].strlist); (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 330: /* anysymbol: SPACESYM  */
+  case 331: /* anysymbol: SPACESYM  */
                                 { (yyval.anysym) = (yyvsp[0].spacesym); }
     break;
 
-  case 331: /* anysymbol: SECTIONSYM  */
+  case 332: /* anysymbol: SECTIONSYM  */
                                 { (yyval.anysym) = (yyvsp[0].sectionsym); }
     break;
 
-  case 332: /* anysymbol: TOKENSYM  */
+  case 333: /* anysymbol: TOKENSYM  */
                                 { (yyval.anysym) = (yyvsp[0].tokensym); }
     break;
 
-  case 333: /* anysymbol: USEROPSYM  */
+  case 334: /* anysymbol: USEROPSYM  */
                                 { (yyval.anysym) = (yyvsp[0].useropsym); }
     break;
 
-  case 334: /* anysymbol: MACROSYM  */
+  case 335: /* anysymbol: MACROSYM  */
                                 { (yyval.anysym) = (yyvsp[0].macrosym); }
     break;
 
-  case 335: /* anysymbol: SUBTABLESYM  */
+  case 336: /* anysymbol: SUBTABLESYM  */
                                 { (yyval.anysym) = (yyvsp[0].subtablesym); }
     break;
 
-  case 336: /* anysymbol: VALUESYM  */
+  case 337: /* anysymbol: VALUESYM  */
                                 { (yyval.anysym) = (yyvsp[0].valuesym); }
     break;
 
-  case 337: /* anysymbol: VALUEMAPSYM  */
+  case 338: /* anysymbol: VALUEMAPSYM  */
                                 { (yyval.anysym) = (yyvsp[0].valuemapsym); }
     break;
 
-  case 338: /* anysymbol: CONTEXTSYM  */
+  case 339: /* anysymbol: CONTEXTSYM  */
                                 { (yyval.anysym) = (yyvsp[0].contextsym); }
     break;
 
-  case 339: /* anysymbol: NAMESYM  */
+  case 340: /* anysymbol: NAMESYM  */
                                 { (yyval.anysym) = (yyvsp[0].namesym); }
     break;
 
-  case 340: /* anysymbol: VARSYM  */
+  case 341: /* anysymbol: VARSYM  */
                                 { (yyval.anysym) = (yyvsp[0].varsym); }
     break;
 
-  case 341: /* anysymbol: VARLISTSYM  */
+  case 342: /* anysymbol: VARLISTSYM  */
                                 { (yyval.anysym) = (yyvsp[0].varlistsym); }
     break;
 
-  case 342: /* anysymbol: OPERANDSYM  */
+  case 343: /* anysymbol: OPERANDSYM  */
                                 { (yyval.anysym) = (yyvsp[0].operandsym); }
     break;
 
-  case 343: /* anysymbol: STARTSYM  */
+  case 344: /* anysymbol: STARTSYM  */
                                 { (yyval.anysym) = (yyvsp[0].startsym); }
     break;
 
-  case 344: /* anysymbol: ENDSYM  */
+  case 345: /* anysymbol: OFFSETSYM  */
+                                { (yyval.anysym) = (yyvsp[0].offsetsym); }
+    break;
+
+  case 346: /* anysymbol: ENDSYM  */
                                 { (yyval.anysym) = (yyvsp[0].endsym); }
     break;
 
-  case 345: /* anysymbol: NEXT2SYM  */
+  case 347: /* anysymbol: NEXT2SYM  */
                                 { (yyval.anysym) = (yyvsp[0].next2sym); }
     break;
 
-  case 346: /* anysymbol: BITSYM  */
+  case 348: /* anysymbol: BITSYM  */
                                 { (yyval.anysym) = (yyvsp[0].bitsym); }
     break;
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh
index 229d8a232..48b8dbf2a 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh
@@ -172,11 +172,12 @@ extern int sleighdebug;
     VARLISTSYM = 365,              /* VARLISTSYM  */
     OPERANDSYM = 366,              /* OPERANDSYM  */
     STARTSYM = 367,                /* STARTSYM  */
-    ENDSYM = 368,                  /* ENDSYM  */
-    NEXT2SYM = 369,                /* NEXT2SYM  */
-    MACROSYM = 370,                /* MACROSYM  */
-    LABELSYM = 371,                /* LABELSYM  */
-    SUBTABLESYM = 372              /* SUBTABLESYM  */
+    OFFSETSYM = 368,               /* OFFSETSYM  */
+    ENDSYM = 369,                  /* ENDSYM  */
+    NEXT2SYM = 370,                /* NEXT2SYM  */
+    MACROSYM = 371,                /* MACROSYM  */
+    LABELSYM = 372,                /* LABELSYM  */
+    SUBTABLESYM = 373              /* SUBTABLESYM  */
   };
   typedef enum sleightokentype sleightoken_kind_t;
 #endif
@@ -216,6 +217,7 @@ union SLEIGHSTYPE
   LabelSymbol *labelsym;
   SubtableSymbol *subtablesym;
   StartSymbol *startsym;
+  OffsetSymbol *offsetsym;
   EndSymbol *endsym;
   Next2Symbol *next2sym;
   OperandSymbol *operandsym;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y
index 31425aeda..fef12c4bd 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y
@@ -59,6 +59,7 @@ extern int sleigherror(const char *str );
   LabelSymbol *labelsym;
   SubtableSymbol *subtablesym;
   StartSymbol *startsym;
+  OffsetSymbol *offsetsym;
   EndSymbol *endsym;
   Next2Symbol *next2sym;
   OperandSymbol *operandsym;
@@ -123,6 +124,7 @@ extern int sleigherror(const char *str );
 %token <varlistsym> VARLISTSYM
 %token <operandsym> OPERANDSYM
 %token <startsym> STARTSYM
+%token <offsetsym> OFFSETSYM
 %token <endsym> ENDSYM
 %token <next2sym> NEXT2SYM
 %token <macrosym> MACROSYM
@@ -508,6 +510,7 @@ specificsymbol: VARSYM		{ $$ = $1; }
   | SPECSYM                     { $$ = $1; }
   | OPERANDSYM			{ $$ = $1; }
   | STARTSYM			{ $$ = $1; }
+  | OFFSETSYM			{ $$ = $1; }
   | ENDSYM			{ $$ = $1; }
   | NEXT2SYM			{ $$ = $1; }
   ;
@@ -583,6 +586,7 @@ anysymbol: SPACESYM		{ $$ = $1; }
   | VARLISTSYM			{ $$ = $1; }
   | OPERANDSYM			{ $$ = $1; }
   | STARTSYM			{ $$ = $1; }
+  | OFFSETSYM			{ $$ = $1; }
   | ENDSYM			{ $$ = $1; }
   | NEXT2SYM			{ $$ = $1; }
   | BITSYM                      { $$ = $1; }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.cc
index 806c622f0..a62d74ea0 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.cc
@@ -478,6 +478,8 @@ PatternExpression *PatternExpression::restoreExpression(const Element *el,Transl
     res = new OperandValue();
   else if (nm == "start_exp")
     res = new StartInstructionValue();
+  else if (nm == "offset_exp")
+    res = new OperandOffsetValue();
   else if (nm == "end_exp")
     res = new EndInstructionValue();
   else if (nm == "plus_exp")
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.hh
index ef7bc39d0..024f25b67 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.hh
@@ -156,6 +156,20 @@ public:
   virtual void saveXml(ostream &s) const { s << "<start_exp/>"; }
   virtual void restoreXml(const Element *el,Translate *trans) {}
 };
+
+class OperandOffsetValue : public PatternValue {
+public:
+  OperandOffsetValue(void) {}
+  virtual intb getValue(ParserWalker &walker) const {
+    return (intb)walker.getOffset(-1);
+  }
+  virtual TokenPattern genMinPattern(const vector<TokenPattern> &ops) const { return TokenPattern(); }
+  virtual TokenPattern genPattern(intb val) const { return TokenPattern(); }
+  virtual intb minValue(void) const { return (intb)0; }
+  virtual intb maxValue(void) const { return (intb)0; }
+  virtual void saveXml(ostream &s) const { s << "<offset_exp/>"; }
+  virtual void restoreXml(const Element *el,Translate *trans) {}
+};
                                                                                         
 class EndInstructionValue : public PatternValue {
 public:
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc
index c4d4dfc84..050c7e9a1 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc
@@ -1574,6 +1574,9 @@ int4 find_symbol(void) {
   case SleighSymbol::start_symbol:
     sleighlval.startsym = (StartSymbol *)sym;
     return STARTSYM;
+  case SleighSymbol::offset_symbol:
+    sleighlval.offsetsym = (OffsetSymbol *)sym;
+    return OFFSETSYM;
   case SleighSymbol::end_symbol:
     sleighlval.endsym = (EndSymbol *)sym;
     return ENDSYM;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l
index 14bd3fd79..f433a25e5 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l
@@ -431,6 +431,9 @@ int4 find_symbol(void) {
   case SleighSymbol::start_symbol:
     sleighlval.startsym = (StartSymbol *)sym;
     return STARTSYM;
+  case SleighSymbol::offset_symbol:
+    sleighlval.offsetsym = (OffsetSymbol *)sym;
+    return OFFSETSYM;
   case SleighSymbol::end_symbol:
     sleighlval.endsym = (EndSymbol *)sym;
     return ENDSYM;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.cc
index b44f36da1..7632ddfe6 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.cc
@@ -252,6 +252,8 @@ void SymbolTable::restoreSymbolHeader(const Element *el)
     sym = new OperandSymbol();
   else if (el->getName() == "start_sym_head")
     sym = new StartSymbol();
+  else if (el->getName() == "offset_sym_head")
+    sym = new OffsetSymbol();
   else if (el->getName() == "end_sym_head")
     sym = new EndSymbol();
   else if (el->getName() == "next2_sym_head")
@@ -1195,6 +1197,70 @@ void StartSymbol::restoreXml(const Element *el,SleighBase *trans)
   patexp->layClaim();
 }
 
+OffsetSymbol::OffsetSymbol(const string &nm,AddrSpace *cspc) : SpecificSymbol(nm)
+
+{
+  const_space = cspc;
+  patexp = new OperandOffsetValue();
+  patexp->layClaim();
+}
+
+OffsetSymbol::~OffsetSymbol(void)
+
+{
+  if (patexp != (PatternExpression *)0)
+    PatternExpression::release(patexp);
+}
+
+VarnodeTpl *OffsetSymbol::getVarnode(void) const
+
+{ // Returns current operand offset as a constant
+  ConstTpl spc(const_space);
+  ConstTpl off(ConstTpl::j_offset);
+  ConstTpl sz_zero;
+  return new VarnodeTpl(spc,off,sz_zero);
+}
+
+void OffsetSymbol::getFixedHandle(FixedHandle &hand,ParserWalker &walker) const
+
+{
+  hand.space = walker.getCurSpace();
+  hand.offset_space = (AddrSpace *)0;
+  hand.offset_offset = walker.getAddr().getOffset(); // Get starting address of instruction
+  hand.size = hand.space->getAddrSize();
+}
+
+void OffsetSymbol::print(ostream &s,ParserWalker &walker) const
+
+{
+  intb val = (intb) walker.getAddr().getOffset();
+    s << "0x" << std::hex << val << std::dec;
+}
+
+void OffsetSymbol::saveXml(ostream &s) const
+
+{
+  s << "<offset_sym";
+  SleighSymbol::saveXmlHeader(s);
+  s << "/>\n";
+}
+
+void OffsetSymbol::saveXmlHeader(ostream &s) const
+
+{
+  s << "<offset_sym_head";
+  SleighSymbol::saveXmlHeader(s);
+  s << "/>\n";
+}
+
+void OffsetSymbol::restoreXml(const Element *el,SleighBase *trans)
+
+{
+  const_space = trans->getConstantSpace();
+  patexp = new OperandOffsetValue();
+  patexp->layClaim();
+}
+
 EndSymbol::EndSymbol(const string &nm,AddrSpace *cspc) : SpecificSymbol(nm)
 
 {
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.hh
index bfe170154..3fd0d524d 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.hh
@@ -27,7 +27,7 @@ class SleighSymbol {
 public:
   enum symbol_type { space_symbol, token_symbol, userop_symbol, value_symbol, valuemap_symbol,
 		     name_symbol, varnode_symbol, varnodelist_symbol, operand_symbol,
-		     start_symbol, end_symbol, next2_symbol, subtable_symbol, macro_symbol, section_symbol,
+		     start_symbol, offset_symbol, end_symbol, next2_symbol, subtable_symbol, macro_symbol, section_symbol,
                      bitrange_symbol, context_symbol, epsilon_symbol, label_symbol,
 		     dummy_symbol };
 private:
@@ -376,6 +376,23 @@ public:
   virtual void restoreXml(const Element *el,SleighBase *trans);
 };
 
+class OffsetSymbol : public SpecificSymbol {
+  AddrSpace *const_space;
+  PatternExpression *patexp;
+public:
+  OffsetSymbol(void) { patexp = (PatternExpression *)0; } // For use with restoreXml
+  OffsetSymbol(const string &nm,AddrSpace *cspc);
+  virtual ~OffsetSymbol(void);
+  virtual VarnodeTpl *getVarnode(void) const;
+  virtual PatternExpression *getPatternExpression(void) const { return patexp; }
+  virtual void getFixedHandle(FixedHandle &hand,ParserWalker &walker) const;
+  virtual void print(ostream &s,ParserWalker &walker) const;
+  virtual symbol_type getType(void) const { return offset_symbol; }
+  virtual void saveXml(ostream &s) const;
+  virtual void saveXmlHeader(ostream &s) const;
+  virtual void restoreXml(const Element *el,SleighBase *trans);
+};
+
 class EndSymbol : public SpecificSymbol {
   AddrSpace *const_space;
   PatternExpression *patexp;
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighCompiler.g b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighCompiler.g
index 7d9c4d588..b9a4a5d5c 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighCompiler.g
+++ b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighCompiler.g
@@ -344,6 +344,7 @@ specific_symbol[String purpose] returns [SpecificSymbol symbol]
 			if (sym == null) {
 				unknownSymbolError($s.getText(), find($s), "start, end, next2, operand, epsilon, or varnode", purpose);
 			} else if(sym.getType() != symbol_type.start_symbol
+					&& sym.getType() != symbol_type.offset_symbol
 					&& sym.getType() != symbol_type.end_symbol
 					&& sym.getType() != symbol_type.next2_symbol
 					&& sym.getType() != symbol_type.operand_symbol
@@ -852,6 +853,7 @@ pattern_symbol[String purpose] returns [PatternExpression expr]
                 }
                 $expr = os.getPatternExpression();
 			} else if(sym.getType() == symbol_type.start_symbol
+					|| sym.getType() == symbol_type.offset_symbol
 					|| sym.getType() == symbol_type.end_symbol
 					|| sym.getType() == symbol_type.next2_symbol
 					|| sym.getType() == symbol_type.epsilon_symbol
@@ -885,6 +887,7 @@ pattern_symbol2[String purpose] returns [PatternExpression expr]
 			if (sym == null) {
 				unknownSymbolError($s.getText(), find($s), "start, end, next2, operand, epsilon, or varnode", purpose);
 			} else if(sym.getType() == symbol_type.start_symbol
+					|| sym.getType() == symbol_type.offset_symbol
 					|| sym.getType() == symbol_type.end_symbol
 					|| sym.getType() == symbol_type.next2_symbol
 					|| sym.getType() == symbol_type.operand_symbol
@@ -956,6 +959,7 @@ cstatement[VectorSTL<ContextChange> r]
 							|| sym.getType() == symbol_type.name_symbol
 							|| sym.getType() == symbol_type.varnodelist_symbol
 							|| sym.getType() == symbol_type.start_symbol
+							|| sym.getType() == symbol_type.offset_symbol
 							|| sym.getType() == symbol_type.end_symbol
 							|| sym.getType() == symbol_type.next2_symbol
 							|| sym.getType() == symbol_type.operand_symbol
@@ -1189,6 +1193,7 @@ assignment returns [VectorSTL<OpTpl> value]
                                               bitSym.getBitOffset(),
                                               bitSym.numBits(),e);
 			} else if(sym.getType() != symbol_type.start_symbol
+					&& sym.getType() != symbol_type.offset_symbol
 					&& sym.getType() != symbol_type.end_symbol
 					&& sym.getType() != symbol_type.next2_symbol
 					&& sym.getType() != symbol_type.operand_symbol
@@ -1529,6 +1534,7 @@ expr_apply returns [Object value]
 						pcode.reportError(find($t), "macro invocation not allowed as expression");
 					}
 				} else if(sym.getType() == symbol_type.start_symbol
+					|| sym.getType() == symbol_type.offset_symbol
 					|| sym.getType() == symbol_type.end_symbol
 					|| sym.getType() == symbol_type.next2_symbol
 					|| sym.getType() == symbol_type.operand_symbol
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/assembler/sleigh/SleighAssemblerBuilder.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/assembler/sleigh/SleighAssemblerBuilder.java
index 1a6f544b1..282731ef3 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/assembler/sleigh/SleighAssemblerBuilder.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/assembler/sleigh/SleighAssemblerBuilder.java
@@ -570,6 +570,9 @@ public class SleighAssemblerBuilder implements AssemblerBuilder {
 				else if (sym instanceof StartSymbol) {
 					// Ignore. We handle inst_start in semantic processing
 				}
+				else if (sym instanceof OffsetSymbol) {
+					// Ignore. We handle inst_start in semantic processing
+				}
 				else if (sym instanceof EndSymbol) {
 					// Ignore. We handle inst_next in semantic processing
 				}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/OffsetInstructionValue.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/OffsetInstructionValue.java
new file mode 100644
index 000000000..a600413fd
--- /dev/null
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/OffsetInstructionValue.java
@@ -0,0 +1,83 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/*
+ * Created on Feb 8, 2005
+ *
+ */
+package ghidra.app.plugin.processors.sleigh.expression;
+
+import ghidra.app.plugin.processors.sleigh.ParserWalker;
+import ghidra.app.plugin.processors.sleigh.SleighLanguage;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.mem.MemoryAccessException;
+import ghidra.xml.XmlPullParser;
+
+/**
+ *
+ *
+ * The offset value of the current instructions address
+ */
+public class OffsetInstructionValue extends PatternValue {
+	private static final int HASH = "[operand_offset]".hashCode();
+
+	@Override
+	public int hashCode() {
+		return HASH;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		return obj instanceof OffsetInstructionValue;
+	}
+
+	/* (non-Javadoc)
+	 * @see ghidra.app.plugin.processors.sleigh.expression.PatternValue#minValue()
+	 */
+	@Override
+	public long minValue() {
+		return 0;
+	}
+
+	/* (non-Javadoc)
+	 * @see ghidra.app.plugin.processors.sleigh.expression.PatternValue#maxValue()
+	 */
+	@Override
+	public long maxValue() {
+		return 0;
+	}
+
+	/* (non-Javadoc)
+	 * @see ghidra.app.plugin.processors.sleigh.expression.PatternExpression#getValue(ghidra.app.plugin.processors.sleigh.ParserWalker)
+	 */
+	@Override
+	public long getValue(ParserWalker walker) throws MemoryAccessException {
+		return walker.getOffset(-1);
+	}
+
+	/* (non-Javadoc)
+	 * @see ghidra.app.plugin.processors.sleigh.PatternExpression#restoreXml(org.jdom.Element)
+	 */
+	@Override
+	public void restoreXml(XmlPullParser parser, SleighLanguage lang) {
+		parser.discardSubTree("offset_exp");
+		// Nothing to do
+	}
+
+	@Override
+	public String toString() {
+		return "[operand_offset]";
+	}
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/PatternExpression.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/PatternExpression.java
index 69b6f9c3c..920ea9238 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/PatternExpression.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/PatternExpression.java
@@ -49,6 +49,8 @@ public abstract class PatternExpression {
 			res = new OperandValue();
 		else if (nm.equals("start_exp"))
 			res = new StartInstructionValue();
+		else if (nm.equals("offset_exp"))
+			res = new OffsetInstructionValue();
 		else if (nm.equals("end_exp"))
 			res = new EndInstructionValue();
 		else if (nm.equals("next2_exp"))
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/OffsetSymbol.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/OffsetSymbol.java
new file mode 100644
index 000000000..eb90e24b2
--- /dev/null
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/OffsetSymbol.java
@@ -0,0 +1,82 @@
+/* ###
+ * IP: GHIDRA
+ * REVIEWED: YES
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/*
+ * Created on Feb 8, 2005
+ *
+ */
+package ghidra.app.plugin.processors.sleigh.symbol;
+
+import ghidra.app.plugin.processors.sleigh.*;
+import ghidra.app.plugin.processors.sleigh.expression.*;
+import ghidra.program.model.mem.*;
+import ghidra.xml.*;
+
+import java.util.*;
+
+/**
+ *
+ *
+ * TripleSymbol with semantic value equal to offset of instruction's
+ * current address
+ */
+public class OffsetSymbol extends SpecificSymbol {
+
+	private PatternExpression patexp;
+
+	/* (non-Javadoc)
+	 * @see ghidra.app.plugin.processors.sleigh.symbol.TripleSymbol#getPatternExpression()
+	 */
+	@Override
+    public PatternExpression getPatternExpression() {
+		return patexp;
+	}
+
+	/* (non-Javadoc)
+	 * @see ghidra.app.plugin.processors.sleigh.symbol.TripleSymbol#getFixedHandle(ghidra.app.plugin.processors.sleigh.FixedHandle, ghidra.app.plugin.processors.sleigh.ParserWalker)
+	 */
+	@Override
+    public void getFixedHandle(FixedHandle hand, ParserWalker walker) {
+		hand.space = walker.getCurSpace();
+		hand.offset_space = null;
+		hand.offset_offset = walker.getAddr().getOffset();
+		hand.size = hand.space.getPointerSize();
+	}
+
+	/* (non-Javadoc)
+	 * @see ghidra.app.plugin.processors.sleigh.symbol.TripleSymbol#print(ghidra.app.plugin.processors.sleigh.ParserWalker)
+	 */
+	@Override
+    public String print(ParserWalker walker) throws MemoryAccessException {
+		long val = walker.getAddr().getOffset();
+		return "0x" + Long.toHexString(val);
+	}
+
+	@Override
+    public void printList(ParserWalker walker, ArrayList<Object> list) {
+		list.add(walker.getParentHandle());
+	}
+	/* (non-Javadoc)
+	 * @see ghidra.app.plugin.processors.sleigh.symbol.Symbol#restoreXml(org.jdom.Element, ghidra.app.plugin.processors.sleigh.SleighLanguage)
+	 */
+	@Override
+    public void restoreXml(XmlPullParser parser, SleighLanguage sleigh) {
+	    XmlElement element = parser.start("offset_sym");
+		patexp = new OffsetInstructionValue();
+		parser.end(element);
+	}
+
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/SymbolTable.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/SymbolTable.java
index dd9cec532..0cc6a2a81 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/SymbolTable.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/SymbolTable.java
@@ -150,6 +150,8 @@ public class SymbolTable {
 			sym = new OperandSymbol();
 		else if (el.getName().equals("start_sym_head"))
 			sym = new StartSymbol();
+		else if (el.getName().equals("offset_sym_head"))
+			sym = new OffsetSymbol();
 		else if (el.getName().equals("end_sym_head"))
 			sym = new EndSymbol();
 		else if (el.getName().equals("next2_sym_head"))
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/semantics/ConstTpl.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/semantics/ConstTpl.java
index 341877dae..5c14e3bbc 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/semantics/ConstTpl.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/semantics/ConstTpl.java
@@ -46,7 +46,8 @@ public class ConstTpl {
 		j_flowref,
 		j_flowref_size,
 		j_flowdest,
-		j_flowdest_size
+		j_flowdest_size,
+		j_offset
 	}
 
 	public enum v_field {
@@ -297,6 +298,9 @@ public class ConstTpl {
 			case j_start:
 				s.append("start\"/>");
 				break;
+			case j_offset:
+				s.append("offset\"/>");
+				break;
 			case j_next:
 				s.append("next\"/>");
 				break;
@@ -351,6 +355,9 @@ public class ConstTpl {
 		else if (typestring.equals("start")) {
 			type = const_type.j_start;
 		}
+		else if (typestring.equals("offset")) {
+			type = const_type.j_offset;
+		}
 		else if (typestring.equals("next")) {
 			type = const_type.j_next;
 		}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/SleighCompile.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/SleighCompile.java
index 550f05ddb..eaa443b62 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/SleighCompile.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/SleighCompile.java
@@ -287,6 +287,8 @@ public class SleighCompile extends SleighBase {
 		symtab.addSymbol(spacesym);
 		StartSymbol startsym = new StartSymbol(location, "inst_start", getConstantSpace());
 		symtab.addSymbol(startsym);
+		OffsetSymbol offsetsym = new OffsetSymbol(location, "operand_offset", getConstantSpace());
+		symtab.addSymbol(offsetsym);
 		EndSymbol endsym = new EndSymbol(location, "inst_next", getConstantSpace());
 		symtab.addSymbol(endsym);
 		Next2Symbol next2sym = new Next2Symbol(location, "inst_next2", getConstantSpace());
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/Yylval.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/Yylval.java
index f165ca6b8..dc5740001 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/Yylval.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/Yylval.java
@@ -30,6 +30,7 @@ class Yylval {
     VarnodeListSymbol varlistsym;
     OperandSymbol operandsym;
     StartSymbol startsym;
+    OffsetSymbol offsetsym;
     EndSymbol endsym;
 	Next2Symbol next2sym;
     SubtableSymbol subtablesym;
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/OffsetInstructionValue.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/OffsetInstructionValue.java
new file mode 100644
index 000000000..b64f9617a
--- /dev/null
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/OffsetInstructionValue.java
@@ -0,0 +1,67 @@
+/* ###
+ * IP: GHIDRA
+ * REVIEWED: YES
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.pcodeCPort.slghpatexpress;
+
+import generic.stl.VectorSTL;
+import ghidra.app.plugin.processors.sleigh.ParserWalker;
+import ghidra.pcodeCPort.translate.Translate;
+import ghidra.sleigh.grammar.Location;
+
+import java.io.PrintStream;
+
+import org.jdom.Element;
+
+public class OffsetInstructionValue extends PatternValue {
+
+	public OffsetInstructionValue(Location location) {
+		super(location);
+	}
+
+	public long getValue(ParserWalker pos) {
+		return pos.getOffset(-1);
+	}
+
+	@Override
+	public TokenPattern genMinPattern(VectorSTL<TokenPattern> ops) {
+		return new TokenPattern(location);
+	}
+
+	@Override
+	public TokenPattern genPattern(long val) {
+		return new TokenPattern(location);
+	}
+
+	@Override
+	public long minValue() {
+		return 0;
+	}
+
+	@Override
+	public long maxValue() {
+		return 0;
+	}
+
+	@Override
+	public void saveXml(PrintStream s) {
+		s.append("<offset_exp/>");
+	}
+
+	@Override
+	public void restoreXml(Element el, Translate trans) {
+	}
+
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/PatternExpression.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/PatternExpression.java
index 2842fa83a..315450dd8 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/PatternExpression.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/PatternExpression.java
@@ -84,6 +84,9 @@ public abstract class PatternExpression {
 		else if (nm.equals("start_exp")) {
 			res = new StartInstructionValue(null);
 		}
+		else if (nm.equals("offset_exp")) {
+			res = new OffsetInstructionValue(null);
+		}
 		else if (nm.equals("end_exp")) {
 			res = new EndInstructionValue(null);
 		}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghsymbol/OffsetSymbol.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghsymbol/OffsetSymbol.java
new file mode 100644
index 000000000..545a51132
--- /dev/null
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghsymbol/OffsetSymbol.java
@@ -0,0 +1,109 @@
+/* ###
+ * IP: GHIDRA
+ * REVIEWED: YES
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.pcodeCPort.slghsymbol;
+
+import ghidra.app.plugin.processors.sleigh.ParserWalker;
+import ghidra.app.plugin.processors.sleigh.FixedHandle;
+import ghidra.pcodeCPort.semantics.ConstTpl;
+import ghidra.pcodeCPort.semantics.VarnodeTpl;
+import ghidra.pcodeCPort.sleighbase.SleighBase;
+import ghidra.pcodeCPort.slghpatexpress.PatternExpression;
+import ghidra.pcodeCPort.slghpatexpress.OffsetInstructionValue;
+import ghidra.pcodeCPort.space.AddrSpace;
+import ghidra.sleigh.grammar.Location;
+
+import java.io.PrintStream;
+
+import org.jdom.Element;
+
+public class OffsetSymbol extends SpecificSymbol {
+	private AddrSpace const_space;
+	private PatternExpression patexp;
+
+	OffsetSymbol(Location location) {
+		super(location);
+		patexp = null;
+	} // For use with restoreXml
+
+	@Override
+	public PatternExpression getPatternExpression() {
+		return patexp;
+	}
+
+	@Override
+	public symbol_type getType() {
+		return symbol_type.offset_symbol;
+	}
+
+	public OffsetSymbol(Location location, String nm, AddrSpace cspc) {
+		super(location, nm);
+		const_space = cspc;
+		patexp = new OffsetInstructionValue(location);
+		patexp.layClaim();
+	}
+
+	@Override
+	public void dispose() {
+		if (patexp != null) {
+			PatternExpression.release(patexp);
+		}
+	}
+
+// Returns current instruction offset as a constant
+	@Override
+	public VarnodeTpl getVarnode() {
+		ConstTpl spc = new ConstTpl(const_space);
+		ConstTpl off = new ConstTpl(ConstTpl.const_type.j_offset);
+		ConstTpl sz_zero = new ConstTpl();
+		return new VarnodeTpl(location, spc, off, sz_zero);
+	}
+
+	public void getFixedHandle(FixedHandle hand, ParserWalker pos) {
+		hand.space = pos.getCurSpace();
+		hand.offset_space = null;
+		hand.offset_offset = pos.getAddr().getOffset(); // Get starting address of instruction
+		hand.size = hand.space.getPointerSize();
+	}
+
+	public void print(PrintStream s, ParserWalker pos) {
+		long val = pos.getAddr().getOffset();
+		s.append("0x");
+		s.print(Long.toHexString(val));
+	}
+
+	@Override
+	public void saveXml(PrintStream s) {
+		s.append("<start_sym");
+		saveSleighSymbolXmlHeader(s);
+		s.println("/>");
+	}
+
+	@Override
+	public void saveXmlHeader(PrintStream s) {
+		s.append("<start_sym_head");
+		saveSleighSymbolXmlHeader(s);
+		s.append("/>\n");
+	}
+
+	@Override
+	public void restoreXml(Element el, SleighBase trans) {
+		const_space = trans.getConstantSpace();
+		patexp = new OffsetInstructionValue(null);
+		patexp.layClaim();
+	}
+
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghsymbol/SymbolTable.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghsymbol/SymbolTable.java
index 33fbb65e9..8cdd4cddd 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghsymbol/SymbolTable.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghsymbol/SymbolTable.java
@@ -297,6 +297,9 @@ public class SymbolTable {
 		else if (el.getName().equals("start_sym_head")) {
 			sym = new StartSymbol(location);
 		}
+		else if (el.getName().equals("offset_sym_head")) {
+			sym = new OffsetSymbol(location);
+		}
 		else if (el.getName().equals("end_sym_head")) {
 			sym = new EndSymbol(location);
 		}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghsymbol/symbol_type.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghsymbol/symbol_type.java
index 272b5fe64..cc3b29f27 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghsymbol/symbol_type.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghsymbol/symbol_type.java
@@ -26,6 +26,7 @@ public enum symbol_type {
 	varnodelist_symbol,
 	operand_symbol,
 	start_symbol,  // inst_start, inst_ref, inst_def
+        offset_symbol,
 	end_symbol,    // inst_next
 	next2_symbol,    // inst_next2
 	subtable_symbol,
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/PcodeParser.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/PcodeParser.java
index 19d8622dd..7dc039226 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/PcodeParser.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/PcodeParser.java
@@ -84,6 +84,7 @@ public class PcodeParser extends PcodeCompile {
 
 		Location internalLoc = Location.INTERNALLY_DEFINED;
 		symbolMap.put("inst_start", new StartSymbol(internalLoc, "inst_start", getConstantSpace()));
+		symbolMap.put("operand_offset", new OffsetSymbol(internalLoc, "operand_offset", getConstantSpace()));
 		symbolMap.put("inst_next", new EndSymbol(internalLoc, "inst_next", getConstantSpace()));
 		symbolMap.put("inst_next2", new Next2Symbol(internalLoc, "inst_next2", getConstantSpace()));
 		symbolMap.put("inst_ref", new FlowRefSymbol(internalLoc, "inst_ref", getConstantSpace()));
-- 
2.43.0

