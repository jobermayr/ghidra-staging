From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Random06457 <28494085+Random06457@users.noreply.github.com>
Date: Sun, 24 Sep 2023 21:28:42 +0200
Subject: [PATCH] 5824: fix function inlining with more than one function

---
 .../Decompiler/src/decompile/cpp/flow.cc      | 22 +++++++++++++------
 .../Decompiler/src/decompile/cpp/flow.hh      |  1 +
 .../src/decompile/cpp/funcdata_op.cc          |  4 ++++
 3 files changed, 20 insertions(+), 7 deletions(-)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/flow.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/flow.cc
index 38c0d5c82..6a0f7945c 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/flow.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/flow.cc
@@ -1088,6 +1088,21 @@ void FlowInfo::inlineEZClone(const FlowInfo &inlineflow,const Address &calladdr)
   // address, we don't touch unprocessed, addrlist, or visited
 }
 
+/// Checks whether the function has already been inlined
+/// \param inlinefd is the function being in-lined into \b this flow
+/// \param op is CALL instruction at the site of the in-line
+bool FlowInfo::testAlreadyInlined(Funcdata *inlinefd, PcodeOp *op)
+{
+  if (inline_recursion->find( inlinefd->getAddress() ) != inline_recursion->end()) {
+    // This function has already been included with current inlining
+    inline_head->warning("Could not inline here",op->getAddr());
+    return false;
+  }
+
+  inline_recursion->insert(inlinefd->getAddress());
+  return true;
+}
+
 /// \brief For in-lining using the \e hard model, make sure some restrictions are met
 ///
 ///   - Can only in-line the function once.
@@ -1102,12 +1117,6 @@ void FlowInfo::inlineEZClone(const FlowInfo &inlineflow,const Address &calladdr)
 bool FlowInfo::testHardInlineRestrictions(Funcdata *inlinefd,PcodeOp *op,Address &retaddr)
 
 {
-  if (inline_recursion->find( inlinefd->getAddress() ) != inline_recursion->end()) {
-    // This function has already been included with current inlining
-    inline_head->warning("Could not inline here",op->getAddr());
-    return false;
-  }
-  
   if (!inlinefd->getFuncProto().isNoReturn()) {
     list<PcodeOp *>::iterator iter = op->getInsertIter();
     ++iter;
@@ -1125,7 +1134,6 @@ bool FlowInfo::testHardInlineRestrictions(Funcdata *inlinefd,PcodeOp *op,Address
     data.opMarkStartBasic(nextop);
   }
 
-  inline_recursion->insert(inlinefd->getAddress());
   return true;
 }
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/flow.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/flow.hh
index 4bd5743b0..880e36b6c 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/flow.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/flow.hh
@@ -151,6 +151,7 @@ public:
   void generateOps(void);			///< Generate raw control-flow from the function's base address
   void generateBlocks(void);			///< Generate basic blocks from the raw control-flow
   bool testHardInlineRestrictions(Funcdata *inlinefd,PcodeOp *op,Address &retaddr);
+  bool testAlreadyInlined(Funcdata *inlinefd, PcodeOp *op);
   bool checkEZModel(void) const;		///< Check if \b this flow matches the EX in-lining model
   void injectPcode(void);			///< Perform substitution on any op that requires \e injection
   void forwardRecursion(const FlowInfo &op2);	///< Pull in-lining recursion information from another flow
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata_op.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata_op.cc
index 56400b2b8..99376cedf 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata_op.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata_op.cc
@@ -808,6 +808,10 @@ void Funcdata::truncatedFlow(const Funcdata *fd,const FlowInfo *flow)
 bool Funcdata::inlineFlow(Funcdata *inlinefd,FlowInfo &flow,PcodeOp *callop)
 
 {
+  // checks that the function has not already been inlined
+  if (!flow.testAlreadyInlined(inlinefd, callop))
+    return false;
+
   inlinefd->getArch()->clearAnalysis(inlinefd);
   FlowInfo inlineflow(*inlinefd,inlinefd->obank,inlinefd->bblocks,inlinefd->qlst);
   inlinefd->obank.setUniqId( obank.getUniqId() );
-- 
2.43.0

