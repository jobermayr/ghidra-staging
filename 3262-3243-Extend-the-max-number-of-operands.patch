From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Andrew Strelsky <ajs222@njit.edu>
Date: Thu, 22 Jul 2021 19:11:40 -0400
Subject: [PATCH] 3262: #3243 Extend the max number of operands

Extend the max number of operands. Fixes #3243
---
 .../plugin/processors/sleigh/PcodeEmit.java   | 50 +++++++++----------
 .../processors/sleigh/PcodeEmitObjects.java   | 15 ++----
 .../processors/sleigh/PcodeEmitPacked.java    | 18 +++----
 3 files changed, 35 insertions(+), 48 deletions(-)

diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/PcodeEmit.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/PcodeEmit.java
index dd1220a6ac..ceb93dc11f 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/PcodeEmit.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/PcodeEmit.java
@@ -17,6 +17,8 @@ package ghidra.app.plugin.processors.sleigh;
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 
 import ghidra.app.plugin.processors.sleigh.symbol.*;
 import ghidra.app.plugin.processors.sleigh.template.*;
@@ -49,7 +51,7 @@ public abstract class PcodeEmit {
 	private SleighLanguage language;
 	private AddressFactory addressFactory;
 	private VarnodeData outcache;
-	protected VarnodeData[] incache;
+	protected List<VarnodeData> incache;
 	protected ArrayList<Integer> labeldef = null;
 	protected int numOps = 0;							// Number of PcodeOps generated so far
 	private int labelbase = 0;
@@ -116,7 +118,7 @@ public abstract class PcodeEmit {
 			}
 		}
 
-		incache = new VarnodeData[8];	// Maximum number of inputs
+		incache = new ArrayList<>(8);	// Start with the previous maximum number of inputs
 	}
 
 	private void setUniqueOffset(Address addr) {
@@ -196,10 +198,10 @@ public abstract class PcodeEmit {
 		dest.offset = fallOverride.getOffset();
 		dest.size = dest.space.getPointerSize();
 
-		dump(startAddress, PcodeOp.BRANCH, new VarnodeData[] { dest }, 1, null);
+		dump(startAddress, PcodeOp.BRANCH, List.of(dest), 1, null);
 	}
 
-	abstract void dump(Address instrAddr, int opcode, VarnodeData[] in, int isize, VarnodeData out)
+	abstract void dump(Address instrAddr, int opcode, List<VarnodeData> in, int isize, VarnodeData out)
 			throws IOException;
 
 	private boolean dumpBranchOverride(OpTpl opt) throws IOException {
@@ -492,7 +494,7 @@ public abstract class PcodeEmit {
 		dyncache[2].space = uniq_space;		// Result of INT_ADD in special runtime temp
 		dyncache[2].offset = UniqueLayout.RUNTIME_BITRANGE_EA.getOffset(language);
 		dyncache[2].size = dyncache[0].size;
-		dump(startAddress, PcodeOp.INT_ADD, dyncache, 2, dyncache[2]);
+		dump(startAddress, PcodeOp.INT_ADD, Arrays.asList(dyncache), 2, dyncache[2]);
 		numOps += 1;
 		tmpData = dyncache[2];
 		dyncache[2] = dyncache[1];
@@ -505,20 +507,17 @@ public abstract class PcodeEmit {
 		VarnodeTpl vn, outvn;
 		int isize = opt.getInput().length;
 		
-		if (isize > incache.length) {
-			incache = new VarnodeData[isize];
-		}
-
 		// First build all the inputs
 		for (int i = 0; i < isize; ++i) {
 			vn = opt.getInput()[i];
-			incache[i] = new VarnodeData();
+			incache.add(i, new VarnodeData());
 			if (vn.isDynamic(walker)) {
 				dyncache = new VarnodeData[3];
 				dyncache[0] = new VarnodeData();
 				dyncache[1] = new VarnodeData();
 				dyncache[2] = new VarnodeData();
-				generateLocation(vn, incache[i]);	// Temporary storage
+				VarnodeData inData = incache.get(i);
+				generateLocation(vn, inData);	// Temporary storage
 				AddressSpace spc = generatePointer(vn, dyncache[1]);
 				if (vn.getOffset().getSelect() == ConstTpl.V_OFFSET_PLUS) {
 					generatePointerAdd(dyncache, vn);
@@ -526,18 +525,18 @@ public abstract class PcodeEmit {
 				dyncache[0].space = const_space;
 				dyncache[0].offset = spc.getSpaceID();
 				dyncache[0].size = 4;		// Size of spaceid
-				dyncache[2].space = incache[i].space;
-				dyncache[2].offset = incache[i].offset;
-				dyncache[2].size = incache[i].size;
-				dump(startAddress, PcodeOp.LOAD, dyncache, 2, dyncache[2]);
+				dyncache[2].space = inData.space;
+				dyncache[2].offset = inData.offset;
+				dyncache[2].size = inData.size;
+				dump(startAddress, PcodeOp.LOAD, Arrays.asList(dyncache), 2, dyncache[2]);
 				numOps += 1;
 			}
 			else {
-				generateLocation(vn, incache[i]);
+				generateLocation(vn, incache.get(i));
 			}
 		}
 		if ((isize > 0) && (opt.getInput()[0].isRelative())) {
-			incache[0].offset += labelbase;
+			incache.get(0).offset += labelbase;
 			addLabelRef();
 		}
 		outvn = opt.getOutput();
@@ -563,7 +562,7 @@ public abstract class PcodeEmit {
 				dyncache[2].space = outcache.space;
 				dyncache[2].offset = outcache.offset;
 				dyncache[2].size = outcache.size;
-				dump(startAddress, PcodeOp.STORE, dyncache, 3, null);
+				dump(startAddress, PcodeOp.STORE, Arrays.asList(dyncache), 3, null);
 				numOps += 1;
 			}
 			else {
@@ -771,17 +770,18 @@ public abstract class PcodeEmit {
 	 * @param in input varnodes
 	 * @return opcode of modified instruction
 	 */
-	int checkOverrides(int opcode, VarnodeData[] in) {
+	int checkOverrides(int opcode, List<VarnodeData> in) {
 		if (override == null) {
 			return opcode;
 		}
 
+		VarnodeData dest = in.get(0);
+
 		//If there is an overriding call reference on an indirect call, change it to  
 		//to a direct call, unless a call override has already been applied at this instruction
 		if (opcode == PcodeOp.CALLIND && !override.isCallOverrideRefApplied()) {
 			Address callRef = override.getOverridingReference(RefType.CALL_OVERRIDE_UNCONDITIONAL);
 			if (callRef != null) {
-				VarnodeData dest = in[0];
 				dest.space = callRef.getAddressSpace();
 				dest.offset = callRef.getOffset();
 				dest.size = dest.space.getPointerSize();
@@ -798,7 +798,6 @@ public abstract class PcodeEmit {
 			override.isCallOtherJumpOverrideApplied();
 		if (opcode == PcodeOp.CALLOTHER && !callOtherOverrideApplied) {
 			Address overrideRef = override.getOverridingReference(RefType.CALLOTHER_OVERRIDE_CALL);
-			VarnodeData dest = in[0];
 			if (overrideRef != null) {
 				dest.space = overrideRef.getAddressSpace();
 				dest.offset = overrideRef.getOffset();
@@ -819,8 +818,7 @@ public abstract class PcodeEmit {
 		// Simple call reference override - grab destination from appropriate reference
 		// Only perform reference override if destination function does not have a call-fixup		
 		if (opcode == PcodeOp.CALL && !override.isCallOverrideRefApplied() &&
-			!override.hasCallFixup(in[0].space.getAddress(in[0].offset))) {
-			VarnodeData dest = in[0];
+			!override.hasCallFixup(dest.space.getAddress(dest.offset))) {
 			//call to override.getPrimaryCallReference kept for backward compatibility with
 			//old call override mechanism
 			//old mechanism has precedence over new
@@ -845,10 +843,9 @@ public abstract class PcodeEmit {
 		// Fall-through override - alter branch to next instruction
 		if (fallOverride != null && (opcode == PcodeOp.CBRANCH || opcode == PcodeOp.BRANCH)) {
 			//don't apply fallthrough overrides into the constant space
-			if (in[0].space.getType() == AddressSpace.TYPE_CONSTANT) {
+			if (dest.space.getType() == AddressSpace.TYPE_CONSTANT) {
 				return opcode;
 			}
-			VarnodeData dest = in[0];
 			if (defaultFallAddress.getOffset() == dest.offset) {
 				dest.space = fallOverride.getAddressSpace();
 				dest.offset = fallOverride.getOffset();
@@ -863,13 +860,12 @@ public abstract class PcodeEmit {
 			!override.isJumpOverrideRefApplied()) {
 			//if the destination varnode is in the const space, it's a pcode-relative branch.
 			//these should not be overridden
-			if (in[0].space.getType() == AddressSpace.TYPE_CONSTANT) {
+			if (dest.space.getType() == AddressSpace.TYPE_CONSTANT) {
 				return opcode;
 			}
 			Address overrideRef =
 				override.getOverridingReference(RefType.JUMP_OVERRIDE_UNCONDITIONAL);
 			if (overrideRef != null) {
-				VarnodeData dest = in[0];
 				dest.space = overrideRef.getAddressSpace();
 				dest.offset = overrideRef.getOffset();
 				dest.size = dest.space.getPointerSize();
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/PcodeEmitObjects.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/PcodeEmitObjects.java
index a19803c13c..c3ede185cf 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/PcodeEmitObjects.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/PcodeEmitObjects.java
@@ -16,6 +16,7 @@
 package ghidra.app.plugin.processors.sleigh;
 
 import java.util.ArrayList;
+import java.util.List;
 
 import ghidra.program.model.address.Address;
 import ghidra.program.model.address.AddressSpace;
@@ -64,9 +65,6 @@ public class PcodeEmitObjects extends PcodeEmit {
 		return retop;
 	}
 
-	/* (non-Javadoc)
-	 * @see ghidra.app.plugin.processors.sleigh.PcodeEmit#resolveRelatives()
-	 */
 	@Override
 	public void resolveRelatives() {
 		if (labelref == null) {
@@ -91,9 +89,6 @@ public class PcodeEmitObjects extends PcodeEmit {
 		}
 	}
 
-	/* (non-Javadoc)
-	 * @see ghidra.app.plugin.processors.sleigh.PcodeEmit#addLabelRef()
-	 */
 	@Override
 	void addLabelRef() {
 		if (labelref == null) {
@@ -102,11 +97,8 @@ public class PcodeEmitObjects extends PcodeEmit {
 		labelref.add(numOps);
 	}
 
-	/* (non-Javadoc)
-	 * @see ghidra.app.plugin.processors.sleigh.PcodeEmit#dump(ghidra.program.model.address.Address, int, ghidra.app.plugin.processors.sleigh.VarnodeData[], int, ghidra.app.plugin.processors.sleigh.VarnodeData)
-	 */
 	@Override
-	void dump(Address instrAddr, int opcode, VarnodeData[] in, int isize, VarnodeData out) {
+	void dump(Address instrAddr, int opcode, List<VarnodeData> in, int isize, VarnodeData out) {
 		int updatedOpcode = checkOverrides(opcode, in);
 		Varnode outvn;
 		if (out != null) {
@@ -120,7 +112,8 @@ public class PcodeEmitObjects extends PcodeEmit {
 		}
 		Varnode[] invn = new Varnode[isize];
 		for (int i = 0; i < isize; ++i) {
-			invn[i] = new Varnode(in[i].space.getAddress(in[i].offset), in[i].size);
+			VarnodeData data = in.get(i);
+			invn[i] = new Varnode(data.space.getAddress(data.offset), data.size);
 		}
 		PcodeOp op = new PcodeOp(instrAddr, oplist.size(), updatedOpcode, invn, outvn);
 		oplist.add(op);
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/PcodeEmitPacked.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/PcodeEmitPacked.java
index 486356801a..798c4b03a2 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/PcodeEmitPacked.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/PcodeEmitPacked.java
@@ -20,6 +20,7 @@ import static ghidra.program.model.pcode.ElementId.*;
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.List;
 
 import ghidra.program.model.address.Address;
 import ghidra.program.model.lang.InstructionContext;
@@ -94,9 +95,6 @@ public class PcodeEmitPacked extends PcodeEmit {
 		}
 	}
 
-	/* (non-Javadoc)
-	 * @see ghidra.app.plugin.processors.sleigh.PcodeEmit#addLabelRef()
-	 */
 	@Override
 	void addLabelRef() {
 		// We know we need to do patching on a particular input parameter
@@ -111,18 +109,18 @@ public class PcodeEmitPacked extends PcodeEmit {
 	 * Create the LabelRef now that the next element written will be the parameter needing a patch 
 	 */
 	private void addLabelRefDelayed() {
-		int labelIndex = (int) incache[0].offset;
-		int labelSize = incache[0].size;
+		VarnodeData data = incache.get(0);
+		int labelIndex = (int) data.offset;
 		// Force the encoder to write out a maximum length encoding of a long
 		// so that we have space to insert whatever value we need to when this relative is resolved
-		incache[0].offset = -1;
+		data.offset = -1;
 
-		labelref.add(new LabelRef(numOps, labelIndex, labelSize, encoder.size()));
+		labelref.add(new LabelRef(numOps, labelIndex, data.size, encoder.size()));
 		hasRelativePatch = false;		// Mark patch as handled
 	}
 
 	@Override
-	void dump(Address instrAddr, int opcode, VarnodeData[] in, int isize, VarnodeData out)
+	void dump(Address instrAddr, int opcode, List<VarnodeData> in, int isize, VarnodeData out)
 			throws IOException {
 		int updatedOpcode = checkOverrides(opcode, in);
 		if (opcode == PcodeOp.CALLOTHER && updatedOpcode == PcodeOp.CALL) {
@@ -140,14 +138,14 @@ public class PcodeEmitPacked extends PcodeEmit {
 		}
 		int i = 0;
 		if ((updatedOpcode == PcodeOp.LOAD) || (updatedOpcode == PcodeOp.STORE)) {
-			dumpSpaceId(in[0]);
+			dumpSpaceId(in.get(0));
 			i = 1;
 		}
 		else if (hasRelativePatch) {
 			addLabelRefDelayed();
 		}
 		for (; i < isize; ++i) {
-			in[i].encode(encoder);
+			in.get(i).encode(encoder);
 		}
 		encoder.closeElement(ELEM_OP);
 	}
-- 
2.44.0

