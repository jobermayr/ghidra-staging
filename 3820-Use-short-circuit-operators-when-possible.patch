From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Wiz <95232096+GameCubeGBA@users.noreply.github.com>
Date: Fri, 31 Dec 2021 20:09:52 -0500
Subject: [PATCH] 3820: Use short circuit operators when possible

There are places were a bitwise operator is accidentally used instead of a logical one. In most of these cases, the effect is benign, just costing a tiny bit of performance. However, in cases like (trace != null) & trace... this can cause crashes where it isn't necessary, especially when the first condition is meant to prevent the second condition from happening if a variable/object was null.

This PR fixes those mistakes.
---
 .../dmg/reader/DmgFileReader.java             |  2 +-
 .../cmd/disassemble/DisassembleCommand.java   |  2 +-
 .../java/ghidra/app/nav/LocationMemento.java  |  9 +++------
 .../analysis/AnalysisBackgroundCommand.java   |  2 +-
 .../compositeeditor/DndTableCellRenderer.java |  2 +-
 .../plugin/core/osgi/GhidraSourceBundle.java  |  2 +-
 .../core/overview/OverviewColorComponent.java |  2 +-
 .../plugin/core/searchtext/SearchOptions.java |  4 ++--
 .../program/util/SymbolicPropogator.java      |  2 +-
 .../PCodeTestAbstractControlBlock.java        |  3 +--
 .../file/formats/yaffs2/YAFFS2FileSystem.java |  2 +-
 .../ghidra/graph/viewer/FGViewUpdater.java    |  4 ++--
 .../data/rtti/CreateRtti1BackgroundCmd.java   |  2 +-
 .../functiontype/MDFunctionType.java          |  2 +-
 .../gui/actions/AutoVersionTrackingTask.java  | 15 +++++----------
 .../src/main/java/db/buffers/BufferMgr.java   |  4 ++--
 .../options/editor/GhidraColorChooser.java    |  2 +-
 .../util/exception/VersionException.java      |  2 +-
 .../sleigh/parse/AssemblyParseMachine.java    |  4 ++--
 .../core/analysis/ReferenceAddressPair.java   |  2 +-
 .../ghidra/app/util/PseudoDisassembler.java   | 19 ++++++++-----------
 .../ghidra/pcode/floatformat/FloatFormat.java |  2 +-
 .../model/pcode/FunctionPrototype.java        |  2 +-
 .../java/ghidra/program/util/OldLanguage.java |  4 ++--
 .../core/analysis/MipsAddressAnalyzer.java    |  3 ++-
 .../plugin/core/analysis/MipsPreAnalyzer.java |  2 +-
 26 files changed, 45 insertions(+), 56 deletions(-)

diff --git a/GPL/DMG/src/dmg/java/mobiledevices/dmg/reader/DmgFileReader.java b/GPL/DMG/src/dmg/java/mobiledevices/dmg/reader/DmgFileReader.java
index 436d7ab68c..958e1193fa 100644
--- a/GPL/DMG/src/dmg/java/mobiledevices/dmg/reader/DmgFileReader.java
+++ b/GPL/DMG/src/dmg/java/mobiledevices/dmg/reader/DmgFileReader.java
@@ -287,7 +287,7 @@ public class DmgFileReader implements Closeable {
 	 * If the entry is actually a directory, then -1 is returned.
 	 */
 	public long getLength( FSEntry entry ) {
-		if ( entry != null & entry.isFile() ) {
+		if (entry != null && entry.isFile()) {
 			FSFork mainFork = entry.asFile().getMainFork();
 			if ( mainFork.getLength() > 0 ) {
 				return mainFork.getLength();
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/disassemble/DisassembleCommand.java b/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/disassemble/DisassembleCommand.java
index 4f02612254..1c86fc23a6 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/disassemble/DisassembleCommand.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/disassemble/DisassembleCommand.java
@@ -310,7 +310,7 @@ public class DisassembleCommand extends BackgroundCommand<Program> {
 			doDisassemblySeeds(disassembler, seedSet, mgr);
 		}
 
-		return disassemblyPerformed || (!nonExecutableStart & !unalignedStart);
+		return disassemblyPerformed || (!nonExecutableStart && !unalignedStart);
 	}
 
 	/**
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/nav/LocationMemento.java b/Ghidra/Features/Base/src/main/java/ghidra/app/nav/LocationMemento.java
index 7b0c9210e7..124e3be932 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/nav/LocationMemento.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/nav/LocationMemento.java
@@ -126,13 +126,10 @@ public class LocationMemento {
 		if (loc1.getClass() == loc2.getClass()) {
 			return true;
 		}
-		// at this point we know they have the some addresses, but different location types (fields)
+		// at this point we know they have the same addresses, but different location types (fields)
 		// also consider generic program locations to be equal to addressField locations
-		boolean isAddr1 =
-			loc1 instanceof AddressFieldLocation || loc1.getClass() == ProgramLocation.class;
-		boolean isAddr2 =
-			loc2 instanceof AddressFieldLocation || loc2.getClass() == ProgramLocation.class;
-		return isAddr1 & isAddr2;
+		return (loc1 instanceof AddressFieldLocation || loc1.getClass() == ProgramLocation.class) &&
+			(loc2 instanceof AddressFieldLocation || loc2.getClass() == ProgramLocation.class);
 	}
 
 	public void saveState(SaveState saveState) {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/analysis/AnalysisBackgroundCommand.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/analysis/AnalysisBackgroundCommand.java
index f74dc26dfe..7ac708bf64 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/analysis/AnalysisBackgroundCommand.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/analysis/AnalysisBackgroundCommand.java
@@ -68,7 +68,7 @@ public class AnalysisBackgroundCommand extends MergeableBackgroundCommand<Progra
 			"managers of the two commands are the same instance and this is not the case.");
 
 		// once we encounter a markAsAnalyzed value that is true, then leave it on
-		markAsAnalyzed = markAsAnalyzed | abc.markAsAnalyzed;
+		markAsAnalyzed = markAsAnalyzed || abc.markAsAnalyzed;
 		return this;
 	}
 }
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/DndTableCellRenderer.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/DndTableCellRenderer.java
index 986bc6c18b..55981cd473 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/DndTableCellRenderer.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/DndTableCellRenderer.java
@@ -185,7 +185,7 @@ public class DndTableCellRenderer implements TableCellRenderer {
 				if (column == 0 && !inserting) {
 					border.addBorders(DndBorder.LEFT);
 				}
-				if (column == myTable.getColumnCount() - 1 & !inserting) {
+				if (column == myTable.getColumnCount() - 1 && !inserting) {
 					border.addBorders(DndBorder.RIGHT);
 				}
 				c.setBorder(border);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/osgi/GhidraSourceBundle.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/osgi/GhidraSourceBundle.java
index 6a1538effb..04e5a3afac 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/osgi/GhidraSourceBundle.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/osgi/GhidraSourceBundle.java
@@ -626,7 +626,7 @@ public class GhidraSourceBundle extends GhidraBundle {
 			if (bundle != null) {
 				bundleHost.deactivateSynchronously(bundle);
 			}
-			return anythingChanged | wipeBinDir();
+			return anythingChanged || wipeBinDir();
 		}
 		catch (IOException | GhidraBundleException e) {
 			Msg.showError(this, null, "Source bundle clean error",
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/overview/OverviewColorComponent.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/overview/OverviewColorComponent.java
index 3f89bba1cb..d0471eac4a 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/overview/OverviewColorComponent.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/overview/OverviewColorComponent.java
@@ -233,7 +233,7 @@ public class OverviewColorComponent extends JPanel implements OverviewProvider {
 		int pixelStart = getPixelIndex(start);
 		int pixelEnd = getPixelIndex(end);
 		for (int i = pixelStart; i <= pixelEnd; i++) {
-			if (i >= 0 & i < colors.length) {
+			if (i >= 0 && i < colors.length) {
 				colors[i] = null;
 			}
 		}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/searchtext/SearchOptions.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/searchtext/SearchOptions.java
index 2b525debff..cae3ea85f4 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/searchtext/SearchOptions.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/searchtext/SearchOptions.java
@@ -112,7 +112,7 @@ public class SearchOptions implements Cloneable {
 	 * Return true if instruction mnemonics should be searched.
 	 */
 	public boolean searchBothInstructionMnemonicAndOperands() {
-		return instructionMnemonics & instructionOperands;
+		return instructionMnemonics && instructionOperands;
 	}
 
 	public boolean searchInstructionMnemonics() {
@@ -135,7 +135,7 @@ public class SearchOptions implements Cloneable {
 	 * Return true if data mnemonics should be searched.
 	 */
 	public boolean searchBothDataMnemonicsAndOperands() {
-		return dataMnemonics & dataOperands;
+		return dataMnemonics && dataOperands;
 	}
 
 	public boolean searchDataMnemonics() {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/program/util/SymbolicPropogator.java b/Ghidra/Features/Base/src/main/java/ghidra/program/util/SymbolicPropogator.java
index 5fbb5d3be2..1bd3d4eb0f 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/program/util/SymbolicPropogator.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/program/util/SymbolicPropogator.java
@@ -1348,7 +1348,7 @@ public class SymbolicPropogator {
 						val2 = vContext.getValue(in[1], true, evaluator);
 						long subbyte = 8 * vContext.getConstant(val2, evaluator);
 
-						if (vContext.isSymbol(val1) & subbyte == 0 &&
+						if (vContext.isSymbol(val1) && subbyte == 0 &&
 							out.getSize() == instruction.getAddress().getPointerSize()) {
 							// assume the subpiece is just downcasting to be used as a pointer, just ignore, since this is already an offset, and shouldn't matter.
 							result = val1;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/test/processors/support/PCodeTestAbstractControlBlock.java b/Ghidra/Features/Base/src/main/java/ghidra/test/processors/support/PCodeTestAbstractControlBlock.java
index 5b6a47b398..66b27a10de 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/test/processors/support/PCodeTestAbstractControlBlock.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/test/processors/support/PCodeTestAbstractControlBlock.java
@@ -485,8 +485,7 @@ public abstract class PCodeTestAbstractControlBlock {
 				return false;
 			}
 			FunctionInfo other = (FunctionInfo) obj;
-			return functionName.equals(other.functionName) &
-				functionAddr.equals(other.functionAddr);
+			return functionName.equals(other.functionName) && functionAddr.equals(other.functionAddr);
 		}
 
 		@Override
diff --git a/Ghidra/Features/FileFormats/src/main/java/ghidra/file/formats/yaffs2/YAFFS2FileSystem.java b/Ghidra/Features/FileFormats/src/main/java/ghidra/file/formats/yaffs2/YAFFS2FileSystem.java
index bd20a7f35d..0c5a9729f6 100644
--- a/Ghidra/Features/FileFormats/src/main/java/ghidra/file/formats/yaffs2/YAFFS2FileSystem.java
+++ b/Ghidra/Features/FileFormats/src/main/java/ghidra/file/formats/yaffs2/YAFFS2FileSystem.java
@@ -130,7 +130,7 @@ public class YAFFS2FileSystem extends GFileSystemBase {
 		GFile parentFile = (parentObjectId == 1) ? root : map.get(parentObjectId);
 
 		// skip the first header (always a meaningless, "root" header)
-		if ((objectId == 1) & (parentObjectId == 1)) {
+		if ((objectId == 1) && (parentObjectId == 1)) {
 			return;
 		}
 
diff --git a/Ghidra/Features/FunctionGraph/src/main/java/ghidra/graph/viewer/FGViewUpdater.java b/Ghidra/Features/FunctionGraph/src/main/java/ghidra/graph/viewer/FGViewUpdater.java
index 8fabca6a12..06af658a35 100644
--- a/Ghidra/Features/FunctionGraph/src/main/java/ghidra/graph/viewer/FGViewUpdater.java
+++ b/Ghidra/Features/FunctionGraph/src/main/java/ghidra/graph/viewer/FGViewUpdater.java
@@ -447,8 +447,8 @@ public class FGViewUpdater extends VisualGraphViewUpdater<FGVertex, FGEdge> {
 			GroupedFunctionGraphVertex groupVertex, Point2D groupVertexLocation,
 			boolean relayoutOverride, boolean animate, boolean isRegroup) {
 
-		boolean doAnimate = animate & isAnimationEnabled(); // never animate when the user has disabled it
-		if (groupVertex.getVertices().size() == 0) {
+		boolean doAnimate = animate && isAnimationEnabled(); // never animate when the user has disabled it
+		if (groupVertex.getVertices().isEmpty()) {
 			return false;
 		}
 
diff --git a/Ghidra/Features/MicrosoftCodeAnalyzer/src/main/java/ghidra/app/cmd/data/rtti/CreateRtti1BackgroundCmd.java b/Ghidra/Features/MicrosoftCodeAnalyzer/src/main/java/ghidra/app/cmd/data/rtti/CreateRtti1BackgroundCmd.java
index 0b992feb37..4c8c66124f 100644
--- a/Ghidra/Features/MicrosoftCodeAnalyzer/src/main/java/ghidra/app/cmd/data/rtti/CreateRtti1BackgroundCmd.java
+++ b/Ghidra/Features/MicrosoftCodeAnalyzer/src/main/java/ghidra/app/cmd/data/rtti/CreateRtti1BackgroundCmd.java
@@ -71,7 +71,7 @@ public class CreateRtti1BackgroundCmd extends AbstractCreateDataBackgroundCmd<Rt
 	@Override
 	protected boolean createAssociatedData() throws CancelledException {
 
-		return createRtti0() | createRtti3();
+		return createRtti0() || createRtti3();
 	}
 
 	private boolean createRtti0() throws CancelledException {
diff --git a/Ghidra/Features/MicrosoftDmang/src/main/java/mdemangler/functiontype/MDFunctionType.java b/Ghidra/Features/MicrosoftDmang/src/main/java/mdemangler/functiontype/MDFunctionType.java
index 7124e00585..f29bc000a6 100644
--- a/Ghidra/Features/MicrosoftDmang/src/main/java/mdemangler/functiontype/MDFunctionType.java
+++ b/Ghidra/Features/MicrosoftDmang/src/main/java/mdemangler/functiontype/MDFunctionType.java
@@ -159,7 +159,7 @@ public class MDFunctionType extends MDType {
 			dmang.insertString(builder, "(");
 			dmang.appendString(builder, ")");
 		}
-		if (hasArgs & argsList != null) {
+		if (hasArgs && argsList != null) {
 			dmang.appendString(builder, "(");
 			argsList.insert(builder);
 			dmang.appendString(builder, ")");
diff --git a/Ghidra/Features/VersionTracking/src/main/java/ghidra/feature/vt/gui/actions/AutoVersionTrackingTask.java b/Ghidra/Features/VersionTracking/src/main/java/ghidra/feature/vt/gui/actions/AutoVersionTrackingTask.java
index 4aa0437ee0..d8b881aef8 100644
--- a/Ghidra/Features/VersionTracking/src/main/java/ghidra/feature/vt/gui/actions/AutoVersionTrackingTask.java
+++ b/Ghidra/Features/VersionTracking/src/main/java/ghidra/feature/vt/gui/actions/AutoVersionTrackingTask.java
@@ -262,8 +262,7 @@ public class AutoVersionTrackingTask extends Task {
 				dupFunctionMinLen);
 
 			monitor.setPrefix(String.format(prefix, "Duplicate Function", ++count));
-			hasApplyErrors |=
-				correlateAndPossiblyApplyDuplicateFunctions(factory, vtOptions, monitor);
+			hasApplyErrors |= correlateAndPossiblyApplyDuplicateFunctions(factory, vtOptions, monitor);
 			monitor.doIncrementProgress();
 
 		}
@@ -299,8 +298,7 @@ public class AutoVersionTrackingTask extends Task {
 					VTAbstractReferenceProgramCorrelatorFactory.SIMILARITY_THRESHOLD, minScore);
 
 				monitor.setPrefix(String.format(prefix, "Data Reference", ++count));
-				hasApplyErrors =
-					hasApplyErrors | correlateAndPossiblyApply(factory, vtOptions, monitor);
+				hasApplyErrors |= correlateAndPossiblyApply(factory, vtOptions, monitor);
 				monitor.doIncrementProgress();
 
 				// Get the number of data and function matches again if this correlator ran
@@ -321,8 +319,7 @@ public class AutoVersionTrackingTask extends Task {
 				factory = new FunctionReferenceProgramCorrelatorFactory();
 
 				monitor.setPrefix(String.format(prefix, "Function Reference", ++count));
-				hasApplyErrors =
-					hasApplyErrors | correlateAndPossiblyApply(factory, vtOptions, monitor);
+				hasApplyErrors |= correlateAndPossiblyApply(factory, vtOptions, monitor);
 				monitor.doIncrementProgress();
 
 				// Get the number of data and function matches again if this correlator ran
@@ -342,8 +339,7 @@ public class AutoVersionTrackingTask extends Task {
 					VTAbstractReferenceProgramCorrelatorFactory.SIMILARITY_THRESHOLD, minScore);
 
 				monitor.setPrefix(String.format(prefix, "Function and Data", ++count));
-				hasApplyErrors =
-					hasApplyErrors | correlateAndPossiblyApply(factory, vtOptions, monitor);
+				hasApplyErrors |= correlateAndPossiblyApply(factory, vtOptions, monitor);
 				monitor.doIncrementProgress();
 			}
 		}
@@ -360,8 +356,7 @@ public class AutoVersionTrackingTask extends Task {
 				toolOptions.getBoolean(VTOptionDefines.APPLY_IMPLIED_MATCHES_OPTION, true);
 			int minVotes = toolOptions.getInt(VTOptionDefines.MIN_VOTES_OPTION, 2);
 			int maxConflicts = toolOptions.getInt(VTOptionDefines.MAX_CONFLICTS_OPTION, 2);
-			hasApplyErrors = hasApplyErrors |
-				createImpliedMatches(applyImpliedMatches, minVotes, maxConflicts, monitor);
+			hasApplyErrors |= createImpliedMatches(applyImpliedMatches, minVotes, maxConflicts, monitor);
 		}
 
 		String applyMarkupStatus = " with no apply markup errors.";
diff --git a/Ghidra/Framework/DB/src/main/java/db/buffers/BufferMgr.java b/Ghidra/Framework/DB/src/main/java/db/buffers/BufferMgr.java
index 3697483c3e..c93511dc76 100644
--- a/Ghidra/Framework/DB/src/main/java/db/buffers/BufferMgr.java
+++ b/Ghidra/Framework/DB/src/main/java/db/buffers/BufferMgr.java
@@ -1857,7 +1857,7 @@ public class BufferMgr {
 					// Monitor not supported for remote saves
 					monitor.setCancelEnabled(false);
 					outFile = ((ManagedBufferFile) sourceFile).getSaveFile();
-					monitor.setCancelEnabled(oldCancelState & !monitor.isCancelled());
+					monitor.setCancelEnabled(oldCancelState && !monitor.isCancelled());
 				}
 				if (outFile == null) {
 					throw new IOException("Save not allowed");
@@ -1889,7 +1889,7 @@ public class BufferMgr {
 				}
 				finally {
 					((ManagedBufferFile) sourceFile).saveCompleted(success);
-					monitor.setCancelEnabled(oldCancelState & !monitor.isCancelled());
+					monitor.setCancelEnabled(oldCancelState && !monitor.isCancelled());
 				}
 
 				doSetSourceFile(outFile);
diff --git a/Ghidra/Framework/Docking/src/main/java/docking/options/editor/GhidraColorChooser.java b/Ghidra/Framework/Docking/src/main/java/docking/options/editor/GhidraColorChooser.java
index bf6768292e..3b62eab54d 100644
--- a/Ghidra/Framework/Docking/src/main/java/docking/options/editor/GhidraColorChooser.java
+++ b/Ghidra/Framework/Docking/src/main/java/docking/options/editor/GhidraColorChooser.java
@@ -205,7 +205,7 @@ public class GhidraColorChooser extends JColorChooser {
 	private SettableColorSwatchChooserPanel getCustomSwatchPanel() {
 
 		AbstractColorChooserPanel[] chooserPanels = getChooserPanels();
-		if (chooserPanels != null & chooserPanels.length > 1) {
+		if (chooserPanels != null && chooserPanels.length > 1) {
 			AbstractColorChooserPanel panel = chooserPanels[0];
 			if (panel instanceof SettableColorSwatchChooserPanel) {
 				return (SettableColorSwatchChooserPanel) panel;
diff --git a/Ghidra/Framework/Project/src/main/java/ghidra/util/exception/VersionException.java b/Ghidra/Framework/Project/src/main/java/ghidra/util/exception/VersionException.java
index 65bfdc8b0f..d8697c1675 100644
--- a/Ghidra/Framework/Project/src/main/java/ghidra/util/exception/VersionException.java
+++ b/Ghidra/Framework/Project/src/main/java/ghidra/util/exception/VersionException.java
@@ -120,7 +120,7 @@ public class VersionException extends UsrException {
 		if (ve != null) {
 			if (this.versionIndicator != ve.versionIndicator)
 				versionIndicator = UNKNOWN_VERSION;
-			upgradeable = upgradeable & ve.upgradeable;
+			upgradeable = upgradeable && ve.upgradeable;
 			if (detailMessage == null) {
 				detailMessage = ve.detailMessage;
 			}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/assembler/sleigh/parse/AssemblyParseMachine.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/assembler/sleigh/parse/AssemblyParseMachine.java
index d342b03402..d2d5e5f16c 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/assembler/sleigh/parse/AssemblyParseMachine.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/assembler/sleigh/parse/AssemblyParseMachine.java
@@ -167,10 +167,10 @@ public class AssemblyParseMachine implements Comparable<AssemblyParseMachine> {
 		if (result != 0) {
 			return result;
 		}
-		if (this.accepted & !that.accepted) {
+		if (this.accepted && !that.accepted) {
 			return 1;
 		}
-		if (!this.accepted & that.accepted) {
+		if (!this.accepted && that.accepted) {
 			return -1;
 		}
 		result = (this.error - that.error);
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/core/analysis/ReferenceAddressPair.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/core/analysis/ReferenceAddressPair.java
index 95626e9d3f..948d577d20 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/core/analysis/ReferenceAddressPair.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/core/analysis/ReferenceAddressPair.java
@@ -54,6 +54,6 @@ public class ReferenceAddressPair {
 			return false;
 		}
 		ReferenceAddressPair otherPair = (ReferenceAddressPair) obj;
-		return source.equals(otherPair.source) & destination.equals(otherPair.destination);
+		return source.equals(otherPair.source) && destination.equals(otherPair.destination);
 	}
 }
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/util/PseudoDisassembler.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/util/PseudoDisassembler.java
index 45b09b5962..d6c5ede504 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/util/PseudoDisassembler.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/util/PseudoDisassembler.java
@@ -806,7 +806,7 @@ public class PseudoDisassembler {
 							// if jump target is the same as the fallthru
 							// Instructions with delay slots are allowed.
 							if (fallThru != null &&
-								address.equals(fallThru) & !instr.getPrototype().hasDelaySlots()) {
+                                    address.equals(fallThru) && !instr.getPrototype().hasDelaySlots()) {
 								return false;
 							}
 							// if this code jumps to an existing function, allow it
@@ -917,16 +917,13 @@ public class PseudoDisassembler {
 			if (program != null) {
 				func = program.getFunctionManager().getFunctionAt(flows[0]);
 			}
-		}
-		else {
-			if (flowType.isComputed() & !flowType.isConditional()) {
-				for (int opIndex = 0; opIndex < instr.getNumOperands(); opIndex++) {
-					RefType operandRefType = instr.getOperandRefType(opIndex);
-					if (operandRefType.isIndirect()) {
-						Address addr = instr.getAddress(opIndex);
-						if (addr != null) {
-							func = program.getFunctionManager().getReferencedFunction(addr);
-						}
+		} else if (flowType.isComputed() && !flowType.isConditional()) {
+			for (int opIndex = 0; opIndex < instr.getNumOperands(); opIndex++) {
+				RefType operandRefType = instr.getOperandRefType(opIndex);
+				if (operandRefType.isIndirect()) {
+					Address addr = instr.getAddress(opIndex);
+					if (addr != null) {
+						func = program.getFunctionManager().getReferencedFunction(addr);
 					}
 				}
 			}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/floatformat/FloatFormat.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/floatformat/FloatFormat.java
index 6a6e050ded..3484d62c6f 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/floatformat/FloatFormat.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/floatformat/FloatFormat.java
@@ -938,7 +938,7 @@ public class FloatFormat {
 	public BigInteger opNotEqual(BigInteger a, BigInteger b) { // a != b
 		BigFloat fa = decodeBigFloat(a);
 		BigFloat fb = decodeBigFloat(b);
-		if (fa.isNaN() | fb.isNaN()) {
+		if (fa.isNaN() || fb.isNaN()) {
 			return BigInteger.ONE;
 		}
 		BigInteger res = SystemUtilities.isEqual(fa, fb) ? BigInteger.ZERO : BigInteger.ONE;
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/FunctionPrototype.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/FunctionPrototype.java
index e7c84c2e7b..0bda227ef4 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/FunctionPrototype.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/FunctionPrototype.java
@@ -157,7 +157,7 @@ public class FunctionPrototype {
 			(f.getSignatureSource() != SourceType.DEFAULT) && f.getParameterCount() == 0;
 		dotdotdot = f.hasVarArgs();
 		isinline = f.isInline();
-		noreturn = f.hasNoReturn() | isNoReturnInjection(f, injectname);
+		noreturn = f.hasNoReturn() || isNoReturnInjection(f, injectname);
 		custom = f.hasCustomVariableStorage();
 
 		// This assumes that the Purge is the value popped from the excluding normal
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/util/OldLanguage.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/util/OldLanguage.java
index 7c3fee1822..91b443d3b3 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/util/OldLanguage.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/util/OldLanguage.java
@@ -328,8 +328,8 @@ class OldLanguage implements Language {
 			throw new SAXException(
 				"Missing required " + element.getName() + " '" + name + "' attribute");
 		}
-		boolean val = valStr.equalsIgnoreCase("yes") | valStr.equalsIgnoreCase("true");
-		if (!val && !valStr.equalsIgnoreCase("no") & !valStr.equalsIgnoreCase("false")) {
+		boolean val = "yes".equalsIgnoreCase(valStr) || "true".equalsIgnoreCase(valStr);
+		if (!val && !"no".equalsIgnoreCase(valStr) && !"false".equalsIgnoreCase(valStr)) {
 			throw new SAXException(
 				"invalid boolean attribute value " + name + "=\"" + valStr + "\"");
 		}
diff --git a/Ghidra/Processors/MIPS/src/main/java/ghidra/app/plugin/core/analysis/MipsAddressAnalyzer.java b/Ghidra/Processors/MIPS/src/main/java/ghidra/app/plugin/core/analysis/MipsAddressAnalyzer.java
index 53cb4da070..381bc28372 100644
--- a/Ghidra/Processors/MIPS/src/main/java/ghidra/app/plugin/core/analysis/MipsAddressAnalyzer.java
+++ b/Ghidra/Processors/MIPS/src/main/java/ghidra/app/plugin/core/analysis/MipsAddressAnalyzer.java
@@ -393,7 +393,8 @@ public class MipsAddressAnalyzer extends ConstantPropagationAnalyzer {
 					return false;
 				}
 
-				if ((refType.isJump() || refType.isCall()) & refType.isComputed()) {
+				if ((refType.isJump() || refType.isCall()) && refType.isComputed()) {
+					//if (refType.isJump() || refType.isCall()) {
 					addr = mipsExtDisassembly(program, instr, context, address, monitor);
 					if (addr == null) {
 						addr = address;
diff --git a/Ghidra/Processors/MIPS/src/main/java/ghidra/app/plugin/core/analysis/MipsPreAnalyzer.java b/Ghidra/Processors/MIPS/src/main/java/ghidra/app/plugin/core/analysis/MipsPreAnalyzer.java
index 69089f28e0..7660e7263e 100644
--- a/Ghidra/Processors/MIPS/src/main/java/ghidra/app/plugin/core/analysis/MipsPreAnalyzer.java
+++ b/Ghidra/Processors/MIPS/src/main/java/ghidra/app/plugin/core/analysis/MipsPreAnalyzer.java
@@ -451,7 +451,7 @@ public class MipsPreAnalyzer extends AbstractAnalyzer {
 		}
 
 		// Check base and destination registers
-		if (base1.equals(base2) && (destReg1.equals(destReg2) | destReg2.equals(alternateReg))) {
+		if (base1.equals(base2) && (destReg1.equals(destReg2) || destReg2.equals(alternateReg))) {
 			// Match found
 			return curr_inst;
 		}
-- 
2.45.1

