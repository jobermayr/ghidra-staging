From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nathan Schulte <nmschulte@desmas.net>
Date: Sat, 14 Oct 2023 18:28:45 -0500
Subject: [PATCH] 5881: fix CParser diagnostic output (_CParser.out)

CParser: fix diagnostic output path
"path separator" is for separating paths (e.g. a sequence of file paths;
also system property "path.separator")
"name separator" is for separating files (e.g. a hierarchy of files;
also system property "file.separator")

CParser: fix message formatting (colon/space)

CParser: color ignored items as uneditable

CParser: use system default file separator

CParser: tidy whitespace
---
 .../ghidra/app/plugin/core/cparser/ParseDialog.java  |  1 +
 .../java/ghidra/app/util/cparser/C/CParserUtils.java | 12 ++++++------
 2 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/ParseDialog.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/ParseDialog.java
index 6a42cff0b..cb4ad7318 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/ParseDialog.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/ParseDialog.java
@@ -228,6 +228,7 @@ class ParseDialog extends ReusableDialogComponentProvider {
 				pathName = (pathName == null ? "" : pathName.trim());
 
 				if (pathName.length() == 0 || pathName.startsWith("#")) {
+					label.setForeground(getUneditableForegroundColor(data.isSelected()));
 					return label;
 				}
 
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/cparser/C/CParserUtils.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/cparser/C/CParserUtils.java
index d02516198..97d240935 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/cparser/C/CParserUtils.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/cparser/C/CParserUtils.java
@@ -497,7 +497,7 @@ public class CParserUtils {
 				e.printStackTrace();
 			}
         }
-        
+
         return parseHeaderFiles(openDTMgrs, filenames, includePaths, args, existingDTMgr, monitor);
     }
 	
@@ -550,7 +550,7 @@ public class CParserUtils {
 		String fName = dtMgr.getName();
 		
 		// make a path to tmpdir with name of data type manager
-		String path = System.getProperty("java.io.tmpdir") + File.pathSeparator + fName;
+		String path = System.getProperty("java.io.tmpdir") + File.separator + fName;
 		// if file data type manager, use path to .gdt file
 		if (dtMgr instanceof FileDataTypeManager) {
 			path = ((FileDataTypeManager) dtMgr).getPath();
@@ -587,7 +587,7 @@ public class CParserUtils {
 						continue;
 					}
 					for (String element : children) {
-						File child = new File(file.getAbsolutePath() + "/" + element);
+						File child = new File(file.getAbsolutePath() + File.separator + element);
 						if (child.getName().endsWith(".h")) {
 							parseFile(child.getAbsolutePath(), monitor, cpp);
 						}
@@ -643,11 +643,11 @@ public class CParserUtils {
 			throws ghidra.app.util.cparser.CPP.ParseException {
 		monitor.setMessage("PreProcessing " + filename);
 		try {
-			Msg.info(CParserUtils.class, "parse " + filename);
+			Msg.info(CParserUtils.class, "parse: " + filename);
 			cpp.parse(filename);
 		}
 		catch (Throwable e) {
-			Msg.error(CParserUtils.class, "Parsing file :" + filename);
+			Msg.error(CParserUtils.class, "Parsing file: " + filename);
 			Msg.error(CParserUtils.class, "Unexpected Exception: " + e.getMessage(), e);
 
 			throw new ghidra.app.util.cparser.CPP.ParseException(e.getMessage());
@@ -708,7 +708,7 @@ public class CParserUtils {
 	// the error message contains an 'after' text, which is the text that comes after the
 	// invalid text
 	private static int getTokenMgrErrorIndexOfInvalidText(String message, String functionString) {
-		String invalidCharMarker = "after : ";
+		String invalidCharMarker = "after: ";
 		int index = message.indexOf(invalidCharMarker);
 		if (index >= 0) {
 			String remainder = message.substring(index + invalidCharMarker.length());
-- 
2.43.0

