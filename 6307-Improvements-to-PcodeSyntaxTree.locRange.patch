From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: sad-dev <55233728+sad-dev@users.noreply.github.com>
Date: Tue, 12 Mar 2024 10:58:37 +0800
Subject: [PATCH] 6307: Improvements to PcodeSyntaxTree.locRange

Fix VarnodeBank.locRange(AddressSpace) not returning negative addresses

Add helper method PcodeSyntaxTree.locRange(Address min, Address max)

Edit copy pasted function description
---
 .../ghidra/program/model/pcode/PcodeSyntaxTree.java    | 10 ++++++++++
 .../java/ghidra/program/model/pcode/VarnodeBank.java   |  9 ++++++++-
 2 files changed, 18 insertions(+), 1 deletion(-)

diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PcodeSyntaxTree.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PcodeSyntaxTree.java
index 6a362e5ca4..0f3066c147 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PcodeSyntaxTree.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PcodeSyntaxTree.java
@@ -173,6 +173,16 @@ public class PcodeSyntaxTree implements PcodeFactory {
 		return vbank.locRange(addr);
 	}
 
+	/**
+	 * return all Varnodes bounded between two Addresses
+	 * @param min -- Minimum Address of Varnodes
+	 * @param max -- Maximum Address of Varnodes
+	 * @return -- Iterator to Varnodes
+	 */
+	public Iterator<VarnodeAST> getVarnodes(Address min, Address max) {
+		return vbank.locRange(min, max);
+	}
+
 	/**
 	 * return all Varnodes of a given size that start at a given Address
 	 * @param sz -- Size of Varnodes
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/VarnodeBank.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/VarnodeBank.java
index de0d875c8a..ec520160be 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/VarnodeBank.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/VarnodeBank.java
@@ -210,7 +210,7 @@ public class VarnodeBank {
 	}
 	
 	public Iterator<VarnodeAST> locRange(AddressSpace spaceid) {
-		VarnodeAST searchvn1 = new VarnodeAST(spaceid.getAddress(0),0,0);
+		VarnodeAST searchvn1 = new VarnodeAST(spaceid.getMinAddress(),0,0);
 		searchvn1.setInput(true);
 		VarnodeAST searchvn2 = new VarnodeAST(spaceid.getMaxAddress(), Integer.MAX_VALUE, 0);
 		return locTree.subSet(searchvn1, searchvn2).iterator();
@@ -223,6 +223,13 @@ public class VarnodeBank {
 		searchvn2.setInput(true);
 		return locTree.subSet(searchvn1,searchvn2).iterator();
 	}
+
+	public Iterator<VarnodeAST> locRange(Address min, Address max) {
+		VarnodeAST searchvn1 = new VarnodeAST(min,0,0);
+		searchvn1.setInput(true);
+		VarnodeAST searchvn2 = new VarnodeAST(max, Integer.MAX_VALUE,0);
+		return locTree.subSet(searchvn1,searchvn2).iterator();
+	}
 	
 	public Iterator<VarnodeAST> locRange(int sz,Address addr) {
 		VarnodeAST searchvn1 = new VarnodeAST(addr,sz,0);
-- 
2.45.1

