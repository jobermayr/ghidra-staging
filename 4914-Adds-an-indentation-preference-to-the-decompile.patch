From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Johannes Obermayr <johannesobermayr@gmx.de>
Date: Sun, 22 Jan 2023 15:06:04 +0100
Subject: [PATCH] 4914: Adds an indentation preference to the decompiler output

Fixes: #81, #1240, #1937
Obsoletes: #1938

This change adds support for four indentation styles:

K&R style [with tracking],

while (x == y) { [commented out: z]
    something();
    somethingelse();
} [z commented out]

Allman style [with tracking],

while (x == y) [commented out: z]
{
    something();
    somethingelse();
} [commented out: z]

The default style is K&R.
---
 .../Decompiler/src/decompile/cpp/block.hh     |   3 +
 .../Decompiler/src/decompile/cpp/options.cc   |  13 ++
 .../Decompiler/src/decompile/cpp/options.hh   |   6 +
 .../Decompiler/src/decompile/cpp/printc.cc    | 155 +++++++++++++++---
 .../Decompiler/src/decompile/cpp/printc.hh    |  14 ++
 .../src/decompile/cpp/printlanguage.cc        |  11 ++
 .../src/decompile/cpp/printlanguage.hh        |   6 +
 .../app/decompiler/DecompileOptions.java      |  52 ++++++
 8 files changed, 237 insertions(+), 23 deletions(-)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/block.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/block.hh
index 0bd3b6cc4..51a390d4d 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/block.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/block.hh
@@ -122,6 +122,7 @@ private:
   FlowBlock *immed_dom;		///< Immediate dominating block
   FlowBlock *copymap;		///< Back reference to a BlockCopy of \b this
   int4 index;			///< Reference index for this block (reverse post order)
+  int4 printIndex = 0;		///< Print index for this block
   int4 visitcount;		///< A count of visits of this node for various algorithms
   int4 numdesc;			///< Number of descendants of this block in spanning tree (+1)
   vector<BlockEdge> intothis;	///< Blocks which (can) fall into this block
@@ -158,6 +159,8 @@ public:
   FlowBlock(void);				///< Construct a block with no edges
   virtual ~FlowBlock(void) {}			///< Destructor
   int4 getIndex(void) const { return index; }	///< Get the index assigned to \b this block
+  int4 getPrintIndex(void) const { return printIndex; }		///< Get the unique print index assigned to \b this block
+  void setPrintIndex(int4 printindex) { printIndex = printindex; } ///< Set the unique print index for \b this block
   FlowBlock *getParent(void) { return parent; }	///< Get the parent FlowBlock of \b this
   FlowBlock *getImmedDom(void) const { return immed_dom; }	///< Get the immediate dominator FlowBlock
   FlowBlock *getCopyMap(void) const { return copymap; }		///< Get the mapped FlowBlock
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/options.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/options.cc
index 632cbf64d..b8c267506 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/options.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/options.cc
@@ -120,6 +120,7 @@ OptionDatabase::OptionDatabase(Architecture *g)
   registerOption(new OptionCommentStyle());
   registerOption(new OptionCommentHeader());
   registerOption(new OptionCommentInstruction());
+  registerOption(new OptionIndentationStyle());
   registerOption(new OptionIntegerFormat());
   registerOption(new OptionCurrentAction());
   registerOption(new OptionAllowContextSet());
@@ -597,6 +598,18 @@ string OptionCommentInstruction::apply(Architecture *glb,const string &p1,const
   return "Instruction comment type "+p1+" turned "+prop;
 }
 
+/// \class OptionIndentationStyle
+/// \brief Set the style of indentation emitted by the decompiler
+///
+/// The first parameter is either "allman", or "kr", other styles could be
+/// supported in the future
+string OptionIndentationStyle::apply(Architecture *glb,const string &p1,const string &p2,const string &p3) const
+
+{
+	glb->print->setIndentationStyle(p1);
+	return "Indentation style set to "+p1;
+}
+
 /// \class OptionIntegerFormat
 /// \brief Set the formatting strategy used by the decompiler to emit integers
 ///
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/options.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/options.hh
index f9d519ea0..ca36a3197 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/options.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/options.hh
@@ -241,6 +241,12 @@ public:
  virtual string apply(Architecture *glb,const string &p1,const string &p2,const string &p3) const;
 };
 
+class OptionIndentationStyle : public ArchOption {
+public:
+  OptionIndentationStyle(void) { name = "indentationstyle"; }	///< Constructor
+  virtual string apply(Architecture *glb,const string &p1,const string &p2,const string &p3) const;
+};
+
 class OptionIntegerFormat : public ArchOption {
 public:
   OptionIntegerFormat(void) { name = "integerformat"; }	///< Constructor
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
index 5f4c037bb..01a99e4b9 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
@@ -106,6 +106,8 @@ const string PrintC::KEYWORD_RETURN = "return";
 const string PrintC::KEYWORD_NEW = "new";
 const string PrintC::typePointerRelToken = "ADJ";
 
+int4 printIndex = 0;
+
 // Constructing this registers the capability
 PrintCCapability PrintCCapability::printCCapability;
 
@@ -1578,6 +1580,9 @@ void PrintC::resetDefaultsPrintC(void)
   option_nocasts = false;
   option_NULL = false;
   option_unplaced = false;
+  option_indentationStyle = indentation_style_kr;
+  option_indentationStyleTracking = false;
+  printIndex = 0;
   setCStyleComments();
 }
 
@@ -2108,7 +2113,7 @@ void PrintC::emitStructDefinition(const TypeStruct *ct)
   emit->print("typedef struct",EmitMarkup::keyword_color);
   emit->spaces(1);
   int4 id = emit->startIndent();
-  emit->print(OPEN_CURLY);
+  emitFormattedStartBrace(id,0);
   emit->tagLine();
   iter = ct->beginField();
   while(iter!=ct->endField()) {
@@ -2123,7 +2128,7 @@ void PrintC::emitStructDefinition(const TypeStruct *ct)
   }
   emit->stopIndent(id);
   emit->tagLine();
-  emit->print(CLOSE_CURLY);
+  emitFormattedCloseBrace(0);
   emit->spaces(1);
   emit->print(ct->getDisplayName());
   emit->print(SEMICOLON);
@@ -2147,7 +2152,7 @@ void PrintC::emitEnumDefinition(const TypeEnum *ct)
   emit->print("typedef enum",EmitMarkup::keyword_color);
   emit->spaces(1);
   int4 id = emit->startIndent();
-  emit->print(OPEN_CURLY);
+  emitFormattedStartBrace(id,0);
   emit->tagLine();
   iter = ct->beginEnum();
   while(iter!=ct->endEnum()) {
@@ -2165,7 +2170,7 @@ void PrintC::emitEnumDefinition(const TypeEnum *ct)
   popMod();
   emit->stopIndent(id);
   emit->tagLine();
-  emit->print(CLOSE_CURLY);
+  emitFormattedCloseBrace(0);
   emit->spaces(1);
   emit->print(ct->getDisplayName());
   emit->print(SEMICOLON);
@@ -2345,6 +2350,29 @@ void PrintC::setCommentStyle(const string &nm)
     throw LowlevelError("Unknown comment style. Use \"c\" or \"cplusplus\"");
 }
 
+void PrintC::setIndentationStyle(const string &nm)
+
+{
+  if (nm=="kr") {
+    option_indentationStyle = indentation_style_kr;
+    option_indentationStyleTracking = false;
+  }
+  else if (nm=="kr_track") {
+    option_indentationStyle = indentation_style_kr;
+    option_indentationStyleTracking = true;
+  }
+  else if (nm=="allman") {
+    option_indentationStyle = indentation_style_allman;
+    option_indentationStyleTracking = false;
+  }
+  else if (nm=="allman_track") {
+    option_indentationStyle = indentation_style_allman;
+    option_indentationStyleTracking = true;
+  }
+  else
+    throw LowlevelError("Unknown indentation style. Use \"kr\", \"kr_track\", \"allman\" or \"allman_track\"");
+}
+
 /// \brief Emit the definition of the given data-type
 ///
 /// This is currently limited to a 'struct' or 'enum' definitions. The
@@ -2680,6 +2708,8 @@ void PrintC::docFunction(const Funcdata *fd)
     emit->tagLine();
     emit->tagLine();
     int4 id = emit->startIndent();
+    // Intentionally not using a formatted start brace
+    // Currently supported indentation styles both place a function's opening brace on a new line
     emit->print(OPEN_CURLY);
     emitLocalVarDecls(fd);
     if (isSet(flat))
@@ -2903,6 +2933,9 @@ void PendingBrace::callback(Emit *emit)
 
 {
   emit->print(PrintC::OPEN_CURLY);
+  if (this->comment.length() > 0) {
+    emit->print(this->comment,EmitMarkup::comment_color);
+  }
   indentId = emit->startIndent();
 }
 
@@ -2912,6 +2945,9 @@ void PrintC::emitBlockIf(const BlockIf *bl)
   const PcodeOp *op;
   PendingBrace pendingBrace;
 
+  int4 blockPrintIndex = bl->getPrintIndex();
+  if (option_indentationStyleTracking)
+    pendingBrace.setComment(PrintLanguage::makeComment(to_string(blockPrintIndex)));
   if (isSet(pending_brace))
     emit->setPendingPrint(&pendingBrace);
 
@@ -2928,6 +2964,7 @@ void PrintC::emitBlockIf(const BlockIf *bl)
   condBlock->emit(this);
   popMod();
   emitCommentBlockTree(condBlock);
+
   if (emit->hasPendingPrint(&pendingBrace))	// If we issued a brace but it did not emit
     emit->cancelPendingPrint();			// Cancel the brace in order to have "else if" syntax
   else
@@ -2948,18 +2985,22 @@ void PrintC::emitBlockIf(const BlockIf *bl)
     setMod(no_branch);
     emit->spaces(1);
     int4 id = emit->startIndent();
-    emit->print(OPEN_CURLY);
+    printIndex++;
+    ((FlowBlock*)bl)->setPrintIndex(printIndex);
+    emitFormattedStartBrace(id,printIndex);
     int4 id1 = emit->beginBlock(bl->getBlock(1));
     bl->getBlock(1)->emit(this);
     emit->endBlock(id1);
     emit->stopIndent(id);
     emit->tagLine();
-    emit->print(CLOSE_CURLY);
+    emitFormattedCloseBrace(bl->getPrintIndex());
     if (bl->getSize() == 3) {
       emit->tagLine();
       emit->print(KEYWORD_ELSE,EmitMarkup::keyword_color);
       emit->spaces(1);
       FlowBlock *elseBlock = bl->getBlock(2);
+      printIndex++;
+      elseBlock->setPrintIndex(printIndex);
       if (elseBlock->getType() == FlowBlock::t_if) {
 	// Attempt to merge the "else" and "if" syntax
 	setMod(pending_brace);
@@ -2969,13 +3010,16 @@ void PrintC::emitBlockIf(const BlockIf *bl)
       }
       else {
 	int4 id2 = emit->startIndent();
-	emit->print(OPEN_CURLY);
+	// printIndex must be saved because printIndex or elseBlock->getPrintIndex()
+	// can be increased and emitFormattedCloseBrace could show wrong tracking info
+	int4 printIndex_ = printIndex;
+	emitFormattedStartBrace(id2,printIndex_);
 	int4 id3 = emit->beginBlock(elseBlock);
 	elseBlock->emit(this);
 	emit->endBlock(id3);
 	emit->stopIndent(id2);
 	emit->tagLine();
-	emit->print(CLOSE_CURLY);
+	emitFormattedCloseBrace(printIndex_);
       }
     }
   }
@@ -2983,7 +3027,7 @@ void PrintC::emitBlockIf(const BlockIf *bl)
   if (pendingBrace.getIndentId() >= 0) {
     emit->stopIndent(pendingBrace.getIndentId());
     emit->tagLine();
-    emit->print(CLOSE_CURLY);
+    emitFormattedCloseBrace(blockPrintIndex);
   }
 }
 
@@ -3030,14 +3074,16 @@ void PrintC::emitForLoop(const BlockWhileDo *bl)
   emit->closeParen(CLOSE_PAREN,id1);
   emit->spaces(1);
   indent = emit->startIndent();
-  emit->print(OPEN_CURLY);
+  printIndex++;
+  ((FlowBlock*)bl)->setPrintIndex(printIndex);
+  emitFormattedStartBrace(indent,printIndex);
   setMod(no_branch); // Dont print goto at bottom of clause
   int4 id2 = emit->beginBlock(bl->getBlock(1));
   bl->getBlock(1)->emit(this);
   emit->endBlock(id2);
   emit->stopIndent(indent);
   emit->tagLine();
-  emit->print(CLOSE_CURLY);
+  emitFormattedCloseBrace(bl->getPrintIndex());
   popMod();
 }
 
@@ -3071,7 +3117,9 @@ void PrintC::emitBlockWhileDo(const BlockWhileDo *bl)
     emit->closeParen(CLOSE_PAREN,id1);
     emit->spaces(1);
     indent = emit->startIndent();
-    emit->print(OPEN_CURLY);
+    printIndex++;
+    ((FlowBlock*)bl)->setPrintIndex(printIndex);
+    emitFormattedStartBrace(indent,printIndex);
     pushMod();
     setMod(no_branch);
     condBlock->emit(this);
@@ -3102,7 +3150,9 @@ void PrintC::emitBlockWhileDo(const BlockWhileDo *bl)
     emit->closeParen(CLOSE_PAREN,id1);
     emit->spaces(1);
     indent = emit->startIndent();
-    emit->print(OPEN_CURLY);
+    printIndex++;
+    ((FlowBlock*)condBlock)->setPrintIndex(printIndex);
+    emitFormattedStartBrace(indent,printIndex);
   }
   setMod(no_branch); // Dont print goto at bottom of clause
   int4 id2 = emit->beginBlock(bl->getBlock(1));
@@ -3110,8 +3160,8 @@ void PrintC::emitBlockWhileDo(const BlockWhileDo *bl)
   emit->endBlock(id2);
   emit->stopIndent(indent);
   emit->tagLine();
-  emit->print(CLOSE_CURLY);
   popMod();
+  emitFormattedCloseBrace(bl->getPrintIndex());
 }
 
 void PrintC::emitBlockDoWhile(const BlockDoWhile *bl)
@@ -3127,7 +3177,9 @@ void PrintC::emitBlockDoWhile(const BlockDoWhile *bl)
   emit->print(KEYWORD_DO,EmitMarkup::keyword_color);
   emit->spaces(1);
   int4 id = emit->startIndent();
-  emit->print(OPEN_CURLY);
+  printIndex++;
+  ((FlowBlock*)bl)->setPrintIndex(printIndex);
+  emitFormattedStartBrace(id,printIndex);
   pushMod();
   int4 id2 = emit->beginBlock(bl->getBlock(0));
   setMod(no_branch);
@@ -3145,6 +3197,9 @@ void PrintC::emitBlockDoWhile(const BlockDoWhile *bl)
   bl->getBlock(0)->emit(this);
   emit->print(SEMICOLON);
   popMod();
+  if (option_indentationStyleTracking) {
+    emit->print(PrintLanguage::makeComment(to_string(printIndex)),EmitMarkup::comment_color);
+  }
 }
 
 void PrintC::emitBlockInfLoop(const BlockInfLoop *bl)
@@ -3159,13 +3214,15 @@ void PrintC::emitBlockInfLoop(const BlockInfLoop *bl)
   emit->print(KEYWORD_DO,EmitMarkup::keyword_color);
   emit->spaces(1);
   int4 id = emit->startIndent();
-  emit->print(OPEN_CURLY);
+  printIndex++;
+  ((FlowBlock*)bl)->setPrintIndex(printIndex);
+  emitFormattedStartBrace(id,printIndex);
   int4 id1 = emit->beginBlock(bl->getBlock(0));
   bl->getBlock(0)->emit(this);
   emit->endBlock(id1);
   emit->stopIndent(id);
   emit->tagLine();
-  emit->print(CLOSE_CURLY);
+  emitFormattedCloseBrace(0);
   emit->spaces(1);
   op = bl->getBlock(0)->lastOp();
   emit->tagOp(KEYWORD_WHILE,EmitMarkup::keyword_color,op);
@@ -3176,6 +3233,9 @@ void PrintC::emitBlockInfLoop(const BlockInfLoop *bl)
   emit->closeParen(CLOSE_PAREN,id2);
   emit->print(SEMICOLON);
   popMod();
+  if (option_indentationStyleTracking) {
+    emit->print(PrintLanguage::makeComment(to_string(bl->getPrintIndex())),EmitMarkup::comment_color);
+  }
 }
 
 /// Given a \e switch block and an index indicating a particular \e case block,
@@ -3388,32 +3448,81 @@ void PrintC::emitBlockSwitch(const BlockSwitch *bl)
   bl->getSwitchBlock()->emit(this);
   popMod();
   emit->spaces(1);
-  emit->print(OPEN_CURLY);
+  printIndex++;
+  ((FlowBlock *)bl)->setPrintIndex(printIndex);
+  int id = emit->startIndent();
+  emitFormattedStartBrace(id,printIndex);
 
   for(int4 i=0;i<bl->getNumCaseBlocks();++i) {
     emitSwitchCase(i,bl);
-    int4 id = emit->startIndent();
+    int4 id2 = emit->startIndent();
     if (bl->getGotoType(i)!=0) {
       emit->tagLine();
       emitGotoStatement(bl->getBlock(0),bl->getCaseBlock(i),bl->getGotoType(i));
     }
     else {
       bl2 = bl->getCaseBlock(i);
-      int4 id2 = emit->beginBlock(bl2);
+      int4 id3 = emit->beginBlock(bl2);
       bl2->emit(this);
       if (bl->isExit(i)&&(i!=bl->getNumCaseBlocks()-1)) {	// Blocks that formally exit the switch
 	emit->tagLine();
 	emitGotoStatement(bl2,(const FlowBlock *)0,FlowBlock::f_break_goto); // need an explicit break statement
       }
-      emit->endBlock(id2);
+      emit->endBlock(id3);
     }
-    emit->stopIndent(id);
+    emit->stopIndent(id2);
   }
+  emit->stopIndent(id);
   emit->tagLine();
-  emit->print(CLOSE_CURLY);
+  emitFormattedCloseBrace(bl->getPrintIndex());
   popMod();
 }
 
+/// \brief Emits an opening brace according to the indentation style selected in options
+///
+/// \param indent is the current indent level
+/// \param index is the index of current starting block
+void PrintC::emitFormattedStartBrace(int4 indent,int4 index)
+
+{
+  string idString;
+  if (index && option_indentationStyleTracking)
+    idString = PrintLanguage::makeComment(to_string(index));
+  else
+    idString = "";
+  switch(option_indentationStyle) {
+  case indentation_style_allman:
+    // Reduce one layer of indentation, emit new line, emit opening brace, update new indentation
+    if (indent) {
+      emit->stopIndent(indent);
+    }
+    emit->tagLine();
+    emit->print(OPEN_CURLY);
+    emit->print(idString,EmitMarkup::comment_color);
+    emit->startIndent();
+    break;
+  case indentation_style_kr:
+    // Emit opening brace, indentation is unaffected
+    emit->print(OPEN_CURLY);
+    emit->print(idString,EmitMarkup::comment_color);
+    break;
+  default:
+    throw LowlevelError("Unknown indentation style");
+  }
+}
+
+/// \brief Emits an opening brace according to the indentation style selected in options
+///
+/// \param index is the index of current closing block
+void PrintC::emitFormattedCloseBrace(int4 index)
+
+{
+  string idString = PrintLanguage::makeComment(to_string(index));
+  emit->print(CLOSE_CURLY);
+  if (index && option_indentationStyleTracking)
+    emit->print(idString,EmitMarkup::comment_color);
+}
+
 /// \brief Create a generic function name base on the entry point address
 ///
 /// \param addr is the entry point address of the function
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh
index a8fe6ca95..9ebe88ad4 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh
@@ -64,6 +64,13 @@ struct PartialSymbolEntry {
 ///  - etc.
 class PrintC : public PrintLanguage {
 protected:
+  /// \brief Possible types of indentation style
+  enum indentation_style {
+    indentation_style_kr = 0,		/// K&R style indentation
+    indentation_style_kr_track = 1,	/// with tracking
+    indentation_style_allman = 2,	/// Allman styles indentation
+    indentation_style_allman_track = 3	/// with tracking
+  };
   static OpToken hidden;		///< Hidden functional (that may force parentheses)
   static OpToken scope;			///< The sub-scope/namespace operator
   static OpToken object_member;		///< The \e member operator
@@ -152,6 +159,8 @@ protected:
   bool option_nocasts;		///< Don't print a cast if \b true
   bool option_unplaced;		///< Set to \b true if we should display unplaced comments
   bool option_hide_exts;	///< Set to \b true if we should hide implied extension operations
+  indentation_style option_indentationStyle;  ///< Set to the prefered type of indentation style
+  bool option_indentationStyleTracking;       ///< Whether to track braces
   string nullToken;		///< Token to use for 'null'
   string sizeSuffix;		///< Characters to print to indicate a \e long integer token
   CommentSorter commsorter;	///< Container/organizer for comments in the current function
@@ -249,6 +258,7 @@ public:
   virtual void adjustTypeOperators(void);
   virtual void setCommentStyle(const string &nm);
   virtual void docTypeDefinitions(const TypeFactory *typegrp);
+  virtual void setIndentationStyle(const string &nm);
   virtual void docAllGlobals(void);
   virtual void docSingleGlobal(const Symbol *sym);
   virtual void docFunction(const Funcdata *fd);
@@ -264,6 +274,8 @@ public:
   virtual void emitBlockDoWhile(const BlockDoWhile *bl);
   virtual void emitBlockInfLoop(const BlockInfLoop *bl);
   virtual void emitBlockSwitch(const BlockSwitch *bl);
+  virtual void emitFormattedStartBrace(int4 indent,int4 index);
+  virtual void emitFormattedCloseBrace(int4 index);
 
   virtual void opCopy(const PcodeOp *op);
   virtual void opLoad(const PcodeOp *op);
@@ -346,9 +358,11 @@ public:
 /// The open brace can be canceled if the block decides it wants to use "else if" syntax.
 class PendingBrace : public PendPrint {
   int4 indentId;		///< Id associated with the new indent level
+  string comment;
 public:
   PendingBrace(void) { indentId = -1; }			///< Constructor
   int4 getIndentId(void) const { return indentId; }	///< If commands have been issued, returns the new indent level id.
+  void setComment(string str) { comment = str; }
   virtual void callback(Emit *emit);
 };
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.cc
index f0aff5294..5a5dff768 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.cc
@@ -699,6 +699,17 @@ void PrintLanguage::setFlat(bool val)
     mods &= ~flat;
 }
 
+string PrintLanguage::makeComment(string val)
+
+{
+  string ret;
+  ret.append(" ");
+  ret.append(commentstart);
+  ret.append(val);
+  ret.append(commentend);
+  return ret;
+}
+
 void PrintLanguage::resetDefaults(void)
 
 {
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh
index 04e835f95..f07ec6c1a 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh
@@ -460,6 +460,7 @@ public:
   bool emitsMarkup(void) const { return emit->emitsMarkup(); }		///< Does the low-level emitter, emit markup
   void setMarkup(bool val);						///< Set whether the low-level emitter, emits markup
   void setFlat(bool val);						///< Set whether nesting code structure should be emitted
+  std::string makeComment(std::string val);
 
   virtual void initializeFromArchitecture(void)=0;		///< Initialize architecture specific aspects of printer
   virtual void adjustTypeOperators(void)=0;			///< Set basic data-type information for p-code operators
@@ -474,6 +475,11 @@ public:
   /// \param nm is the configuration description
   virtual void setCommentStyle(const string &nm)=0;
 
+  /// \brief Set the indentation style used in the decompiler output
+  ///
+  /// \param nm is the configuration description
+  virtual void setIndentationStyle(const string &nm)=0;
+
   /// \brief Emit definitions of data-types
   ///
   /// \param typegrp is the container for the data-types that should be defined
diff --git a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/DecompileOptions.java b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/DecompileOptions.java
index e87426a76..cea2acfa3 100644
--- a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/DecompileOptions.java
+++ b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/DecompileOptions.java
@@ -310,6 +310,35 @@ public class DecompileOptions {
 	private final static boolean COMMENTHEAD_OPTIONDEFAULT = true;	// Must match PrintLanguage::resetDefaultsInternal
 	private boolean commentHeadInclude;
 
+	private final static String INDENTATIONSTYLE_OPTIONSTRING = "Display.Indentation style";
+	private final static String INDENTATIONSTYLE_OPTIONDESCRIPTION = "The indentation style to be used";
+
+	public enum IndentationStyleEnum {
+
+		KR("kr", "K&R style"), KR_track("kr_track", "K&R style with tracking"),
+		Allman("allman", "Allman style"), Allman_track("allman_track", "Allman style with tracking");
+
+		private String label;
+		private String optionString;
+
+		private IndentationStyleEnum(String optString, String label) {
+			this.label = label;
+			this.optionString = optString;
+		}
+
+		public String getOptionString() {
+			return optionString;
+		}
+
+		@Override
+		public String toString() {
+			return label;
+		}
+	}
+
+	private final static IndentationStyleEnum INDENTATIONSTYLE_OPTIONDEFAULT = IndentationStyleEnum.KR;
+	private IndentationStyleEnum indentationStyle;
+
 	public enum NamespaceStrategy {
 		Minimal("minimal", "Minimally"), All("all", "Always"), Never("none", "Never");
 
@@ -471,6 +500,7 @@ public class DecompileOptions {
 		commentWARNInclude = COMMENTWARN_OPTIONDEFAULT;
 		commentHeadInclude = COMMENTHEAD_OPTIONDEFAULT;
 		namespaceStrategy = NAMESPACE_OPTIONDEFAULT;
+		indentationStyle = INDENTATIONSTYLE_OPTIONDEFAULT;
 		integerFormat = INTEGERFORMAT_OPTIONDEFAULT;
 		displayLineNumbers = LINE_NUMBER_DEF;
 		displayLanguage = ProgramCompilerSpec.DECOMPILER_OUTPUT_DEF;
@@ -532,6 +562,7 @@ public class DecompileOptions {
 		commentWARNInclude = opt.getBoolean(COMMENTWARN_OPTIONSTRING, COMMENTWARN_OPTIONDEFAULT);
 		commentHeadInclude = opt.getBoolean(COMMENTHEAD_OPTIONSTRING, COMMENTHEAD_OPTIONDEFAULT);
 		namespaceStrategy = opt.getEnum(NAMESPACE_OPTIONSTRING, NAMESPACE_OPTIONDEFAULT);
+		indentationStyle = opt.getEnum(INDENTATIONSTYLE_OPTIONSTRING, INDENTATIONSTYLE_OPTIONDEFAULT);
 		integerFormat = opt.getEnum(INTEGERFORMAT_OPTIONSTRING, INTEGERFORMAT_OPTIONDEFAULT);
 
 		displayLineNumbers = opt.getBoolean(LINE_NUMBER_MSG, LINE_NUMBER_DEF);
@@ -686,6 +717,9 @@ public class DecompileOptions {
 		opt.registerOption(NAMESPACE_OPTIONSTRING, NAMESPACE_OPTIONDEFAULT,
 			new HelpLocation(HelpTopics.DECOMPILER, "DisplayNamespaces"),
 			NAMESPACE_OPTIONDESCRIPTION);
+		opt.registerOption(INDENTATIONSTYLE_OPTIONSTRING, INDENTATIONSTYLE_OPTIONDEFAULT,
+			new HelpLocation(HelpTopics.DECOMPILER, "IndendationStyle"),
+			INDENTATIONSTYLE_OPTIONDESCRIPTION);
 		opt.registerOption(INTEGERFORMAT_OPTIONSTRING, INTEGERFORMAT_OPTIONDEFAULT,
 			new HelpLocation(HelpTopics.DECOMPILER, "DisplayIntegerFormat"),
 			INTEGERFORMAT_OPTIONDESCRIPTION);
@@ -896,6 +930,9 @@ public class DecompileOptions {
 			appendOption(encoder, ELEM_JUMPTABLEMAX, Integer.toString(maxJumpTableEntries), "", "");
 		}
 		appendOption(encoder, ELEM_PROTOEVAL, protoEvalModel, "", "");
+		if (indentationStyle != INDENTATIONSTYLE_OPTIONDEFAULT) {
+			appendOption(encoder, ELEM_INDENTATIONSTYLE, indentationStyle.getOptionString(), "", "");
+		}
 		encoder.closeElement(ELEM_OPTIONSLIST);
 	}
 
@@ -1338,6 +1375,21 @@ public class DecompileOptions {
 		this.commentStyle = commentStyle;
 	}
 
+	/**
+	 * @return the style in which curly braces are printed in decompiler output
+	 */
+	public IndentationStyleEnum getIndentationStyle() {
+		return indentationStyle;
+	}
+
+	/**
+	 * Set the style in which curly braces are printed as part of decompiler output
+	 * @param indentationStyle is the new style to set
+	 */
+	public void setIndentationStyle(IndentationStyleEnum indentationStyle) {
+		this.indentationStyle = indentationStyle;
+	}
+
 	/**
 	 * Return the maximum number of decompiled function results that should be cached
 	 * by the controller of the decompiler process.
-- 
2.41.0

