From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: astrelsky <ajs222@njit.edu>
Date: Thu, 18 Jun 2020 14:53:06 -0400
Subject: [PATCH] 2004: Added Data Access Functionality GoToQuery

Added functionality to GoToQuery to access data

GoTo can now be performed through the data at the currentAddress
and users can dereference valid pointer fields to jump to the
referenced address.

GoTo component expression tests
---
 .../ghidra/app/util/navigation/GoToQuery.java | 149 +++++++++++++++++-
 .../GoToAddressLabelPluginTest.java           | 110 +++++++++++++
 2 files changed, 254 insertions(+), 5 deletions(-)

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/navigation/GoToQuery.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/navigation/GoToQuery.java
index 13be48e1dc..922e54e336 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/navigation/GoToQuery.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/navigation/GoToQuery.java
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -17,8 +17,9 @@ package ghidra.app.util.navigation;
 
 import java.awt.Component;
 import java.util.*;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
+import util.CollectionUtils;
+import java.util.regex.*;
+import java.util.stream.IntStream;
 
 import javax.swing.SwingUtilities;
 
@@ -37,6 +38,9 @@ import ghidra.framework.options.Options;
 import ghidra.framework.plugintool.Plugin;
 import ghidra.framework.plugintool.PluginTool;
 import ghidra.program.model.address.*;
+import ghidra.program.model.data.DataUtilities;
+import ghidra.program.model.listing.Data;
+import ghidra.program.model.listing.Listing;
 import ghidra.program.model.listing.Program;
 import ghidra.program.model.mem.Memory;
 import ghidra.program.model.mem.MemoryBlock;
@@ -44,12 +48,27 @@ import ghidra.program.model.symbol.*;
 import ghidra.program.util.AddressEvaluator;
 import ghidra.program.util.ProgramLocation;
 import ghidra.util.Msg;
+import ghidra.util.NumericUtilities;
 import ghidra.util.Swing;
 import ghidra.util.table.AddressArrayTableModel;
 import ghidra.util.table.GhidraProgramTableModel;
 import ghidra.util.task.TaskMonitor;
 
 public class GoToQuery {
+	/**
+	 * Matches the following:
+	 * [index] or this[index]
+	 * *[index] or *this[index]
+	 */
+	private static final Pattern ARRAY_COMPONENT_PATTERN =
+		Pattern.compile("\\*?(?:this)?(?:\\[((?:0x)?\\p{XDigit}+)\\])");
+
+	/**
+	 * Matches .field_name or ->field_name plus [index] if present
+	 * Groups: operator: 1, field: 2, index: 3
+	 */
+	private static final Pattern COMPONENT_PATTERN =
+		Pattern.compile("((?:->)|\\.)(\\w+)(?:\\[((?:0x)?\\p{XDigit}+)\\])?");
 
 	/**
 	 * Regex used for going to a file offset.  We expect something of the form <code>file(n)</code>,
@@ -108,7 +127,9 @@ public class GoToQuery {
 		if (processAddressExpression()) {
 			return true;
 		}
-
+		if (processComponentExpression()) {
+			return true;
+		}
 		if (processWildCard()) {
 			return true;
 		}
@@ -337,6 +358,124 @@ public class GoToQuery {
 		return false;
 	}
 
+	private boolean processComponentExpression() {
+		// check for defined data at the currentLocation
+		Program program = navigatable.getProgram();
+		Data data = DataUtilities.getDataAtLocation(navigatable.getLocation());
+		while (data != null && !(data.isArray() || data.isStructure())) {
+			data = data.getParent();
+		}
+		if (data == null) {
+			return false;
+		}
+
+		String queryInput = queryData.getQueryString();
+		data = doProcessComponentExpression(data, queryInput);
+		if (data == null) {
+			return false;
+		}
+
+		ProgramLocation loc;
+
+		// handle primary dereference '*' if present
+		if (queryInput.charAt(0) == '*') {
+			if (!data.isPointer()) {
+				return false;
+			}
+			loc = new ProgramLocation(program, (Address) data.getValue());
+		} else {
+			loc = new ProgramLocation(program, data.getAddress());
+		}
+
+		// perform goTo
+		boolean success = goTo(program, loc);
+		notifyListener(success);
+		return true;
+	}
+
+	private static Data getDataAt(Program program, Address address) {
+		Listing listing = program.getListing();
+		Data data = listing.getDataContaining(address);
+		while (data != null && !data.getAddress().equals(address)) {
+			data = data.getComponentAt((int) address.subtract(data.getAddress()));
+		}
+		return data;
+	}
+
+	private static Data doProcessComponentExpression(Data data, String queryInput) {
+		Matcher matcher = ARRAY_COMPONENT_PATTERN.matcher(queryInput);
+		boolean followPointers = false;
+		if (data.isArray() && matcher.lookingAt()) {
+			data = getArrayComponent(data, matcher.group(1));
+			followPointers = true;
+		}
+		matcher = COMPONENT_PATTERN.matcher(queryInput);
+		Iterator<MatchResult> results = matcher.results().iterator();
+		if (!results.hasNext()) {
+			// no match
+			return followPointers ? data : null;
+		}
+		for (MatchResult result : CollectionUtils.asIterable(results)) {
+			if (data == null) {
+				break;
+			}
+			data = processSubComponentExpression(data, result, followPointers);
+			followPointers = true;
+		}
+		return data;
+	}
+
+	private static Data processSubComponentExpression(Data data, MatchResult matcher,
+			boolean followPointer) {
+		Listing listing = data.getProgram().getListing();
+		// Named groups refused to cooperate
+		// Groups: operator: 1, field: 2, index: 3
+		if (followPointer && matcher.group(1).equals("->")) {
+			if (!data.isPointer()) {
+				return null;
+			}
+			data = listing.getDataAt((Address) data.getValue());
+		}
+		data = getComponent(data, matcher.group(2));
+		if (data != null) {
+			String index = matcher.group(3);
+			if (index != null) {
+				if (data.isPointer()) {
+					data = getDataAt(data.getProgram(), (Address) data.getValue());
+				}
+				data = getArrayComponent(data, index);
+			}
+		}
+		return data;
+	}
+
+	private static Data getArrayComponent(Data data, String index) {
+		if (data == null || !data.isArray()) {
+			return null;
+		}
+		try {
+			long value = NumericUtilities.parseLong(index);
+			if (value < 0 || value >= data.getNumComponents() || value > Integer.MAX_VALUE) {
+				return null;
+			}
+			return data.getComponent((int) value);
+		} catch (NumberFormatException e) {
+			return null;
+		}
+	}
+
+	private static Data getComponent(Data data, String name) {
+		if (data == null || !data.isStructure()) {
+			return null;
+		}
+		return IntStream.range(0, data.getNumComponents())
+			.mapToObj(data::getComponent)
+			.filter(d -> d.getFieldName() != null)
+			.filter(d -> d.getFieldName().equals(name))
+			.findFirst()
+			.orElse(null);
+	}
+
 	private QueryData cleanupQuery(Program program, QueryData qData) {
 		String input = qData.getQueryString();
 		int colonPosition = input.indexOf("::");
diff --git a/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/navigation/GoToAddressLabelPluginTest.java b/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/navigation/GoToAddressLabelPluginTest.java
index 87aeac4139..fbf60df848 100644
--- a/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/navigation/GoToAddressLabelPluginTest.java
+++ b/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/navigation/GoToAddressLabelPluginTest.java
@@ -851,10 +851,99 @@ public class GoToAddressLabelPluginTest extends AbstractGhidraHeadedIntegrationT
 		assertFalse("Expected goto to succeed and dialog to be gone", dialog.isShowing());
 	}
 
+	@Test
+	public void testComponentExpression() throws Exception {
+		// vector start "0x1002100"
+		// array start "0x1002200"
+
+		// These are for simplicity
+		String first = "0x01002100";
+		String last = "0x01002104";
+		String end = "0x01002108";
+		String element0 = "0x01002200";
+		String element1 = "0x01002204";
+
+		loadProgram("x86");
+
+		ProgramLocation vector = new ProgramLocation(program, addr(first));
+		ProgramLocation array = new ProgramLocation(program, addr(element0));
+
+		cbPlugin.goTo(vector);
+		setText("entry");
+		performOkCallback();
+		assertEquals(
+			"Component expression interfered with another expression type",
+			addr("0x1006420"), cbPlugin.getCurrentAddress());
+
+		cbPlugin.goTo(vector);
+		setText("this.last");
+		performOkCallback();
+		assertEquals("Failed to goto this.last", addr(last), cbPlugin.getCurrentAddress());
+
+		cbPlugin.goTo(vector);
+		setText("this->end");
+		performOkCallback();
+		assertEquals("Failed to goto this->end", addr(end), cbPlugin.getCurrentAddress());
+
+		cbPlugin.goTo(vector);
+		setText("*this->first");
+		performOkCallback();
+		assertEquals("Failed to goto *this->first", addr(element0), cbPlugin.getCurrentAddress());
+
+		cbPlugin.goTo(vector);
+		setText("this->first[1]");
+		performOkCallback();
+		assertEquals(
+			"Failed to goto this->first[1]", addr(element1), cbPlugin.getCurrentAddress());
+
+		cbPlugin.goTo(vector);
+		setText("this->first[0]->end");
+		performOkCallback();
+		assertEquals(
+			"Failed to goto this->first[0]->end", addr(end), cbPlugin.getCurrentAddress());
+
+		cbPlugin.goTo(vector);
+		setText("this->first[0]->first[0]");
+		performOkCallback();
+		assertEquals(
+			"Failed to goto this->first[0]->first[0]",
+			addr(element0), cbPlugin.getCurrentAddress());
+
+		// dereference null check
+		cbPlugin.goTo(vector);
+		setText("*this->first[0]->first[3]");
+		performOkCallback();
+		assertEquals("No results for *this->first[0]->first[3]", dialog.getStatusText());
+
+		cbPlugin.goTo(array);
+		setText("[1]");
+		performOkCallback();
+		assertEquals("Failed to goto [1]", addr(element1), cbPlugin.getCurrentAddress());
+
+		cbPlugin.goTo(array);
+		setText("this[1]");
+		performOkCallback();
+		assertEquals("Failed to goto this[1]", addr(element1), cbPlugin.getCurrentAddress());
+
+		cbPlugin.goTo(array);
+		setText("[0]->first");
+		performOkCallback();
+		assertEquals("Failed to goto [0]->first", addr(first), cbPlugin.getCurrentAddress());
+
+		cbPlugin.goTo(array);
+		setText("this[0]->first");
+		performOkCallback();
+		assertEquals("Failed to goto this[0]->first", addr(first), cbPlugin.getCurrentAddress());
+	}
+
 //==================================================================================================
 // Private Methods
 //==================================================================================================
 
+	private void waitForGoTo(Address target, String msg) throws Exception {
+		assertEquals(msg, target, cbPlugin.getCurrentAddress());
+	}
+
 	private void setOptionToAllowNavigationToOtherOpenPrograms() throws Exception {
 		runSwing(() -> {
 			ToolOptions options = tool.getOptions("Navigation");
@@ -972,6 +1061,27 @@ public class GoToAddressLabelPluginTest extends AbstractGhidraHeadedIntegrationT
 			f.addLocalVariable(var, SourceType.USER_DEFINED);
 		});
 
+		// data for component expression testing
+		Structure struct = new StructureDataType("vector", 0);
+		struct.add(PointerDataType.dataType, "first", null);
+		struct.add(PointerDataType.dataType, "last", null);
+		struct.add(PointerDataType.dataType, "end", null);
+
+		// vector data
+		builder.setBytes("0x01002100", "00 22 00 01");
+		builder.setBytes("0x01002104", "0c 22 00 01");
+		builder.setBytes("0x01002108", "10 22 00 01");
+
+		// Data for array of 3 pointers with a final null pointer
+		// Each points back to a corresponding vector field.
+		Array array = new ArrayDataType(PointerDataType.dataType, 4, -1);
+		builder.setBytes("0x01002200", "00 21 00 01");
+		builder.setBytes("0x01002204", "04 21 00 01");
+		builder.setBytes("0x01002208", "08 21 00 01");
+
+		builder.applyDataType("0x01002100", struct);
+		builder.applyDataType("0x01002200", array);
+
 		return p;
 	}
 
-- 
2.44.0

