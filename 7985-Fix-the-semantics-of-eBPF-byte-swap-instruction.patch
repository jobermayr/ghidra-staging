From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss@ledger.fr>
Date: Fri, 4 Apr 2025 22:00:34 +0200
Subject: [PATCH] 7985: Fix the semantics of eBPF byte swap instructions

eBPF byte swap operations (BE16, BE32, BE64, LE16, LE32, LE64) have
semantics that depend on the endianness of the host processor executing
the eBPF program. For example, on a Little-Endian CPU, BE16 swaps the 2
lowest significant bytes of the given destination register.

The semantic section of BE16 contains:

    { dst=((dst) >> 8) | ((dst) << 8); }

This contains several issues:

- It assumes the instruction always swaps the bytes. This should only
  happen on Little-Endian host CPU.
- If `dst` does not contain a 16-bit value (meaning `dst >> 16 != 0`),
  the computed value is wrong. The value should be properly masked. For
  example the Linux kernel defines in
  https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/swab.h?h=v6.14#L14

    #define ___constant_swab16(x) ((__u16)(             \
            (((__u16)(x) & (__u16)0x00ffU) << 8) |      \
            (((__u16)(x) & (__u16)0xff00U) >> 8)))

Add a new internal register to define whether the host CPU is Big
Endian. This way:

- By default, p-code operations decoded from byte swap operations
  contain conditional statements depending on this register.
- By setting the internal register to 0 (for Little Endian host CPU) or
  1 (for Big Endian host CPU) for the whole program, the conditional
  statements disappear from the decompiled code, making it clearer.
---
 .../Processors/eBPF/data/languages/eBPF.sinc  | 75 ++++++++++++++-----
 1 file changed, 55 insertions(+), 20 deletions(-)

diff --git a/Ghidra/Processors/eBPF/data/languages/eBPF.sinc b/Ghidra/Processors/eBPF/data/languages/eBPF.sinc
index ec31100d8b..42f78ef36d 100644
--- a/Ghidra/Processors/eBPF/data/languages/eBPF.sinc
+++ b/Ghidra/Processors/eBPF/data/languages/eBPF.sinc
@@ -12,6 +12,9 @@ define space syscall type=ram_space size=4;
 
 define register offset=0 size=8 [ R0  R1  R2  R3  R4  R5  R6  R7  R8  R9  R10  PC ];
 
+# Special internal register for byte swap instructions which depend on host CPU endianness: 0 when Little Endian, 1 when Big Endian
+define register offset=0x100 size=1 [ big_endian_host ];
+
 # Instruction encoding: Insop:8, dst_reg:4, src_reg:4, off:16, imm:32 - from lsb to msb
 define token instr(64)
     llvm_imm_callx_zero=(36, 63)
@@ -116,31 +119,63 @@ DST4: dst is dst { local tmp:4 = dst:4; export tmp; }
 #Bytewasp instructions
 ###############################################################################
 # BPF_ALU   | BPF_K   | BPF_END
-:LE16 dst  is imm=0x10 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=0 & op_insn_class=0x4 { dst=((dst) >> 8) | ((dst) << 8); }
-:LE32 dst  is imm=0x20 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=0 & op_insn_class=0x4 { dst=((dst) >> 24) | (((dst) & 0x00FF0000) >> 8)  | (((dst) & 0x0000FF00) << 8) | ((dst) << 24); }
+:LE16 dst  is imm=0x10 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=0 & op_insn_class=0x4 {
+    if (big_endian_host) goto <swap>;
+        dst = zext(dst:2);
+        goto <next>;
+    <swap>
+        dst = ((dst & 0xff00) >> 8) | ((dst & 0x00ff) << 8);
+    <next>
+}
+:LE32 dst  is imm=0x20 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=0 & op_insn_class=0x4 {
+    if (big_endian_host) goto <swap>;
+        dst = zext(dst:4);
+        goto <next>;
+    <swap>
+        dst = ((dst & 0xff000000) >> 24) | (((dst) & 0x00ff0000) >> 8) | (((dst) & 0x0000ff00) << 8) | ((dst & 0x000000ff) << 24);
+    <next>
+}
 :LE64 dst  is imm=0x40 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=0 & op_insn_class=0x4 {
-    dst=( (dst << 56) & 0xff00000000000000 ) |
-    ( (dst << 40) & 0x00ff000000000000 ) |
-    ( (dst << 24) & 0x0000ff0000000000 ) |
-    ( (dst <<  8) & 0x000000ff00000000 ) |
-    ( (dst >>  8) & 0x00000000ff000000 ) |
-    ( (dst >> 24) & 0x0000000000ff0000 ) |
-    ( (dst >> 40) & 0x000000000000ff00 ) |
-    ( (dst >> 56) & 0x00000000000000ff );
+    if (!big_endian_host) goto <next>;
+    dst = ((dst << 56) & 0xff00000000000000) |
+        ((dst << 40) & 0x00ff000000000000) |
+        ((dst << 24) & 0x0000ff0000000000) |
+        ((dst <<  8) & 0x000000ff00000000) |
+        ((dst >>  8) & 0x00000000ff000000) |
+        ((dst >> 24) & 0x0000000000ff0000) |
+        ((dst >> 40) & 0x000000000000ff00) |
+        ((dst >> 56) & 0x00000000000000ff);
+    <next>
 }
 
 # BPF_ALU   | BPF_X   | BPF_END
-:BE16 dst  is imm=0x10 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=1 & op_insn_class=0x4 { dst=((dst) >> 8) | ((dst) << 8); }
-:BE32 dst  is imm=0x20 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=1 & op_insn_class=0x4 { dst=((dst) >> 24) | (((dst) & 0x00FF0000) >> 8)  | (((dst) & 0x0000FF00) << 8) | ((dst) << 24); }
+:BE16 dst  is imm=0x10 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=1 & op_insn_class=0x4 {
+    if (!big_endian_host) goto <swap>;
+        dst = zext(dst:2);
+        goto <next>;
+    <swap>
+        dst = ((dst & 0xff00) >> 8) | ((dst & 0x00ff) << 8);
+    <next>
+}
+:BE32 dst  is imm=0x20 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=1 & op_insn_class=0x4 {
+    if (!big_endian_host) goto <swap>;
+        dst = zext(dst:4);
+        goto <next>;
+    <swap>
+        dst = ((dst & 0xff000000) >> 24) | (((dst) & 0x00ff0000) >> 8) | (((dst) & 0x0000ff00) << 8) | ((dst & 0x000000ff) << 24);
+    <next>
+}
 :BE64 dst  is imm=0x40 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=1 & op_insn_class=0x4 {
-    dst=( (dst << 56) & 0xff00000000000000 ) |
-    ( (dst << 40) & 0x00ff000000000000 ) |
-    ( (dst << 24) & 0x0000ff0000000000 ) |
-    ( (dst <<  8) & 0x000000ff00000000 ) |
-    ( (dst >>  8) & 0x00000000ff000000 ) |
-    ( (dst >> 24) & 0x0000000000ff0000 ) |
-    ( (dst >> 40) & 0x000000000000ff00 ) |
-    ( (dst >> 56) & 0x00000000000000ff );
+    if (big_endian_host) goto <next>;
+    dst = ((dst << 56) & 0xff00000000000000) |
+        ((dst << 40) & 0x00ff000000000000) |
+        ((dst << 24) & 0x0000ff0000000000) |
+        ((dst <<  8) & 0x000000ff00000000) |
+        ((dst >>  8) & 0x00000000ff000000) |
+        ((dst >> 24) & 0x0000000000ff0000) |
+        ((dst >> 40) & 0x000000000000ff00) |
+        ((dst >> 56) & 0x00000000000000ff);
+    <next>
 }
 
 # BPF_ALU64   | BPF_K   | BPF_END
-- 
2.45.1

