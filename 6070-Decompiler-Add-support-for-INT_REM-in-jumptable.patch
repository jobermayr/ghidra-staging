From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Luke=20Sern=C3=A9?= <luke.serne@solconmail.nl>
Date: Sat, 30 Dec 2023 14:20:50 +0100
Subject: [PATCH] 6070: Decompiler: Add support for INT_REM in jumptable
 recovery. This commit adds INT_REM handling to JumpBasic, which allows switch
 statements depending on expressions like "x % 10" to be properly recovered.
 Previously, a warning was emitted about there being "too many branches".

---
 Ghidra/Features/Decompiler/src/decompile/cpp/jumptable.cc | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/jumptable.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/jumptable.cc
index 79c2ba1d8..c9ad9dea4 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/jumptable.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/jumptable.cc
@@ -510,7 +510,7 @@ uintb JumpBasic::backup2Switch(Funcdata *fd,uintb output,Varnode *outvn,Varnode
   return output;
 }
 
-/// If the Varnode has a restricted range due to masking via INT_AND, the maximum value of this range is returned.
+/// If the Varnode has a restricted range due to masking via INT_AND or by INT_REM with a constant, the maximum value of this range is returned.
 /// Otherwise, 0 is returned, indicating that the Varnode can take all possible values.
 /// \param vn is the given Varnode
 /// \return the maximum value or 0
@@ -528,6 +528,12 @@ uintb JumpBasic::getMaxValue(Varnode *vn)
       maxValue = (maxValue + 1) & calc_mask(vn->getSize());
     }
   }
+  else if (op->code() == CPUI_INT_REM) {
+    // The largest value INT_REM(v, N) can take is N-1. The -1 is done elsewhere, so no need to do that here.
+    Varnode *constvn = op->getIn(1);
+    if (constvn->isConstant())
+      maxValue = constvn->getOffset();
+  }
   else if (op->code() == CPUI_MULTIEQUAL) {	// Its possible the AND is duplicated across multiple blocks
     int4 i;
     for(i=0;i<op->numInput();++i) {
-- 
2.43.0

