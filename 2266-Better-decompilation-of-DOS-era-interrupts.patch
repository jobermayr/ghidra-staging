From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Johannes Obermayr <johannesobermayr@gmx.de>
Date: Tue, 22 Apr 2025 22:56:17 +0200
Subject: [PATCH] 2266: Better decompilation of DOS era interrupts

---
 Ghidra/Processors/x86/data/languages/ia.sinc | 251 ++++++++++++++++++-
 1 file changed, 250 insertions(+), 1 deletion(-)

diff --git a/Ghidra/Processors/x86/data/languages/ia.sinc b/Ghidra/Processors/x86/data/languages/ia.sinc
index ebcc9ee2a6..aec167f5d4 100644
--- a/Ghidra/Processors/x86/data/languages/ia.sinc
+++ b/Ghidra/Processors/x86/data/languages/ia.sinc
@@ -3658,7 +3658,256 @@ enterFrames: low5 is low5 { tmp:1 = low5; export tmp; }
 
 :INT1           is vexMode=0 & byte=0xf1                            { tmp:1 = 0x1; intloc:$(SIZE) = swi(tmp); call [intloc]; return [0:1]; }
 :INT3           is vexMode=0 & byte=0xcc                            { tmp:1 = 0x3; intloc:$(SIZE) = swi(tmp); call [intloc]; return [0:1]; }
-:INT imm8       is vexMode=0 & byte=0xcd; imm8                      { tmp:1 = imm8; intloc:$(SIZE) = swi(tmp); call [intloc]; }
+
+define pcodeop ALLOCATE_MEMORY;
+define pcodeop CDROM_INSTALLATION_CHECK;
+define pcodeop CLOSE_HANDLE;
+define pcodeop COMMIT_FILE;
+define pcodeop CREATE_DIR;
+define pcodeop CREATE_HANDLE;
+define pcodeop DELETE_FILE;
+define pcodeop DPMI_GET_SEGMENT_BASE_ADDRESS;
+define pcodeop END_PROCESS;
+define pcodeop FILE_SERVER_FILE_COPY;
+define pcodeop FIND_FIRST;
+define pcodeop FIND_NEXT;
+define pcodeop FREE_MEMORY;
+define pcodeop GET_CURRENT_DIR;
+define pcodeop GET_CURRENT_DISK;
+define pcodeop GET_DATE;
+define pcodeop GET_DOS_VERSION_NUMBER;
+define pcodeop GET_EXTENDED_COUNTRY_INFORMATION;
+define pcodeop GET_INTERRUPT_VECTOR;
+define pcodeop GET_FILE_ATTRIBUTES;
+define pcodeop GET_TIME;
+define pcodeop IOCTL;
+define pcodeop LSEEK;
+define pcodeop OPEN_HANDLE;
+define pcodeop PARSE_FILENAME;
+define pcodeop READ_HANDLE;
+define pcodeop RESIZE_MEMORY_BLOCK;
+define pcodeop SELECT_SERIAL_INTERFACE;
+define pcodeop SET_DISK_TRANSFER_AREA;
+define pcodeop SET_TEXTMODE_CURSOR_SHAPE;
+define pcodeop SET_VIDEO_MODE;
+define pcodeop STDIN_W_ECHO;
+define pcodeop STDIN_WO_ECHO;
+define pcodeop STDOUT;
+define pcodeop TOPWARE_GET_SYSTEM_INFORMATION;
+define pcodeop TOPVIEW_UPDATE_SCREEN_FROM_SHADOW_BUFFER;
+define pcodeop VESA_CPU_VIDEO_MEMORY_CONTROL;
+define pcodeop VESA_SET_SUPERVGA_VIDEO_MODE;
+define pcodeop WRITE_HANDLE;
+:INT imm8       is vexMode=0 & byte=0xcd; imm8
+{
+  tmp:1 = imm8;
+  if (tmp == 0x10) goto <int_10>;
+  if (tmp == 0x15) goto <int_15>;
+  if (tmp == 0x21) goto <int_21>;
+  if (tmp == 0x2f) goto <int_2f>;
+  if (tmp == 0x31) goto <int_31>;
+  goto <not_implemented>;
+
+<int_10>
+  if (AH == 0x1 || AX >> 8 == 0x1) goto <set_textmode_cursor_shape>;
+  if (AX == 0x4f02 || (AH == 0x4f && AL == 0x02)) goto <vesa_set_supervga_video_mode>;
+  if (AX == 0x4f05 || (AH == 0x4f && AL == 0x05)) goto <vesa_cpu_video_memory_control>;
+  if (AH == 0xff || AX >> 8 == 0xff) goto <int10_ff>;
+  if (AH == 0x0 || AX >> 8 == 0x0) goto <set_video_mode>;
+  goto <not_implemented>;
+<set_video_mode>
+  SET_VIDEO_MODE(AL);
+  goto <end>;
+<set_textmode_cursor_shape>
+  SET_TEXTMODE_CURSOR_SHAPE(CH, CL);
+  goto <end>;
+<vesa_set_supervga_video_mode>
+  VESA_SET_SUPERVGA_VIDEO_MODE(BX);
+  goto <end>;
+<vesa_cpu_video_memory_control>
+  AX = VESA_CPU_VIDEO_MEMORY_CONTROL(BH, DX);
+  goto <end>;
+<int10_ff>
+  esedi10_ff:$(SIZE) = segment(ES, DI);
+  TOPVIEW_UPDATE_SCREEN_FROM_SHADOW_BUFFER(esedi10_ff, CX);
+  goto <end>;
+
+<int_15>
+  if (AH == 0x49 || AX >> 8 == 0x49) goto <serial_interface_select>;
+  goto <not_implemented>;
+<serial_interface_select>
+  SELECT_SERIAL_INTERFACE(AL);
+  goto <end>;
+
+<int_21>
+  if (AH == 0x1 || AX >> 8 == 0x1) goto <stdin_w_echo>;
+  if (AH == 0x2 || AX >> 8 == 0x2) goto <stdout2>;
+  if (AH == 0x8 || AX >> 8 == 0x8) goto <stdin_wo_echo>;
+  if (AH == 0x9 || AX >> 8 == 0x9) goto <stdout9>;
+  if (AH == 0x19 || AX >> 8 == 0x19) goto <get_current_disk>;
+  if (AH == 0x1a || AX >> 8 == 0x1a) goto <set_disk_transfer_area>;
+  if (AH == 0x29 || AX >> 8 == 0x29) goto <parse_filename>;
+  if (AH == 0x2a || AX >> 8 == 0x2a) goto <get_date>;
+  if (AH == 0x2c || AX >> 8 == 0x2c) goto <get_time>;
+  if (AH == 0x30 || AX >> 8 == 0x30) goto <get_dos_version_number>;
+  if (AH == 0x35 || AX >> 8 == 0x35) goto <get_interrupt_vector>;
+  if (AH == 0x39 || AX >> 8 == 0x39) goto <create_dir>;
+  if (AH == 0x3c || AX >> 8 == 0x3c) goto <create_handle>;
+  if (AH == 0x3d || AX >> 8 == 0x3d) goto <open_handle>;
+  if (AH == 0x3e || AX >> 8 == 0x3e) goto <close_handle>;
+  if (AH == 0x3f || AX >> 8 == 0x3f) goto <read_handle>;
+  if (AH == 0x40 || AX >> 8 == 0x40) goto <write_handle>;
+  if (AH == 0x41 || AX >> 8 == 0x41) goto <delete_file>;
+  if (AH == 0x42 || AX >> 8 == 0x42) goto <lseek>;
+  if (AH == 0x43 || AX >> 8 == 0x43) goto <get_file_attributes>;
+  if (AH == 0x44 || AX >> 8 == 0x44) goto <ioctl>;
+  if (AH == 0x47 || AX >> 8 == 0x47) goto <get_current_dir>;
+  if (AH == 0x48 || AX >> 8 == 0x48) goto <allocate_memory>;
+  if (AH == 0x49 || AX >> 8 == 0x49) goto <free_memory>;
+  if (AH == 0x4a || AX >> 8 == 0x4a) goto <resize_memory_block>;
+  if (AH == 0x4c || AX >> 8 == 0x4c) goto <end_process>;
+  if (AH == 0x4e || AX >> 8 == 0x4e) goto <find_first>;
+  if (AH == 0x4f || AX >> 8 == 0x4f) goto <find_next>;
+  if (AH == 0x65 || AX >> 8 == 0x65) goto <get_extended_country_information>;
+  if (AH == 0x68 || AX >> 8 == 0x68) goto <commit_file>;
+  if (AH == 0xf3 || AX >> 8 == 0x3f) goto <file_server_file_copy>;
+  if (AX == 0xff00 || (AH == 0xff && AL == 0x0)) goto <topware_get_system_information>;
+  goto <not_implemented>;
+<stdin_w_echo>
+  AL = STDIN_W_ECHO();
+  goto <end>;
+<stdout2>
+  STDOUT(DL);
+  goto <end>;
+<stdin_wo_echo>
+  AL = STDIN_WO_ECHO();
+  goto <end>;
+<stdout9>
+  local tmp9:$(SIZE) = segment(DS,DX);
+  AL = STDOUT(tmp9);
+  goto <end>;
+<get_current_disk>
+  AL = GET_CURRENT_DISK();
+  goto <end>;
+<set_disk_transfer_area>
+  local tmp1a:$(SIZE) = segment(DS,DX);
+  AX = SET_DISK_TRANSFER_AREA(tmp1a);
+  goto <end>;
+<parse_filename>
+  dsesi29:$(SIZE) = segment(DS,SI);
+  esedi29:$(SIZE) = segment(ES,DI);
+  AL = PARSE_FILENAME(esedi29, dsesi29, AL);
+  goto <end>;
+<get_date>
+  GET_DATE(CX, DX);
+  goto <end>;
+<get_time>
+  AL = GET_TIME(CX, DX);
+  goto <end>;
+<get_dos_version_number>
+  AX = GET_DOS_VERSION_NUMBER(AL);
+  goto <end>;
+<get_interrupt_vector>
+  local esbx35:$(SIZE) = segment(ES,BX);
+  esbx35 = GET_INTERRUPT_VECTOR(AL);
+  goto <end>;
+<create_dir>
+  local tmp39:$(SIZE) = segment(DS,DX);
+  AX = CREATE_DIR(tmp39);
+  goto <end>;
+<create_handle>
+  local tmp3c:$(SIZE) = segment(DS,DX);
+  AX = CREATE_HANDLE(tmp3c, CX);
+  goto <end>;
+<open_handle>
+  local tmp3d:$(SIZE) = segment(DS,DX);
+  AX = OPEN_HANDLE(tmp3d, AL);
+  goto <end>;
+<close_handle>
+  AX = CLOSE_HANDLE(BX);
+  goto <end>;
+<read_handle>
+  local tmp3f:$(SIZE) = segment(DS,DX);
+  AX = READ_HANDLE(BX, tmp3f, CX);
+  goto <end>;
+<write_handle>
+  local tmp40:$(SIZE) = segment(DS,DX);
+  AX = WRITE_HANDLE(BX, tmp40, CX);
+  goto <end>;
+<delete_file>
+  local tmp41:$(SIZE) = segment(DS,DX);
+  AX = DELETE_FILE(tmp41);
+  goto <end>;
+<lseek>
+  local tmp42:$(SIZE) = segment(DS,DX);
+  AX = LSEEK(BX, tmp42, AL);
+  goto <end>;
+<get_file_attributes>
+  local tmp43:$(SIZE) = segment(DS,DX);
+  CX = GET_FILE_ATTRIBUTES(tmp43);
+  goto <end>;
+<ioctl>
+  AX = IOCTL(BX, CX, DX);
+  goto <end>;
+<get_current_dir>
+  local tmp47:$(SIZE) = segment(DS,SI);
+  tmp47 = GET_CURRENT_DIR(DL);
+  goto <end>;
+<allocate_memory>
+  AX = ALLOCATE_MEMORY(BX);
+  goto <end>;
+<free_memory>
+  CF = FREE_MEMORY(ES);
+  goto <end>;
+<resize_memory_block>
+  RESIZE_MEMORY_BLOCK(BX, ES);
+  goto <end>;
+<end_process>
+  AL = END_PROCESS();
+  goto <end>;
+<find_first>
+  local tmp4e:$(SIZE) = segment(DS,DX);
+  AX = FIND_FIRST(tmp4e, CX);
+  goto <end>;
+<find_next>
+  AX = FIND_NEXT(BX);
+  goto <end>;
+<get_extended_country_information>
+  tmp65:$(SIZE) = segment(ES,DI);
+  AX = GET_EXTENDED_COUNTRY_INFORMATION(AL, BX, DX, tmp65, CX);
+  goto <end>;
+<commit_file>
+  AX = COMMIT_FILE(BX);
+  goto <end>;
+<file_server_file_copy>
+  local tmpf3:$(SIZE) = segment(ES,DI);
+  DX = FILE_SERVER_FILE_COPY(tmpf3, AX, BX, CX, DX);
+  goto <end>;
+<topware_get_system_information>
+  BX = TOPWARE_GET_SYSTEM_INFORMATION(CL);
+  goto <end>;
+
+<int_2f>
+  if (AX == 1500) goto <cdrom_installation_check>;
+  goto <not_implemented>;
+<cdrom_installation_check>
+  BX = CDROM_INSTALLATION_CHECK();
+  goto <end>;
+
+<int_31>
+  if (AX == 0x0006 || (AH == 0x0 && AL == 0x06)) goto <dpmi_get_segment_base_address>;
+  goto <not_implemented>;
+<dpmi_get_segment_base_address>
+  cxdx31_0006:$(SIZE) = segment(CX,DX);
+  cxdx31_0006 = DPMI_GET_SEGMENT_BASE_ADDRESS(BX);
+  goto <end>;
+
+<not_implemented>
+  intloc:$(SIZE) = swi(tmp, AH, AL);
+  call [intloc];
+<end>
+}
+
 :INTO           is vexMode=0 & byte=0xce & bit64=0
 {
   tmp:1 = 0x4;
-- 
2.45.1

