From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alessandro Gatti <a.gatti@frob.it>
Date: Sat, 4 Jan 2020 05:00:31 +0100
Subject: [PATCH] 1409: Implement decimal format modifier in Sleigh files.

---
 .../src/decompile/cpp/slgh_compile.cc         |    6 +-
 .../src/decompile/cpp/slgh_compile.hh         |    2 +-
 .../Decompiler/src/decompile/cpp/slghparse.cc | 2532 +++++++++--------
 .../Decompiler/src/decompile/cpp/slghparse.hh |   84 +-
 .../Decompiler/src/decompile/cpp/slghparse.y  |   14 +-
 .../src/decompile/cpp/slghpatexpress.cc       |   28 +-
 .../src/decompile/cpp/slghpatexpress.hh       |    7 +-
 .../Decompiler/src/decompile/cpp/slghscan.cc  |  942 +++---
 .../Decompiler/src/decompile/cpp/slghscan.l   |    2 +
 .../antlr/ghidra/sleigh/grammar/BaseLexer.g   |   14 +-
 .../ghidra/sleigh/grammar/SleighCompiler.g    |    6 +-
 .../antlr/ghidra/sleigh/grammar/SleighEcho.g  |    2 +
 .../ghidra/sleigh/grammar/SleighParser.g      |   20 +-
 .../sleigh/expression/ContextField.java       |    6 +
 .../sleigh/expression/TokenField.java         |   12 +
 .../sleigh/symbol/OperandSymbol.java          |   15 +-
 .../pcodeCPort/slgh_compile/FieldQuality.java |    6 +-
 .../slgh_compile/SleighCompile.java           |    4 +-
 .../slghpatexpress/ContextField.java          |   11 +-
 .../pcodeCPort/slghpatexpress/TokenField.java |    5 +-
 GhidraDocs/languages/html/sleigh_tokens.html  |   15 +-
 21 files changed, 1924 insertions(+), 1809 deletions(-)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc
index 50d85e22ba..50f018ba1f 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc
@@ -76,7 +76,7 @@ FieldQuality::FieldQuality(string *nm,uintb *l,uintb *h)
   high = *h;
   signext = false;
   flow = true;
-  hex = true;
+  base = 16;
   delete nm;
   delete l;
   delete h;
@@ -1889,7 +1889,7 @@ int4 SleighCompile::calcContextVarLayout(int4 start,int4 sz,int4 numbits)
       qual = contexttable[i+start].qual;
       uint4 l = qual->low - min + low;
       uint4 h = numbits-1-(max-qual->high);
-      ContextField *field = new ContextField(qual->signext,l,h);
+      ContextField *field = new ContextField(qual->signext,l,h,qual->base);
       addSymbol(new ContextSymbol(qual->name,field,sym,qual->low,qual->high,qual->flow));
     }
     
@@ -2505,7 +2505,7 @@ void SleighCompile::addTokenField(TokenSymbol *sym,FieldQuality *qual)
     s << "Field '" << qual->name << "' high must be less than token size";
     reportError(getCurrentLocation(), s.str());
   }
-  TokenField *field = new TokenField(sym->getToken(),qual->signext,qual->low,qual->high);
+  TokenField *field = new TokenField(sym->getToken(),qual->signext,qual->low,qual->high,qual->base);
   addSymbol(new ValueSymbol(qual->name,field));
   delete qual;
 }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.hh
index 88fe7df789..92798f8fb4 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.hh
@@ -97,7 +97,7 @@ struct FieldQuality {
   uint4 high;		///< The most significant bit of the field within the token
   bool signext;		///< \b true if the field's value is signed
   bool flow;		///< \b true if the context \b flows for this field.
-  bool hex;		///< \b true if the field value is displayed in hex
+  uint4 base;		///< Base of number (2, 8, 10 or 16)
   FieldQuality(string *nm,uintb *l,uintb *h);	///< Constructor
 };
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc
index cf512a0db2..8dec41d59c 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc
@@ -201,128 +201,130 @@ enum yysymbol_kind_t
   YYSYMBOL_NOFLOW_KEY = 83,                /* NOFLOW_KEY  */
   YYSYMBOL_HEX_KEY = 84,                   /* HEX_KEY  */
   YYSYMBOL_DEC_KEY = 85,                   /* DEC_KEY  */
-  YYSYMBOL_BIG_KEY = 86,                   /* BIG_KEY  */
-  YYSYMBOL_LITTLE_KEY = 87,                /* LITTLE_KEY  */
-  YYSYMBOL_SIZE_KEY = 88,                  /* SIZE_KEY  */
-  YYSYMBOL_WORDSIZE_KEY = 89,              /* WORDSIZE_KEY  */
-  YYSYMBOL_OFFSET_KEY = 90,                /* OFFSET_KEY  */
-  YYSYMBOL_NAMES_KEY = 91,                 /* NAMES_KEY  */
-  YYSYMBOL_VALUES_KEY = 92,                /* VALUES_KEY  */
-  YYSYMBOL_VARIABLES_KEY = 93,             /* VARIABLES_KEY  */
-  YYSYMBOL_PCODEOP_KEY = 94,               /* PCODEOP_KEY  */
-  YYSYMBOL_IS_KEY = 95,                    /* IS_KEY  */
-  YYSYMBOL_LOCAL_KEY = 96,                 /* LOCAL_KEY  */
-  YYSYMBOL_DELAYSLOT_KEY = 97,             /* DELAYSLOT_KEY  */
-  YYSYMBOL_CROSSBUILD_KEY = 98,            /* CROSSBUILD_KEY  */
-  YYSYMBOL_EXPORT_KEY = 99,                /* EXPORT_KEY  */
-  YYSYMBOL_BUILD_KEY = 100,                /* BUILD_KEY  */
-  YYSYMBOL_CONTEXT_KEY = 101,              /* CONTEXT_KEY  */
-  YYSYMBOL_ELLIPSIS_KEY = 102,             /* ELLIPSIS_KEY  */
-  YYSYMBOL_GLOBALSET_KEY = 103,            /* GLOBALSET_KEY  */
-  YYSYMBOL_BITRANGE_KEY = 104,             /* BITRANGE_KEY  */
-  YYSYMBOL_CHAR = 105,                     /* CHAR  */
-  YYSYMBOL_INTEGER = 106,                  /* INTEGER  */
-  YYSYMBOL_INTB = 107,                     /* INTB  */
-  YYSYMBOL_STRING = 108,                   /* STRING  */
-  YYSYMBOL_SYMBOLSTRING = 109,             /* SYMBOLSTRING  */
-  YYSYMBOL_SPACESYM = 110,                 /* SPACESYM  */
-  YYSYMBOL_SECTIONSYM = 111,               /* SECTIONSYM  */
-  YYSYMBOL_TOKENSYM = 112,                 /* TOKENSYM  */
-  YYSYMBOL_USEROPSYM = 113,                /* USEROPSYM  */
-  YYSYMBOL_VALUESYM = 114,                 /* VALUESYM  */
-  YYSYMBOL_VALUEMAPSYM = 115,              /* VALUEMAPSYM  */
-  YYSYMBOL_CONTEXTSYM = 116,               /* CONTEXTSYM  */
-  YYSYMBOL_NAMESYM = 117,                  /* NAMESYM  */
-  YYSYMBOL_VARSYM = 118,                   /* VARSYM  */
-  YYSYMBOL_BITSYM = 119,                   /* BITSYM  */
-  YYSYMBOL_SPECSYM = 120,                  /* SPECSYM  */
-  YYSYMBOL_VARLISTSYM = 121,               /* VARLISTSYM  */
-  YYSYMBOL_OPERANDSYM = 122,               /* OPERANDSYM  */
-  YYSYMBOL_JUMPSYM = 123,                  /* JUMPSYM  */
-  YYSYMBOL_MACROSYM = 124,                 /* MACROSYM  */
-  YYSYMBOL_LABELSYM = 125,                 /* LABELSYM  */
-  YYSYMBOL_SUBTABLESYM = 126,              /* SUBTABLESYM  */
-  YYSYMBOL_127_ = 127,                     /* '}'  */
-  YYSYMBOL_128_ = 128,                     /* '='  */
-  YYSYMBOL_129_ = 129,                     /* '('  */
-  YYSYMBOL_130_ = 130,                     /* ')'  */
-  YYSYMBOL_131_ = 131,                     /* ','  */
-  YYSYMBOL_132_ = 132,                     /* '['  */
-  YYSYMBOL_133_ = 133,                     /* ']'  */
-  YYSYMBOL_134_ = 134,                     /* '{'  */
-  YYSYMBOL_135_ = 135,                     /* ':'  */
-  YYSYMBOL_136_ = 136,                     /* ' '  */
-  YYSYMBOL_YYACCEPT = 137,                 /* $accept  */
-  YYSYMBOL_spec = 138,                     /* spec  */
-  YYSYMBOL_definition = 139,               /* definition  */
-  YYSYMBOL_constructorlike = 140,          /* constructorlike  */
-  YYSYMBOL_endiandef = 141,                /* endiandef  */
-  YYSYMBOL_aligndef = 142,                 /* aligndef  */
-  YYSYMBOL_tokendef = 143,                 /* tokendef  */
-  YYSYMBOL_tokenprop = 144,                /* tokenprop  */
-  YYSYMBOL_contextdef = 145,               /* contextdef  */
-  YYSYMBOL_contextprop = 146,              /* contextprop  */
-  YYSYMBOL_fielddef = 147,                 /* fielddef  */
-  YYSYMBOL_contextfielddef = 148,          /* contextfielddef  */
-  YYSYMBOL_spacedef = 149,                 /* spacedef  */
-  YYSYMBOL_spaceprop = 150,                /* spaceprop  */
-  YYSYMBOL_varnodedef = 151,               /* varnodedef  */
-  YYSYMBOL_bitrangedef = 152,              /* bitrangedef  */
-  YYSYMBOL_bitrangelist = 153,             /* bitrangelist  */
-  YYSYMBOL_bitrangesingle = 154,           /* bitrangesingle  */
-  YYSYMBOL_pcodeopdef = 155,               /* pcodeopdef  */
-  YYSYMBOL_valueattach = 156,              /* valueattach  */
-  YYSYMBOL_nameattach = 157,               /* nameattach  */
-  YYSYMBOL_varattach = 158,                /* varattach  */
-  YYSYMBOL_macrodef = 159,                 /* macrodef  */
-  YYSYMBOL_withblockstart = 160,           /* withblockstart  */
-  YYSYMBOL_withblockmid = 161,             /* withblockmid  */
-  YYSYMBOL_withblock = 162,                /* withblock  */
-  YYSYMBOL_id_or_nil = 163,                /* id_or_nil  */
-  YYSYMBOL_bitpat_or_nil = 164,            /* bitpat_or_nil  */
-  YYSYMBOL_macrostart = 165,               /* macrostart  */
-  YYSYMBOL_rtlbody = 166,                  /* rtlbody  */
-  YYSYMBOL_constructor = 167,              /* constructor  */
-  YYSYMBOL_constructprint = 168,           /* constructprint  */
-  YYSYMBOL_subtablestart = 169,            /* subtablestart  */
-  YYSYMBOL_pexpression = 170,              /* pexpression  */
-  YYSYMBOL_pequation = 171,                /* pequation  */
-  YYSYMBOL_elleq = 172,                    /* elleq  */
-  YYSYMBOL_ellrt = 173,                    /* ellrt  */
-  YYSYMBOL_atomic = 174,                   /* atomic  */
-  YYSYMBOL_constraint = 175,               /* constraint  */
-  YYSYMBOL_contextblock = 176,             /* contextblock  */
-  YYSYMBOL_contextlist = 177,              /* contextlist  */
-  YYSYMBOL_section_def = 178,              /* section_def  */
-  YYSYMBOL_rtlfirstsection = 179,          /* rtlfirstsection  */
-  YYSYMBOL_rtlcontinue = 180,              /* rtlcontinue  */
-  YYSYMBOL_rtl = 181,                      /* rtl  */
-  YYSYMBOL_rtlmid = 182,                   /* rtlmid  */
-  YYSYMBOL_statement = 183,                /* statement  */
-  YYSYMBOL_expr = 184,                     /* expr  */
-  YYSYMBOL_sizedstar = 185,                /* sizedstar  */
-  YYSYMBOL_jumpdest = 186,                 /* jumpdest  */
-  YYSYMBOL_varnode = 187,                  /* varnode  */
-  YYSYMBOL_integervarnode = 188,           /* integervarnode  */
-  YYSYMBOL_lhsvarnode = 189,               /* lhsvarnode  */
-  YYSYMBOL_label = 190,                    /* label  */
-  YYSYMBOL_exportvarnode = 191,            /* exportvarnode  */
-  YYSYMBOL_familysymbol = 192,             /* familysymbol  */
-  YYSYMBOL_specificsymbol = 193,           /* specificsymbol  */
-  YYSYMBOL_charstring = 194,               /* charstring  */
-  YYSYMBOL_intblist = 195,                 /* intblist  */
-  YYSYMBOL_intbpart = 196,                 /* intbpart  */
-  YYSYMBOL_stringlist = 197,               /* stringlist  */
-  YYSYMBOL_stringpart = 198,               /* stringpart  */
-  YYSYMBOL_anystringlist = 199,            /* anystringlist  */
-  YYSYMBOL_anystringpart = 200,            /* anystringpart  */
-  YYSYMBOL_valuelist = 201,                /* valuelist  */
-  YYSYMBOL_valuepart = 202,                /* valuepart  */
-  YYSYMBOL_varlist = 203,                  /* varlist  */
-  YYSYMBOL_varpart = 204,                  /* varpart  */
-  YYSYMBOL_paramlist = 205,                /* paramlist  */
-  YYSYMBOL_oplist = 206,                   /* oplist  */
-  YYSYMBOL_anysymbol = 207                 /* anysymbol  */
+  YYSYMBOL_OCT_KEY = 86,                   /* OCT_KEY  */
+  YYSYMBOL_BIN_KEY = 87,                   /* BIN_KEY  */
+  YYSYMBOL_BIG_KEY = 88,                   /* BIG_KEY  */
+  YYSYMBOL_LITTLE_KEY = 89,                /* LITTLE_KEY  */
+  YYSYMBOL_SIZE_KEY = 90,                  /* SIZE_KEY  */
+  YYSYMBOL_WORDSIZE_KEY = 91,              /* WORDSIZE_KEY  */
+  YYSYMBOL_OFFSET_KEY = 92,                /* OFFSET_KEY  */
+  YYSYMBOL_NAMES_KEY = 93,                 /* NAMES_KEY  */
+  YYSYMBOL_VALUES_KEY = 94,                /* VALUES_KEY  */
+  YYSYMBOL_VARIABLES_KEY = 95,             /* VARIABLES_KEY  */
+  YYSYMBOL_PCODEOP_KEY = 96,               /* PCODEOP_KEY  */
+  YYSYMBOL_IS_KEY = 97,                    /* IS_KEY  */
+  YYSYMBOL_LOCAL_KEY = 98,                 /* LOCAL_KEY  */
+  YYSYMBOL_DELAYSLOT_KEY = 99,             /* DELAYSLOT_KEY  */
+  YYSYMBOL_CROSSBUILD_KEY = 100,           /* CROSSBUILD_KEY  */
+  YYSYMBOL_EXPORT_KEY = 101,               /* EXPORT_KEY  */
+  YYSYMBOL_BUILD_KEY = 102,                /* BUILD_KEY  */
+  YYSYMBOL_CONTEXT_KEY = 103,              /* CONTEXT_KEY  */
+  YYSYMBOL_ELLIPSIS_KEY = 104,             /* ELLIPSIS_KEY  */
+  YYSYMBOL_GLOBALSET_KEY = 105,            /* GLOBALSET_KEY  */
+  YYSYMBOL_BITRANGE_KEY = 106,             /* BITRANGE_KEY  */
+  YYSYMBOL_CHAR = 107,                     /* CHAR  */
+  YYSYMBOL_INTEGER = 108,                  /* INTEGER  */
+  YYSYMBOL_INTB = 109,                     /* INTB  */
+  YYSYMBOL_STRING = 110,                   /* STRING  */
+  YYSYMBOL_SYMBOLSTRING = 111,             /* SYMBOLSTRING  */
+  YYSYMBOL_SPACESYM = 112,                 /* SPACESYM  */
+  YYSYMBOL_SECTIONSYM = 113,               /* SECTIONSYM  */
+  YYSYMBOL_TOKENSYM = 114,                 /* TOKENSYM  */
+  YYSYMBOL_USEROPSYM = 115,                /* USEROPSYM  */
+  YYSYMBOL_VALUESYM = 116,                 /* VALUESYM  */
+  YYSYMBOL_VALUEMAPSYM = 117,              /* VALUEMAPSYM  */
+  YYSYMBOL_CONTEXTSYM = 118,               /* CONTEXTSYM  */
+  YYSYMBOL_NAMESYM = 119,                  /* NAMESYM  */
+  YYSYMBOL_VARSYM = 120,                   /* VARSYM  */
+  YYSYMBOL_BITSYM = 121,                   /* BITSYM  */
+  YYSYMBOL_SPECSYM = 122,                  /* SPECSYM  */
+  YYSYMBOL_VARLISTSYM = 123,               /* VARLISTSYM  */
+  YYSYMBOL_OPERANDSYM = 124,               /* OPERANDSYM  */
+  YYSYMBOL_JUMPSYM = 125,                  /* JUMPSYM  */
+  YYSYMBOL_MACROSYM = 126,                 /* MACROSYM  */
+  YYSYMBOL_LABELSYM = 127,                 /* LABELSYM  */
+  YYSYMBOL_SUBTABLESYM = 128,              /* SUBTABLESYM  */
+  YYSYMBOL_129_ = 129,                     /* '}'  */
+  YYSYMBOL_130_ = 130,                     /* '='  */
+  YYSYMBOL_131_ = 131,                     /* '('  */
+  YYSYMBOL_132_ = 132,                     /* ')'  */
+  YYSYMBOL_133_ = 133,                     /* ','  */
+  YYSYMBOL_134_ = 134,                     /* '['  */
+  YYSYMBOL_135_ = 135,                     /* ']'  */
+  YYSYMBOL_136_ = 136,                     /* '{'  */
+  YYSYMBOL_137_ = 137,                     /* ':'  */
+  YYSYMBOL_138_ = 138,                     /* ' '  */
+  YYSYMBOL_YYACCEPT = 139,                 /* $accept  */
+  YYSYMBOL_spec = 140,                     /* spec  */
+  YYSYMBOL_definition = 141,               /* definition  */
+  YYSYMBOL_constructorlike = 142,          /* constructorlike  */
+  YYSYMBOL_endiandef = 143,                /* endiandef  */
+  YYSYMBOL_aligndef = 144,                 /* aligndef  */
+  YYSYMBOL_tokendef = 145,                 /* tokendef  */
+  YYSYMBOL_tokenprop = 146,                /* tokenprop  */
+  YYSYMBOL_contextdef = 147,               /* contextdef  */
+  YYSYMBOL_contextprop = 148,              /* contextprop  */
+  YYSYMBOL_fielddef = 149,                 /* fielddef  */
+  YYSYMBOL_contextfielddef = 150,          /* contextfielddef  */
+  YYSYMBOL_spacedef = 151,                 /* spacedef  */
+  YYSYMBOL_spaceprop = 152,                /* spaceprop  */
+  YYSYMBOL_varnodedef = 153,               /* varnodedef  */
+  YYSYMBOL_bitrangedef = 154,              /* bitrangedef  */
+  YYSYMBOL_bitrangelist = 155,             /* bitrangelist  */
+  YYSYMBOL_bitrangesingle = 156,           /* bitrangesingle  */
+  YYSYMBOL_pcodeopdef = 157,               /* pcodeopdef  */
+  YYSYMBOL_valueattach = 158,              /* valueattach  */
+  YYSYMBOL_nameattach = 159,               /* nameattach  */
+  YYSYMBOL_varattach = 160,                /* varattach  */
+  YYSYMBOL_macrodef = 161,                 /* macrodef  */
+  YYSYMBOL_withblockstart = 162,           /* withblockstart  */
+  YYSYMBOL_withblockmid = 163,             /* withblockmid  */
+  YYSYMBOL_withblock = 164,                /* withblock  */
+  YYSYMBOL_id_or_nil = 165,                /* id_or_nil  */
+  YYSYMBOL_bitpat_or_nil = 166,            /* bitpat_or_nil  */
+  YYSYMBOL_macrostart = 167,               /* macrostart  */
+  YYSYMBOL_rtlbody = 168,                  /* rtlbody  */
+  YYSYMBOL_constructor = 169,              /* constructor  */
+  YYSYMBOL_constructprint = 170,           /* constructprint  */
+  YYSYMBOL_subtablestart = 171,            /* subtablestart  */
+  YYSYMBOL_pexpression = 172,              /* pexpression  */
+  YYSYMBOL_pequation = 173,                /* pequation  */
+  YYSYMBOL_elleq = 174,                    /* elleq  */
+  YYSYMBOL_ellrt = 175,                    /* ellrt  */
+  YYSYMBOL_atomic = 176,                   /* atomic  */
+  YYSYMBOL_constraint = 177,               /* constraint  */
+  YYSYMBOL_contextblock = 178,             /* contextblock  */
+  YYSYMBOL_contextlist = 179,              /* contextlist  */
+  YYSYMBOL_section_def = 180,              /* section_def  */
+  YYSYMBOL_rtlfirstsection = 181,          /* rtlfirstsection  */
+  YYSYMBOL_rtlcontinue = 182,              /* rtlcontinue  */
+  YYSYMBOL_rtl = 183,                      /* rtl  */
+  YYSYMBOL_rtlmid = 184,                   /* rtlmid  */
+  YYSYMBOL_statement = 185,                /* statement  */
+  YYSYMBOL_expr = 186,                     /* expr  */
+  YYSYMBOL_sizedstar = 187,                /* sizedstar  */
+  YYSYMBOL_jumpdest = 188,                 /* jumpdest  */
+  YYSYMBOL_varnode = 189,                  /* varnode  */
+  YYSYMBOL_integervarnode = 190,           /* integervarnode  */
+  YYSYMBOL_lhsvarnode = 191,               /* lhsvarnode  */
+  YYSYMBOL_label = 192,                    /* label  */
+  YYSYMBOL_exportvarnode = 193,            /* exportvarnode  */
+  YYSYMBOL_familysymbol = 194,             /* familysymbol  */
+  YYSYMBOL_specificsymbol = 195,           /* specificsymbol  */
+  YYSYMBOL_charstring = 196,               /* charstring  */
+  YYSYMBOL_intblist = 197,                 /* intblist  */
+  YYSYMBOL_intbpart = 198,                 /* intbpart  */
+  YYSYMBOL_stringlist = 199,               /* stringlist  */
+  YYSYMBOL_stringpart = 200,               /* stringpart  */
+  YYSYMBOL_anystringlist = 201,            /* anystringlist  */
+  YYSYMBOL_anystringpart = 202,            /* anystringpart  */
+  YYSYMBOL_valuelist = 203,                /* valuelist  */
+  YYSYMBOL_valuepart = 204,                /* valuepart  */
+  YYSYMBOL_varlist = 205,                  /* varlist  */
+  YYSYMBOL_varpart = 206,                  /* varpart  */
+  YYSYMBOL_paramlist = 207,                /* paramlist  */
+  YYSYMBOL_oplist = 208,                   /* oplist  */
+  YYSYMBOL_anysymbol = 209                 /* anysymbol  */
 };
 typedef enum yysymbol_kind_t yysymbol_kind_t;
 
@@ -650,19 +652,19 @@ union yyalloc
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  5
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   2629
+#define YYLAST   2604
 
 /* YYNTOKENS -- Number of terminals.  */
-#define YYNTOKENS  137
+#define YYNTOKENS  139
 /* YYNNTS -- Number of nonterminals.  */
 #define YYNNTS  71
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  336
+#define YYNRULES  340
 /* YYNSTATES -- Number of states.  */
-#define YYNSTATES  714
+#define YYNSTATES  718
 
 /* YYMAXUTOK -- Last valid token kind.  */
-#define YYMAXUTOK   368
+#define YYMAXUTOK   370
 
 
 /* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
@@ -679,16 +681,16 @@ static const yytype_uint8 yytranslate[] =
        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,   136,    43,     2,     2,     2,    38,    11,     2,
-     129,   130,    36,    32,   131,    33,     2,    37,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,   135,     8,
-      17,   128,    18,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,   138,    43,     2,     2,     2,    38,    11,     2,
+     131,   132,    36,    32,   133,    33,     2,    37,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,   137,     8,
+      17,   130,    18,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,   132,     2,   133,     9,     2,     2,     2,     2,     2,
+       2,   134,     2,   135,     9,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,   134,     6,   127,    44,     2,     2,     2,
+       2,     2,     2,   136,     6,   129,    44,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
@@ -712,7 +714,8 @@ static const yytype_uint8 yytranslate[] =
       88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
       98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
      108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
-     118,   119,   120,   121,   122,   123,   124,   125,   126
+     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
+     128
 };
 
 #if SLEIGHDEBUG
@@ -722,37 +725,38 @@ static const yytype_int16 yyrline[] =
        0,   155,   155,   156,   157,   158,   160,   161,   162,   163,
      164,   165,   166,   167,   168,   169,   171,   172,   173,   174,
      176,   177,   179,   181,   183,   184,   185,   186,   187,   189,
-     191,   192,   195,   196,   197,   198,   199,   201,   202,   203,
-     204,   205,   206,   208,   210,   211,   212,   213,   214,   215,
-     216,   218,   220,   222,   224,   225,   227,   230,   232,   234,
-     236,   238,   241,   243,   244,   245,   247,   249,   250,   251,
-     254,   255,   258,   260,   261,   262,   264,   265,   267,   268,
-     269,   270,   271,   272,   273,   274,   275,   277,   278,   279,
-     280,   282,   284,   287,   288,   289,   290,   291,   292,   293,
-     294,   295,   296,   297,   298,   299,   301,   302,   303,   304,
-     306,   307,   309,   310,   312,   313,   315,   316,   317,   318,
-     319,   320,   321,   324,   325,   326,   327,   329,   330,   332,
-     333,   334,   335,   336,   337,   339,   340,   342,   344,   345,
-     347,   348,   349,   350,   351,   353,   354,   355,   356,   358,
-     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
+     191,   192,   195,   196,   197,   198,   199,   200,   201,   203,
+     204,   205,   206,   207,   208,   209,   210,   212,   214,   215,
+     216,   217,   218,   219,   220,   222,   224,   226,   228,   229,
+     231,   234,   236,   238,   240,   242,   245,   247,   248,   249,
+     251,   253,   254,   255,   258,   259,   262,   264,   265,   266,
+     268,   269,   271,   272,   273,   274,   275,   276,   277,   278,
+     279,   281,   282,   283,   284,   286,   288,   291,   292,   293,
+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
+     305,   306,   307,   308,   310,   311,   313,   314,   316,   317,
+     319,   320,   321,   322,   323,   324,   325,   328,   329,   330,
+     331,   333,   334,   336,   337,   338,   339,   340,   341,   343,
+     344,   346,   348,   349,   351,   352,   353,   354,   355,   357,
+     358,   359,   360,   362,   363,   364,   365,   366,   367,   368,
      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
-     379,   380,   381,   382,   384,   385,   386,   387,   388,   389,
+     379,   380,   381,   382,   383,   384,   385,   386,   388,   389,
      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
      400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
      420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
      430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
      440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   452,   453,   454,   455,   457,   458,   459,   460,   461,
-     462,   463,   465,   466,   467,   468,   470,   471,   472,   473,
-     474,   476,   477,   478,   480,   481,   483,   484,   485,   486,
-     487,   488,   490,   491,   492,   493,   494,   496,   497,   498,
-     499,   501,   502,   504,   505,   506,   508,   509,   510,   512,
-     513,   514,   517,   518,   520,   521,   522,   524,   526,   527,
-     528,   529,   531,   532,   533,   535,   536,   537,   538,   539,
-     541,   542,   544,   545,   547,   548,   551,   552,   553,   555,
-     556,   557,   559,   560,   561,   562,   563,   564,   565,   566,
-     567,   568,   569,   570,   571,   572,   573
+     450,   451,   452,   453,   454,   456,   457,   458,   459,   461,
+     462,   463,   464,   465,   466,   467,   469,   470,   471,   472,
+     474,   475,   476,   477,   478,   480,   481,   482,   484,   485,
+     487,   488,   489,   490,   491,   492,   494,   495,   496,   497,
+     498,   500,   501,   502,   503,   505,   506,   508,   509,   510,
+     512,   513,   514,   516,   517,   518,   521,   522,   524,   525,
+     526,   528,   530,   531,   532,   533,   535,   536,   537,   539,
+     540,   541,   542,   543,   545,   546,   548,   549,   551,   552,
+     555,   556,   557,   559,   560,   561,   563,   564,   565,   566,
+     567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
+     577
 };
 #endif
 
@@ -783,21 +787,21 @@ static const char *const yytname[] =
   "IF_KEY", "DEFINE_KEY", "ATTACH_KEY", "MACRO_KEY", "SPACE_KEY",
   "TYPE_KEY", "RAM_KEY", "DEFAULT_KEY", "REGISTER_KEY", "ENDIAN_KEY",
   "WITH_KEY", "ALIGN_KEY", "OP_UNIMPL", "TOKEN_KEY", "SIGNED_KEY",
-  "NOFLOW_KEY", "HEX_KEY", "DEC_KEY", "BIG_KEY", "LITTLE_KEY", "SIZE_KEY",
-  "WORDSIZE_KEY", "OFFSET_KEY", "NAMES_KEY", "VALUES_KEY", "VARIABLES_KEY",
-  "PCODEOP_KEY", "IS_KEY", "LOCAL_KEY", "DELAYSLOT_KEY", "CROSSBUILD_KEY",
-  "EXPORT_KEY", "BUILD_KEY", "CONTEXT_KEY", "ELLIPSIS_KEY",
-  "GLOBALSET_KEY", "BITRANGE_KEY", "CHAR", "INTEGER", "INTB", "STRING",
-  "SYMBOLSTRING", "SPACESYM", "SECTIONSYM", "TOKENSYM", "USEROPSYM",
-  "VALUESYM", "VALUEMAPSYM", "CONTEXTSYM", "NAMESYM", "VARSYM", "BITSYM",
-  "SPECSYM", "VARLISTSYM", "OPERANDSYM", "JUMPSYM", "MACROSYM", "LABELSYM",
-  "SUBTABLESYM", "'}'", "'='", "'('", "')'", "','", "'['", "']'", "'{'",
-  "':'", "' '", "$accept", "spec", "definition", "constructorlike",
-  "endiandef", "aligndef", "tokendef", "tokenprop", "contextdef",
-  "contextprop", "fielddef", "contextfielddef", "spacedef", "spaceprop",
-  "varnodedef", "bitrangedef", "bitrangelist", "bitrangesingle",
-  "pcodeopdef", "valueattach", "nameattach", "varattach", "macrodef",
-  "withblockstart", "withblockmid", "withblock", "id_or_nil",
+  "NOFLOW_KEY", "HEX_KEY", "DEC_KEY", "OCT_KEY", "BIN_KEY", "BIG_KEY",
+  "LITTLE_KEY", "SIZE_KEY", "WORDSIZE_KEY", "OFFSET_KEY", "NAMES_KEY",
+  "VALUES_KEY", "VARIABLES_KEY", "PCODEOP_KEY", "IS_KEY", "LOCAL_KEY",
+  "DELAYSLOT_KEY", "CROSSBUILD_KEY", "EXPORT_KEY", "BUILD_KEY",
+  "CONTEXT_KEY", "ELLIPSIS_KEY", "GLOBALSET_KEY", "BITRANGE_KEY", "CHAR",
+  "INTEGER", "INTB", "STRING", "SYMBOLSTRING", "SPACESYM", "SECTIONSYM",
+  "TOKENSYM", "USEROPSYM", "VALUESYM", "VALUEMAPSYM", "CONTEXTSYM",
+  "NAMESYM", "VARSYM", "BITSYM", "SPECSYM", "VARLISTSYM", "OPERANDSYM",
+  "JUMPSYM", "MACROSYM", "LABELSYM", "SUBTABLESYM", "'}'", "'='", "'('",
+  "')'", "','", "'['", "']'", "'{'", "':'", "' '", "$accept", "spec",
+  "definition", "constructorlike", "endiandef", "aligndef", "tokendef",
+  "tokenprop", "contextdef", "contextprop", "fielddef", "contextfielddef",
+  "spacedef", "spaceprop", "varnodedef", "bitrangedef", "bitrangelist",
+  "bitrangesingle", "pcodeopdef", "valueattach", "nameattach", "varattach",
+  "macrodef", "withblockstart", "withblockmid", "withblock", "id_or_nil",
   "bitpat_or_nil", "macrostart", "rtlbody", "constructor",
   "constructprint", "subtablestart", "pexpression", "pequation", "elleq",
   "ellrt", "atomic", "constraint", "contextblock", "contextlist",
@@ -816,12 +820,12 @@ yysymbol_name (yysymbol_kind_t yysymbol)
 }
 #endif
 
-#define YYPACT_NINF (-293)
+#define YYPACT_NINF (-319)
 
 #define yypact_value_is_default(Yyn) \
   ((Yyn) == YYPACT_NINF)
 
-#define YYTABLE_NINF (-271)
+#define YYTABLE_NINF (-275)
 
 #define yytable_value_is_error(Yyn) \
   ((Yyn) == YYTABLE_NINF)
@@ -830,78 +834,78 @@ yysymbol_name (yysymbol_kind_t yysymbol)
    STATE-NUM.  */
 static const yytype_int16 yypact[] =
 {
-      35,    12,    37,  -293,   -15,  -293,    20,  1667,   303,    61,
-     -72,   -13,    41,  -293,  -293,  -293,  -293,  -293,   430,  -293,
-    1591,  -293,    89,  -293,  -293,  -293,  -293,  -293,  -293,  -293,
-    -293,    40,  -293,    47,  -293,    24,   180,    84,  -293,  -293,
-    2467,    99,  2486,   -27,   160,   191,   211,   -41,   -41,   -41,
-     206,  -293,  -293,   234,  -293,  -293,  -293,   244,  -293,  -293,
-    -293,  -293,  -293,  -293,  -293,  -293,  -293,  -293,  -293,  -293,
-    -293,  -293,  -293,   346,   247,  -293,   249,   320,   251,  -293,
-     253,  -293,   255,   261,   -33,  -293,  -293,  -293,  -293,  -293,
-      78,  -293,  -293,  -293,  -293,   286,  -293,    78,  -293,  -293,
-    -293,   286,   390,   392,  -293,  -293,   305,   290,  -293,  -293,
-     313,   415,  -293,   301,     6,  -293,   307,  -293,  -293,    36,
-     323,   -16,   -92,   344,    78,   327,  -293,  -293,  -293,   328,
-     330,  -293,  -293,  -293,  -293,   331,    83,   355,   356,   337,
-    1721,  1522,  -293,  -293,  -293,  -293,  -293,  -293,   339,  -293,
-      78,     5,  -293,  -293,   368,  -293,    45,  -293,     5,  -293,
-    -293,   457,   362,  -293,  2419,  -293,   354,  -293,  -293,   -54,
-    -293,  -293,   186,  2503,   466,   370,  -293,   -24,   470,  -293,
-     -87,   474,  -293,    60,   352,   365,   381,   388,   393,   397,
-    -293,  -293,  -293,  -293,  -293,   262,   -22,  -103,  -293,   369,
-     389,    10,  1571,   406,   367,   314,   382,   384,   372,    33,
-     387,  -293,   385,  -293,  -293,  -293,   391,    94,  -293,  1571,
-      -8,  -293,   149,  -293,   151,  -293,  1543,    16,    78,    78,
-      78,  -293,   -60,  -293,  1543,  1543,  1543,  1543,  1543,  1543,
-     -60,  -293,   400,  -293,  -293,  -293,   386,  -293,   431,  -293,
-    -293,  -293,  -293,  -293,  2443,  -293,  -293,  -293,   416,  -293,
-    -293,   -21,  -293,  -293,  -293,   -39,  -293,  -293,   419,   399,
-     403,   404,   405,   424,  -293,  -293,   417,  -293,  -293,   519,
-     532,   447,   452,  -293,   427,  -293,  -293,  -293,  1571,   552,
-    -293,  1571,   553,  -293,  1571,  1571,  1571,  1571,  1571,   433,
-     442,   443,   445,   482,   483,   485,   487,   522,   523,   525,
-     527,   558,   563,   566,   603,   606,   639,   640,  -293,  1571,
-    1845,  1571,  -293,   139,    -4,   448,   587,   602,   363,   642,
-     771,  -293,   164,   802,  -293,   807,   712,  1571,   714,  1571,
-    1571,  1571,  1528,   749,   752,  1571,   754,  1543,  1543,  -293,
-    1543,  2405,  -293,  -293,  -293,    85,   884,  -293,   -50,  -293,
-    -293,  -293,  2405,  2405,  2405,  2405,  2405,  2405,  -293,   819,
-     794,   812,  -293,  -293,  -293,  -293,   829,  -293,  -293,  -293,
-    -293,  -293,  -293,  -293,  -293,   830,   869,   870,   874,   314,
-    -293,  -293,   882,  -293,   906,   325,  -293,   564,  -293,   604,
-    -293,  -293,  -293,  -293,  1571,  1571,  1571,  1571,  1571,  1571,
+     -21,    -7,    31,  -319,   -37,  -319,    37,   355,   370,   -11,
+     -47,   -10,    23,  -319,  -319,  -319,  -319,  -319,   290,  -319,
+     383,  -319,   379,  -319,  -319,  -319,  -319,  -319,  -319,  -319,
+    -319,    36,  -319,    87,  -319,    15,    51,   -14,  -319,  -319,
+    2442,   139,  2459,   -80,   159,   198,   205,   -45,   -45,   -45,
+     179,  -319,  -319,   192,  -319,  -319,  -319,   201,  -319,  -319,
+    -319,  -319,  -319,  -319,  -319,  -319,  -319,  -319,  -319,  -319,
+    -319,  -319,  -319,  1649,   234,  -319,   236,  1713,   246,  -319,
+     250,  -319,   253,   263,   442,  -319,  -319,  -319,  -319,  -319,
+    1663,  -319,  -319,  -319,  -319,   289,  -319,  1663,  -319,  -319,
+    -319,   289,   382,   404,  -319,  -319,   309,   288,  -319,  -319,
+     323,   423,  -319,   325,    10,  -319,   327,  -319,  -319,   -83,
+     319,    -5,    64,   350,  1663,   359,  -319,  -319,  -319,  -319,
+    -319,   363,   384,  -319,  -319,  -319,  -319,  -319,  -319,   385,
+     187,   402,   405,   389,  1707,  1522,  -319,  -319,  -319,  -319,
+    -319,  -319,   391,  -319,  1663,     2,  -319,  -319,   415,  -319,
+      39,  -319,     2,  -319,  -319,   516,   418,  -319,  2394,  -319,
+     408,  -319,  -319,   -43,  -319,  -319,   314,  2476,   519,   422,
+    -319,    77,   525,  -319,    14,   531,  -319,    70,   409,   303,
+     438,   439,   441,   444,  -319,  -319,  -319,  -319,  -319,   257,
+     -42,    38,  -319,  1620,  1668,    -4,  1571,   431,   413,   358,
+     412,   426,   420,    58,   427,  -319,   437,  -319,  -319,  -319,
+     476,   -19,  -319,  1571,   -87,  -319,    33,  -319,    88,  -319,
+    1543,     6,  1663,  1663,  1663,  -319,   -58,  -319,  1543,  1543,
+    1543,  1543,  1543,  1543,   -58,  -319,   440,  -319,  -319,  -319,
+     434,  -319,   480,  -319,  -319,  -319,  -319,  -319,  2418,  -319,
+    -319,  -319,   500,  -319,  -319,   -18,  -319,  -319,  -319,   -74,
+    -319,  -319,   502,   474,   514,   515,   517,   550,  -319,  -319,
+     544,  -319,  -319,   666,   667,   578,   583,  -319,   559,  -319,
+    -319,  -319,  1571,   722,  -319,  1571,   725,  -319,  1571,  1571,
+    1571,  1571,  1571,   635,   636,   644,   646,   677,   682,   687,
+     727,   762,   763,   802,   803,   805,   842,   843,   845,   882,
+     883,   885,  -319,  1571,  1833,  1571,  -319,   149,    -2,   601,
+     706,   720,   264,   717,   888,  -319,  1461,  1045,  -319,  1048,
+     946,  1571,   985,  1571,  1571,  1571,  1526,   986,   988,  1571,
+    1025,  1543,  1543,  -319,  1543,   283,  -319,  -319,  -319,   360,
+    1123,  -319,   407,  -319,  -319,  -319,   283,   283,   283,   283,
+     283,   283,  -319,  1059,  1065,  1044,  -319,  -319,  -319,  -319,
+    1068,  -319,  -319,  -319,  -319,  -319,  -319,  -319,  -319,  1105,
+    1106,  1108,  1145,   358,  -319,  -319,  1119,  -319,  1144,   321,
+    -319,   560,  -319,   600,  -319,  -319,  -319,  -319,  1571,  1571,
     1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,
-    1571,  1571,  1571,   808,  1571,  1571,  1571,  1571,  1571,  1571,
+    1571,  1571,  1571,  1571,  1571,  1571,  1571,   806,  1571,  1571,
     1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,
     1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,
     1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,
-     409,  -293,    14,   914,   949,  -293,  1571,   950,  -293,   930,
-     212,   989,  -293,   990,  1092,  -293,  1127,  -293,  -293,  -293,
-    -293,  1898,  1012,  2218,    66,  1938,   136,  1571,  1006,  1047,
-    1978,  1045,  -293,  -293,   380,  1543,  1543,  1543,  1543,  1543,
-    1543,  1543,  1543,  1543,  1051,  -293,  1087,  1132,  -293,  -293,
-    -293,   -10,  1167,  1085,  1114,  -293,  1125,  1126,  1166,  1170,
-    -293,  1200,  1203,  1332,  1367,  1372,   848,   685,   888,   725,
-     767,   928,   968,  1008,  1048,  1088,  1128,  1168,  1208,  1248,
-     162,   644,  1288,  1328,   182,  -293,  2257,  2294,  2294,  2328,
-    2360,  2430,  1773,  1773,  1773,  1773,  2484,  2484,  2484,  2484,
-    2484,  2484,  2484,  2484,  2484,  2484,  2484,  2484,  1856,  1856,
-    1856,  2382,  2382,  2382,  2382,  -293,  -293,  -293,  -293,  -293,
-    -293,  -293,  1407,  1246,  1285,  -293,  2018,     0,  1412,  1447,
-    1452,   314,  -293,  -293,  -293,  1571,  1487,  1571,  -293,  1492,
-    2058,  -293,  -293,  -293,  1350,  -293,  2463,   285,  1556,   169,
-     169,   296,   296,  -293,  -293,  1613,  1543,  1543,  1656,   216,
-    -293,  -293,   321,  1390,   -27,  -293,  -293,  -293,  -293,  1429,
-    -293,  -293,  -293,  -293,  -293,  1571,  -293,  1571,  1571,  -293,
-    -293,  -293,  -293,  -293,  -293,  -293,  -293,  -293,  -293,  -293,
-    1571,  -293,  -293,  -293,  -293,  -293,  1430,  -293,  -293,  1571,
-    -293,  -293,  -293,  -293,  2098,  -293,  2218,  -293,  -293,  1438,
-    1409,  1443,  1565,  2396,  -293,  -293,  1549,  1550,  -293,  -293,
-    1450,  1573,  -293,  1368,  1408,  1448,  1488,  1451,  2138,  -293,
-    1462,  1475,  1480,  -293,  -293,  -293,  -293,  -293,  -293,  -293,
-    -293,  -293,  -293,  -293,  -293,  1571,  1470,  1473,  2178,  1597,
-    1600,  -293,  -293,  -293
+    1571,  1571,  1571,  1571,     8,  -319,     5,  1185,  1186,  -319,
+    1571,  1188,  -319,  1201,   260,  1226,  -319,  1228,  1365,  -319,
+    1368,  -319,  -319,  -319,  -319,  1886,  1244,  2206,   185,  1926,
+     190,  1571,  1281,  1284,  1966,  1283,  -319,  -319,   164,  1543,
+    1543,  1543,  1543,  1543,  1543,  1543,  1543,  1543,  1322,  -319,
+    1324,  1363,  -319,  -319,  -319,    -6,  1364,  1323,  1388,  -319,
+    1401,  1402,  1404,  1441,  -319,  1438,  1442,  1572,  1576,  1580,
+     846,   683,   886,   723,   765,   926,   966,  1006,  1046,  1086,
+    1126,  1166,  1206,  1246,   266,   640,  1286,  1326,   293,  -319,
+    2245,  2282,  2282,  2316,  2348,  2409,  2435,  2435,  2435,  2435,
+    2461,  2461,  2461,  2461,  2461,  2461,  2461,  2461,  2461,  2461,
+    2461,  2461,  1844,  1844,  1844,   435,   435,   435,   435,  -319,
+    -319,  -319,  -319,  -319,  -319,  -319,  1582,  1447,  1460,  -319,
+    2006,     1,  1588,  1589,  1592,   358,  -319,  -319,  -319,  1571,
+    1593,  1571,  -319,  1594,  2046,  -319,  -319,  -319,  1495,  -319,
+     252,    50,   241,   455,   455,   154,   154,  -319,  -319,  1597,
+    1543,  1543,  1640,   265,  -319,  -319,   340,  1497,   -80,  -319,
+    -319,  -319,  -319,  1500,  -319,  -319,  -319,  -319,  -319,  1571,
+    -319,  1571,  1571,  -319,  -319,  -319,  -319,  -319,  -319,  -319,
+    -319,  -319,  -319,  -319,  1571,  -319,  -319,  -319,  -319,  -319,
+    1501,  -319,  -319,  1571,  -319,  -319,  -319,  -319,  2086,  -319,
+    2206,  -319,  -319,  1475,  1478,  1479,  1562,  2384,  -319,  -319,
+    1583,  1606,  -319,  -319,  1507,  1635,  -319,  1366,  1406,  1446,
+    1486,  1512,  2126,  -319,  1518,  1531,  1536,  -319,  -319,  -319,
+    -319,  -319,  -319,  -319,  -319,  -319,  -319,  -319,  -319,  1571,
+    1523,  1532,  2166,  1650,  1662,  -319,  -319,  -319
 };
 
 /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
@@ -910,90 +914,90 @@ static const yytype_int16 yypact[] =
 static const yytype_int16 yydefact[] =
 {
        0,     0,     0,     2,     0,     1,     0,     0,     0,     0,
-      67,     0,     0,    89,     4,     5,     3,     6,     0,     7,
+      71,     0,     0,    93,     4,     5,     3,     6,     0,     7,
        0,     8,     0,     9,    10,    11,    12,    13,    14,    17,
-      63,     0,    18,     0,    16,     0,     0,     0,    15,    19,
+      67,     0,    18,     0,    16,     0,     0,     0,    15,    19,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,    69,    68,     0,    88,    87,    23,     0,   322,   323,
-     324,   325,   328,   329,   330,   331,   332,   336,   333,   334,
-     335,   326,   327,    27,     0,    29,     0,    31,     0,    43,
-       0,    50,     0,     0,     0,    66,    64,    65,   145,    82,
-       0,   281,    83,    86,    85,    84,    81,     0,    78,    80,
-      90,    79,     0,     0,    44,    45,     0,     0,    28,   293,
-       0,     0,    30,     0,     0,    54,     0,   303,   304,     0,
-       0,     0,     0,   319,    70,     0,    34,    35,    36,     0,
-       0,    39,    40,    41,    42,     0,     0,     0,     0,     0,
-     140,     0,   272,   273,   274,   275,   124,   276,   123,   126,
-       0,   127,   106,   111,   113,   114,   125,   282,   127,    20,
-      21,     0,     0,   294,     0,    57,     0,    53,    55,     0,
-     305,   306,     0,     0,     0,     0,   284,     0,     0,   311,
-       0,     0,   320,     0,   127,    71,     0,     0,     0,     0,
-      46,    47,    48,    49,    61,     0,     0,   244,   257,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   256,   254,
-       0,   277,     0,   278,   279,   280,     0,   255,   146,     0,
-       0,   253,     0,   173,   252,   110,     0,     0,     0,     0,
-       0,   129,     0,   112,     0,     0,     0,     0,     0,     0,
-       0,    22,     0,   295,   292,   296,     0,    52,     0,   309,
-     307,   308,   302,   298,     0,   299,    59,   285,     0,   286,
-     288,     0,    58,   313,   312,     0,    60,    72,     0,     0,
-       0,     0,     0,     0,   254,   255,     0,   259,   252,     0,
-       0,     0,     0,   247,   246,   251,   248,   245,     0,     0,
-     250,     0,     0,   170,     0,     0,     0,     0,     0,     0,
+       0,    73,    72,     0,    92,    91,    23,     0,   326,   327,
+     328,   329,   332,   333,   334,   335,   336,   340,   337,   338,
+     339,   330,   331,    27,     0,    29,     0,    31,     0,    47,
+       0,    54,     0,     0,     0,    70,    68,    69,   149,    86,
+       0,   285,    87,    90,    89,    88,    85,     0,    82,    84,
+      94,    83,     0,     0,    48,    49,     0,     0,    28,   297,
+       0,     0,    30,     0,     0,    58,     0,   307,   308,     0,
+       0,     0,     0,   323,    74,     0,    34,    35,    36,    37,
+      38,     0,     0,    41,    42,    43,    44,    45,    46,     0,
+       0,     0,     0,     0,   144,     0,   276,   277,   278,   279,
+     128,   280,   127,   130,     0,   131,   110,   115,   117,   118,
+     129,   286,   131,    20,    21,     0,     0,   298,     0,    61,
+       0,    57,    59,     0,   309,   310,     0,     0,     0,     0,
+     288,     0,     0,   315,     0,     0,   324,     0,   131,    75,
+       0,     0,     0,     0,    50,    51,    52,    53,    65,     0,
+       0,   248,   261,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   260,   258,     0,   281,     0,   282,   283,   284,
+       0,   259,   150,     0,     0,   257,     0,   177,   256,   114,
+       0,     0,     0,     0,     0,   133,     0,   116,     0,     0,
+       0,     0,     0,     0,     0,    22,     0,   299,   296,   300,
+       0,    56,     0,   313,   311,   312,   306,   302,     0,   303,
+      63,   289,     0,   290,   292,     0,    62,   317,   316,     0,
+      64,    76,     0,     0,     0,     0,     0,     0,   258,   259,
+       0,   263,   256,     0,     0,     0,     0,   251,   250,   255,
+     252,   249,     0,     0,   254,     0,     0,   174,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   238,     0,
-       0,     0,   174,   252,     0,     0,     0,     0,     0,     0,
-     143,   271,     0,     0,   266,     0,     0,     0,     0,   316,
-       0,   316,     0,     0,     0,     0,     0,     0,     0,    91,
-       0,   122,    92,    93,   115,   108,   109,   107,     0,    75,
-     145,    76,   117,   118,   120,   121,   119,   116,    77,    24,
-       0,     0,   300,   297,   301,   287,     0,   289,   291,   283,
-     315,   314,   310,   321,    62,     0,     0,     0,     0,     0,
-     265,   264,     0,   243,     0,     0,   165,     0,   168,     0,
-     189,   216,   202,   190,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   316,     0,
-       0,     0,   316,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   242,     0,     0,     0,   178,   256,     0,     0,
+       0,     0,     0,     0,   147,   275,     0,     0,   270,     0,
+       0,     0,     0,   320,     0,   320,     0,     0,     0,     0,
+       0,     0,     0,    95,     0,   126,    96,    97,   119,   112,
+     113,   111,     0,    79,   149,    80,   121,   122,   124,   125,
+     123,   120,    81,    24,     0,     0,   304,   301,   305,   291,
+       0,   293,   295,   287,   319,   318,   314,   325,    66,     0,
+       0,     0,     0,     0,   269,   268,     0,   247,     0,     0,
+     169,     0,   172,     0,   193,   220,   206,   194,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   320,     0,     0,     0,   320,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   175,     0,     0,     0,   147,     0,     0,   154,     0,
-       0,     0,   267,     0,   144,   263,     0,   261,   141,   161,
-     258,     0,     0,   317,     0,     0,     0,     0,     0,     0,
-       0,     0,   104,   105,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   134,     0,     0,   128,   138,
-     145,     0,     0,     0,     0,   290,     0,     0,     0,     0,
-     260,   242,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   176,   205,   204,   203,   193,
-     191,   192,   179,   180,   206,   207,   181,   184,   182,   183,
-     185,   186,   187,   188,   208,   209,   210,   211,   194,   195,
-     196,   177,   178,   212,   213,   197,   198,   200,   199,   201,
-     214,   215,     0,     0,     0,   236,     0,     0,     0,     0,
-       0,     0,   269,   142,   151,     0,     0,     0,   158,     0,
-       0,   160,   159,   149,     0,    94,   101,   102,   100,    98,
-      99,    95,    96,    97,   103,     0,     0,     0,     0,     0,
-      73,   137,     0,     0,     0,    32,    33,    37,    38,     0,
-     249,   167,   169,   171,   220,     0,   219,     0,     0,   226,
-     217,   218,   228,   229,   230,   225,   224,   227,   240,   231,
-       0,   233,   234,   239,   166,   235,     0,   150,   148,     0,
-     164,   163,   162,   268,     0,   156,   318,   172,   155,     0,
-       0,     0,     0,     0,    74,   139,     0,     0,    26,    25,
-       0,     0,   241,     0,     0,     0,     0,     0,     0,   153,
-       0,     0,     0,   130,   133,   135,   136,    56,    51,   221,
-     222,   223,   232,   237,   152,     0,     0,     0,     0,     0,
-       0,   157,   131,   132
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   179,     0,     0,     0,   151,
+       0,     0,   158,     0,     0,     0,   271,     0,   148,   267,
+       0,   265,   145,   165,   262,     0,     0,   321,     0,     0,
+       0,     0,     0,     0,     0,     0,   108,   109,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   138,
+       0,     0,   132,   142,   149,     0,     0,     0,     0,   294,
+       0,     0,     0,     0,   264,   246,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   180,
+     209,   208,   207,   197,   195,   196,   183,   184,   210,   211,
+     185,   188,   186,   187,   189,   190,   191,   192,   212,   213,
+     214,   215,   198,   199,   200,   181,   182,   216,   217,   201,
+     202,   204,   203,   205,   218,   219,     0,     0,     0,   240,
+       0,     0,     0,     0,     0,     0,   273,   146,   155,     0,
+       0,     0,   162,     0,     0,   164,   163,   153,     0,    98,
+     105,   106,   104,   102,   103,    99,   100,   101,   107,     0,
+       0,     0,     0,     0,    77,   141,     0,     0,     0,    32,
+      33,    39,    40,     0,   253,   171,   173,   175,   224,     0,
+     223,     0,     0,   230,   221,   222,   232,   233,   234,   229,
+     228,   231,   244,   235,     0,   237,   238,   243,   170,   239,
+       0,   154,   152,     0,   168,   167,   166,   272,     0,   160,
+     322,   176,   159,     0,     0,     0,     0,     0,    78,   143,
+       0,     0,    26,    25,     0,     0,   245,     0,     0,     0,
+       0,     0,     0,   157,     0,     0,     0,   134,   137,   139,
+     140,    60,    55,   225,   226,   227,   236,   241,   156,     0,
+       0,     0,     0,     0,     0,   161,   135,   136
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-    -293,  -293,  1578,  1579,  -293,  -293,  -293,  -293,  -293,  -293,
-    -293,  -293,  -293,  -293,  -293,  -293,  -293,  1497,  -293,  -293,
-    -293,  -293,  -293,  -293,  -293,  -293,  -293,  -293,  -293,  1373,
-    -293,  -293,  -293,  -192,   -94,  -293,  1471,  -293,  -293,  -108,
-    -293,  1022,  -293,  -293,  1281,  1135,  -293,  -196,  -139,  -195,
-    -125,  1184,  1315,  -138,  -293,   -90,   -52,  1616,  -293,  -293,
-    1025,  -293,  -293,  -293,   366,  -293,  -293,  -293,  -292,  -293,
-      15
+    -319,  -319,  1641,  1642,  -319,  -319,  -319,  -319,  -319,  -319,
+    -319,  -319,  -319,  -319,  -319,  -319,  -319,  1557,  -319,  -319,
+    -319,  -319,  -319,  -319,  -319,  -319,  -319,  -319,  -319,  1431,
+    -319,  -319,  -319,  -200,   -77,  -319,  1533,  -319,  -319,  -136,
+    -319,  1055,  -319,  -319,  1316,  1168,  -319,  -204,  -143,  -199,
+    -133,  1217,  1351,  -141,  -319,   -90,   -60,  1652,  -319,  -319,
+    1061,  -319,  -319,  -319,   436,  -319,  -319,  -319,  -318,  -319,
+       9
 };
 
 /* YYDEFGOTO[NTERM-NUM].  */
@@ -1001,11 +1005,11 @@ static const yytype_int16 yydefgoto[] =
 {
        0,     2,    14,    15,     3,    16,    17,    18,    19,    20,
       73,    77,    21,    22,    23,    24,   114,   115,    25,    26,
-      27,    28,    29,    30,    31,    32,    53,   184,    33,   361,
-      34,    35,    36,   351,   151,   152,   153,   154,   155,   232,
-     358,   621,   509,   510,   139,   140,   218,   483,   321,   289,
-     322,   221,   222,   290,   333,   352,   323,    95,   178,   261,
-     111,   164,   174,   254,   120,   172,   181,   265,   484,   183,
+      27,    28,    29,    30,    31,    32,    53,   188,    33,   365,
+      34,    35,    36,   355,   155,   156,   157,   158,   159,   236,
+     362,   625,   513,   514,   143,   144,   222,   487,   325,   293,
+     326,   225,   226,   294,   337,   356,   327,    95,   182,   265,
+     111,   168,   178,   258,   120,   176,   185,   269,   488,   187,
       74
 };
 
@@ -1014,653 +1018,650 @@ static const yytype_int16 yydefgoto[] =
    number is the opposite.  If YYTABLE_NINF, syntax error.  */
 static const yytype_int16 yytable[] =
 {
-     156,   219,   223,   158,   465,   292,   320,   156,   658,   258,
-     247,   228,   376,   229,   167,   220,   230,   175,   293,   619,
-     359,   263,   228,   342,   229,   195,   179,   230,    38,   281,
-     185,   264,   282,    89,   156,    78,    51,     5,     6,    40,
-     180,     6,   362,   363,   364,   365,   366,   367,    42,   486,
-     240,   156,   248,   504,    52,   105,   227,   108,   505,   234,
-     156,    43,   235,   236,   237,   238,   506,   332,    44,   380,
-     277,    45,   507,   117,   360,   118,   269,    46,   198,   381,
-     327,   109,   259,   508,   260,   377,   279,   378,   224,     4,
-     176,   119,   395,   229,   382,   397,   230,    79,   399,   400,
-     401,   402,   403,   280,     1,   110,     7,     8,     9,    84,
-       8,     9,   379,    37,   113,    10,   177,   620,    10,    90,
-     208,   343,    54,   423,   466,   461,   540,   344,   659,    91,
-     544,   467,    92,    93,   355,   356,   357,   231,   156,   156,
-     156,   481,   294,   278,   485,    11,   354,    39,    11,   490,
-     170,   325,   171,   278,   334,   492,   493,   190,   494,   191,
-      94,   337,    80,    12,    81,  -262,    12,    85,   338,    50,
-     102,   103,    13,   239,   353,    13,    55,    82,    83,   245,
-     141,    88,   353,   353,   353,   353,   353,   353,   255,    96,
-     267,   268,   142,   143,   144,   145,   596,   597,   146,   147,
-     148,   500,   501,   472,   149,   502,   503,   150,   526,   527,
-     528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
-     538,   539,  -263,   541,   542,   543,  -263,   106,   546,   547,
-     548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
-     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
-     578,   579,   580,   581,   520,   582,   599,   597,   462,   374,
-     586,   463,   474,   195,   464,    97,   278,   345,   112,  -261,
-     477,   346,   211,  -261,   213,    91,   214,   215,    98,    99,
-     475,   600,   648,   597,   249,   353,   353,   497,   353,   113,
-     250,   116,   251,   606,   607,   608,   609,   610,   611,   612,
-     613,   614,   653,   597,   498,   499,   100,   500,   501,   252,
-     589,   502,   503,   590,   676,   195,   198,   677,   424,   425,
-     426,   427,   502,   503,   428,   123,   429,   278,   430,   431,
-     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
-     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
-     452,   453,   454,   455,   456,   457,   458,   459,   208,   124,
-     274,   228,   125,   229,   195,   129,   230,   130,   198,   135,
-     211,   136,   213,   137,   214,   215,   196,   495,   275,   138,
-     496,   157,   497,   328,    47,    48,    49,   276,   159,   664,
-     160,   666,   131,   132,   133,   134,   196,   678,   679,   498,
-     499,   161,   500,   501,   121,   122,   502,   503,   197,   162,
-     208,   163,   274,   165,   672,   673,   196,   198,   126,   166,
-     127,   128,   211,   283,   213,   169,   214,   215,    56,   683,
-     275,   684,   685,   353,   353,   353,   353,   353,   353,   353,
-     353,   353,   182,   283,   686,   173,   186,   187,   523,   188,
-     189,   192,   193,   688,   194,   241,   663,   226,   242,   208,
-     233,   274,   246,   283,   256,   284,   257,   285,   262,   219,
-     223,   211,   266,   213,   231,   214,   215,   270,   329,   275,
-     330,   286,   287,   220,   271,   284,   326,   285,   471,   272,
-     211,   288,   213,   273,   214,   215,   335,   336,   331,   708,
-     605,   286,   287,   340,   324,   284,   339,   285,   370,   371,
-     341,   291,   375,   389,   211,   670,   213,   383,   214,   215,
-     369,   286,   287,   384,   385,   386,   387,   390,    57,   278,
-      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
-     391,    68,    69,    70,    71,   388,    72,   392,   393,   394,
-     396,   398,   404,   671,   353,   353,   224,   424,   425,   426,
-     427,   405,   406,   428,   407,   429,   468,   430,   431,   432,
-     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
-     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
-     453,   454,   455,   456,   457,   458,   459,   424,   425,   426,
-     427,   408,   409,   428,   410,   429,   411,   430,   431,   432,
-     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
-     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
-     453,   454,   455,   456,   457,   458,   459,   424,   425,   426,
-     427,   412,   413,   428,   414,   429,   415,   430,   431,   432,
-     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
-     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
-     453,   454,   455,   456,   457,   458,   459,   416,   424,   425,
-     426,   427,   417,   469,   428,   418,   429,   524,   430,   431,
-     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
-     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
-     452,   453,   454,   455,   456,   457,   458,   459,   424,   425,
-     426,   427,   419,   470,   428,   420,   429,   525,   430,   431,
-     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
-     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
-     452,   453,   454,   455,   456,   457,   458,   459,   421,   422,
-     424,   425,   426,   427,   649,   650,   428,   473,   429,  -270,
-     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
+     160,   223,   324,   227,   297,   296,   469,   160,   232,   662,
+     233,   224,   232,   234,   233,   380,   199,   234,   171,   346,
+     162,   251,   363,   623,    89,   200,   244,   490,   179,    78,
+     109,     5,     6,   174,   160,   175,   384,     6,   366,   367,
+     368,   369,   370,   371,   347,    38,   385,   189,     1,   105,
+     348,   108,   273,   238,   110,   160,   239,   240,   241,   242,
+      96,   386,   501,    51,   160,   252,   281,   336,   283,   202,
+       4,   117,   287,   118,   102,   103,   331,   231,   364,   502,
+     503,    52,   504,   505,   228,   284,   506,   507,   399,   119,
+     381,   401,   382,    37,   403,   404,   405,   406,   407,    50,
+       7,     8,     9,   180,   544,    84,     8,     9,   548,    10,
+     262,  -267,    90,   212,    10,  -267,   288,   383,   289,   427,
+     113,   465,    91,   624,   267,    92,    93,    54,   470,   181,
+     298,   663,   290,   291,   268,   471,   235,   485,   358,   282,
+     489,    11,   160,   160,   160,   494,    11,   329,    97,   282,
+     338,   496,   497,    94,   498,   359,   360,   361,    91,    12,
+      55,    98,    99,   349,    12,    85,    39,   350,    13,   243,
+     357,   499,   285,    13,   500,   286,   501,   249,   357,   357,
+     357,   357,   357,   357,   183,   263,   259,   264,   341,   100,
+     506,   507,  -266,   502,   503,   342,   504,   505,   184,   476,
+     506,   507,   271,   272,   530,   531,   532,   533,   534,   535,
+     536,   537,   538,   539,   540,   541,   542,   543,  -265,   545,
+     546,   547,  -265,    88,   550,   551,   552,   553,   554,   555,
+     556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
+     566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
+     576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
+     524,   194,   500,   195,   501,   586,   590,   378,   199,   106,
+     502,   503,   282,   504,   505,   199,   481,   506,   507,   112,
+     466,   502,   503,   467,   504,   505,   468,   604,   506,   507,
+     499,   357,   357,   500,   357,   501,   609,   116,    56,   610,
+     611,   612,   613,   614,   615,   616,   617,   618,   113,   232,
+     123,   233,   502,   503,   234,   504,   505,   600,   601,   506,
+     507,   202,   603,   601,   428,   429,   430,   431,   202,   124,
+     432,   125,   433,   282,   434,   435,   436,   437,   438,   439,
      440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     478,   424,   425,   426,   427,   479,   635,   428,   480,   429,
-     482,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   488,   637,   428,   489,   429,
-     491,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   230,   512,   428,   638,   429,
-     513,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   515,   516,   428,   545,   429,
-     514,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   517,   518,   428,   634,   429,
-     519,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   521,   522,   428,   636,   429,
-     584,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   585,   587,   428,   639,   429,
-     588,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   591,   592,   428,   640,   429,
-    -262,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   593,   601,   428,   641,   429,
-     595,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   602,   604,   428,   642,   429,
-     615,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   616,   623,   428,   643,   429,
-     624,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   625,   626,   428,   644,   429,
-     617,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   622,   627,   428,   645,   429,
-     628,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   629,   630,   428,   646,   429,
-     631,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   632,   655,   428,   647,   429,
-     633,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   654,   656,   428,   651,   429,
-     660,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   661,   669,   428,   652,   429,
-     662,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   665,   680,   428,   699,   429,
-     667,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,   682,   687,   428,   700,   429,
-     691,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   690,   495,   693,   692,   496,   347,   497,   701,   695,
-     696,   698,   195,   697,   703,   498,   499,   348,   500,   501,
-     705,   706,   502,   503,   498,   499,   707,   500,   501,    75,
-     709,   502,   503,   710,   295,   712,   296,   197,   713,    86,
-      87,   168,   225,   368,   297,   298,   299,   300,   702,   301,
-     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
-     312,   313,   314,   315,   316,   198,   142,   143,   144,   145,
-     675,   511,   146,   147,   148,   618,   583,   476,   149,   681,
-     349,   150,   101,     0,     0,     0,   487,   142,   143,   144,
-     145,   211,     0,   213,   147,   214,   215,   195,     0,     0,
-       0,     0,   350,   196,     0,     0,     0,   208,     0,   274,
-       0,     0,     0,     0,   317,   619,     0,     0,     0,   211,
-     318,   213,   197,   214,   215,     0,     0,   275,     0,    76,
-     319,    58,    59,    60,    61,    62,    63,    64,    65,    66,
-      67,     0,    68,    69,    70,    71,     0,    72,     0,     0,
-     198,   199,   200,   201,   202,     0,     0,   142,   143,   144,
-     145,   211,   195,   213,   147,   214,   215,     0,   196,    40,
-       0,     0,     0,     0,     0,     0,    41,     0,    42,     0,
-       0,     0,   203,   204,   205,     0,   207,   197,     0,     0,
-       0,    43,   208,     0,   209,     0,     0,     0,    44,   210,
-       0,    45,     0,     0,   211,   212,   213,    46,   214,   215,
-     216,     0,   217,   674,     0,   198,   199,   200,   201,   202,
-     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
-     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
-     454,   455,   456,   457,   458,   459,     0,   203,   204,   205,
-     206,   207,     0,     0,     0,     0,     0,   208,     0,   209,
-       0,     0,     0,     0,   210,     0,     0,     0,     0,   211,
-     212,   213,     0,   214,   215,   216,     0,   217,   424,   425,
-     426,   427,     0,     0,   428,     0,   429,     0,   430,   431,
-     432,   433,   434,   435,   436,   437,   438,   439,   440,   441,
-     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
-     452,   453,   454,   455,   456,   457,   458,   459,   449,   450,
-     451,   452,   453,   454,   455,   456,   457,   458,   459,     0,
-       0,   424,   425,   426,   427,     0,   594,   428,     0,   429,
-     460,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,     0,   598,   428,     0,   429,
-       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,     0,   603,   428,     0,   429,
-       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,     0,   657,   428,     0,   429,
-       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,     0,   668,   428,     0,   429,
-       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,     0,   689,   428,     0,   429,
-       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,     0,   704,   428,     0,   429,
-       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,     0,   711,   428,     0,   429,
-       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   424,   425,   426,   427,     0,     0,   428,     0,   429,
-       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
+     460,   461,   462,   463,   131,   212,   132,   278,   233,   199,
+     593,   234,   212,   594,   278,   680,   139,   215,   681,   217,
+     140,   218,   219,   141,   215,   279,   217,    79,   218,   219,
+     163,    75,   279,   142,   280,   668,   161,   670,   652,   601,
+      57,   475,    58,    59,    60,    61,    62,    63,    64,    65,
+      66,    67,   164,    68,    69,    70,    71,   165,    72,   166,
+     676,   677,   202,   332,   253,   657,   601,    40,   682,   683,
+     254,   169,   255,   167,    41,   687,    42,   688,   689,   357,
+     357,   357,   357,   357,   357,   357,   357,   357,   201,   256,
+     690,    43,    80,   177,    81,   170,   527,   173,    44,   692,
+     186,    45,   667,    47,    48,    49,   212,    46,   278,    82,
+      83,   457,   458,   459,   460,   461,   462,   463,   215,   223,
+     217,   227,   218,   219,   121,   122,   279,   504,   505,   224,
+     190,   506,   507,    76,   191,    58,    59,    60,    61,    62,
+      63,    64,    65,    66,    67,   712,    68,    69,    70,    71,
+     196,    72,   508,   197,    40,   192,   193,   509,   198,   237,
+     333,   230,   334,    42,   245,   510,   246,   260,   250,   674,
+     261,   511,   215,   266,   217,   282,   218,   219,    43,   270,
+     335,   328,   512,   235,   330,    44,   274,   275,    45,   276,
+     339,   215,   277,   217,    46,   218,   219,   340,   343,   675,
+     357,   357,   228,   428,   429,   430,   431,   344,   374,   432,
+     375,   433,   373,   434,   435,   436,   437,   438,   439,   440,
+     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
+     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
+     461,   462,   463,   428,   429,   430,   431,   345,   379,   432,
+     388,   433,   387,   434,   435,   436,   437,   438,   439,   440,
+     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
+     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
+     461,   462,   463,   428,   429,   430,   431,   389,   390,   432,
+     391,   433,   393,   434,   435,   436,   437,   438,   439,   440,
+     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
+     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
+     461,   462,   463,   392,   394,   395,   428,   429,   430,   431,
+     396,   397,   432,   398,   433,   528,   434,   435,   436,   437,
+     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
+     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
+     458,   459,   460,   461,   462,   463,   428,   429,   430,   431,
+     400,   472,   432,   402,   433,   529,   434,   435,   436,   437,
+     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
+     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
+     458,   459,   460,   461,   462,   463,   408,   409,   428,   429,
+     430,   431,   653,   654,   432,   410,   433,   411,   434,   435,
+     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   412,   428,
+     429,   430,   431,   413,   473,   432,   639,   433,   414,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   474,   477,   432,   641,   433,   415,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   416,   417,   432,  -274,   433,   642,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   418,   419,   432,   420,   433,   549,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   421,   422,   432,   423,   433,   638,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   424,   425,   432,   426,   433,   640,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   482,   484,   432,   483,   433,   643,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   486,   492,   432,   493,   433,   644,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   495,   234,   432,   516,   433,   645,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   517,   518,   432,   519,   433,   646,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   520,   521,   432,   522,   433,   647,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   523,   525,   432,   526,   433,   648,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   588,   589,   432,   591,   433,   649,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   592,   595,   432,   596,   433,   650,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,  -266,   599,   432,   597,   433,   651,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   605,   606,   432,   608,   433,   655,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   619,   620,   432,   627,   433,   656,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   621,   626,   432,   628,   433,   703,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,   629,   630,   432,   631,   433,   704,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   499,
+     697,   478,   500,   632,   501,   633,   351,   634,   705,   659,
+     635,   215,   199,   217,   636,   218,   219,   352,   637,   479,
+     658,   502,   503,   660,   504,   505,   664,   665,   506,   507,
+     666,   669,   671,   673,   299,   684,   300,   201,   686,   691,
+     694,   695,   696,   699,   301,   302,   303,   304,   706,   305,
+     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
+     316,   317,   318,   319,   320,   202,   700,   200,   146,   147,
+     148,   149,   701,   702,   150,   151,   152,   707,   709,   710,
+     153,   199,   353,   154,   711,   713,   491,   200,   716,   146,
+     147,   148,   149,   215,   714,   217,   151,   218,   219,   623,
+     717,   172,    86,    87,   354,   372,   201,   679,   229,   212,
+     515,   278,   622,   587,   287,   200,   321,   480,   101,   685,
+       0,   215,   322,   217,     0,   218,   219,     0,     0,   279,
+       0,     0,   323,     0,   202,   203,   204,   205,   206,     0,
+       0,     0,     0,   146,   147,   148,   149,   215,   199,   217,
+     151,   218,   219,     0,   200,     0,     0,     0,   288,     0,
+     289,   126,   287,   127,   128,   129,   130,     0,   207,   208,
+     209,     0,   211,   201,   290,   291,     0,     0,   212,     0,
+     213,     0,     0,     0,   292,   214,     0,     0,     0,     0,
+     215,   216,   217,     0,   218,   219,   220,   145,   221,   678,
+       0,   202,   203,   204,   205,   206,   288,     0,   289,   146,
+     147,   148,   149,     0,     0,   150,   151,   152,     0,     0,
+       0,   153,   290,   291,   154,   133,   134,   135,   136,   137,
+     138,     0,   295,     0,     0,   207,   208,   209,   210,   211,
+       0,     0,     0,     0,     0,   212,     0,   213,     0,     0,
+       0,     0,   214,     0,     0,     0,     0,   215,   216,   217,
+       0,   218,   219,   220,     0,   221,   428,   429,   430,   431,
+       0,     0,   432,     0,   433,     0,   434,   435,   436,   437,
+     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
+     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
+     458,   459,   460,   461,   462,   463,   453,   454,   455,   456,
+     457,   458,   459,   460,   461,   462,   463,     0,     0,   428,
+     429,   430,   431,     0,   598,   432,     0,   433,   464,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,     0,   602,   432,     0,   433,     0,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,     0,   607,   432,     0,   433,     0,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,     0,   661,   432,     0,   433,     0,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,     0,   672,   432,     0,   433,     0,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,     0,   693,   432,     0,   433,     0,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,     0,   708,   432,     0,   433,     0,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,     0,   715,   432,     0,   433,     0,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   428,
+     429,   430,   431,     0,     0,   432,     0,   433,     0,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   429,
+     430,   431,     0,     0,   432,     0,   433,     0,   434,   435,
+     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   431,     0,
+       0,   432,     0,   433,     0,   434,   435,   436,   437,   438,
      439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   425,   426,   427,     0,     0,   428,     0,   429,     0,
-     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     427,     0,     0,   428,     0,   429,     0,   430,   431,   432,
-     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
+     459,   460,   461,   462,   463,   432,     0,   433,     0,   434,
+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   433,
+       0,   434,   435,   436,   437,   438,   439,   440,   441,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
-     453,   454,   455,   456,   457,   458,   459,   428,     0,   429,
-       0,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   429,     0,   430,   431,   432,   433,   434,   435,   436,
-     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   495,   694,     0,   496,     0,   497,     0,
-       0,     0,   495,     0,     0,   496,     0,   497,   453,   454,
-     455,   456,   457,   458,   459,   498,   499,     0,   500,   501,
-       0,     0,   502,   503,   498,   499,     0,   500,   501,     0,
-       0,   502,   503,   430,   431,   432,   433,   434,   435,   436,
-     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   496,     0,   497,     0,     0,     0,     0,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   499,   698,     0,   500,     0,   501,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   498,   499,     0,   500,   501,     0,     0,   502,
-     503,  -271,  -271,  -271,  -271,  -271,  -271,  -271,  -271,  -271,
-    -271,  -271,  -271,   446,   447,   448,   449,   450,   451,   452,
-     453,   454,   455,   456,   457,   458,   459,   243,     0,    58,
-      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
-      68,    69,    70,    71,     0,    72,     0,     0,     0,     0,
-       0,   372,   244,    58,    59,    60,    61,    62,    63,    64,
-      65,    66,    67,     0,    68,    69,    70,    71,     0,    72,
-       0,     0,     0,     0,     0,   104,   373,    58,    59,    60,
-      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
-      70,    71,     0,    72,   107,     0,    58,    59,    60,    61,
+       0,     0,     0,   502,   503,     0,   504,   505,     0,     0,
+     506,   507,   434,   435,   436,   437,   438,   439,   440,   441,
+     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
+     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
+     462,   463,   438,   439,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,  -275,  -275,
+    -275,  -275,  -275,  -275,  -275,  -275,  -275,  -275,  -275,  -275,
+     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
+     460,   461,   462,   463,   247,     0,    58,    59,    60,    61,
       62,    63,    64,    65,    66,    67,     0,    68,    69,    70,
-      71,   253,    72,    58,    59,    60,    61,    62,    63,    64,
-      65,    66,    67,     0,    68,    69,    70,    71,     0,    72
+      71,     0,    72,     0,     0,     0,     0,     0,   376,   248,
+      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
+       0,    68,    69,    70,    71,     0,    72,     0,     0,     0,
+       0,     0,   104,   377,    58,    59,    60,    61,    62,    63,
+      64,    65,    66,    67,     0,    68,    69,    70,    71,   107,
+      72,    58,    59,    60,    61,    62,    63,    64,    65,    66,
+      67,     0,    68,    69,    70,    71,   257,    72,    58,    59,
+      60,    61,    62,    63,    64,    65,    66,    67,     0,    68,
+      69,    70,    71,     0,    72
 };
 
 static const yytype_int16 yycheck[] =
 {
-      90,   140,   140,    97,     8,   200,   202,    97,     8,    33,
-      64,     6,    33,     8,     8,   140,    11,    33,     8,    29,
-      80,   108,     6,   219,     8,    11,   118,    11,     8,   132,
-     124,   118,   135,     9,   124,    20,   108,     0,     1,    72,
-     132,     1,   234,   235,   236,   237,   238,   239,    81,   341,
-     158,   141,   106,   103,   126,    40,   150,    42,   108,    14,
-     150,    94,    17,    18,    19,    20,   116,   206,   101,   108,
-     195,   104,   122,   114,   134,   116,   184,   110,    64,   118,
-     205,   108,   106,   133,   108,   106,   108,   108,   140,    77,
-     106,   132,   288,     8,   133,   291,    11,     8,   294,   295,
-     296,   297,   298,   125,    69,   132,    69,    70,    71,    69,
-      70,    71,   133,   128,   108,    78,   132,   127,    78,    95,
-     106,   129,   135,   319,   128,   321,   418,   135,   128,   105,
-     422,   135,   108,   109,   228,   229,   230,   132,   228,   229,
-     230,   337,   132,   195,   340,   108,   130,   127,   108,   345,
-     114,   203,   116,   205,   206,   347,   348,    74,   350,    76,
-     136,   128,    73,   126,    75,   132,   126,   127,   135,   108,
-      86,    87,   135,   128,   226,   135,   135,    88,    89,   164,
-     102,   134,   234,   235,   236,   237,   238,   239,   173,     9,
-     130,   131,   114,   115,   116,   117,   130,   131,   120,   121,
-     122,    32,    33,   328,   126,    36,    37,   129,   404,   405,
-     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
-     416,   417,   128,   419,   420,   421,   132,   128,   424,   425,
-     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
-     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   389,   460,   130,   131,   129,   254,
-     466,   132,   108,    11,   135,    95,   328,   128,   118,   128,
-     332,   132,   118,   132,   120,   105,   122,   123,   108,   109,
-     126,   487,   130,   131,   108,   347,   348,    12,   350,   108,
-     114,    90,   116,   495,   496,   497,   498,   499,   500,   501,
-     502,   503,   130,   131,    29,    30,   136,    32,    33,   133,
-     108,    36,    37,   111,   108,    11,    64,   111,     3,     4,
-       5,     6,    36,    37,     9,   129,    11,   389,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,   106,   135,
-     108,     6,   128,     8,    11,   128,    11,   128,    64,   128,
-     118,   128,   120,   128,   122,   123,    17,     7,   126,   128,
-      10,   105,    12,    11,    91,    92,    93,   135,     8,   595,
-       8,   597,    82,    83,    84,    85,    17,    86,    87,    29,
-      30,   106,    32,    33,    48,    49,    36,    37,    36,   129,
-     106,   108,   108,     8,   616,   617,    17,    64,    82,   128,
-      84,    85,   118,    64,   120,   128,   122,   123,     8,   635,
-     126,   637,   638,   495,   496,   497,   498,   499,   500,   501,
-     502,   503,   108,    64,   650,   132,   129,   129,   133,   129,
-     129,   106,   106,   659,   127,     8,   591,   128,   106,   106,
-     102,   108,   118,    64,     8,   106,   106,   108,     8,   618,
-     618,   118,     8,   120,   132,   122,   123,   106,   106,   126,
-     108,   122,   123,   618,   106,   106,   129,   108,   135,   106,
-     118,   132,   120,   106,   122,   123,   122,   135,   126,   705,
-     130,   122,   123,   128,   108,   106,   129,   108,   132,    88,
-     129,   132,   106,   106,   118,   615,   120,   108,   122,   123,
-     130,   122,   123,   134,   131,   131,   131,    18,   108,   591,
-     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
-      18,   121,   122,   123,   124,   131,   126,   110,   106,   132,
-       8,     8,   129,   615,   616,   617,   618,     3,     4,     5,
-       6,   129,   129,     9,   129,    11,   128,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,   129,   129,     9,   129,    11,   129,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,   129,   129,     9,   129,    11,   129,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,   129,     3,     4,
-       5,     6,   129,   106,     9,   129,    11,   133,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
-       5,     6,   129,   131,     9,   129,    11,   133,    13,    14,
+      90,   144,   206,   144,     8,   204,     8,    97,     6,     8,
+       8,   144,     6,    11,     8,    33,    11,    11,     8,   223,
+      97,    64,    80,    29,     9,    17,   162,   345,    33,    20,
+     110,     0,     1,   116,   124,   118,   110,     1,   238,   239,
+     240,   241,   242,   243,   131,     8,   120,   124,    69,    40,
+     137,    42,   188,    14,   134,   145,    17,    18,    19,    20,
+       9,   135,    12,   110,   154,   108,   199,   210,   110,    64,
+      77,   116,    64,   118,    88,    89,   209,   154,   136,    29,
+      30,   128,    32,    33,   144,   127,    36,    37,   292,   134,
+     108,   295,   110,   130,   298,   299,   300,   301,   302,   110,
+      69,    70,    71,   108,   422,    69,    70,    71,   426,    78,
+      33,   130,    97,   108,    78,   134,   108,   135,   110,   323,
+     110,   325,   107,   129,   110,   110,   111,   137,   130,   134,
+     134,   130,   124,   125,   120,   137,   134,   341,   132,   199,
+     344,   110,   232,   233,   234,   349,   110,   207,    97,   209,
+     210,   351,   352,   138,   354,   232,   233,   234,   107,   128,
+     137,   110,   111,   130,   128,   129,   129,   134,   137,   130,
+     230,     7,   134,   137,    10,   137,    12,   168,   238,   239,
+     240,   241,   242,   243,   120,   108,   177,   110,   130,   138,
+      36,    37,   134,    29,    30,   137,    32,    33,   134,   332,
+      36,    37,   132,   133,   408,   409,   410,   411,   412,   413,
+     414,   415,   416,   417,   418,   419,   420,   421,   130,   423,
+     424,   425,   134,   136,   428,   429,   430,   431,   432,   433,
+     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
+     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
+     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
+     393,    74,    10,    76,    12,   464,   470,   258,    11,   130,
+      29,    30,   332,    32,    33,    11,   336,    36,    37,   120,
+     131,    29,    30,   134,    32,    33,   137,   491,    36,    37,
+       7,   351,   352,    10,   354,    12,   132,    92,     8,   499,
+     500,   501,   502,   503,   504,   505,   506,   507,   110,     6,
+     131,     8,    29,    30,    11,    32,    33,   132,   133,    36,
+      37,    64,   132,   133,     3,     4,     5,     6,    64,   137,
+       9,   130,    11,   393,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,   130,   108,   130,   110,     8,    11,
+     110,    11,   108,   113,   110,   110,   130,   120,   113,   122,
+     130,   124,   125,   130,   120,   128,   122,     8,   124,   125,
+       8,     8,   128,   130,   137,   599,   107,   601,   132,   133,
+     110,   137,   112,   113,   114,   115,   116,   117,   118,   119,
+     120,   121,     8,   123,   124,   125,   126,   108,   128,   131,
+     620,   621,    64,    11,   110,   132,   133,    72,    88,    89,
+     116,     8,   118,   110,    79,   639,    81,   641,   642,   499,
+     500,   501,   502,   503,   504,   505,   506,   507,    36,   135,
+     654,    96,    73,   134,    75,   130,   135,   130,   103,   663,
+     110,   106,   595,    93,    94,    95,   108,   112,   110,    90,
+      91,    36,    37,    38,    39,    40,    41,    42,   120,   622,
+     122,   622,   124,   125,    48,    49,   128,    32,    33,   622,
+     131,    36,    37,   110,   131,   112,   113,   114,   115,   116,
+     117,   118,   119,   120,   121,   709,   123,   124,   125,   126,
+     108,   128,   105,   108,    72,   131,   131,   110,   129,   104,
+     108,   130,   110,    81,     8,   118,   108,     8,   120,   619,
+     108,   124,   120,     8,   122,   595,   124,   125,    96,     8,
+     128,   110,   135,   134,   131,   103,   108,   108,   106,   108,
+     124,   120,   108,   122,   112,   124,   125,   137,   131,   619,
+     620,   621,   622,     3,     4,     5,     6,   130,   134,     9,
+      90,    11,   132,    13,    14,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
+      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+      40,    41,    42,     3,     4,     5,     6,   131,   108,     9,
+     136,    11,   110,    13,    14,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
+      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+      40,    41,    42,     3,     4,     5,     6,   133,   133,     9,
+     133,    11,   108,    13,    14,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
+      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+      40,    41,    42,   133,    18,    18,     3,     4,     5,     6,
+     112,   108,     9,   134,    11,   135,    13,    14,    15,    16,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+      37,    38,    39,    40,    41,    42,     3,     4,     5,     6,
+       8,   130,     9,     8,    11,   135,    13,    14,    15,    16,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+      37,    38,    39,    40,    41,    42,   131,   131,     3,     4,
+       5,     6,   132,   133,     9,   131,    11,   131,    13,    14,
       15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,   129,   129,
-       3,     4,     5,     6,   130,   131,     9,   135,    11,     8,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
-       8,     3,     4,     5,     6,     8,   131,     9,   106,    11,
-     106,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   106,   131,     9,   106,    11,
-     106,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,    11,    77,     9,   131,    11,
-     106,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   106,   106,     9,   130,    11,
-     128,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   106,   106,     9,   130,    11,
-     106,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   133,   110,     9,   130,    11,
-     106,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   106,   106,     9,   130,    11,
-     130,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   106,   106,     9,   130,    11,
-       8,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,     8,   130,     9,   130,    11,
-     128,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   128,   131,     9,   130,    11,
-     129,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   128,   131,     9,   130,    11,
-     106,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   130,   130,     9,   130,    11,
-     128,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   128,   130,     9,   130,    11,
-     130,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   135,   133,     9,   130,    11,
-       8,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,     8,   130,     9,   130,    11,
-       8,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,     8,   131,     9,   130,    11,
-       8,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,     8,   106,     9,   130,    11,
-       8,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,     8,   106,     9,   130,    11,
-       8,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   106,   106,     9,   130,    11,
-     131,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,   133,     7,     8,   131,    10,    33,    12,   130,    30,
-      30,     8,    11,   133,   133,    29,    30,    44,    32,    33,
-     128,   116,    36,    37,    29,    30,   116,    32,    33,     8,
-     130,    36,    37,   130,    33,     8,    35,    36,     8,    31,
-      31,   114,   141,   240,    43,    44,    45,    46,   130,    48,
+      35,    36,    37,    38,    39,    40,    41,    42,   131,     3,
+       4,     5,     6,   131,   108,     9,   133,    11,   131,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   133,   137,     9,   133,    11,   131,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   131,   131,     9,     8,    11,   133,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   131,   131,     9,   131,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   131,   131,     9,   131,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   131,   131,     9,   131,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,     8,   108,     9,     8,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   108,   108,     9,   108,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   108,    11,     9,    77,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   108,   130,     9,   108,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   108,   108,     9,   108,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   108,   135,     9,   112,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   108,   108,     9,   108,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   132,   108,     9,   108,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,     8,   130,     9,     8,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   132,   130,     9,   133,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   131,   130,     9,   133,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   130,   130,     9,   108,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   132,   132,     9,   132,    11,   132,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     7,
+       8,   110,    10,   132,    12,   137,    33,   135,   132,   132,
+       8,   120,    11,   122,     8,   124,   125,    44,     8,   128,
+       8,    29,    30,   133,    32,    33,     8,     8,    36,    37,
+       8,     8,     8,   108,    33,   108,    35,    36,   108,   108,
+     135,   133,   133,    30,    43,    44,    45,    46,   132,    48,
       49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
-      59,    60,    61,    62,    63,    64,   114,   115,   116,   117,
-     618,   360,   120,   121,   122,   510,   462,   332,   126,   624,
-     107,   129,    36,    -1,    -1,    -1,   128,   114,   115,   116,
-     117,   118,    -1,   120,   121,   122,   123,    11,    -1,    -1,
-      -1,    -1,   129,    17,    -1,    -1,    -1,   106,    -1,   108,
-      -1,    -1,    -1,    -1,   113,    29,    -1,    -1,    -1,   118,
-     119,   120,    36,   122,   123,    -1,    -1,   126,    -1,   108,
-     129,   110,   111,   112,   113,   114,   115,   116,   117,   118,
-     119,    -1,   121,   122,   123,   124,    -1,   126,    -1,    -1,
-      64,    65,    66,    67,    68,    -1,    -1,   114,   115,   116,
-     117,   118,    11,   120,   121,   122,   123,    -1,    17,    72,
-      -1,    -1,    -1,    -1,    -1,    -1,    79,    -1,    81,    -1,
-      -1,    -1,    96,    97,    98,    -1,   100,    36,    -1,    -1,
-      -1,    94,   106,    -1,   108,    -1,    -1,    -1,   101,   113,
-      -1,   104,    -1,    -1,   118,   119,   120,   110,   122,   123,
-     124,    -1,   126,   127,    -1,    64,    65,    66,    67,    68,
+      59,    60,    61,    62,    63,    64,    30,    17,   116,   117,
+     118,   119,   135,     8,   122,   123,   124,   135,   130,   118,
+     128,    11,   109,   131,   118,   132,   130,    17,     8,   116,
+     117,   118,   119,   120,   132,   122,   123,   124,   125,    29,
+       8,   114,    31,    31,   131,   244,    36,   622,   145,   108,
+     364,   110,   514,   466,    64,    17,   115,   336,    36,   628,
+      -1,   120,   121,   122,    -1,   124,   125,    -1,    -1,   128,
+      -1,    -1,   131,    -1,    64,    65,    66,    67,    68,    -1,
+      -1,    -1,    -1,   116,   117,   118,   119,   120,    11,   122,
+     123,   124,   125,    -1,    17,    -1,    -1,    -1,   108,    -1,
+     110,    82,    64,    84,    85,    86,    87,    -1,    98,    99,
+     100,    -1,   102,    36,   124,   125,    -1,    -1,   108,    -1,
+     110,    -1,    -1,    -1,   134,   115,    -1,    -1,    -1,    -1,
+     120,   121,   122,    -1,   124,   125,   126,   104,   128,   129,
+      -1,    64,    65,    66,    67,    68,   108,    -1,   110,   116,
+     117,   118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,
+      -1,   128,   124,   125,   131,    82,    83,    84,    85,    86,
+      87,    -1,   134,    -1,    -1,    98,    99,   100,   101,   102,
+      -1,    -1,    -1,    -1,    -1,   108,    -1,   110,    -1,    -1,
+      -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,   122,
+      -1,   124,   125,   126,    -1,   128,     3,     4,     5,     6,
+      -1,    -1,     9,    -1,    11,    -1,    13,    14,    15,    16,
       17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,    -1,    96,    97,    98,
-      99,   100,    -1,    -1,    -1,    -1,    -1,   106,    -1,   108,
-      -1,    -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,   118,
-     119,   120,    -1,   122,   123,   124,    -1,   126,     3,     4,
+      37,    38,    39,    40,    41,    42,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,    -1,    -1,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    65,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,     8,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,    -1,    -1,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     4,
        5,     6,    -1,    -1,     9,    -1,    11,    -1,    13,    14,
       15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,    32,    33,
-      34,    35,    36,    37,    38,    39,    40,    41,    42,    -1,
-      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    11,
-      65,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,    -1,     8,     9,    -1,    11,
-      -1,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,    -1,     8,     9,    -1,    11,
-      -1,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,    -1,     8,     9,    -1,    11,
-      -1,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,    -1,     8,     9,    -1,    11,
-      -1,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,    -1,     8,     9,    -1,    11,
-      -1,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,    -1,     8,     9,    -1,    11,
-      -1,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,    -1,     8,     9,    -1,    11,
-      -1,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,    -1,    -1,     9,    -1,    11,
+      35,    36,    37,    38,    39,    40,    41,    42,     6,    -1,
+      -1,     9,    -1,    11,    -1,    13,    14,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
+      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
+      38,    39,    40,    41,    42,     9,    -1,    11,    -1,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,    11,
       -1,    13,    14,    15,    16,    17,    18,    19,    20,    21,
       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
       32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     4,     5,     6,    -1,    -1,     9,    -1,    11,    -1,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
-       6,    -1,    -1,     9,    -1,    11,    -1,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     9,    -1,    11,
-      -1,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,    11,    -1,    13,    14,    15,    16,    17,    18,    19,
-      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,     7,     8,    -1,    10,    -1,    12,    -1,
-      -1,    -1,     7,    -1,    -1,    10,    -1,    12,    36,    37,
-      38,    39,    40,    41,    42,    29,    30,    -1,    32,    33,
-      -1,    -1,    36,    37,    29,    30,    -1,    32,    33,    -1,
-      -1,    36,    37,    13,    14,    15,    16,    17,    18,    19,
-      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,    10,    -1,    12,    -1,    -1,    -1,    -1,
+      42,     7,     8,    -1,    10,    -1,    12,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    29,    30,    -1,    32,    33,    -1,    -1,    36,
-      37,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,   108,    -1,   110,
-     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
-     121,   122,   123,   124,    -1,   126,    -1,    -1,    -1,    -1,
-      -1,   108,   133,   110,   111,   112,   113,   114,   115,   116,
-     117,   118,   119,    -1,   121,   122,   123,   124,    -1,   126,
-      -1,    -1,    -1,    -1,    -1,   108,   133,   110,   111,   112,
-     113,   114,   115,   116,   117,   118,   119,    -1,   121,   122,
-     123,   124,    -1,   126,   108,    -1,   110,   111,   112,   113,
-     114,   115,   116,   117,   118,   119,    -1,   121,   122,   123,
-     124,   108,   126,   110,   111,   112,   113,   114,   115,   116,
-     117,   118,   119,    -1,   121,   122,   123,   124,    -1,   126
+      -1,    -1,    -1,    29,    30,    -1,    32,    33,    -1,    -1,
+      36,    37,    13,    14,    15,    16,    17,    18,    19,    20,
+      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
+      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
+      41,    42,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,   110,    -1,   112,   113,   114,   115,
+     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
+     126,    -1,   128,    -1,    -1,    -1,    -1,    -1,   110,   135,
+     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
+      -1,   123,   124,   125,   126,    -1,   128,    -1,    -1,    -1,
+      -1,    -1,   110,   135,   112,   113,   114,   115,   116,   117,
+     118,   119,   120,   121,    -1,   123,   124,   125,   126,   110,
+     128,   112,   113,   114,   115,   116,   117,   118,   119,   120,
+     121,    -1,   123,   124,   125,   126,   110,   128,   112,   113,
+     114,   115,   116,   117,   118,   119,   120,   121,    -1,   123,
+     124,   125,   126,    -1,   128
 };
 
 /* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
    state STATE-NUM.  */
 static const yytype_uint8 yystos[] =
 {
-       0,    69,   138,   141,    77,     0,     1,    69,    70,    71,
-      78,   108,   126,   135,   139,   140,   142,   143,   144,   145,
-     146,   149,   150,   151,   152,   155,   156,   157,   158,   159,
-     160,   161,   162,   165,   167,   168,   169,   128,     8,   127,
-      72,    79,    81,    94,   101,   104,   110,    91,    92,    93,
-     108,   108,   126,   163,   135,   135,     8,   108,   110,   111,
-     112,   113,   114,   115,   116,   117,   118,   119,   121,   122,
-     123,   124,   126,   147,   207,     8,   108,   148,   207,     8,
-      73,    75,    88,    89,    69,   127,   139,   140,   134,     9,
-      95,   105,   108,   109,   136,   194,     9,    95,   108,   109,
-     136,   194,    86,    87,   108,   207,   128,   108,   207,   108,
-     132,   197,   118,   108,   153,   154,    90,   114,   116,   132,
-     201,   201,   201,   129,   135,   128,    82,    84,    85,   128,
-     128,    82,    83,    84,    85,   128,   128,   128,   128,   181,
-     182,   102,   114,   115,   116,   117,   120,   121,   122,   126,
-     129,   171,   172,   173,   174,   175,   192,   105,   171,     8,
-       8,   106,   129,   108,   198,     8,   128,     8,   154,   128,
-     114,   116,   202,   132,   199,    33,   106,   132,   195,   118,
-     132,   203,   108,   206,   164,   171,   129,   129,   129,   129,
-      74,    76,   106,   106,   127,    11,    17,    36,    64,    65,
-      66,    67,    68,    96,    97,    98,    99,   100,   106,   108,
-     113,   118,   119,   120,   122,   123,   124,   126,   183,   185,
-     187,   188,   189,   190,   193,   173,   128,   171,     6,     8,
-      11,   132,   176,   102,    14,    17,    18,    19,    20,   128,
-     176,     8,   106,   108,   133,   207,   118,    64,   106,   108,
-     114,   116,   133,   108,   200,   207,     8,   106,    33,   106,
-     108,   196,     8,   108,   118,   204,     8,   130,   131,   176,
-     106,   106,   106,   106,   108,   126,   135,   187,   193,   108,
-     125,   132,   135,    64,   106,   108,   122,   123,   132,   186,
-     190,   132,   186,     8,   132,    33,    35,    43,    44,    45,
-      46,    48,    49,    50,    51,    52,    53,    54,    55,    56,
-      57,    58,    59,    60,    61,    62,    63,   113,   119,   129,
-     184,   185,   187,   193,   108,   193,   129,   187,    11,   106,
-     108,   126,   185,   191,   193,   122,   135,   128,   135,   129,
-     128,   129,   184,   129,   135,   128,   132,    33,    44,   107,
-     129,   170,   192,   193,   130,   171,   171,   171,   177,    80,
-     134,   166,   170,   170,   170,   170,   170,   170,   166,   130,
-     132,    88,   108,   133,   207,   106,    33,   106,   108,   133,
-     108,   118,   133,   108,   134,   131,   131,   131,   131,   106,
-      18,    18,   110,   106,   132,   184,     8,   184,     8,   184,
-     184,   184,   184,   184,   129,   129,   129,   129,   129,   129,
-     129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
-     129,   129,   129,   184,     3,     4,     5,     6,     9,    11,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
-      65,   184,   129,   132,   135,     8,   128,   135,   128,   106,
-     131,   135,   187,   135,   108,   126,   189,   193,     8,     8,
-     106,   184,   106,   184,   205,   184,   205,   128,   106,   106,
-     184,   106,   170,   170,   170,     7,    10,    12,    29,    30,
-      32,    33,    36,    37,   103,   108,   116,   122,   133,   179,
-     180,   181,    77,   106,   128,   106,   106,   106,   106,   106,
-     187,   133,   110,   133,   133,   133,   184,   184,   184,   184,
-     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
-     205,   184,   184,   184,   205,   130,   184,   184,   184,   184,
-     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
-     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
-     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
-     184,   184,   186,   188,   106,   106,   184,   106,   130,   108,
-     111,   106,   106,     8,     8,   128,   130,   131,     8,   130,
-     184,   130,   128,     8,   131,   130,   170,   170,   170,   170,
-     170,   170,   170,   170,   170,   129,   128,   128,   182,    29,
-     127,   178,   128,   131,   106,   130,   130,   130,   130,   135,
-     133,     8,     8,     8,   130,   131,   130,   131,   131,   130,
-     130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
-     131,   130,   130,   130,     8,   130,   131,     8,     8,   128,
-       8,     8,     8,   187,   184,     8,   184,     8,     8,   106,
-     192,   193,   170,   170,   127,   178,   108,   111,    86,    87,
-     106,   197,   106,   184,   184,   184,   184,   106,   184,     8,
-     133,   131,   131,     8,     8,    30,    30,   133,     8,   130,
-     130,   130,   130,   133,     8,   128,   116,   116,   184,   130,
-     130,     8,     8,     8
+       0,    69,   140,   143,    77,     0,     1,    69,    70,    71,
+      78,   110,   128,   137,   141,   142,   144,   145,   146,   147,
+     148,   151,   152,   153,   154,   157,   158,   159,   160,   161,
+     162,   163,   164,   167,   169,   170,   171,   130,     8,   129,
+      72,    79,    81,    96,   103,   106,   112,    93,    94,    95,
+     110,   110,   128,   165,   137,   137,     8,   110,   112,   113,
+     114,   115,   116,   117,   118,   119,   120,   121,   123,   124,
+     125,   126,   128,   149,   209,     8,   110,   150,   209,     8,
+      73,    75,    90,    91,    69,   129,   141,   142,   136,     9,
+      97,   107,   110,   111,   138,   196,     9,    97,   110,   111,
+     138,   196,    88,    89,   110,   209,   130,   110,   209,   110,
+     134,   199,   120,   110,   155,   156,    92,   116,   118,   134,
+     203,   203,   203,   131,   137,   130,    82,    84,    85,    86,
+      87,   130,   130,    82,    83,    84,    85,    86,    87,   130,
+     130,   130,   130,   183,   184,   104,   116,   117,   118,   119,
+     122,   123,   124,   128,   131,   173,   174,   175,   176,   177,
+     194,   107,   173,     8,     8,   108,   131,   110,   200,     8,
+     130,     8,   156,   130,   116,   118,   204,   134,   201,    33,
+     108,   134,   197,   120,   134,   205,   110,   208,   166,   173,
+     131,   131,   131,   131,    74,    76,   108,   108,   129,    11,
+      17,    36,    64,    65,    66,    67,    68,    98,    99,   100,
+     101,   102,   108,   110,   115,   120,   121,   122,   124,   125,
+     126,   128,   185,   187,   189,   190,   191,   192,   195,   175,
+     130,   173,     6,     8,    11,   134,   178,   104,    14,    17,
+      18,    19,    20,   130,   178,     8,   108,   110,   135,   209,
+     120,    64,   108,   110,   116,   118,   135,   110,   202,   209,
+       8,   108,    33,   108,   110,   198,     8,   110,   120,   206,
+       8,   132,   133,   178,   108,   108,   108,   108,   110,   128,
+     137,   189,   195,   110,   127,   134,   137,    64,   108,   110,
+     124,   125,   134,   188,   192,   134,   188,     8,   134,    33,
+      35,    43,    44,    45,    46,    48,    49,    50,    51,    52,
+      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
+      63,   115,   121,   131,   186,   187,   189,   195,   110,   195,
+     131,   189,    11,   108,   110,   128,   187,   193,   195,   124,
+     137,   130,   137,   131,   130,   131,   186,   131,   137,   130,
+     134,    33,    44,   109,   131,   172,   194,   195,   132,   173,
+     173,   173,   179,    80,   136,   168,   172,   172,   172,   172,
+     172,   172,   168,   132,   134,    90,   110,   135,   209,   108,
+      33,   108,   110,   135,   110,   120,   135,   110,   136,   133,
+     133,   133,   133,   108,    18,    18,   112,   108,   134,   186,
+       8,   186,     8,   186,   186,   186,   186,   186,   131,   131,
+     131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
+     131,   131,   131,   131,   131,   131,   131,   186,     3,     4,
+       5,     6,     9,    11,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,    65,   186,   131,   134,   137,     8,
+     130,   137,   130,   108,   133,   137,   189,   137,   110,   128,
+     191,   195,     8,     8,   108,   186,   108,   186,   207,   186,
+     207,   130,   108,   108,   186,   108,   172,   172,   172,     7,
+      10,    12,    29,    30,    32,    33,    36,    37,   105,   110,
+     118,   124,   135,   181,   182,   183,    77,   108,   130,   108,
+     108,   108,   108,   108,   189,   135,   112,   135,   135,   135,
+     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
+     186,   186,   186,   186,   207,   186,   186,   186,   207,   132,
+     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
+     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
+     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
+     186,   186,   186,   186,   186,   186,   188,   190,   108,   108,
+     186,   108,   132,   110,   113,   108,   108,     8,     8,   130,
+     132,   133,     8,   132,   186,   132,   130,     8,   133,   132,
+     172,   172,   172,   172,   172,   172,   172,   172,   172,   131,
+     130,   130,   184,    29,   129,   180,   130,   133,   108,   132,
+     132,   132,   132,   137,   135,     8,     8,     8,   132,   133,
+     132,   133,   133,   132,   132,   132,   132,   132,   132,   132,
+     132,   132,   132,   132,   133,   132,   132,   132,     8,   132,
+     133,     8,     8,   130,     8,     8,     8,   189,   186,     8,
+     186,     8,     8,   108,   194,   195,   172,   172,   129,   180,
+     110,   113,    88,    89,   108,   199,   108,   186,   186,   186,
+     186,   108,   186,     8,   135,   133,   133,     8,     8,    30,
+      30,   135,     8,   132,   132,   132,   132,   135,     8,   130,
+     118,   118,   186,   132,   132,     8,     8,     8
 };
 
 /* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
 static const yytype_uint8 yyr1[] =
 {
-       0,   137,   138,   138,   138,   138,   139,   139,   139,   139,
-     139,   139,   139,   139,   139,   139,   140,   140,   140,   140,
-     141,   141,   142,   143,   144,   144,   144,   144,   144,   145,
-     146,   146,   147,   147,   147,   147,   147,   148,   148,   148,
-     148,   148,   148,   149,   150,   150,   150,   150,   150,   150,
-     150,   151,   151,   152,   153,   153,   154,   155,   156,   157,
-     158,   159,   160,   161,   161,   161,   162,   163,   163,   163,
-     164,   164,   165,   166,   166,   166,   167,   167,   168,   168,
-     168,   168,   168,   168,   168,   168,   168,   169,   169,   169,
-     169,   170,   170,   170,   170,   170,   170,   170,   170,   170,
-     170,   170,   170,   170,   170,   170,   171,   171,   171,   171,
-     172,   172,   173,   173,   174,   174,   175,   175,   175,   175,
-     175,   175,   175,   175,   175,   175,   175,   176,   176,   177,
-     177,   177,   177,   177,   177,   178,   178,   179,   180,   180,
-     181,   181,   181,   181,   181,   182,   182,   182,   182,   183,
-     183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
-     183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
-     183,   183,   183,   183,   184,   184,   184,   184,   184,   184,
-     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
-     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
-     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
-     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
-     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
-     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
-     184,   185,   185,   185,   185,   186,   186,   186,   186,   186,
-     186,   186,   187,   187,   187,   187,   188,   188,   188,   188,
-     188,   189,   189,   189,   190,   190,   191,   191,   191,   191,
-     191,   191,   192,   192,   192,   192,   192,   193,   193,   193,
-     193,   194,   194,   195,   195,   195,   196,   196,   196,   196,
-     196,   196,   197,   197,   198,   198,   198,   199,   200,   200,
-     200,   200,   201,   201,   201,   202,   202,   202,   202,   202,
-     203,   203,   204,   204,   204,   204,   205,   205,   205,   206,
-     206,   206,   207,   207,   207,   207,   207,   207,   207,   207,
-     207,   207,   207,   207,   207,   207,   207
+       0,   139,   140,   140,   140,   140,   141,   141,   141,   141,
+     141,   141,   141,   141,   141,   141,   142,   142,   142,   142,
+     143,   143,   144,   145,   146,   146,   146,   146,   146,   147,
+     148,   148,   149,   149,   149,   149,   149,   149,   149,   150,
+     150,   150,   150,   150,   150,   150,   150,   151,   152,   152,
+     152,   152,   152,   152,   152,   153,   153,   154,   155,   155,
+     156,   157,   158,   159,   160,   161,   162,   163,   163,   163,
+     164,   165,   165,   165,   166,   166,   167,   168,   168,   168,
+     169,   169,   170,   170,   170,   170,   170,   170,   170,   170,
+     170,   171,   171,   171,   171,   172,   172,   172,   172,   172,
+     172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
+     173,   173,   173,   173,   174,   174,   175,   175,   176,   176,
+     177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
+     177,   178,   178,   179,   179,   179,   179,   179,   179,   180,
+     180,   181,   182,   182,   183,   183,   183,   183,   183,   184,
+     184,   184,   184,   185,   185,   185,   185,   185,   185,   185,
+     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
+     185,   185,   185,   185,   185,   185,   185,   185,   186,   186,
+     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
+     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
+     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
+     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
+     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
+     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
+     186,   186,   186,   186,   186,   187,   187,   187,   187,   188,
+     188,   188,   188,   188,   188,   188,   189,   189,   189,   189,
+     190,   190,   190,   190,   190,   191,   191,   191,   192,   192,
+     193,   193,   193,   193,   193,   193,   194,   194,   194,   194,
+     194,   195,   195,   195,   195,   196,   196,   197,   197,   197,
+     198,   198,   198,   198,   198,   198,   199,   199,   200,   200,
+     200,   201,   202,   202,   202,   202,   203,   203,   203,   204,
+     204,   204,   204,   204,   205,   205,   206,   206,   206,   206,
+     207,   207,   207,   208,   208,   208,   209,   209,   209,   209,
+     209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
+     209
 };
 
 /* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
@@ -1669,37 +1670,38 @@ static const yytype_int8 yyr2[] =
        0,     2,     1,     2,     2,     2,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     2,     1,     1,     1,     2,
        5,     5,     5,     2,     6,     9,     9,     2,     3,     2,
-       3,     2,     7,     7,     2,     2,     2,     7,     7,     2,
-       2,     2,     2,     2,     3,     3,     4,     4,     4,     4,
-       2,    10,     5,     4,     1,     2,     8,     4,     5,     5,
-       5,     4,     6,     1,     2,     2,     2,     0,     1,     1,
-       0,     1,     5,     3,     4,     1,     5,     5,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
-       2,     1,     1,     1,     3,     3,     3,     3,     3,     3,
-       3,     3,     3,     3,     2,     2,     1,     3,     3,     3,
-       2,     1,     2,     1,     1,     3,     3,     3,     3,     3,
-       3,     3,     3,     1,     1,     1,     1,     0,     3,     0,
-       5,     8,     8,     5,     2,     3,     3,     2,     1,     3,
-       1,     4,     5,     3,     4,     0,     2,     4,     6,     4,
-       5,     4,     7,     6,     3,     5,     5,     9,     4,     4,
-       4,     3,     5,     5,     5,     3,     5,     5,     3,     5,
-       2,     5,     5,     1,     1,     2,     3,     3,     3,     3,
-       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
-       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
-       3,     3,     2,     3,     3,     3,     3,     3,     3,     3,
-       3,     3,     3,     3,     3,     3,     2,     4,     4,     4,
-       4,     6,     6,     6,     4,     4,     4,     4,     4,     4,
-       4,     4,     6,     4,     4,     4,     3,     6,     1,     4,
-       4,     6,     4,     3,     1,     1,     1,     1,     1,     4,
-       1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
-       4,     1,     1,     1,     3,     3,     1,     2,     4,     3,
+       3,     2,     7,     7,     2,     2,     2,     2,     2,     7,
+       7,     2,     2,     2,     2,     2,     2,     2,     3,     3,
+       4,     4,     4,     4,     2,    10,     5,     4,     1,     2,
+       8,     4,     5,     5,     5,     4,     6,     1,     2,     2,
+       2,     0,     1,     1,     0,     1,     5,     3,     4,     1,
+       5,     5,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     1,     2,     1,     1,     1,     3,     3,
+       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
+       1,     3,     3,     3,     2,     1,     2,     1,     1,     3,
+       3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
+       1,     0,     3,     0,     5,     8,     8,     5,     2,     3,
+       3,     2,     1,     3,     1,     4,     5,     3,     4,     0,
+       2,     4,     6,     4,     5,     4,     7,     6,     3,     5,
+       5,     9,     4,     4,     4,     3,     5,     5,     5,     3,
+       5,     5,     3,     5,     2,     5,     5,     1,     1,     2,
+       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
+       3,     3,     3,     2,     2,     3,     3,     3,     3,     3,
+       3,     3,     3,     3,     3,     3,     2,     3,     3,     3,
+       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
+       2,     4,     4,     4,     4,     6,     6,     6,     4,     4,
+       4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
+       3,     6,     1,     4,     4,     6,     4,     3,     1,     1,
+       1,     1,     1,     4,     1,     1,     1,     1,     1,     1,
+       1,     1,     3,     2,     4,     1,     1,     1,     3,     3,
+       1,     2,     4,     3,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     2,     3,     1,     2,
+       1,     2,     1,     2,     3,     2,     3,     1,     1,     2,
+       2,     3,     1,     1,     2,     2,     3,     1,     1,     1,
+       1,     2,     2,     2,     3,     1,     1,     1,     2,     2,
+       0,     1,     3,     0,     1,     3,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-       1,     1,     2,     3,     1,     2,     1,     2,     1,     2,
-       3,     2,     3,     1,     1,     2,     2,     3,     1,     1,
-       2,     2,     3,     1,     1,     1,     1,     2,     2,     2,
-       3,     1,     1,     1,     2,     2,     0,     1,     3,     0,
-       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
-       1,     1,     1,     1,     1,     1,     1
+       1
 };
 
 
@@ -2228,1179 +2230,1195 @@ yyreduce:
     break;
 
   case 35: /* fielddef: fielddef HEX_KEY  */
-                                        { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->hex = true; }
+                                        { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 16; }
     break;
 
   case 36: /* fielddef: fielddef DEC_KEY  */
-                                        { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->hex = false; }
+                                        { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 10; }
     break;
 
-  case 37: /* contextfielddef: STRING '=' '(' INTEGER ',' INTEGER ')'  */
+  case 37: /* fielddef: fielddef OCT_KEY  */
+                                        { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 8; }
+    break;
+
+  case 38: /* fielddef: fielddef BIN_KEY  */
+                                        { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 2; }
+    break;
+
+  case 39: /* contextfielddef: STRING '=' '(' INTEGER ',' INTEGER ')'  */
                                                         { (yyval.fieldqual) = new FieldQuality((yyvsp[-6].str),(yyvsp[-3].i),(yyvsp[-1].i)); }
     break;
 
-  case 38: /* contextfielddef: anysymbol '=' '(' INTEGER ',' INTEGER ')'  */
+  case 40: /* contextfielddef: anysymbol '=' '(' INTEGER ',' INTEGER ')'  */
                                               { delete (yyvsp[-3].i); delete (yyvsp[-1].i); string errmsg = (yyvsp[-6].anysym)->getName()+": redefined as field"; slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 39: /* contextfielddef: contextfielddef SIGNED_KEY  */
+  case 41: /* contextfielddef: contextfielddef SIGNED_KEY  */
                                                 { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->signext = true; }
     break;
 
-  case 40: /* contextfielddef: contextfielddef NOFLOW_KEY  */
+  case 42: /* contextfielddef: contextfielddef NOFLOW_KEY  */
                                                 { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->flow = false; }
     break;
 
-  case 41: /* contextfielddef: contextfielddef HEX_KEY  */
-                                                { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->hex = true; }
+  case 43: /* contextfielddef: contextfielddef HEX_KEY  */
+                                                { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 16; }
+    break;
+
+  case 44: /* contextfielddef: contextfielddef DEC_KEY  */
+                                                { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 10; }
+    break;
+
+  case 45: /* contextfielddef: contextfielddef OCT_KEY  */
+                                                { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 8; }
     break;
 
-  case 42: /* contextfielddef: contextfielddef DEC_KEY  */
-                                                { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->hex = false; }
+  case 46: /* contextfielddef: contextfielddef BIN_KEY  */
+                                                { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 2; }
     break;
 
-  case 43: /* spacedef: spaceprop ';'  */
+  case 47: /* spacedef: spaceprop ';'  */
                                         { slgh->newSpace((yyvsp[-1].spacequal)); }
     break;
 
-  case 44: /* spaceprop: DEFINE_KEY SPACE_KEY STRING  */
+  case 48: /* spaceprop: DEFINE_KEY SPACE_KEY STRING  */
                                         { (yyval.spacequal) = new SpaceQuality(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 45: /* spaceprop: DEFINE_KEY SPACE_KEY anysymbol  */
+  case 49: /* spaceprop: DEFINE_KEY SPACE_KEY anysymbol  */
                                         { string errmsg = (yyvsp[0].anysym)->getName()+": redefined as space"; slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 46: /* spaceprop: spaceprop TYPE_KEY '=' RAM_KEY  */
+  case 50: /* spaceprop: spaceprop TYPE_KEY '=' RAM_KEY  */
                                         { (yyval.spacequal) = (yyvsp[-3].spacequal); (yyval.spacequal)->type = SpaceQuality::ramtype; }
     break;
 
-  case 47: /* spaceprop: spaceprop TYPE_KEY '=' REGISTER_KEY  */
+  case 51: /* spaceprop: spaceprop TYPE_KEY '=' REGISTER_KEY  */
                                         { (yyval.spacequal) = (yyvsp[-3].spacequal); (yyval.spacequal)->type = SpaceQuality::registertype; }
     break;
 
-  case 48: /* spaceprop: spaceprop SIZE_KEY '=' INTEGER  */
+  case 52: /* spaceprop: spaceprop SIZE_KEY '=' INTEGER  */
                                         { (yyval.spacequal) = (yyvsp[-3].spacequal); (yyval.spacequal)->size = *(yyvsp[0].i); delete (yyvsp[0].i); }
     break;
 
-  case 49: /* spaceprop: spaceprop WORDSIZE_KEY '=' INTEGER  */
+  case 53: /* spaceprop: spaceprop WORDSIZE_KEY '=' INTEGER  */
                                         { (yyval.spacequal) = (yyvsp[-3].spacequal); (yyval.spacequal)->wordsize = *(yyvsp[0].i); delete (yyvsp[0].i); }
     break;
 
-  case 50: /* spaceprop: spaceprop DEFAULT_KEY  */
+  case 54: /* spaceprop: spaceprop DEFAULT_KEY  */
                                         { (yyval.spacequal) = (yyvsp[-1].spacequal); (yyval.spacequal)->isdefault = true; }
     break;
 
-  case 51: /* varnodedef: DEFINE_KEY SPACESYM OFFSET_KEY '=' INTEGER SIZE_KEY '=' INTEGER stringlist ';'  */
+  case 55: /* varnodedef: DEFINE_KEY SPACESYM OFFSET_KEY '=' INTEGER SIZE_KEY '=' INTEGER stringlist ';'  */
                                                                                            {
                slgh->defineVarnodes((yyvsp[-8].spacesym),(yyvsp[-5].i),(yyvsp[-2].i),(yyvsp[-1].strlist)); }
     break;
 
-  case 52: /* varnodedef: DEFINE_KEY SPACESYM OFFSET_KEY '=' BADINTEGER  */
+  case 56: /* varnodedef: DEFINE_KEY SPACESYM OFFSET_KEY '=' BADINTEGER  */
                                                   { slgh->reportError("Parsed integer is too big (overflow)"); YYERROR; }
     break;
 
-  case 56: /* bitrangesingle: STRING '=' VARSYM '[' INTEGER ',' INTEGER ']'  */
+  case 60: /* bitrangesingle: STRING '=' VARSYM '[' INTEGER ',' INTEGER ']'  */
                                                               {
                slgh->defineBitrange((yyvsp[-7].str),(yyvsp[-5].varsym),(uint4)*(yyvsp[-3].i),(uint4)*(yyvsp[-1].i)); delete (yyvsp[-3].i); delete (yyvsp[-1].i); }
     break;
 
-  case 57: /* pcodeopdef: DEFINE_KEY PCODEOP_KEY stringlist ';'  */
+  case 61: /* pcodeopdef: DEFINE_KEY PCODEOP_KEY stringlist ';'  */
                                                   { slgh->addUserOp((yyvsp[-1].strlist)); }
     break;
 
-  case 58: /* valueattach: ATTACH_KEY VALUES_KEY valuelist intblist ';'  */
+  case 62: /* valueattach: ATTACH_KEY VALUES_KEY valuelist intblist ';'  */
                                                           { slgh->attachValues((yyvsp[-2].symlist),(yyvsp[-1].biglist)); }
     break;
 
-  case 59: /* nameattach: ATTACH_KEY NAMES_KEY valuelist anystringlist ';'  */
+  case 63: /* nameattach: ATTACH_KEY NAMES_KEY valuelist anystringlist ';'  */
                                                              { slgh->attachNames((yyvsp[-2].symlist),(yyvsp[-1].strlist)); }
     break;
 
-  case 60: /* varattach: ATTACH_KEY VARIABLES_KEY valuelist varlist ';'  */
+  case 64: /* varattach: ATTACH_KEY VARIABLES_KEY valuelist varlist ';'  */
                                                           { slgh->attachVarnodes((yyvsp[-2].symlist),(yyvsp[-1].symlist)); }
     break;
 
-  case 61: /* macrodef: macrostart '{' rtl '}'  */
+  case 65: /* macrodef: macrostart '{' rtl '}'  */
                                         { slgh->buildMacro((yyvsp[-3].macrosym),(yyvsp[-1].sem)); }
     break;
 
-  case 62: /* withblockstart: WITH_KEY id_or_nil ':' bitpat_or_nil contextblock '{'  */
+  case 66: /* withblockstart: WITH_KEY id_or_nil ':' bitpat_or_nil contextblock '{'  */
                                                                        {  slgh->pushWith((yyvsp[-4].subtablesym),(yyvsp[-2].pateq),(yyvsp[-1].contop)); }
     break;
 
-  case 66: /* withblock: withblockmid '}'  */
+  case 70: /* withblock: withblockmid '}'  */
                              { slgh->popWith(); }
     break;
 
-  case 67: /* id_or_nil: %empty  */
+  case 71: /* id_or_nil: %empty  */
                         { (yyval.subtablesym) = (SubtableSymbol *)0; }
     break;
 
-  case 68: /* id_or_nil: SUBTABLESYM  */
+  case 72: /* id_or_nil: SUBTABLESYM  */
                         { (yyval.subtablesym) = (yyvsp[0].subtablesym); }
     break;
 
-  case 69: /* id_or_nil: STRING  */
+  case 73: /* id_or_nil: STRING  */
                         { (yyval.subtablesym) = slgh->newTable((yyvsp[0].str)); }
     break;
 
-  case 70: /* bitpat_or_nil: %empty  */
+  case 74: /* bitpat_or_nil: %empty  */
                            { (yyval.pateq) = (PatternEquation *)0; }
     break;
 
-  case 71: /* bitpat_or_nil: pequation  */
+  case 75: /* bitpat_or_nil: pequation  */
                            { (yyval.pateq) = (yyvsp[0].pateq); }
     break;
 
-  case 72: /* macrostart: MACRO_KEY STRING '(' oplist ')'  */
+  case 76: /* macrostart: MACRO_KEY STRING '(' oplist ')'  */
                                             { (yyval.macrosym) = slgh->createMacro((yyvsp[-3].str),(yyvsp[-1].strlist)); }
     break;
 
-  case 73: /* rtlbody: '{' rtl '}'  */
+  case 77: /* rtlbody: '{' rtl '}'  */
                      { (yyval.sectionstart) = slgh->standaloneSection((yyvsp[-1].sem)); }
     break;
 
-  case 74: /* rtlbody: '{' rtlcontinue rtlmid '}'  */
+  case 78: /* rtlbody: '{' rtlcontinue rtlmid '}'  */
                                { (yyval.sectionstart) = slgh->finalNamedSection((yyvsp[-2].sectionstart),(yyvsp[-1].sem)); }
     break;
 
-  case 75: /* rtlbody: OP_UNIMPL  */
+  case 79: /* rtlbody: OP_UNIMPL  */
                      { (yyval.sectionstart) = (SectionVector *)0; }
     break;
 
-  case 76: /* constructor: constructprint IS_KEY pequation contextblock rtlbody  */
+  case 80: /* constructor: constructprint IS_KEY pequation contextblock rtlbody  */
                                                                   { slgh->buildConstructor((yyvsp[-4].construct),(yyvsp[-2].pateq),(yyvsp[-1].contop),(yyvsp[0].sectionstart)); }
     break;
 
-  case 77: /* constructor: subtablestart IS_KEY pequation contextblock rtlbody  */
+  case 81: /* constructor: subtablestart IS_KEY pequation contextblock rtlbody  */
                                                                   { slgh->buildConstructor((yyvsp[-4].construct),(yyvsp[-2].pateq),(yyvsp[-1].contop),(yyvsp[0].sectionstart)); }
     break;
 
-  case 78: /* constructprint: subtablestart STRING  */
+  case 82: /* constructprint: subtablestart STRING  */
                                         { (yyval.construct) = (yyvsp[-1].construct); (yyval.construct)->addSyntax(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 79: /* constructprint: subtablestart charstring  */
+  case 83: /* constructprint: subtablestart charstring  */
                                         { (yyval.construct) = (yyvsp[-1].construct); (yyval.construct)->addSyntax(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 80: /* constructprint: subtablestart SYMBOLSTRING  */
+  case 84: /* constructprint: subtablestart SYMBOLSTRING  */
                                         { (yyval.construct) = (yyvsp[-1].construct); if (slgh->isInRoot((yyvsp[-1].construct))) { (yyval.construct)->addSyntax(*(yyvsp[0].str)); delete (yyvsp[0].str); } else slgh->newOperand((yyvsp[-1].construct),(yyvsp[0].str)); }
     break;
 
-  case 81: /* constructprint: subtablestart '^'  */
+  case 85: /* constructprint: subtablestart '^'  */
                                                 { (yyval.construct) = (yyvsp[-1].construct); if (!slgh->isInRoot((yyvsp[-1].construct))) { slgh->reportError("Unexpected '^' at start of print pieces");  YYERROR; } }
     break;
 
-  case 82: /* constructprint: constructprint '^'  */
+  case 86: /* constructprint: constructprint '^'  */
                                                 { (yyval.construct) = (yyvsp[-1].construct); }
     break;
 
-  case 83: /* constructprint: constructprint STRING  */
+  case 87: /* constructprint: constructprint STRING  */
                                                 { (yyval.construct) = (yyvsp[-1].construct); (yyval.construct)->addSyntax(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 84: /* constructprint: constructprint charstring  */
+  case 88: /* constructprint: constructprint charstring  */
                                         { (yyval.construct) = (yyvsp[-1].construct); (yyval.construct)->addSyntax(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 85: /* constructprint: constructprint ' '  */
+  case 89: /* constructprint: constructprint ' '  */
                                                 { (yyval.construct) = (yyvsp[-1].construct); (yyval.construct)->addSyntax(string(" ")); }
     break;
 
-  case 86: /* constructprint: constructprint SYMBOLSTRING  */
+  case 90: /* constructprint: constructprint SYMBOLSTRING  */
                                         { (yyval.construct) = (yyvsp[-1].construct); slgh->newOperand((yyvsp[-1].construct),(yyvsp[0].str)); }
     break;
 
-  case 87: /* subtablestart: SUBTABLESYM ':'  */
+  case 91: /* subtablestart: SUBTABLESYM ':'  */
                                 { (yyval.construct) = slgh->createConstructor((yyvsp[-1].subtablesym)); }
     break;
 
-  case 88: /* subtablestart: STRING ':'  */
+  case 92: /* subtablestart: STRING ':'  */
                                                 { SubtableSymbol *sym=slgh->newTable((yyvsp[-1].str)); (yyval.construct) = slgh->createConstructor(sym); }
     break;
 
-  case 89: /* subtablestart: ':'  */
+  case 93: /* subtablestart: ':'  */
                                                         { (yyval.construct) = slgh->createConstructor((SubtableSymbol *)0); }
     break;
 
-  case 90: /* subtablestart: subtablestart ' '  */
+  case 94: /* subtablestart: subtablestart ' '  */
                                         { (yyval.construct) = (yyvsp[-1].construct); }
     break;
 
-  case 91: /* pexpression: INTB  */
+  case 95: /* pexpression: INTB  */
                                         { (yyval.patexp) = new ConstantValue(*(yyvsp[0].big)); delete (yyvsp[0].big); }
     break;
 
-  case 92: /* pexpression: familysymbol  */
+  case 96: /* pexpression: familysymbol  */
                                         { if ((actionon==1)&&((yyvsp[0].famsym)->getType() != SleighSymbol::context_symbol))
                                              { string errmsg="Global symbol "+(yyvsp[0].famsym)->getName(); errmsg += " is not allowed in action expression"; slgh->reportError(errmsg); } (yyval.patexp) = (yyvsp[0].famsym)->getPatternValue(); }
     break;
 
-  case 93: /* pexpression: specificsymbol  */
+  case 97: /* pexpression: specificsymbol  */
                                         { (yyval.patexp) = (yyvsp[0].specsym)->getPatternExpression(); }
     break;
 
-  case 94: /* pexpression: '(' pexpression ')'  */
+  case 98: /* pexpression: '(' pexpression ')'  */
                                         { (yyval.patexp) = (yyvsp[-1].patexp); }
     break;
 
-  case 95: /* pexpression: pexpression '+' pexpression  */
+  case 99: /* pexpression: pexpression '+' pexpression  */
                                         { (yyval.patexp) = new PlusExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 96: /* pexpression: pexpression '-' pexpression  */
+  case 100: /* pexpression: pexpression '-' pexpression  */
                                         { (yyval.patexp) = new SubExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 97: /* pexpression: pexpression '*' pexpression  */
+  case 101: /* pexpression: pexpression '*' pexpression  */
                                         { (yyval.patexp) = new MultExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 98: /* pexpression: pexpression OP_LEFT pexpression  */
+  case 102: /* pexpression: pexpression OP_LEFT pexpression  */
                                         { (yyval.patexp) = new LeftShiftExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 99: /* pexpression: pexpression OP_RIGHT pexpression  */
+  case 103: /* pexpression: pexpression OP_RIGHT pexpression  */
                                         { (yyval.patexp) = new RightShiftExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 100: /* pexpression: pexpression OP_AND pexpression  */
+  case 104: /* pexpression: pexpression OP_AND pexpression  */
                                         { (yyval.patexp) = new AndExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 101: /* pexpression: pexpression OP_OR pexpression  */
+  case 105: /* pexpression: pexpression OP_OR pexpression  */
                                         { (yyval.patexp) = new OrExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 102: /* pexpression: pexpression OP_XOR pexpression  */
+  case 106: /* pexpression: pexpression OP_XOR pexpression  */
                                         { (yyval.patexp) = new XorExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 103: /* pexpression: pexpression '/' pexpression  */
+  case 107: /* pexpression: pexpression '/' pexpression  */
                                         { (yyval.patexp) = new DivExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 104: /* pexpression: '-' pexpression  */
+  case 108: /* pexpression: '-' pexpression  */
                                         { (yyval.patexp) = new MinusExpression((yyvsp[0].patexp)); }
     break;
 
-  case 105: /* pexpression: '~' pexpression  */
+  case 109: /* pexpression: '~' pexpression  */
                                         { (yyval.patexp) = new NotExpression((yyvsp[0].patexp)); }
     break;
 
-  case 107: /* pequation: pequation '&' pequation  */
+  case 111: /* pequation: pequation '&' pequation  */
                                         { (yyval.pateq) = new EquationAnd((yyvsp[-2].pateq),(yyvsp[0].pateq)); }
     break;
 
-  case 108: /* pequation: pequation '|' pequation  */
+  case 112: /* pequation: pequation '|' pequation  */
                                         { (yyval.pateq) = new EquationOr((yyvsp[-2].pateq),(yyvsp[0].pateq)); }
     break;
 
-  case 109: /* pequation: pequation ';' pequation  */
+  case 113: /* pequation: pequation ';' pequation  */
                                         { (yyval.pateq) = new EquationCat((yyvsp[-2].pateq),(yyvsp[0].pateq)); }
     break;
 
-  case 110: /* elleq: ELLIPSIS_KEY ellrt  */
+  case 114: /* elleq: ELLIPSIS_KEY ellrt  */
                                         { (yyval.pateq) = new EquationLeftEllipsis((yyvsp[0].pateq)); }
     break;
 
-  case 112: /* ellrt: atomic ELLIPSIS_KEY  */
+  case 116: /* ellrt: atomic ELLIPSIS_KEY  */
                                         { (yyval.pateq) = new EquationRightEllipsis((yyvsp[-1].pateq)); }
     break;
 
-  case 115: /* atomic: '(' pequation ')'  */
+  case 119: /* atomic: '(' pequation ')'  */
                                         { (yyval.pateq) = (yyvsp[-1].pateq); }
     break;
 
-  case 116: /* constraint: familysymbol '=' pexpression  */
+  case 120: /* constraint: familysymbol '=' pexpression  */
                                          { (yyval.pateq) = new EqualEquation((yyvsp[-2].famsym)->getPatternValue(),(yyvsp[0].patexp)); }
     break;
 
-  case 117: /* constraint: familysymbol OP_NOTEQUAL pexpression  */
+  case 121: /* constraint: familysymbol OP_NOTEQUAL pexpression  */
                                          { (yyval.pateq) = new NotEqualEquation((yyvsp[-2].famsym)->getPatternValue(),(yyvsp[0].patexp)); }
     break;
 
-  case 118: /* constraint: familysymbol '<' pexpression  */
+  case 122: /* constraint: familysymbol '<' pexpression  */
                                         { (yyval.pateq) = new LessEquation((yyvsp[-2].famsym)->getPatternValue(),(yyvsp[0].patexp)); }
     break;
 
-  case 119: /* constraint: familysymbol OP_LESSEQUAL pexpression  */
+  case 123: /* constraint: familysymbol OP_LESSEQUAL pexpression  */
                                           { (yyval.pateq) = new LessEqualEquation((yyvsp[-2].famsym)->getPatternValue(),(yyvsp[0].patexp)); }
     break;
 
-  case 120: /* constraint: familysymbol '>' pexpression  */
+  case 124: /* constraint: familysymbol '>' pexpression  */
                                         { (yyval.pateq) = new GreaterEquation((yyvsp[-2].famsym)->getPatternValue(),(yyvsp[0].patexp)); }
     break;
 
-  case 121: /* constraint: familysymbol OP_GREATEQUAL pexpression  */
+  case 125: /* constraint: familysymbol OP_GREATEQUAL pexpression  */
                                            { (yyval.pateq) = new GreaterEqualEquation((yyvsp[-2].famsym)->getPatternValue(),(yyvsp[0].patexp)); }
     break;
 
-  case 122: /* constraint: OPERANDSYM '=' pexpression  */
+  case 126: /* constraint: OPERANDSYM '=' pexpression  */
                                         { (yyval.pateq) = slgh->constrainOperand((yyvsp[-2].operandsym),(yyvsp[0].patexp)); 
                                           if ((yyval.pateq) == (PatternEquation *)0) 
                                             { string errmsg="Constraining currently undefined operand "+(yyvsp[-2].operandsym)->getName(); slgh->reportError(errmsg); } }
     break;
 
-  case 123: /* constraint: OPERANDSYM  */
+  case 127: /* constraint: OPERANDSYM  */
                                         { (yyval.pateq) = new OperandEquation((yyvsp[0].operandsym)->getIndex()); slgh->selfDefine((yyvsp[0].operandsym)); }
     break;
 
-  case 124: /* constraint: SPECSYM  */
+  case 128: /* constraint: SPECSYM  */
                                         { (yyval.pateq) = new UnconstrainedEquation((yyvsp[0].specsym)->getPatternExpression()); }
     break;
 
-  case 125: /* constraint: familysymbol  */
+  case 129: /* constraint: familysymbol  */
                                         { (yyval.pateq) = slgh->defineInvisibleOperand((yyvsp[0].famsym)); }
     break;
 
-  case 126: /* constraint: SUBTABLESYM  */
+  case 130: /* constraint: SUBTABLESYM  */
                                         { (yyval.pateq) = slgh->defineInvisibleOperand((yyvsp[0].subtablesym)); }
     break;
 
-  case 127: /* contextblock: %empty  */
+  case 131: /* contextblock: %empty  */
                                         { (yyval.contop) = (vector<ContextChange *> *)0; }
     break;
 
-  case 128: /* contextblock: '[' contextlist ']'  */
+  case 132: /* contextblock: '[' contextlist ']'  */
                                         { (yyval.contop) = (yyvsp[-1].contop); }
     break;
 
-  case 129: /* contextlist: %empty  */
+  case 133: /* contextlist: %empty  */
                                         { (yyval.contop) = new vector<ContextChange *>; }
     break;
 
-  case 130: /* contextlist: contextlist CONTEXTSYM '=' pexpression ';'  */
+  case 134: /* contextlist: contextlist CONTEXTSYM '=' pexpression ';'  */
                                                 { (yyval.contop) = (yyvsp[-4].contop); if (!slgh->contextMod((yyvsp[-4].contop),(yyvsp[-3].contextsym),(yyvsp[-1].patexp))) { string errmsg="Cannot use 'inst_next' or 'inst_next2' to set context variable: "+(yyvsp[-3].contextsym)->getName(); slgh->reportError(errmsg); YYERROR; } }
     break;
 
-  case 131: /* contextlist: contextlist GLOBALSET_KEY '(' familysymbol ',' CONTEXTSYM ')' ';'  */
+  case 135: /* contextlist: contextlist GLOBALSET_KEY '(' familysymbol ',' CONTEXTSYM ')' ';'  */
                                                                       { (yyval.contop) = (yyvsp[-7].contop); slgh->contextSet((yyvsp[-7].contop),(yyvsp[-4].famsym),(yyvsp[-2].contextsym)); }
     break;
 
-  case 132: /* contextlist: contextlist GLOBALSET_KEY '(' specificsymbol ',' CONTEXTSYM ')' ';'  */
+  case 136: /* contextlist: contextlist GLOBALSET_KEY '(' specificsymbol ',' CONTEXTSYM ')' ';'  */
                                                                         { (yyval.contop) = (yyvsp[-7].contop); slgh->contextSet((yyvsp[-7].contop),(yyvsp[-4].specsym),(yyvsp[-2].contextsym)); }
     break;
 
-  case 133: /* contextlist: contextlist OPERANDSYM '=' pexpression ';'  */
+  case 137: /* contextlist: contextlist OPERANDSYM '=' pexpression ';'  */
                                                { (yyval.contop) = (yyvsp[-4].contop); slgh->defineOperand((yyvsp[-3].operandsym),(yyvsp[-1].patexp)); }
     break;
 
-  case 134: /* contextlist: contextlist STRING  */
+  case 138: /* contextlist: contextlist STRING  */
                                         { string errmsg="Expecting context symbol, not "+*(yyvsp[0].str); delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 135: /* section_def: OP_LEFT STRING OP_RIGHT  */
+  case 139: /* section_def: OP_LEFT STRING OP_RIGHT  */
                                         { (yyval.sectionsym) = slgh->newSectionSymbol( *(yyvsp[-1].str) ); delete (yyvsp[-1].str); }
     break;
 
-  case 136: /* section_def: OP_LEFT SECTIONSYM OP_RIGHT  */
+  case 140: /* section_def: OP_LEFT SECTIONSYM OP_RIGHT  */
                                         { (yyval.sectionsym) = (yyvsp[-1].sectionsym); }
     break;
 
-  case 137: /* rtlfirstsection: rtl section_def  */
+  case 141: /* rtlfirstsection: rtl section_def  */
                                         { (yyval.sectionstart) = slgh->firstNamedSection((yyvsp[-1].sem),(yyvsp[0].sectionsym)); }
     break;
 
-  case 138: /* rtlcontinue: rtlfirstsection  */
+  case 142: /* rtlcontinue: rtlfirstsection  */
                              { (yyval.sectionstart) = (yyvsp[0].sectionstart); }
     break;
 
-  case 139: /* rtlcontinue: rtlcontinue rtlmid section_def  */
+  case 143: /* rtlcontinue: rtlcontinue rtlmid section_def  */
                                         { (yyval.sectionstart) = slgh->nextNamedSection((yyvsp[-2].sectionstart),(yyvsp[-1].sem),(yyvsp[0].sectionsym)); }
     break;
 
-  case 140: /* rtl: rtlmid  */
+  case 144: /* rtl: rtlmid  */
             { (yyval.sem) = (yyvsp[0].sem); if ((yyval.sem)->getOpvec().empty() && ((yyval.sem)->getResult() == (HandleTpl *)0)) slgh->recordNop(); }
     break;
 
-  case 141: /* rtl: rtlmid EXPORT_KEY exportvarnode ';'  */
+  case 145: /* rtl: rtlmid EXPORT_KEY exportvarnode ';'  */
                                         { (yyval.sem) = slgh->setResultVarnode((yyvsp[-3].sem),(yyvsp[-1].varnode)); }
     break;
 
-  case 142: /* rtl: rtlmid EXPORT_KEY sizedstar lhsvarnode ';'  */
+  case 146: /* rtl: rtlmid EXPORT_KEY sizedstar lhsvarnode ';'  */
                                                { (yyval.sem) = slgh->setResultStarVarnode((yyvsp[-4].sem),(yyvsp[-2].starqual),(yyvsp[-1].varnode)); }
     break;
 
-  case 143: /* rtl: rtlmid EXPORT_KEY STRING  */
+  case 147: /* rtl: rtlmid EXPORT_KEY STRING  */
                                         { string errmsg="Unknown export varnode: "+*(yyvsp[0].str); delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 144: /* rtl: rtlmid EXPORT_KEY sizedstar STRING  */
+  case 148: /* rtl: rtlmid EXPORT_KEY sizedstar STRING  */
                                         { string errmsg="Unknown pointer varnode: "+*(yyvsp[0].str); delete (yyvsp[-1].starqual); delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 145: /* rtlmid: %empty  */
+  case 149: /* rtlmid: %empty  */
                                         { (yyval.sem) = new ConstructTpl(); }
     break;
 
-  case 146: /* rtlmid: rtlmid statement  */
+  case 150: /* rtlmid: rtlmid statement  */
                                         { (yyval.sem) = (yyvsp[-1].sem); if (!(yyval.sem)->addOpList(*(yyvsp[0].stmt))) { delete (yyvsp[0].stmt); slgh->reportError("Multiple delayslot declarations"); YYERROR; } delete (yyvsp[0].stmt); }
     break;
 
-  case 147: /* rtlmid: rtlmid LOCAL_KEY STRING ';'  */
+  case 151: /* rtlmid: rtlmid LOCAL_KEY STRING ';'  */
                                 { (yyval.sem) = (yyvsp[-3].sem); slgh->pcode.newLocalDefinition((yyvsp[-1].str)); }
     break;
 
-  case 148: /* rtlmid: rtlmid LOCAL_KEY STRING ':' INTEGER ';'  */
+  case 152: /* rtlmid: rtlmid LOCAL_KEY STRING ':' INTEGER ';'  */
                                             { (yyval.sem) = (yyvsp[-5].sem); slgh->pcode.newLocalDefinition((yyvsp[-3].str),*(yyvsp[-1].i)); delete (yyvsp[-1].i); }
     break;
 
-  case 149: /* statement: lhsvarnode '=' expr ';'  */
+  case 153: /* statement: lhsvarnode '=' expr ';'  */
                                         { (yyvsp[-1].tree)->setOutput((yyvsp[-3].varnode)); (yyval.stmt) = ExprTree::toVector((yyvsp[-1].tree)); }
     break;
 
-  case 150: /* statement: LOCAL_KEY STRING '=' expr ';'  */
+  case 154: /* statement: LOCAL_KEY STRING '=' expr ';'  */
                                         { (yyval.stmt) = slgh->pcode.newOutput(true,(yyvsp[-1].tree),(yyvsp[-3].str)); }
     break;
 
-  case 151: /* statement: STRING '=' expr ';'  */
+  case 155: /* statement: STRING '=' expr ';'  */
                                         { (yyval.stmt) = slgh->pcode.newOutput(false,(yyvsp[-1].tree),(yyvsp[-3].str)); }
     break;
 
-  case 152: /* statement: LOCAL_KEY STRING ':' INTEGER '=' expr ';'  */
+  case 156: /* statement: LOCAL_KEY STRING ':' INTEGER '=' expr ';'  */
                                                 { (yyval.stmt) = slgh->pcode.newOutput(true,(yyvsp[-1].tree),(yyvsp[-5].str),*(yyvsp[-3].i)); delete (yyvsp[-3].i); }
     break;
 
-  case 153: /* statement: STRING ':' INTEGER '=' expr ';'  */
+  case 157: /* statement: STRING ':' INTEGER '=' expr ';'  */
                                         { (yyval.stmt) = slgh->pcode.newOutput(true,(yyvsp[-1].tree),(yyvsp[-5].str),*(yyvsp[-3].i)); delete (yyvsp[-3].i); }
     break;
 
-  case 154: /* statement: LOCAL_KEY specificsymbol '='  */
+  case 158: /* statement: LOCAL_KEY specificsymbol '='  */
                                  { (yyval.stmt) = (vector<OpTpl *> *)0; string errmsg = "Redefinition of symbol: "+(yyvsp[-1].specsym)->getName(); slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 155: /* statement: sizedstar expr '=' expr ';'  */
+  case 159: /* statement: sizedstar expr '=' expr ';'  */
                                         { (yyval.stmt) = slgh->pcode.createStore((yyvsp[-4].starqual),(yyvsp[-3].tree),(yyvsp[-1].tree)); }
     break;
 
-  case 156: /* statement: USEROPSYM '(' paramlist ')' ';'  */
+  case 160: /* statement: USEROPSYM '(' paramlist ')' ';'  */
                                         { (yyval.stmt) = slgh->pcode.createUserOpNoOut((yyvsp[-4].useropsym),(yyvsp[-2].param)); }
     break;
 
-  case 157: /* statement: lhsvarnode '[' INTEGER ',' INTEGER ']' '=' expr ';'  */
+  case 161: /* statement: lhsvarnode '[' INTEGER ',' INTEGER ']' '=' expr ';'  */
                                                         { (yyval.stmt) = slgh->pcode.assignBitRange((yyvsp[-8].varnode),(uint4)*(yyvsp[-6].i),(uint4)*(yyvsp[-4].i),(yyvsp[-1].tree)); delete (yyvsp[-6].i), delete (yyvsp[-4].i); }
     break;
 
-  case 158: /* statement: BITSYM '=' expr ';'  */
+  case 162: /* statement: BITSYM '=' expr ';'  */
                                         { (yyval.stmt)=slgh->pcode.assignBitRange((yyvsp[-3].bitsym)->getParentSymbol()->getVarnode(),(yyvsp[-3].bitsym)->getBitOffset(),(yyvsp[-3].bitsym)->numBits(),(yyvsp[-1].tree)); }
     break;
 
-  case 159: /* statement: varnode ':' INTEGER '='  */
+  case 163: /* statement: varnode ':' INTEGER '='  */
                                         { delete (yyvsp[-3].varnode); delete (yyvsp[-1].i); slgh->reportError("Illegal truncation on left-hand side of assignment"); YYERROR; }
     break;
 
-  case 160: /* statement: varnode '(' INTEGER ')'  */
+  case 164: /* statement: varnode '(' INTEGER ')'  */
                                         { delete (yyvsp[-3].varnode); delete (yyvsp[-1].i); slgh->reportError("Illegal subpiece on left-hand side of assignment"); YYERROR; }
     break;
 
-  case 161: /* statement: BUILD_KEY OPERANDSYM ';'  */
+  case 165: /* statement: BUILD_KEY OPERANDSYM ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpConst(BUILD,(yyvsp[-1].operandsym)->getIndex()); }
     break;
 
-  case 162: /* statement: CROSSBUILD_KEY varnode ',' SECTIONSYM ';'  */
+  case 166: /* statement: CROSSBUILD_KEY varnode ',' SECTIONSYM ';'  */
                                               { (yyval.stmt) = slgh->createCrossBuild((yyvsp[-3].varnode),(yyvsp[-1].sectionsym)); }
     break;
 
-  case 163: /* statement: CROSSBUILD_KEY varnode ',' STRING ';'  */
+  case 167: /* statement: CROSSBUILD_KEY varnode ',' STRING ';'  */
                                             { (yyval.stmt) = slgh->createCrossBuild((yyvsp[-3].varnode),slgh->newSectionSymbol(*(yyvsp[-1].str))); delete (yyvsp[-1].str); }
     break;
 
-  case 164: /* statement: DELAYSLOT_KEY '(' INTEGER ')' ';'  */
+  case 168: /* statement: DELAYSLOT_KEY '(' INTEGER ')' ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpConst(DELAY_SLOT,*(yyvsp[-2].i)); delete (yyvsp[-2].i); }
     break;
 
-  case 165: /* statement: GOTO_KEY jumpdest ';'  */
+  case 169: /* statement: GOTO_KEY jumpdest ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpNoOut(CPUI_BRANCH,new ExprTree((yyvsp[-1].varnode))); }
     break;
 
-  case 166: /* statement: IF_KEY expr GOTO_KEY jumpdest ';'  */
+  case 170: /* statement: IF_KEY expr GOTO_KEY jumpdest ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpNoOut(CPUI_CBRANCH,new ExprTree((yyvsp[-1].varnode)),(yyvsp[-3].tree)); }
     break;
 
-  case 167: /* statement: GOTO_KEY '[' expr ']' ';'  */
+  case 171: /* statement: GOTO_KEY '[' expr ']' ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpNoOut(CPUI_BRANCHIND,(yyvsp[-2].tree)); }
     break;
 
-  case 168: /* statement: CALL_KEY jumpdest ';'  */
+  case 172: /* statement: CALL_KEY jumpdest ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpNoOut(CPUI_CALL,new ExprTree((yyvsp[-1].varnode))); }
     break;
 
-  case 169: /* statement: CALL_KEY '[' expr ']' ';'  */
+  case 173: /* statement: CALL_KEY '[' expr ']' ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpNoOut(CPUI_CALLIND,(yyvsp[-2].tree)); }
     break;
 
-  case 170: /* statement: RETURN_KEY ';'  */
+  case 174: /* statement: RETURN_KEY ';'  */
                                         { slgh->reportError("Must specify an indirect parameter for return"); YYERROR; }
     break;
 
-  case 171: /* statement: RETURN_KEY '[' expr ']' ';'  */
+  case 175: /* statement: RETURN_KEY '[' expr ']' ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpNoOut(CPUI_RETURN,(yyvsp[-2].tree)); }
     break;
 
-  case 172: /* statement: MACROSYM '(' paramlist ')' ';'  */
+  case 176: /* statement: MACROSYM '(' paramlist ')' ';'  */
                                         { (yyval.stmt) = slgh->createMacroUse((yyvsp[-4].macrosym),(yyvsp[-2].param)); }
     break;
 
-  case 173: /* statement: label  */
+  case 177: /* statement: label  */
                                         { (yyval.stmt) = slgh->pcode.placeLabel( (yyvsp[0].labelsym) ); }
     break;
 
-  case 174: /* expr: varnode  */
+  case 178: /* expr: varnode  */
               { (yyval.tree) = new ExprTree((yyvsp[0].varnode)); }
     break;
 
-  case 175: /* expr: sizedstar expr  */
+  case 179: /* expr: sizedstar expr  */
                                 { (yyval.tree) = slgh->pcode.createLoad((yyvsp[-1].starqual),(yyvsp[0].tree)); }
     break;
 
-  case 176: /* expr: '(' expr ')'  */
+  case 180: /* expr: '(' expr ')'  */
                                 { (yyval.tree) = (yyvsp[-1].tree); }
     break;
 
-  case 177: /* expr: expr '+' expr  */
+  case 181: /* expr: expr '+' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_ADD,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 178: /* expr: expr '-' expr  */
+  case 182: /* expr: expr '-' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SUB,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 179: /* expr: expr OP_EQUAL expr  */
+  case 183: /* expr: expr OP_EQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_EQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 180: /* expr: expr OP_NOTEQUAL expr  */
+  case 184: /* expr: expr OP_NOTEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_NOTEQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 181: /* expr: expr '<' expr  */
+  case 185: /* expr: expr '<' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_LESS,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 182: /* expr: expr OP_GREATEQUAL expr  */
+  case 186: /* expr: expr OP_GREATEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_LESSEQUAL,(yyvsp[0].tree),(yyvsp[-2].tree)); }
     break;
 
-  case 183: /* expr: expr OP_LESSEQUAL expr  */
+  case 187: /* expr: expr OP_LESSEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_LESSEQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 184: /* expr: expr '>' expr  */
+  case 188: /* expr: expr '>' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_LESS,(yyvsp[0].tree),(yyvsp[-2].tree)); }
     break;
 
-  case 185: /* expr: expr OP_SLESS expr  */
+  case 189: /* expr: expr OP_SLESS expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SLESS,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 186: /* expr: expr OP_SGREATEQUAL expr  */
+  case 190: /* expr: expr OP_SGREATEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SLESSEQUAL,(yyvsp[0].tree),(yyvsp[-2].tree)); }
     break;
 
-  case 187: /* expr: expr OP_SLESSEQUAL expr  */
+  case 191: /* expr: expr OP_SLESSEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SLESSEQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 188: /* expr: expr OP_SGREAT expr  */
+  case 192: /* expr: expr OP_SGREAT expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SLESS,(yyvsp[0].tree),(yyvsp[-2].tree)); }
     break;
 
-  case 189: /* expr: '-' expr  */
+  case 193: /* expr: '-' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_2COMP,(yyvsp[0].tree)); }
     break;
 
-  case 190: /* expr: '~' expr  */
+  case 194: /* expr: '~' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_NEGATE,(yyvsp[0].tree)); }
     break;
 
-  case 191: /* expr: expr '^' expr  */
+  case 195: /* expr: expr '^' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_XOR,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 192: /* expr: expr '&' expr  */
+  case 196: /* expr: expr '&' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_AND,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 193: /* expr: expr '|' expr  */
+  case 197: /* expr: expr '|' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_OR,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 194: /* expr: expr OP_LEFT expr  */
+  case 198: /* expr: expr OP_LEFT expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_LEFT,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 195: /* expr: expr OP_RIGHT expr  */
+  case 199: /* expr: expr OP_RIGHT expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_RIGHT,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 196: /* expr: expr OP_SRIGHT expr  */
+  case 200: /* expr: expr OP_SRIGHT expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SRIGHT,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 197: /* expr: expr '*' expr  */
+  case 201: /* expr: expr '*' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_MULT,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 198: /* expr: expr '/' expr  */
+  case 202: /* expr: expr '/' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_DIV,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 199: /* expr: expr OP_SDIV expr  */
+  case 203: /* expr: expr OP_SDIV expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SDIV,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 200: /* expr: expr '%' expr  */
+  case 204: /* expr: expr '%' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_REM,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 201: /* expr: expr OP_SREM expr  */
+  case 205: /* expr: expr OP_SREM expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SREM,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 202: /* expr: '!' expr  */
+  case 206: /* expr: '!' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_BOOL_NEGATE,(yyvsp[0].tree)); }
     break;
 
-  case 203: /* expr: expr OP_BOOL_XOR expr  */
+  case 207: /* expr: expr OP_BOOL_XOR expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_BOOL_XOR,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 204: /* expr: expr OP_BOOL_AND expr  */
+  case 208: /* expr: expr OP_BOOL_AND expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_BOOL_AND,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 205: /* expr: expr OP_BOOL_OR expr  */
+  case 209: /* expr: expr OP_BOOL_OR expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_BOOL_OR,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 206: /* expr: expr OP_FEQUAL expr  */
+  case 210: /* expr: expr OP_FEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_EQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 207: /* expr: expr OP_FNOTEQUAL expr  */
+  case 211: /* expr: expr OP_FNOTEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_NOTEQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 208: /* expr: expr OP_FLESS expr  */
+  case 212: /* expr: expr OP_FLESS expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_LESS,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 209: /* expr: expr OP_FGREAT expr  */
+  case 213: /* expr: expr OP_FGREAT expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_LESS,(yyvsp[0].tree),(yyvsp[-2].tree)); }
     break;
 
-  case 210: /* expr: expr OP_FLESSEQUAL expr  */
+  case 214: /* expr: expr OP_FLESSEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_LESSEQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 211: /* expr: expr OP_FGREATEQUAL expr  */
+  case 215: /* expr: expr OP_FGREATEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_LESSEQUAL,(yyvsp[0].tree),(yyvsp[-2].tree)); }
     break;
 
-  case 212: /* expr: expr OP_FADD expr  */
+  case 216: /* expr: expr OP_FADD expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_ADD,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 213: /* expr: expr OP_FSUB expr  */
+  case 217: /* expr: expr OP_FSUB expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_SUB,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 214: /* expr: expr OP_FMULT expr  */
+  case 218: /* expr: expr OP_FMULT expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_MULT,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 215: /* expr: expr OP_FDIV expr  */
+  case 219: /* expr: expr OP_FDIV expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_DIV,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 216: /* expr: OP_FSUB expr  */
+  case 220: /* expr: OP_FSUB expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_NEG,(yyvsp[0].tree)); }
     break;
 
-  case 217: /* expr: OP_ABS '(' expr ')'  */
+  case 221: /* expr: OP_ABS '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_ABS,(yyvsp[-1].tree)); }
     break;
 
-  case 218: /* expr: OP_SQRT '(' expr ')'  */
+  case 222: /* expr: OP_SQRT '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_SQRT,(yyvsp[-1].tree)); }
     break;
 
-  case 219: /* expr: OP_SEXT '(' expr ')'  */
+  case 223: /* expr: OP_SEXT '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SEXT,(yyvsp[-1].tree)); }
     break;
 
-  case 220: /* expr: OP_ZEXT '(' expr ')'  */
+  case 224: /* expr: OP_ZEXT '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_ZEXT,(yyvsp[-1].tree)); }
     break;
 
-  case 221: /* expr: OP_CARRY '(' expr ',' expr ')'  */
+  case 225: /* expr: OP_CARRY '(' expr ',' expr ')'  */
                                    { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_CARRY,(yyvsp[-3].tree),(yyvsp[-1].tree)); }
     break;
 
-  case 222: /* expr: OP_SCARRY '(' expr ',' expr ')'  */
+  case 226: /* expr: OP_SCARRY '(' expr ',' expr ')'  */
                                     { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SCARRY,(yyvsp[-3].tree),(yyvsp[-1].tree)); }
     break;
 
-  case 223: /* expr: OP_SBORROW '(' expr ',' expr ')'  */
+  case 227: /* expr: OP_SBORROW '(' expr ',' expr ')'  */
                                      { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SBORROW,(yyvsp[-3].tree),(yyvsp[-1].tree)); }
     break;
 
-  case 224: /* expr: OP_FLOAT2FLOAT '(' expr ')'  */
+  case 228: /* expr: OP_FLOAT2FLOAT '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_FLOAT2FLOAT,(yyvsp[-1].tree)); }
     break;
 
-  case 225: /* expr: OP_INT2FLOAT '(' expr ')'  */
+  case 229: /* expr: OP_INT2FLOAT '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_INT2FLOAT,(yyvsp[-1].tree)); }
     break;
 
-  case 226: /* expr: OP_NAN '(' expr ')'  */
+  case 230: /* expr: OP_NAN '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_NAN,(yyvsp[-1].tree)); }
     break;
 
-  case 227: /* expr: OP_TRUNC '(' expr ')'  */
+  case 231: /* expr: OP_TRUNC '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_TRUNC,(yyvsp[-1].tree)); }
     break;
 
-  case 228: /* expr: OP_CEIL '(' expr ')'  */
+  case 232: /* expr: OP_CEIL '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_CEIL,(yyvsp[-1].tree)); }
     break;
 
-  case 229: /* expr: OP_FLOOR '(' expr ')'  */
+  case 233: /* expr: OP_FLOOR '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_FLOOR,(yyvsp[-1].tree)); }
     break;
 
-  case 230: /* expr: OP_ROUND '(' expr ')'  */
+  case 234: /* expr: OP_ROUND '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_ROUND,(yyvsp[-1].tree)); }
     break;
 
-  case 231: /* expr: OP_NEW '(' expr ')'  */
+  case 235: /* expr: OP_NEW '(' expr ')'  */
                             { (yyval.tree) = slgh->pcode.createOp(CPUI_NEW,(yyvsp[-1].tree)); }
     break;
 
-  case 232: /* expr: OP_NEW '(' expr ',' expr ')'  */
+  case 236: /* expr: OP_NEW '(' expr ',' expr ')'  */
                                  { (yyval.tree) = slgh->pcode.createOp(CPUI_NEW,(yyvsp[-3].tree),(yyvsp[-1].tree)); }
     break;
 
-  case 233: /* expr: OP_POPCOUNT '(' expr ')'  */
+  case 237: /* expr: OP_POPCOUNT '(' expr ')'  */
                              { (yyval.tree) = slgh->pcode.createOp(CPUI_POPCOUNT,(yyvsp[-1].tree)); }
     break;
 
-  case 234: /* expr: OP_LZCOUNT '(' expr ')'  */
+  case 238: /* expr: OP_LZCOUNT '(' expr ')'  */
                             { (yyval.tree) = slgh->pcode.createOp(CPUI_LZCOUNT,(yyvsp[-1].tree)); }
     break;
 
-  case 235: /* expr: specificsymbol '(' integervarnode ')'  */
+  case 239: /* expr: specificsymbol '(' integervarnode ')'  */
                                           { (yyval.tree) = slgh->pcode.createOp(CPUI_SUBPIECE,new ExprTree((yyvsp[-3].specsym)->getVarnode()),new ExprTree((yyvsp[-1].varnode))); }
     break;
 
-  case 236: /* expr: specificsymbol ':' INTEGER  */
+  case 240: /* expr: specificsymbol ':' INTEGER  */
                                 { (yyval.tree) = slgh->pcode.createBitRange((yyvsp[-2].specsym),0,(uint4)(*(yyvsp[0].i) * 8)); delete (yyvsp[0].i); }
     break;
 
-  case 237: /* expr: specificsymbol '[' INTEGER ',' INTEGER ']'  */
+  case 241: /* expr: specificsymbol '[' INTEGER ',' INTEGER ']'  */
                                                { (yyval.tree) = slgh->pcode.createBitRange((yyvsp[-5].specsym),(uint4)*(yyvsp[-3].i),(uint4)*(yyvsp[-1].i)); delete (yyvsp[-3].i), delete (yyvsp[-1].i); }
     break;
 
-  case 238: /* expr: BITSYM  */
+  case 242: /* expr: BITSYM  */
                                 { (yyval.tree)=slgh->pcode.createBitRange((yyvsp[0].bitsym)->getParentSymbol(),(yyvsp[0].bitsym)->getBitOffset(),(yyvsp[0].bitsym)->numBits()); }
     break;
 
-  case 239: /* expr: USEROPSYM '(' paramlist ')'  */
+  case 243: /* expr: USEROPSYM '(' paramlist ')'  */
                                 { (yyval.tree) = slgh->pcode.createUserOp((yyvsp[-3].useropsym),(yyvsp[-1].param)); }
     break;
 
-  case 240: /* expr: OP_CPOOLREF '(' paramlist ')'  */
+  case 244: /* expr: OP_CPOOLREF '(' paramlist ')'  */
                                    { if ((*(yyvsp[-1].param)).size() < 2) { string errmsg = "Must at least two inputs to cpool"; slgh->reportError(errmsg); YYERROR; } (yyval.tree) = slgh->pcode.createVariadic(CPUI_CPOOLREF,(yyvsp[-1].param)); }
     break;
 
-  case 241: /* sizedstar: '*' '[' SPACESYM ']' ':' INTEGER  */
+  case 245: /* sizedstar: '*' '[' SPACESYM ']' ':' INTEGER  */
                                             { (yyval.starqual) = new StarQuality; (yyval.starqual)->size = *(yyvsp[0].i); delete (yyvsp[0].i); (yyval.starqual)->id=ConstTpl((yyvsp[-3].spacesym)->getSpace()); }
     break;
 
-  case 242: /* sizedstar: '*' '[' SPACESYM ']'  */
+  case 246: /* sizedstar: '*' '[' SPACESYM ']'  */
                                 { (yyval.starqual) = new StarQuality; (yyval.starqual)->size = 0; (yyval.starqual)->id=ConstTpl((yyvsp[-1].spacesym)->getSpace()); }
     break;
 
-  case 243: /* sizedstar: '*' ':' INTEGER  */
+  case 247: /* sizedstar: '*' ':' INTEGER  */
                                 { (yyval.starqual) = new StarQuality; (yyval.starqual)->size = *(yyvsp[0].i); delete (yyvsp[0].i); (yyval.starqual)->id=ConstTpl(slgh->getDefaultCodeSpace()); }
     break;
 
-  case 244: /* sizedstar: '*'  */
+  case 248: /* sizedstar: '*'  */
                                 { (yyval.starqual) = new StarQuality; (yyval.starqual)->size = 0; (yyval.starqual)->id=ConstTpl(slgh->getDefaultCodeSpace()); }
     break;
 
-  case 245: /* jumpdest: JUMPSYM  */
+  case 249: /* jumpdest: JUMPSYM  */
                                 { VarnodeTpl *sym = (yyvsp[0].specsym)->getVarnode(); (yyval.varnode) = new VarnodeTpl(ConstTpl(ConstTpl::j_curspace),sym->getOffset(),ConstTpl(ConstTpl::j_curspace_size)); delete sym; }
     break;
 
-  case 246: /* jumpdest: INTEGER  */
+  case 250: /* jumpdest: INTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(ConstTpl::j_curspace),ConstTpl(ConstTpl::real,*(yyvsp[0].i)),ConstTpl(ConstTpl::j_curspace_size)); delete (yyvsp[0].i); }
     break;
 
-  case 247: /* jumpdest: BADINTEGER  */
+  case 251: /* jumpdest: BADINTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(ConstTpl::j_curspace),ConstTpl(ConstTpl::real,0),ConstTpl(ConstTpl::j_curspace_size)); slgh->reportError("Parsed integer is too big (overflow)"); }
     break;
 
-  case 248: /* jumpdest: OPERANDSYM  */
+  case 252: /* jumpdest: OPERANDSYM  */
                                 { (yyval.varnode) = (yyvsp[0].operandsym)->getVarnode(); (yyvsp[0].operandsym)->setCodeAddress(); }
     break;
 
-  case 249: /* jumpdest: INTEGER '[' SPACESYM ']'  */
+  case 253: /* jumpdest: INTEGER '[' SPACESYM ']'  */
                                 { AddrSpace *spc = (yyvsp[-1].spacesym)->getSpace(); (yyval.varnode) = new VarnodeTpl(ConstTpl(spc),ConstTpl(ConstTpl::real,*(yyvsp[-3].i)),ConstTpl(ConstTpl::real,spc->getAddrSize())); delete (yyvsp[-3].i); }
     break;
 
-  case 250: /* jumpdest: label  */
+  case 254: /* jumpdest: label  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::j_relative,(yyvsp[0].labelsym)->getIndex()),ConstTpl(ConstTpl::real,sizeof(uintm))); (yyvsp[0].labelsym)->incrementRefCount(); }
     break;
 
-  case 251: /* jumpdest: STRING  */
+  case 255: /* jumpdest: STRING  */
                                 { string errmsg = "Unknown jump destination: "+*(yyvsp[0].str); delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 252: /* varnode: specificsymbol  */
+  case 256: /* varnode: specificsymbol  */
                                 { (yyval.varnode) = (yyvsp[0].specsym)->getVarnode(); }
     break;
 
-  case 253: /* varnode: integervarnode  */
+  case 257: /* varnode: integervarnode  */
                                 { (yyval.varnode) = (yyvsp[0].varnode); }
     break;
 
-  case 254: /* varnode: STRING  */
+  case 258: /* varnode: STRING  */
                                 { string errmsg = "Unknown varnode parameter: "+*(yyvsp[0].str); delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 255: /* varnode: SUBTABLESYM  */
+  case 259: /* varnode: SUBTABLESYM  */
                                 { string errmsg = "Subtable not attached to operand: "+(yyvsp[0].subtablesym)->getName(); slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 256: /* integervarnode: INTEGER  */
+  case 260: /* integervarnode: INTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::real,*(yyvsp[0].i)),ConstTpl(ConstTpl::real,0)); delete (yyvsp[0].i); }
     break;
 
-  case 257: /* integervarnode: BADINTEGER  */
+  case 261: /* integervarnode: BADINTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::real,0),ConstTpl(ConstTpl::real,0)); slgh->reportError("Parsed integer is too big (overflow)"); }
     break;
 
-  case 258: /* integervarnode: INTEGER ':' INTEGER  */
+  case 262: /* integervarnode: INTEGER ':' INTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::real,*(yyvsp[-2].i)),ConstTpl(ConstTpl::real,*(yyvsp[0].i))); delete (yyvsp[-2].i); delete (yyvsp[0].i); }
     break;
 
-  case 259: /* integervarnode: '&' varnode  */
+  case 263: /* integervarnode: '&' varnode  */
                                 { (yyval.varnode) = slgh->pcode.addressOf((yyvsp[0].varnode),0); }
     break;
 
-  case 260: /* integervarnode: '&' ':' INTEGER varnode  */
+  case 264: /* integervarnode: '&' ':' INTEGER varnode  */
                                 { (yyval.varnode) = slgh->pcode.addressOf((yyvsp[0].varnode),*(yyvsp[-1].i)); delete (yyvsp[-1].i); }
     break;
 
-  case 261: /* lhsvarnode: specificsymbol  */
+  case 265: /* lhsvarnode: specificsymbol  */
                                 { (yyval.varnode) = (yyvsp[0].specsym)->getVarnode(); }
     break;
 
-  case 262: /* lhsvarnode: STRING  */
+  case 266: /* lhsvarnode: STRING  */
                                 { string errmsg = "Unknown assignment varnode: "+*(yyvsp[0].str); delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 263: /* lhsvarnode: SUBTABLESYM  */
+  case 267: /* lhsvarnode: SUBTABLESYM  */
                                 { string errmsg = "Subtable not attached to operand: "+(yyvsp[0].subtablesym)->getName(); slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 264: /* label: '<' LABELSYM '>'  */
+  case 268: /* label: '<' LABELSYM '>'  */
                                 { (yyval.labelsym) = (yyvsp[-1].labelsym); }
     break;
 
-  case 265: /* label: '<' STRING '>'  */
+  case 269: /* label: '<' STRING '>'  */
                                 { (yyval.labelsym) = slgh->pcode.defineLabel( (yyvsp[-1].str) ); }
     break;
 
-  case 266: /* exportvarnode: specificsymbol  */
+  case 270: /* exportvarnode: specificsymbol  */
                                 { (yyval.varnode) = (yyvsp[0].specsym)->getVarnode(); }
     break;
 
-  case 267: /* exportvarnode: '&' varnode  */
+  case 271: /* exportvarnode: '&' varnode  */
                                 { (yyval.varnode) = slgh->pcode.addressOf((yyvsp[0].varnode),0); }
     break;
 
-  case 268: /* exportvarnode: '&' ':' INTEGER varnode  */
+  case 272: /* exportvarnode: '&' ':' INTEGER varnode  */
                                 { (yyval.varnode) = slgh->pcode.addressOf((yyvsp[0].varnode),*(yyvsp[-1].i)); delete (yyvsp[-1].i); }
     break;
 
-  case 269: /* exportvarnode: INTEGER ':' INTEGER  */
+  case 273: /* exportvarnode: INTEGER ':' INTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::real,*(yyvsp[-2].i)),ConstTpl(ConstTpl::real,*(yyvsp[0].i))); delete (yyvsp[-2].i); delete (yyvsp[0].i); }
     break;
 
-  case 270: /* exportvarnode: STRING  */
+  case 274: /* exportvarnode: STRING  */
                                 { string errmsg="Unknown export varnode: "+*(yyvsp[0].str); delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 271: /* exportvarnode: SUBTABLESYM  */
+  case 275: /* exportvarnode: SUBTABLESYM  */
                                 { string errmsg = "Subtable not attached to operand: "+(yyvsp[0].subtablesym)->getName(); slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 272: /* familysymbol: VALUESYM  */
+  case 276: /* familysymbol: VALUESYM  */
                                 { (yyval.famsym) = (yyvsp[0].valuesym); }
     break;
 
-  case 273: /* familysymbol: VALUEMAPSYM  */
+  case 277: /* familysymbol: VALUEMAPSYM  */
                                 { (yyval.famsym) = (yyvsp[0].valuemapsym); }
     break;
 
-  case 274: /* familysymbol: CONTEXTSYM  */
+  case 278: /* familysymbol: CONTEXTSYM  */
                                 { (yyval.famsym) = (yyvsp[0].contextsym); }
     break;
 
-  case 275: /* familysymbol: NAMESYM  */
+  case 279: /* familysymbol: NAMESYM  */
                                 { (yyval.famsym) = (yyvsp[0].namesym); }
     break;
 
-  case 276: /* familysymbol: VARLISTSYM  */
+  case 280: /* familysymbol: VARLISTSYM  */
                                 { (yyval.famsym) = (yyvsp[0].varlistsym); }
     break;
 
-  case 277: /* specificsymbol: VARSYM  */
+  case 281: /* specificsymbol: VARSYM  */
                                 { (yyval.specsym) = (yyvsp[0].varsym); }
     break;
 
-  case 278: /* specificsymbol: SPECSYM  */
+  case 282: /* specificsymbol: SPECSYM  */
                                 { (yyval.specsym) = (yyvsp[0].specsym); }
     break;
 
-  case 279: /* specificsymbol: OPERANDSYM  */
+  case 283: /* specificsymbol: OPERANDSYM  */
                                 { (yyval.specsym) = (yyvsp[0].operandsym); }
     break;
 
-  case 280: /* specificsymbol: JUMPSYM  */
+  case 284: /* specificsymbol: JUMPSYM  */
                                 { (yyval.specsym) = (yyvsp[0].specsym); }
     break;
 
-  case 281: /* charstring: CHAR  */
+  case 285: /* charstring: CHAR  */
                                 { (yyval.str) = new string; (*(yyval.str)) += (yyvsp[0].ch); }
     break;
 
-  case 282: /* charstring: charstring CHAR  */
+  case 286: /* charstring: charstring CHAR  */
                                 { (yyval.str) = (yyvsp[-1].str); (*(yyval.str)) += (yyvsp[0].ch); }
     break;
 
-  case 283: /* intblist: '[' intbpart ']'  */
+  case 287: /* intblist: '[' intbpart ']'  */
                                 { (yyval.biglist) = (yyvsp[-1].biglist); }
     break;
 
-  case 284: /* intblist: INTEGER  */
+  case 288: /* intblist: INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 285: /* intblist: '-' INTEGER  */
+  case 289: /* intblist: '-' INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(-intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 286: /* intbpart: INTEGER  */
+  case 290: /* intbpart: INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 287: /* intbpart: '-' INTEGER  */
+  case 291: /* intbpart: '-' INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(-intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 288: /* intbpart: STRING  */
+  case 292: /* intbpart: STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = "Expecting integer but saw: "+*(yyvsp[0].str); delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
                                   (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back((intb)0xBADBEEF); delete (yyvsp[0].str); }
     break;
 
-  case 289: /* intbpart: intbpart INTEGER  */
+  case 293: /* intbpart: intbpart INTEGER  */
                                 { (yyval.biglist) = (yyvsp[-1].biglist); (yyval.biglist)->push_back(intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 290: /* intbpart: intbpart '-' INTEGER  */
+  case 294: /* intbpart: intbpart '-' INTEGER  */
                                 { (yyval.biglist) = (yyvsp[-2].biglist); (yyval.biglist)->push_back(-intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 291: /* intbpart: intbpart STRING  */
+  case 295: /* intbpart: intbpart STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = "Expecting integer but saw: "+*(yyvsp[0].str); delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
                                   (yyval.biglist) = (yyvsp[-1].biglist); (yyval.biglist)->push_back((intb)0xBADBEEF); delete (yyvsp[0].str); }
     break;
 
-  case 292: /* stringlist: '[' stringpart ']'  */
+  case 296: /* stringlist: '[' stringpart ']'  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); }
     break;
 
-  case 293: /* stringlist: STRING  */
+  case 297: /* stringlist: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 294: /* stringpart: STRING  */
+  case 298: /* stringpart: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back( *(yyvsp[0].str) ); delete (yyvsp[0].str); }
     break;
 
-  case 295: /* stringpart: stringpart STRING  */
+  case 299: /* stringpart: stringpart STRING  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 296: /* stringpart: stringpart anysymbol  */
+  case 300: /* stringpart: stringpart anysymbol  */
                                 { string errmsg = (yyvsp[0].anysym)->getName()+": redefined"; slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 297: /* anystringlist: '[' anystringpart ']'  */
+  case 301: /* anystringlist: '[' anystringpart ']'  */
                                      { (yyval.strlist) = (yyvsp[-1].strlist); }
     break;
 
-  case 298: /* anystringpart: STRING  */
+  case 302: /* anystringpart: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back( *(yyvsp[0].str) ); delete (yyvsp[0].str); }
     break;
 
-  case 299: /* anystringpart: anysymbol  */
+  case 303: /* anystringpart: anysymbol  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back( (yyvsp[0].anysym)->getName() ); }
     break;
 
-  case 300: /* anystringpart: anystringpart STRING  */
+  case 304: /* anystringpart: anystringpart STRING  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 301: /* anystringpart: anystringpart anysymbol  */
+  case 305: /* anystringpart: anystringpart anysymbol  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); (yyval.strlist)->push_back((yyvsp[0].anysym)->getName()); }
     break;
 
-  case 302: /* valuelist: '[' valuepart ']'  */
+  case 306: /* valuelist: '[' valuepart ']'  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); }
     break;
 
-  case 303: /* valuelist: VALUESYM  */
+  case 307: /* valuelist: VALUESYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].valuesym)); }
     break;
 
-  case 304: /* valuelist: CONTEXTSYM  */
+  case 308: /* valuelist: CONTEXTSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].contextsym)); }
     break;
 
-  case 305: /* valuepart: VALUESYM  */
+  case 309: /* valuepart: VALUESYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back( (yyvsp[0].valuesym) ); }
     break;
 
-  case 306: /* valuepart: CONTEXTSYM  */
+  case 310: /* valuepart: CONTEXTSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].contextsym)); }
     break;
 
-  case 307: /* valuepart: valuepart VALUESYM  */
+  case 311: /* valuepart: valuepart VALUESYM  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((yyvsp[0].valuesym)); }
     break;
 
-  case 308: /* valuepart: valuepart CONTEXTSYM  */
+  case 312: /* valuepart: valuepart CONTEXTSYM  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((yyvsp[0].contextsym)); }
     break;
 
-  case 309: /* valuepart: valuepart STRING  */
+  case 313: /* valuepart: valuepart STRING  */
                                 { string errmsg = *(yyvsp[0].str)+": is not a value pattern"; delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
     break;
 
-  case 310: /* varlist: '[' varpart ']'  */
+  case 314: /* varlist: '[' varpart ']'  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); }
     break;
 
-  case 311: /* varlist: VARSYM  */
+  case 315: /* varlist: VARSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].varsym)); }
     break;
 
-  case 312: /* varpart: VARSYM  */
+  case 316: /* varpart: VARSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].varsym)); }
     break;
 
-  case 313: /* varpart: STRING  */
+  case 317: /* varpart: STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = *(yyvsp[0].str)+": is not a varnode symbol"; delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
 				  (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((SleighSymbol *)0); delete (yyvsp[0].str); }
     break;
 
-  case 314: /* varpart: varpart VARSYM  */
+  case 318: /* varpart: varpart VARSYM  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((yyvsp[0].varsym)); }
     break;
 
-  case 315: /* varpart: varpart STRING  */
+  case 319: /* varpart: varpart STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = *(yyvsp[0].str)+": is not a varnode symbol"; delete (yyvsp[0].str); slgh->reportError(errmsg); YYERROR; }
                                   (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((SleighSymbol *)0); delete (yyvsp[0].str); }
     break;
 
-  case 316: /* paramlist: %empty  */
+  case 320: /* paramlist: %empty  */
                                 { (yyval.param) = new vector<ExprTree *>; }
     break;
 
-  case 317: /* paramlist: expr  */
+  case 321: /* paramlist: expr  */
                                 { (yyval.param) = new vector<ExprTree *>; (yyval.param)->push_back((yyvsp[0].tree)); }
     break;
 
-  case 318: /* paramlist: paramlist ',' expr  */
+  case 322: /* paramlist: paramlist ',' expr  */
                                 { (yyval.param) = (yyvsp[-2].param); (yyval.param)->push_back((yyvsp[0].tree)); }
     break;
 
-  case 319: /* oplist: %empty  */
+  case 323: /* oplist: %empty  */
                                 { (yyval.strlist) = new vector<string>; }
     break;
 
-  case 320: /* oplist: STRING  */
+  case 324: /* oplist: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 321: /* oplist: oplist ',' STRING  */
+  case 325: /* oplist: oplist ',' STRING  */
                                 { (yyval.strlist) = (yyvsp[-2].strlist); (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 322: /* anysymbol: SPACESYM  */
+  case 326: /* anysymbol: SPACESYM  */
                                 { (yyval.anysym) = (yyvsp[0].spacesym); }
     break;
 
-  case 323: /* anysymbol: SECTIONSYM  */
+  case 327: /* anysymbol: SECTIONSYM  */
                                 { (yyval.anysym) = (yyvsp[0].sectionsym); }
     break;
 
-  case 324: /* anysymbol: TOKENSYM  */
+  case 328: /* anysymbol: TOKENSYM  */
                                 { (yyval.anysym) = (yyvsp[0].tokensym); }
     break;
 
-  case 325: /* anysymbol: USEROPSYM  */
+  case 329: /* anysymbol: USEROPSYM  */
                                 { (yyval.anysym) = (yyvsp[0].useropsym); }
     break;
 
-  case 326: /* anysymbol: MACROSYM  */
+  case 330: /* anysymbol: MACROSYM  */
                                 { (yyval.anysym) = (yyvsp[0].macrosym); }
     break;
 
-  case 327: /* anysymbol: SUBTABLESYM  */
+  case 331: /* anysymbol: SUBTABLESYM  */
                                 { (yyval.anysym) = (yyvsp[0].subtablesym); }
     break;
 
-  case 328: /* anysymbol: VALUESYM  */
+  case 332: /* anysymbol: VALUESYM  */
                                 { (yyval.anysym) = (yyvsp[0].valuesym); }
     break;
 
-  case 329: /* anysymbol: VALUEMAPSYM  */
+  case 333: /* anysymbol: VALUEMAPSYM  */
                                 { (yyval.anysym) = (yyvsp[0].valuemapsym); }
     break;
 
-  case 330: /* anysymbol: CONTEXTSYM  */
+  case 334: /* anysymbol: CONTEXTSYM  */
                                 { (yyval.anysym) = (yyvsp[0].contextsym); }
     break;
 
-  case 331: /* anysymbol: NAMESYM  */
+  case 335: /* anysymbol: NAMESYM  */
                                 { (yyval.anysym) = (yyvsp[0].namesym); }
     break;
 
-  case 332: /* anysymbol: VARSYM  */
+  case 336: /* anysymbol: VARSYM  */
                                 { (yyval.anysym) = (yyvsp[0].varsym); }
     break;
 
-  case 333: /* anysymbol: VARLISTSYM  */
+  case 337: /* anysymbol: VARLISTSYM  */
                                 { (yyval.anysym) = (yyvsp[0].varlistsym); }
     break;
 
-  case 334: /* anysymbol: OPERANDSYM  */
+  case 338: /* anysymbol: OPERANDSYM  */
                                 { (yyval.anysym) = (yyvsp[0].operandsym); }
     break;
 
-  case 335: /* anysymbol: JUMPSYM  */
+  case 339: /* anysymbol: JUMPSYM  */
                                 { (yyval.anysym) = (yyvsp[0].specsym); }
     break;
 
-  case 336: /* anysymbol: BITSYM  */
+  case 340: /* anysymbol: BITSYM  */
                                 { (yyval.anysym) = (yyvsp[0].bitsym); }
     break;
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh
index 8ad009fa03..a2601b0218 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh
@@ -132,47 +132,49 @@ extern int sleighdebug;
     NOFLOW_KEY = 325,              /* NOFLOW_KEY  */
     HEX_KEY = 326,                 /* HEX_KEY  */
     DEC_KEY = 327,                 /* DEC_KEY  */
-    BIG_KEY = 328,                 /* BIG_KEY  */
-    LITTLE_KEY = 329,              /* LITTLE_KEY  */
-    SIZE_KEY = 330,                /* SIZE_KEY  */
-    WORDSIZE_KEY = 331,            /* WORDSIZE_KEY  */
-    OFFSET_KEY = 332,              /* OFFSET_KEY  */
-    NAMES_KEY = 333,               /* NAMES_KEY  */
-    VALUES_KEY = 334,              /* VALUES_KEY  */
-    VARIABLES_KEY = 335,           /* VARIABLES_KEY  */
-    PCODEOP_KEY = 336,             /* PCODEOP_KEY  */
-    IS_KEY = 337,                  /* IS_KEY  */
-    LOCAL_KEY = 338,               /* LOCAL_KEY  */
-    DELAYSLOT_KEY = 339,           /* DELAYSLOT_KEY  */
-    CROSSBUILD_KEY = 340,          /* CROSSBUILD_KEY  */
-    EXPORT_KEY = 341,              /* EXPORT_KEY  */
-    BUILD_KEY = 342,               /* BUILD_KEY  */
-    CONTEXT_KEY = 343,             /* CONTEXT_KEY  */
-    ELLIPSIS_KEY = 344,            /* ELLIPSIS_KEY  */
-    GLOBALSET_KEY = 345,           /* GLOBALSET_KEY  */
-    BITRANGE_KEY = 346,            /* BITRANGE_KEY  */
-    CHAR = 347,                    /* CHAR  */
-    INTEGER = 348,                 /* INTEGER  */
-    INTB = 349,                    /* INTB  */
-    STRING = 350,                  /* STRING  */
-    SYMBOLSTRING = 351,            /* SYMBOLSTRING  */
-    SPACESYM = 352,                /* SPACESYM  */
-    SECTIONSYM = 353,              /* SECTIONSYM  */
-    TOKENSYM = 354,                /* TOKENSYM  */
-    USEROPSYM = 355,               /* USEROPSYM  */
-    VALUESYM = 356,                /* VALUESYM  */
-    VALUEMAPSYM = 357,             /* VALUEMAPSYM  */
-    CONTEXTSYM = 358,              /* CONTEXTSYM  */
-    NAMESYM = 359,                 /* NAMESYM  */
-    VARSYM = 360,                  /* VARSYM  */
-    BITSYM = 361,                  /* BITSYM  */
-    SPECSYM = 362,                 /* SPECSYM  */
-    VARLISTSYM = 363,              /* VARLISTSYM  */
-    OPERANDSYM = 364,              /* OPERANDSYM  */
-    JUMPSYM = 365,                 /* JUMPSYM  */
-    MACROSYM = 366,                /* MACROSYM  */
-    LABELSYM = 367,                /* LABELSYM  */
-    SUBTABLESYM = 368              /* SUBTABLESYM  */
+    OCT_KEY = 328,                 /* OCT_KEY  */
+    BIN_KEY = 329,                 /* BIN_KEY  */
+    BIG_KEY = 330,                 /* BIG_KEY  */
+    LITTLE_KEY = 331,              /* LITTLE_KEY  */
+    SIZE_KEY = 332,                /* SIZE_KEY  */
+    WORDSIZE_KEY = 333,            /* WORDSIZE_KEY  */
+    OFFSET_KEY = 334,              /* OFFSET_KEY  */
+    NAMES_KEY = 335,               /* NAMES_KEY  */
+    VALUES_KEY = 336,              /* VALUES_KEY  */
+    VARIABLES_KEY = 337,           /* VARIABLES_KEY  */
+    PCODEOP_KEY = 338,             /* PCODEOP_KEY  */
+    IS_KEY = 339,                  /* IS_KEY  */
+    LOCAL_KEY = 340,               /* LOCAL_KEY  */
+    DELAYSLOT_KEY = 341,           /* DELAYSLOT_KEY  */
+    CROSSBUILD_KEY = 342,          /* CROSSBUILD_KEY  */
+    EXPORT_KEY = 343,              /* EXPORT_KEY  */
+    BUILD_KEY = 344,               /* BUILD_KEY  */
+    CONTEXT_KEY = 345,             /* CONTEXT_KEY  */
+    ELLIPSIS_KEY = 346,            /* ELLIPSIS_KEY  */
+    GLOBALSET_KEY = 347,           /* GLOBALSET_KEY  */
+    BITRANGE_KEY = 348,            /* BITRANGE_KEY  */
+    CHAR = 349,                    /* CHAR  */
+    INTEGER = 350,                 /* INTEGER  */
+    INTB = 351,                    /* INTB  */
+    STRING = 352,                  /* STRING  */
+    SYMBOLSTRING = 353,            /* SYMBOLSTRING  */
+    SPACESYM = 354,                /* SPACESYM  */
+    SECTIONSYM = 355,              /* SECTIONSYM  */
+    TOKENSYM = 356,                /* TOKENSYM  */
+    USEROPSYM = 357,               /* USEROPSYM  */
+    VALUESYM = 358,                /* VALUESYM  */
+    VALUEMAPSYM = 359,             /* VALUEMAPSYM  */
+    CONTEXTSYM = 360,              /* CONTEXTSYM  */
+    NAMESYM = 361,                 /* NAMESYM  */
+    VARSYM = 362,                  /* VARSYM  */
+    BITSYM = 363,                  /* BITSYM  */
+    SPECSYM = 364,                 /* SPECSYM  */
+    VARLISTSYM = 365,              /* VARLISTSYM  */
+    OPERANDSYM = 366,              /* OPERANDSYM  */
+    JUMPSYM = 367,                 /* JUMPSYM  */
+    MACROSYM = 368,                /* MACROSYM  */
+    LABELSYM = 369,                /* LABELSYM  */
+    SUBTABLESYM = 370              /* SUBTABLESYM  */
   };
   typedef enum sleightokentype sleightoken_kind_t;
 #endif
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y
index fd7f293e7b..0364d91720 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y
@@ -98,7 +98,7 @@ extern int sleigherror(const char *str );
 %token BADINTEGER GOTO_KEY CALL_KEY RETURN_KEY IF_KEY
 %token DEFINE_KEY ATTACH_KEY MACRO_KEY SPACE_KEY TYPE_KEY RAM_KEY DEFAULT_KEY
 %token REGISTER_KEY ENDIAN_KEY WITH_KEY ALIGN_KEY OP_UNIMPL
-%token TOKEN_KEY SIGNED_KEY NOFLOW_KEY HEX_KEY DEC_KEY BIG_KEY LITTLE_KEY
+%token TOKEN_KEY SIGNED_KEY NOFLOW_KEY HEX_KEY DEC_KEY OCT_KEY BIN_KEY BIG_KEY LITTLE_KEY
 %token SIZE_KEY WORDSIZE_KEY OFFSET_KEY NAMES_KEY VALUES_KEY VARIABLES_KEY PCODEOP_KEY IS_KEY LOCAL_KEY
 %token DELAYSLOT_KEY CROSSBUILD_KEY EXPORT_KEY BUILD_KEY CONTEXT_KEY ELLIPSIS_KEY GLOBALSET_KEY BITRANGE_KEY
 
@@ -195,15 +195,19 @@ contextprop: DEFINE_KEY CONTEXT_KEY VARSYM { $$ = $3; }
 fielddef: STRING '=' '(' INTEGER ',' INTEGER ')' { $$ = new FieldQuality($1,$4,$6); }
   | anysymbol '=' '(' INTEGER ',' INTEGER ')' { delete $4; delete $6; string errmsg = $1->getName()+": redefined as field"; slgh->reportError(errmsg); YYERROR; }
   | fielddef SIGNED_KEY			{ $$ = $1; $$->signext = true; }
-  | fielddef HEX_KEY			{ $$ = $1; $$->hex = true; }
-  | fielddef DEC_KEY			{ $$ = $1; $$->hex = false; }
+  | fielddef HEX_KEY			{ $$ = $1; $$->base = 16; }
+  | fielddef DEC_KEY			{ $$ = $1; $$->base = 10; }
+  | fielddef OCT_KEY			{ $$ = $1; $$->base = 8; }
+  | fielddef BIN_KEY			{ $$ = $1; $$->base = 2; }
   ;
 contextfielddef: STRING '=' '(' INTEGER ',' INTEGER ')' { $$ = new FieldQuality($1,$4,$6); }
   | anysymbol '=' '(' INTEGER ',' INTEGER ')' { delete $4; delete $6; string errmsg = $1->getName()+": redefined as field"; slgh->reportError(errmsg); YYERROR; }
   | contextfielddef SIGNED_KEY			{ $$ = $1; $$->signext = true; }
   | contextfielddef NOFLOW_KEY			{ $$ = $1; $$->flow = false; }
-  | contextfielddef HEX_KEY			{ $$ = $1; $$->hex = true; }
-  | contextfielddef DEC_KEY			{ $$ = $1; $$->hex = false; }
+  | contextfielddef HEX_KEY			{ $$ = $1; $$->base = 16; }
+  | contextfielddef DEC_KEY			{ $$ = $1; $$->base = 10; }
+  | contextfielddef OCT_KEY			{ $$ = $1; $$->base = 8; }
+  | contextfielddef BIN_KEY			{ $$ = $1; $$->base = 2; }
   ;
 spacedef: spaceprop ';'			{ slgh->newSpace($1); }
   ;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.cc
index 9410978595..b571181a65 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.cc
@@ -558,7 +558,7 @@ static intb getContextBytes(ParserWalker &walker,int4 bytestart,int4 byteend)
   return res;
 }
 
-TokenField::TokenField(Token *tk,bool s,int4 bstart,int4 bend)
+TokenField::TokenField(Token *tk,bool s,int4 bstart,int4 bend,uint4 tbase)
 
 {
   tok = tk;
@@ -575,6 +575,7 @@ TokenField::TokenField(Token *tk,bool s,int4 bstart,int4 bend)
     byteend = bitend/8;
   }
   shift = bitstart % 8;
+  base = tbase;
 }
 
 intb TokenField::getValue(ParserWalker &walker) const
@@ -600,6 +601,7 @@ TokenPattern TokenField::genPattern(intb val) const
 void TokenField::encode(Encoder &encoder) const
 
 {
+<<<<<<< HEAD
   encoder.openElement(sla::ELEM_TOKENFIELD);
   encoder.writeBool(sla::ATTRIB_BIGENDIAN, bigendian);
   encoder.writeBool(sla::ATTRIB_SIGNBIT, signbit);
@@ -609,6 +611,25 @@ void TokenField::encode(Encoder &encoder) const
   encoder.writeSignedInteger(sla::ATTRIB_ENDBYTE, byteend);
   encoder.writeSignedInteger(sla::ATTRIB_SHIFT, shift);
   encoder.closeElement(sla::ELEM_TOKENFIELD);
+=======
+  s << "<tokenfield";
+  s << " bigendian=\"";
+  if (bigendian)
+    s << "true\"";
+  else
+    s << "false\"";
+  s << " signbit=\"";
+  if (signbit)
+    s << "true\"";
+  else
+    s << "false\"";
+  s << " bitstart=\"" << dec << bitstart << "\"";
+  s << " bitend=\"" << bitend << "\"";
+  s << " bytestart=\"" << bytestart << "\"";
+  s << " byteend=\"" << byteend << "\"";
+  s << " shift=\"" << shift << "\"";
+  s << " base=\"" << base << "\"/>\n";
+>>>>>>> 1409: Implement decimal format modifier in Sleigh files.
 }
 
 void TokenField::decode(Decoder &decoder,Translate *trans)
@@ -623,10 +644,11 @@ void TokenField::decode(Decoder &decoder,Translate *trans)
   bytestart = decoder.readSignedInteger(sla::ATTRIB_STARTBYTE);
   byteend = decoder.readSignedInteger(sla::ATTRIB_ENDBYTE);
   shift = decoder.readSignedInteger(sla::ATTRIB_SHIFT);
+  base = decoder.readSignedInteger(sla::ATTRIB_BASE);
   decoder.closeElement(el);
 }
 
-ContextField::ContextField(bool s,int4 sbit,int4 ebit)
+ContextField::ContextField(bool s,int4 sbit,int4 ebit,uint4 fbase)
 
 {
   signbit = s;
@@ -635,6 +657,7 @@ ContextField::ContextField(bool s,int4 sbit,int4 ebit)
   startbyte = startbit/8;
   endbyte = endbit/8;
   shift = 7 - (endbit%8);
+  base = fbase;
 }
 
 intb ContextField::getValue(ParserWalker &walker) const
@@ -665,6 +688,7 @@ void ContextField::encode(Encoder &encoder) const
   encoder.writeSignedInteger(sla::ATTRIB_STARTBYTE, startbyte);
   encoder.writeSignedInteger(sla::ATTRIB_ENDBYTE, endbyte);
   encoder.writeSignedInteger(sla::ATTRIB_SHIFT, shift);
+  encoder.writeSignedInteger(sla::ATTRIB_BASE, base);
   encoder.closeElement(sla::ELEM_CONTEXTFIELD);
 }
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.hh
index 118fe3cc94..3f596c41eb 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.hh
@@ -95,9 +95,10 @@ class TokenField : public PatternValue {
   int4 bitstart,bitend;		// Bits within the token, 0 bit is LEAST significant
   int4 bytestart,byteend;	// Bytes to read to get value
   int4 shift;			// Amount to shift to align value  (bitstart % 8)
+  uint4 base;			// The display base
 public:
   TokenField(void) {}		// For use with decode
-  TokenField(Token *tk,bool s,int4 bstart,int4 bend);
+  TokenField(Token *tk,bool s,int4 bstart,int4 bend,uint4 tbase);
   virtual intb getValue(ParserWalker &walker) const;
   virtual TokenPattern genMinPattern(const vector<TokenPattern> &ops) const { return TokenPattern(tok); }
   virtual TokenPattern genPattern(intb val) const;
@@ -112,12 +113,14 @@ class ContextField : public PatternValue {
   int4 startbyte,endbyte;
   int4 shift;
   bool signbit;
+  uint4 base;
 public:
   ContextField(void) {}		// For use with decode
-  ContextField(bool s,int4 sbit,int4 ebit);
+  ContextField(bool s,int4 sbit,int4 ebit,uint4 fbase);
   int4 getStartBit(void) const { return startbit; }
   int4 getEndBit(void) const { return endbit; }
   bool getSignBit(void) const { return signbit; }
+  uint4 getBase(void) const { return base; }
   virtual intb getValue(ParserWalker &walker) const;
   virtual TokenPattern genMinPattern(const vector<TokenPattern> &ops) const { return TokenPattern(); }
   virtual TokenPattern genPattern(intb val) const;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc
index 09528fa073..a9ecc612df 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc
@@ -626,8 +626,8 @@ static void yynoreturn yy_fatal_error ( const char* msg  );
 		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
 	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
 	(yy_c_buf_p) = yy_cp;
-#define YY_NUM_RULES 165
-#define YY_END_OF_BUFFER 166
+#define YY_NUM_RULES 167
+#define YY_END_OF_BUFFER 168
 /* This struct is not used in this scanner,
    but its presence is necessary. */
 struct yy_trans_info
@@ -635,67 +635,67 @@ struct yy_trans_info
 	flex_int32_t yy_verify;
 	flex_int32_t yy_nxt;
 	};
-static const flex_int16_t yy_accept[533] =
+static const flex_int16_t yy_accept[536] =
     {   0,
         0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,  166,   14,    7,    8,    6,   14,
-        3,   13,    4,   13,   13,   13,   13,    5,    1,   58,
-       56,   57,   58,   50,   58,   25,   51,   52,   52,   26,
-       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
-       51,   51,   51,   51,   51,   23,   22,   20,   21,   22,
-       17,   19,   18,   15,   68,   66,   67,   61,   68,   61,
-       64,   62,   64,   59,   96,   94,   95,   96,   89,   96,
-       85,   88,   90,   91,   91,   88,   88,   90,   83,   84,
-       87,   90,   90,   71,   86,   69,  162,  160,  161,  154,
-
-      155,  162,  154,  154,  156,  157,  157,  154,  154,  154,
-      154,  156,  156,  156,  156,  156,  156,  156,  156,  156,
-      156,  156,  156,  156,  156,  156,  154,   99,   97,  165,
-      165,  164,  163,    7,    6,    0,   13,   13,   13,   13,
-       13,    1,    1,   56,    0,   55,   50,    0,   51,    0,
-        0,   52,   51,   51,   51,   51,   51,   51,   51,   51,
-       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
-       51,   23,   23,   20,    0,   19,   15,   15,   66,    0,
-       65,    0,   64,   63,   59,   59,   94,   76,   89,    0,
-        0,    0,    0,   90,   90,    0,    0,   91,   75,   77,
-
-       78,   74,   90,   90,   69,   69,  160,  106,  155,    0,
-      101,  156,    0,    0,  157,  104,  107,  105,  108,  103,
-      102,  156,  156,  156,  156,  156,  156,  156,  156,  156,
-        0,  118,  116,  117,  119,  122,    0,  123,  156,  156,
-      145,  156,  156,  156,  156,  156,  156,  156,  156,  110,
-      109,  112,  113,  156,  156,  156,  156,  156,  156,  100,
-       97,   97,    0,  164,  163,  163,    0,   13,   13,   13,
-       13,    0,   54,   53,   51,   41,   51,   51,   38,   51,
-       51,   37,   51,   51,   51,   51,   51,   51,   51,   51,
-       51,   51,   51,   51,   51,   51,   51,    0,    0,    0,
-
-        0,   80,    0,   82,   93,   92,   90,   90,    0,  159,
-      158,  133,  156,  156,  156,  156,  156,  156,  156,  156,
-      156,  121,  124,  120,  125,  156,  156,  156,  156,  156,
-      132,  156,  156,  156,  156,  114,  115,  111,  156,  156,
-      156,  156,  156,  156,    2,    0,   13,   13,   13,   12,
-       24,    0,   51,   51,   51,   51,   51,   51,   51,   51,
-       51,   51,   51,   51,   51,   43,   51,   51,   28,   51,
-       51,   51,   16,    0,   60,    0,   70,    0,   79,   81,
-       90,   90,   98,    0,  156,  156,  147,  156,  135,  156,
-      156,  156,  156,  156,  156,  146,  156,  156,  156,  156,
-
-      156,  156,  156,  156,  156,  129,  134,  156,  126,   13,
-       13,    9,   51,   51,   51,   51,   51,   51,   46,   51,
-       51,   51,   51,   51,   51,   27,   32,   51,   51,   51,
-       90,   90,  156,  152,  127,  141,  156,  156,  156,  156,
-      136,  156,  153,  156,  156,  156,  156,  137,  156,  156,
-      140,   11,   10,   51,   51,   51,   51,   39,   42,   36,
-       45,   51,   51,   51,   35,   47,   51,   51,   90,   72,
-      128,  156,  156,  151,  156,  156,  156,  156,  156,  148,
-      156,  130,   51,   51,   33,   30,   49,   51,   51,   51,
-       51,   90,  156,  156,  156,  156,  144,  156,  156,  131,
-
-       51,   34,   51,   51,   51,   44,   90,  156,  156,  156,
-      156,  156,  143,   40,   29,   51,   48,   73,  156,  149,
-      156,  138,  142,   51,  150,  156,   51,  139,   51,   51,
-       31,    0
+        0,    0,    0,    0,  168,   14,    7,    8,    6,   14,
+        3,   13,    4,   13,   13,   13,   13,    5,    1,   60,
+       58,   59,   60,   52,   60,   25,   53,   54,   54,   26,
+       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
+       53,   53,   53,   53,   53,   23,   22,   20,   21,   22,
+       17,   19,   18,   15,   70,   68,   69,   63,   70,   63,
+       66,   64,   66,   61,   98,   96,   97,   98,   91,   98,
+       87,   90,   92,   93,   93,   90,   90,   92,   85,   86,
+       89,   92,   92,   73,   88,   71,  164,  162,  163,  156,
+
+      157,  164,  156,  156,  158,  159,  159,  156,  156,  156,
+      156,  158,  158,  158,  158,  158,  158,  158,  158,  158,
+      158,  158,  158,  158,  158,  158,  156,  101,   99,  167,
+      167,  166,  165,    7,    6,    0,   13,   13,   13,   13,
+       13,    1,    1,   58,    0,   57,   52,    0,   53,    0,
+        0,   54,   53,   53,   53,   53,   53,   53,   53,   53,
+       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
+       53,   53,   23,   23,   20,    0,   19,   15,   15,   68,
+        0,   67,    0,   66,   65,   61,   61,   96,   78,   91,
+        0,    0,    0,    0,   92,   92,    0,    0,   93,   77,
+
+       79,   80,   76,   92,   92,   71,   71,  162,  108,  157,
+        0,  103,  158,    0,    0,  159,  106,  109,  107,  110,
+      105,  104,  158,  158,  158,  158,  158,  158,  158,  158,
+      158,    0,  120,  118,  119,  121,  124,    0,  125,  158,
+      158,  147,  158,  158,  158,  158,  158,  158,  158,  158,
+      112,  111,  114,  115,  158,  158,  158,  158,  158,  158,
+      102,   99,   99,    0,  166,  165,  165,    0,   13,   13,
+       13,   13,    0,   56,   55,   53,   43,   40,   53,   53,
+       38,   53,   53,   37,   53,   53,   53,   39,   53,   53,
+       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
+
+        0,    0,    0,    0,   82,    0,   84,   95,   94,   92,
+       92,    0,  161,  160,  135,  158,  158,  158,  158,  158,
+      158,  158,  158,  158,  123,  126,  122,  127,  158,  158,
+      158,  158,  158,  134,  158,  158,  158,  158,  116,  117,
+      113,  158,  158,  158,  158,  158,  158,    2,    0,   13,
+       13,   13,   12,   24,    0,   53,   53,   53,   53,   53,
+       53,   53,   53,   53,   53,   53,   53,   53,   45,   53,
+       53,   28,   53,   53,   53,   16,    0,   62,    0,   72,
+        0,   81,   83,   92,   92,  100,    0,  158,  158,  149,
+      158,  137,  158,  158,  158,  158,  158,  158,  148,  158,
+
+      158,  158,  158,  158,  158,  158,  158,  158,  131,  136,
+      158,  128,   13,   13,    9,   53,   53,   53,   53,   53,
+       53,   48,   53,   53,   53,   53,   53,   53,   27,   32,
+       53,   53,   53,   92,   92,  158,  154,  129,  143,  158,
+      158,  158,  158,  138,  158,  155,  158,  158,  158,  158,
+      139,  158,  158,  142,   11,   10,   53,   53,   53,   53,
+       41,   44,   36,   47,   53,   53,   53,   35,   49,   53,
+       53,   92,   74,  130,  158,  158,  153,  158,  158,  158,
+      158,  158,  150,  158,  132,   53,   53,   33,   30,   51,
+       53,   53,   53,   53,   92,  158,  158,  158,  158,  146,
+
+      158,  158,  133,   53,   34,   53,   53,   53,   46,   92,
+      158,  158,  158,  158,  158,  145,   42,   29,   53,   50,
+       75,  158,  151,  158,  140,  144,   53,  152,  158,   53,
+      141,   53,   53,   31,    0
     } ;
 
 static const YY_CHAR yy_ec[256] =
@@ -741,139 +741,141 @@ static const YY_CHAR yy_meta[67] =
         5,    5,    3,    3,    3,    3
     } ;
 
-static const flex_int16_t yy_base[570] =
+static const flex_int16_t yy_base[573] =
     {   0,
-        0,  937,   66,  936,  132,  935,  198,  934,  264,  933,
-      330,  932,    0,  394,  961,  968,  396,  968,    0,  948,
-      968,    0,  968,  903,  917,  920,  911,  968,  952,  968,
-      397,  968,  948,    0,  941,  968,    0,  365,  384,  968,
-      904,  906,  899,  908,  898,  906,  901,  365,  903,  905,
-      371,  365,  358,  906,  891,  938,  968,  409,  968,  928,
-      968,    0,  968,  936,  968,  416,  968,  968,  932,  925,
-        0,  968,  881,  932,  968,  419,  968,  907,    0,  402,
-      968,  968,  915,  377,  406,  404,  405,    0,  968,  968,
-      968,  884,  881,  968,  968,  927,  968,  432,  968,  902,
-
-        0,  916,  968,  917,    0,  384,  420,  419,  899,  420,
-      890,  886,  398,  413,  882,  862,  454,  870,  410,  410,
-      429,  869,  423,  466,  865,  877,  853,  968,  913,  968,
-      912,  968,  911,  454,    0,    0,    0,  857,  870,  872,
-      854,  906,  968,  474,  902,  901,    0,    0,    0,  463,
-        0,  466,  861,  395,  855,  451,  864,  843,  846,  852,
-      858,  857,  847,  848,  853,  434,  858,  847,  841,  409,
-      838,  888,  968,  493,    0,    0,  887,  968,  496,  883,
-      882,    0,    0,    0,  884,  968,  497,  968,    0,    0,
-      836,  831,  833,  865,    0,  488,    0,  490,  968,  968,
-
-      968,  968,  831,  836,  877,  968,  512,  968,    0,    0,
-      968,    0,  497,    0,  500,  968,  968,  968,  968,  968,
-      968,  824,  824,  832,  476,  831,  824,  823,  825,  820,
-      844,  968,  968,  968,  968,  843,  842,  841,  816,  810,
-        0,  809,  825,  824,  812,  802,  808,  803,  801,  968,
-      968,  830,  498,  805,  818,  794,  799,  795,  791,  968,
-      847,  968,  846,  968,  845,  968,  834,  809,  800,  790,
-      799,  829,  507,    0,  798,    0,  786,  783,    0,  801,
-      792,    0,  780,  794,  786,  778,  792,  795,  785,  779,
-      787,  788,  785,  784,  767,  778,  782,  808,  807,  806,
-
-      778,  968,  763,    0,  511,    0,  778,  766,  801,  513,
-        0,    0,  759,  764,  763,  756,  761,  757,  752,  769,
-      754,  968,  968,  968,  968,  478,  753,  781,  765,  750,
-        0,  749,  760,  741,  747,  968,  968,  968,  742,  741,
-      738,  737,  742,  735,  968,  777,  750,  738,  736,    0,
-      968,  773,  735,  747,  742,  725,  744,  732,  724,  727,
-      736,  735,  720,  719,  732,    0,  731,  721,    0,  729,
-      732,  713,  968,  754,  968,  753,  968,  752,  968,  968,
-      727,  711,  968,  749,  710,  720,    0,  698,    0,  710,
-      702,  695,  701,  698,  699,    0,  710,  703,  693,  711,
-
-      697,  693,  706,  691,  690,    0,    0,  704,    0,  698,
-      700,    0,  691,  689,  678,  689,  686,  694,    0,  675,
-      677,  681,  679,  674,  689,    0,    0,  673,  689,  681,
-      677,  676,  664,    0,    0,    0,  684,  666,  664,  697,
-        0,  670,    0,  667,  670,  658,  664,    0,  662,  651,
-        0,    0,    0,  670,  667,  653,  652,    0,    0,    0,
-        0,  655,  669,  664,    0,    0,  656,  641,  647,    0,
-        0,  644,  652,    0,  657,  647,  641,  655,  645,    0,
-      635,    0,  643,  651,    0,    0,    0,  652,  636,  648,
-      647,  646,  641,  634,  636,  646,    0,  643,  625,    0,
-
-      624,    0,  638,  642,  622,    0,  620,  627,  618,  622,
-      616,  615,    0,    0,    0,  615,    0,    0,  629,    0,
-      577,    0,    0,  548,    0,  510,  511,    0,  467,  462,
-        0,  968,  534,  540,  546,  548,  554,  558,  564,  566,
-      572,  574,  580,  584,  586,  592,  598,  600,  606,  612,
-      614,  620,  626,  632,  634,  636,  485,  638,  640,  642,
-      473,  644,  429,  647,  650,  653,  656,  659,  662
+        0,  940,   66,  939,  132,  938,  198,  937,  264,  936,
+      330,  935,    0,  394,  964,  971,  396,  971,    0,  951,
+      971,    0,  971,  906,  920,  923,  914,  971,  955,  971,
+      397,  971,  951,    0,  944,  971,    0,  365,  384,  971,
+      907,  909,  902,  911,  901,  909,  904,  365,  369,  909,
+      372,  365,  361,  910,  895,  942,  971,  416,  971,  932,
+      971,    0,  971,  940,  971,  417,  971,  971,  936,  929,
+        0,  971,  885,  936,  971,  424,  971,  911,    0,  402,
+      971,  971,  919,  377,  409,  407,  408,    0,  971,  971,
+      971,  888,  885,  971,  971,  931,  971,  436,  971,  906,
+
+        0,  920,  971,  921,    0,  385,  421,  420,  903,  421,
+      894,  890,  399,  414,  886,  866,  455,  874,  415,  401,
+      417,  873,  420,  458,  869,  881,  857,  971,  917,  971,
+      916,  971,  915,  471,    0,    0,    0,  861,  874,  876,
+      858,  910,  971,  474,  906,  905,    0,    0,    0,  459,
+        0,  467,  865,  442,  859,  452,  868,  847,  850,  856,
+      862,  847,  860,  850,  851,  856,  450,  861,  850,  844,
+      447,  841,  891,  971,  498,    0,    0,  890,  971,  502,
+      886,  885,    0,    0,    0,  887,  971,  503,  971,    0,
+        0,  839,  834,  836,  868,    0,  488,    0,  493,  971,
+
+      971,  971,  971,  834,  839,  880,  971,  515,  971,    0,
+        0,  971,    0,  500,    0,  502,  971,  971,  971,  971,
+      971,  971,  827,  827,  835,  478,  834,  827,  826,  828,
+      823,  847,  971,  971,  971,  971,  846,  845,  844,  819,
+      813,    0,  812,  828,  827,  815,  805,  811,  806,  804,
+      971,  971,  833,  500,  808,  821,  797,  802,  798,  794,
+      971,  850,  971,  849,  971,  848,  971,  837,  812,  803,
+      793,  802,  832,  509,    0,  801,    0,    0,  789,  786,
+        0,  804,  795,    0,  783,  797,  789,    0,  781,  795,
+      798,  788,  782,  790,  791,  788,  787,  770,  781,  785,
+
+      811,  810,  809,  781,  971,  766,    0,  513,    0,  781,
+      769,  804,  515,    0,    0,  762,  767,  766,  759,  764,
+      760,  755,  772,  757,  971,  971,  971,  971,  494,  756,
+      784,  768,  753,    0,  752,  763,  744,  750,  971,  971,
+      971,  745,  744,  741,  740,  745,  738,  971,  780,  753,
+      741,  739,    0,  971,  776,  738,  750,  745,  728,  747,
+      735,  727,  730,  739,  738,  723,  722,  735,    0,  734,
+      724,    0,  732,  735,  716,  971,  757,  971,  756,  971,
+      755,  971,  971,  730,  714,  971,  752,  713,  723,    0,
+      701,    0,  713,  705,  698,  704,  701,  702,    0,  713,
+
+      706,  696,  714,  700,  696,  709,  694,  693,    0,    0,
+      707,    0,  701,  703,    0,  694,  692,  681,  692,  689,
+      697,    0,  678,  680,  684,  682,  677,  692,    0,    0,
+      676,  692,  684,  680,  679,  667,    0,    0,    0,  687,
+      669,  667,  700,    0,  673,    0,  670,  673,  661,  667,
+        0,  665,  654,    0,    0,    0,  673,  670,  656,  655,
+        0,    0,    0,    0,  658,  672,  667,    0,    0,  659,
+      644,  650,    0,    0,  647,  655,    0,  660,  650,  644,
+      658,  648,    0,  638,    0,  646,  654,    0,    0,    0,
+      655,  639,  651,  650,  649,  644,  637,  639,  649,    0,
+
+      646,  628,    0,  627,    0,  641,  645,  625,    0,  569,
+      563,  521,  508,  488,  487,    0,    0,    0,  487,    0,
+        0,  501,    0,  503,    0,    0,  487,    0,  482,  500,
+        0,  479,  469,    0,  971,  545,  551,  557,  559,  565,
+      569,  575,  577,  583,  585,  591,  595,  597,  603,  609,
+      611,  617,  623,  625,  631,  637,  643,  645,  647,  458,
+      649,  651,  653,  453,  655,  421,  658,  661,  664,  667,
+      670,  673
     } ;
 
-static const flex_int16_t yy_def[570] =
+static const flex_int16_t yy_def[573] =
     {   0,
-      532,    1,  532,    3,  532,    5,  532,    7,  532,    9,
-      532,   11,  533,  534,  532,  532,  532,  532,  535,  532,
-      532,  536,  532,  536,  536,  536,  536,  532,  537,  532,
-      532,  532,  538,  539,  532,  532,  540,  532,  532,  532,
-      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
-      540,  540,  540,  540,  540,  541,  532,  532,  532,  532,
-      532,  542,  532,  543,  532,  532,  532,  532,  544,  532,
-      545,  532,  545,  546,  532,  532,  532,  532,  547,  532,
-      532,  532,  548,  532,  532,  532,  532,  548,  532,  532,
-      532,  548,  548,  532,  532,  549,  532,  532,  532,  532,
-
-      550,  532,  532,  532,  551,  532,  532,  532,  532,  532,
-      532,  551,  551,  551,  551,  551,  551,  551,  551,  551,
-      551,  551,  551,  551,  551,  551,  532,  532,  552,  532,
-      553,  532,  554,  532,  535,  555,  536,  536,  536,  536,
-      536,  537,  532,  532,  538,  532,  539,  556,  540,  532,
-      557,  532,  540,  540,  540,  540,  540,  540,  540,  540,
-      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
-      540,  541,  532,  532,  558,  542,  543,  532,  532,  544,
-      532,  559,  545,  545,  546,  532,  532,  532,  547,  560,
-      532,  532,  532,  548,  548,  532,  561,  532,  532,  532,
-
-      532,  532,  548,  548,  549,  532,  532,  532,  550,  562,
-      532,  551,  532,  563,  532,  532,  532,  532,  532,  532,
-      532,  551,  551,  551,  551,  551,  551,  551,  551,  551,
-      532,  532,  532,  532,  532,  532,  532,  532,  551,  551,
-      551,  551,  551,  551,  551,  551,  551,  551,  551,  532,
-      532,  532,  532,  551,  551,  551,  551,  551,  551,  532,
-      552,  532,  553,  532,  554,  532,  564,  536,  536,  536,
-      536,  565,  532,  557,  540,  540,  540,  540,  540,  540,
-      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
-      540,  540,  540,  540,  540,  540,  540,  566,  567,  568,
-
-      532,  532,  532,  548,  532,  561,  548,  548,  569,  532,
-      563,  551,  551,  551,  551,  551,  551,  551,  551,  551,
-      551,  532,  532,  532,  532,  551,  551,  551,  551,  551,
-      551,  551,  551,  551,  551,  532,  532,  532,  551,  551,
-      551,  551,  551,  551,  532,  564,  536,  536,  536,  536,
-      532,  565,  540,  540,  540,  540,  540,  540,  540,  540,
-      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
-      540,  540,  532,  566,  532,  567,  532,  568,  532,  532,
-      548,  548,  532,  569,  551,  551,  551,  551,  551,  551,
-      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
-
-      551,  551,  551,  551,  551,  551,  551,  551,  551,  536,
-      536,  536,  540,  540,  540,  540,  540,  540,  540,  540,
-      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
-      548,  548,  551,  551,  551,  551,  551,  551,  551,  551,
-      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
-      551,  536,  536,  540,  540,  540,  540,  540,  540,  540,
-      540,  540,  540,  540,  540,  540,  540,  540,  548,  548,
-      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
-      551,  551,  540,  540,  540,  540,  540,  540,  540,  540,
-      540,  548,  551,  551,  551,  551,  551,  551,  551,  551,
-
-      540,  540,  540,  540,  540,  540,  548,  551,  551,  551,
-      551,  551,  551,  540,  540,  540,  540,  548,  551,  551,
-      551,  551,  551,  540,  551,  551,  540,  551,  540,  540,
-      540,    0,  532,  532,  532,  532,  532,  532,  532,  532,
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-      532,  532,  532,  532,  532,  532,  532,  532,  532
+      535,    1,  535,    3,  535,    5,  535,    7,  535,    9,
+      535,   11,  536,  537,  535,  535,  535,  535,  538,  535,
+      535,  539,  535,  539,  539,  539,  539,  535,  540,  535,
+      535,  535,  541,  542,  535,  535,  543,  535,  535,  535,
+      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
+      543,  543,  543,  543,  543,  544,  535,  535,  535,  535,
+      535,  545,  535,  546,  535,  535,  535,  535,  547,  535,
+      548,  535,  548,  549,  535,  535,  535,  535,  550,  535,
+      535,  535,  551,  535,  535,  535,  535,  551,  535,  535,
+      535,  551,  551,  535,  535,  552,  535,  535,  535,  535,
+
+      553,  535,  535,  535,  554,  535,  535,  535,  535,  535,
+      535,  554,  554,  554,  554,  554,  554,  554,  554,  554,
+      554,  554,  554,  554,  554,  554,  535,  535,  555,  535,
+      556,  535,  557,  535,  538,  558,  539,  539,  539,  539,
+      539,  540,  535,  535,  541,  535,  542,  559,  543,  535,
+      560,  535,  543,  543,  543,  543,  543,  543,  543,  543,
+      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
+      543,  543,  544,  535,  535,  561,  545,  546,  535,  535,
+      547,  535,  562,  548,  548,  549,  535,  535,  535,  550,
+      563,  535,  535,  535,  551,  551,  535,  564,  535,  535,
+
+      535,  535,  535,  551,  551,  552,  535,  535,  535,  553,
+      565,  535,  554,  535,  566,  535,  535,  535,  535,  535,
+      535,  535,  554,  554,  554,  554,  554,  554,  554,  554,
+      554,  535,  535,  535,  535,  535,  535,  535,  535,  554,
+      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
+      535,  535,  535,  535,  554,  554,  554,  554,  554,  554,
+      535,  555,  535,  556,  535,  557,  535,  567,  539,  539,
+      539,  539,  568,  535,  560,  543,  543,  543,  543,  543,
+      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
+      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
+
+      569,  570,  571,  535,  535,  535,  551,  535,  564,  551,
+      551,  572,  535,  566,  554,  554,  554,  554,  554,  554,
+      554,  554,  554,  554,  535,  535,  535,  535,  554,  554,
+      554,  554,  554,  554,  554,  554,  554,  554,  535,  535,
+      535,  554,  554,  554,  554,  554,  554,  535,  567,  539,
+      539,  539,  539,  535,  568,  543,  543,  543,  543,  543,
+      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
+      543,  543,  543,  543,  543,  535,  569,  535,  570,  535,
+      571,  535,  535,  551,  551,  535,  572,  554,  554,  554,
+      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
+
+      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
+      554,  554,  539,  539,  539,  543,  543,  543,  543,  543,
+      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
+      543,  543,  543,  551,  551,  554,  554,  554,  554,  554,
+      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
+      554,  554,  554,  554,  539,  539,  543,  543,  543,  543,
+      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
+      543,  551,  551,  554,  554,  554,  554,  554,  554,  554,
+      554,  554,  554,  554,  554,  543,  543,  543,  543,  543,
+      543,  543,  543,  543,  551,  554,  554,  554,  554,  554,
+
+      554,  554,  554,  543,  543,  543,  543,  543,  543,  551,
+      554,  554,  554,  554,  554,  554,  543,  543,  543,  543,
+      551,  554,  554,  554,  554,  554,  543,  554,  554,  543,
+      554,  543,  543,  543,    0,  535,  535,  535,  535,  535,
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+      535,  535
     } ;
 
-static const flex_int16_t yy_nxt[1035] =
+static const flex_int16_t yy_nxt[1038] =
     {   0,
        16,   17,   18,   17,   16,   16,   19,   20,   16,   16,
        16,   21,   21,   16,   16,   21,   21,   22,   16,   16,
@@ -919,79 +921,79 @@ static const flex_int16_t yy_nxt[1035] =
       105,  122,  105,  123,  124,  125,  105,  105,  105,  105,
       105,  126,   97,  127,  128,  103,  132,  134,  144,  134,
 
-      144,  160,  150,  152,  152,  152,  152,  164,  168,  166,
-      174,  165,  174,  190,  196,  161,  167,  179,  169,  179,
-      187,  213,  187,  133,  151,  198,  198,  198,  198,  199,
-      200,  201,  202,  207,  311,  207,  197,  276,  191,  215,
-      215,  215,  215,  214,  216,  217,  219,  220,  223,  225,
-      277,  241,  192,  226,  224,  134,  295,  134,  231,  242,
-      243,  193,  296,  248,  227,  245,  228,  232,  233,  246,
-      234,  244,  235,  249,  250,  144,  290,  144,  306,  236,
-      237,  238,  273,  273,  251,  152,  152,  152,  152,  279,
-      274,  252,  280,  253,  174,  291,  174,  179,  187,  179,
-
-      187,  239,  531,  254,  255,  530,  256,  305,  305,  198,
-      198,  198,  198,  207,  394,  207,  310,  310,  257,  215,
-      215,  215,  215,  315,  337,  338,  273,  273,  395,  316,
-      305,  305,  310,  310,  130,  130,  130,  130,  130,  130,
-      131,  131,  131,  131,  131,  131,  135,  529,  135,  135,
-      135,  135,  137,  137,  142,  142,  142,  142,  142,  142,
-      145,  145,  145,  145,  147,  528,  147,  147,  147,  147,
-      149,  149,  172,  172,  172,  172,  172,  172,  176,  176,
-      177,  177,  177,  177,  177,  177,  180,  180,  180,  180,
-      183,  183,  185,  185,  185,  185,  185,  185,  189,  527,
-
-      189,  189,  189,  189,  195,  195,  205,  205,  205,  205,
-      205,  205,  209,  526,  209,  209,  209,  209,  212,  212,
-      261,  261,  261,  261,  261,  261,  263,  263,  263,  263,
-      263,  263,  265,  265,  265,  265,  265,  265,  267,  267,
-      272,  272,  298,  298,  299,  299,  300,  300,  309,  309,
-      346,  346,  346,  352,  352,  352,  374,  374,  374,  376,
-      376,  376,  378,  378,  378,  384,  384,  384,  525,  524,
-      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,
-      513,  512,  511,  510,  509,  508,  507,  506,  505,  504,
-      503,  502,  501,  500,  499,  498,  497,  496,  495,  494,
-
-      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
-      483,  482,  481,  480,  479,  478,  477,  476,  475,  474,
-      473,  472,  471,  470,  469,  468,  467,  466,  465,  464,
-      463,  462,  461,  460,  459,  458,  457,  456,  455,  454,
-      453,  452,  451,  450,  449,  448,  447,  446,  445,  444,
-      443,  442,  441,  440,  439,  438,  437,  436,  435,  434,
-      433,  383,  432,  431,  377,  375,  373,  430,  429,  428,
-      427,  426,  425,  424,  423,  422,  421,  420,  419,  418,
-      417,  416,  415,  414,  413,  351,  412,  411,  410,  345,
-      409,  408,  407,  406,  405,  404,  403,  402,  401,  400,
-
-      399,  398,  397,  396,  393,  392,  391,  390,  389,  388,
-      387,  386,  385,  383,  382,  381,  380,  379,  377,  375,
-      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
-      363,  362,  361,  360,  359,  358,  357,  356,  355,  354,
-      353,  351,  350,  349,  348,  347,  345,  266,  264,  262,
-      344,  343,  342,  341,  340,  339,  336,  335,  334,  333,
-      332,  331,  330,  329,  328,  327,  326,  325,  324,  323,
-      322,  321,  320,  319,  318,  317,  314,  313,  312,  206,
-      308,  307,  304,  303,  302,  301,  186,  180,  181,  178,
-      173,  297,  294,  293,  292,  289,  288,  287,  286,  285,
-
-      284,  283,  282,  281,  278,  275,  145,  146,  143,  271,
-      270,  269,  268,  266,  264,  262,  260,  259,  258,  247,
-      240,  230,  229,  222,  221,  218,  211,  210,  208,  206,
-      204,  203,  194,  188,  186,  184,  182,  181,  178,  175,
-      173,  171,  170,  163,  162,  159,  158,  157,  156,  155,
-      154,  153,  148,  146,  143,  141,  140,  139,  138,  136,
-      532,  129,   96,   74,   64,   56,   29,   15,  532,  532,
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-      532,  532,  532,  532
+      144,  160,  150,  152,  152,  152,  152,  162,  165,  167,
+      163,  169,  166,  191,  197,  161,  168,  175,  180,  175,
+      180,  170,  214,  133,  151,  188,  314,  188,  199,  199,
+      199,  199,  200,  201,  202,  203,  198,  208,  192,  208,
+      216,  216,  216,  216,  215,  217,  218,  220,  221,  224,
+      226,  244,  193,  246,  227,  225,  242,  247,  309,  232,
+      249,  194,  245,  275,  243,  228,  251,  229,  233,  234,
+      250,  235,  134,  236,  134,  144,  252,  144,  274,  274,
+      237,  238,  239,  253,  277,  254,  152,  152,  152,  152,
+      281,  278,  293,  282,  298,  255,  256,  279,  257,  175,
+
+      299,  175,  240,  180,  188,  180,  188,  308,  308,  534,
+      258,  294,  199,  199,  199,  199,  208,  533,  208,  313,
+      313,  216,  216,  216,  216,  318,  340,  341,  274,  274,
+      397,  319,  308,  308,  313,  313,  532,  531,  530,  529,
+      528,  527,  526,  525,  398,  130,  130,  130,  130,  130,
+      130,  131,  131,  131,  131,  131,  131,  135,  524,  135,
+      135,  135,  135,  137,  137,  142,  142,  142,  142,  142,
+      142,  145,  145,  145,  145,  147,  523,  147,  147,  147,
+      147,  149,  149,  173,  173,  173,  173,  173,  173,  177,
+      177,  178,  178,  178,  178,  178,  178,  181,  181,  181,
+
+      181,  184,  184,  186,  186,  186,  186,  186,  186,  190,
+      522,  190,  190,  190,  190,  196,  196,  206,  206,  206,
+      206,  206,  206,  210,  521,  210,  210,  210,  210,  213,
+      213,  262,  262,  262,  262,  262,  262,  264,  264,  264,
+      264,  264,  264,  266,  266,  266,  266,  266,  266,  268,
+      268,  273,  273,  301,  301,  302,  302,  303,  303,  312,
+      312,  349,  349,  349,  355,  355,  355,  377,  377,  377,
+      379,  379,  379,  381,  381,  381,  387,  387,  387,  520,
+      519,  518,  517,  516,  515,  514,  513,  512,  511,  510,
+      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
+
+      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
+      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
+      479,  478,  477,  476,  475,  474,  473,  472,  471,  470,
+      469,  468,  467,  466,  465,  464,  463,  462,  461,  460,
+      459,  458,  457,  456,  455,  454,  453,  452,  451,  450,
+      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,
+      439,  438,  437,  436,  386,  435,  434,  380,  378,  376,
+      433,  432,  431,  430,  429,  428,  427,  426,  425,  424,
+      423,  422,  421,  420,  419,  418,  417,  416,  354,  415,
+      414,  413,  348,  412,  411,  410,  409,  408,  407,  406,
+
+      405,  404,  403,  402,  401,  400,  399,  396,  395,  394,
+      393,  392,  391,  390,  389,  388,  386,  385,  384,  383,
+      382,  380,  378,  376,  375,  374,  373,  372,  371,  370,
+      369,  368,  367,  366,  365,  364,  363,  362,  361,  360,
+      359,  358,  357,  356,  354,  353,  352,  351,  350,  348,
+      267,  265,  263,  347,  346,  345,  344,  343,  342,  339,
+      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
+      328,  327,  326,  325,  324,  323,  322,  321,  320,  317,
+      316,  315,  207,  311,  310,  307,  306,  305,  304,  187,
+      181,  182,  179,  174,  300,  297,  296,  295,  292,  291,
+
+      290,  289,  288,  287,  286,  285,  284,  283,  280,  276,
+      145,  146,  143,  272,  271,  270,  269,  267,  265,  263,
+      261,  260,  259,  248,  241,  231,  230,  223,  222,  219,
+      212,  211,  209,  207,  205,  204,  195,  189,  187,  185,
+      183,  182,  179,  176,  174,  172,  171,  164,  159,  158,
+      157,  156,  155,  154,  153,  148,  146,  143,  141,  140,
+      139,  138,  136,  535,  129,   96,   74,   64,   56,   29,
+       15,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+      535,  535,  535,  535,  535,  535,  535
     } ;
 
-static const flex_int16_t yy_chk[1035] =
+static const flex_int16_t yy_chk[1038] =
     {   0,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
@@ -1037,90 +1039,90 @@ static const flex_int16_t yy_chk[1035] =
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        11,   11,   11,   11,   11,   11,   14,   17,   31,   17,
 
-       31,   48,   38,   39,   39,   39,   39,   51,   53,   52,
-       58,   51,   58,   80,   84,   48,   52,   66,   53,   66,
-       76,  106,   76,   14,   38,   85,   85,   85,   85,   86,
-       86,   87,   87,   98,  563,   98,   84,  154,   80,  107,
-      107,  107,  107,  106,  108,  108,  110,  110,  113,  114,
-      154,  119,   80,  114,  113,  134,  170,  134,  117,  119,
-      120,   80,  170,  123,  114,  121,  114,  117,  117,  121,
-      117,  120,  117,  123,  124,  144,  166,  144,  561,  117,
-      117,  117,  150,  150,  124,  152,  152,  152,  152,  156,
-      557,  124,  156,  124,  174,  166,  174,  179,  187,  179,
-
-      187,  117,  530,  124,  124,  529,  124,  196,  196,  198,
-      198,  198,  198,  207,  326,  207,  213,  213,  124,  215,
-      215,  215,  215,  225,  253,  253,  273,  273,  326,  225,
-      305,  305,  310,  310,  533,  533,  533,  533,  533,  533,
-      534,  534,  534,  534,  534,  534,  535,  527,  535,  535,
-      535,  535,  536,  536,  537,  537,  537,  537,  537,  537,
-      538,  538,  538,  538,  539,  526,  539,  539,  539,  539,
-      540,  540,  541,  541,  541,  541,  541,  541,  542,  542,
-      543,  543,  543,  543,  543,  543,  544,  544,  544,  544,
-      545,  545,  546,  546,  546,  546,  546,  546,  547,  524,
-
-      547,  547,  547,  547,  548,  548,  549,  549,  549,  549,
-      549,  549,  550,  521,  550,  550,  550,  550,  551,  551,
-      552,  552,  552,  552,  552,  552,  553,  553,  553,  553,
-      553,  553,  554,  554,  554,  554,  554,  554,  555,  555,
-      556,  556,  558,  558,  559,  559,  560,  560,  562,  562,
-      564,  564,  564,  565,  565,  565,  566,  566,  566,  567,
-      567,  567,  568,  568,  568,  569,  569,  569,  519,  516,
-      512,  511,  510,  509,  508,  507,  505,  504,  503,  501,
-      499,  498,  496,  495,  494,  493,  492,  491,  490,  489,
-      488,  484,  483,  481,  479,  478,  477,  476,  475,  473,
-
-      472,  469,  468,  467,  464,  463,  462,  457,  456,  455,
-      454,  450,  449,  447,  446,  445,  444,  442,  440,  439,
-      438,  437,  433,  432,  431,  430,  429,  428,  425,  424,
-      423,  422,  421,  420,  418,  417,  416,  415,  414,  413,
-      411,  410,  408,  405,  404,  403,  402,  401,  400,  399,
-      398,  397,  395,  394,  393,  392,  391,  390,  388,  386,
-      385,  384,  382,  381,  378,  376,  374,  372,  371,  370,
-      368,  367,  365,  364,  363,  362,  361,  360,  359,  358,
-      357,  356,  355,  354,  353,  352,  349,  348,  347,  346,
-      344,  343,  342,  341,  340,  339,  335,  334,  333,  332,
-
-      330,  329,  328,  327,  321,  320,  319,  318,  317,  316,
-      315,  314,  313,  309,  308,  307,  303,  301,  300,  299,
-      298,  297,  296,  295,  294,  293,  292,  291,  290,  289,
-      288,  287,  286,  285,  284,  283,  281,  280,  278,  277,
-      275,  272,  271,  270,  269,  268,  267,  265,  263,  261,
-      259,  258,  257,  256,  255,  254,  252,  249,  248,  247,
-      246,  245,  244,  243,  242,  240,  239,  238,  237,  236,
-      231,  230,  229,  228,  227,  226,  224,  223,  222,  205,
-      204,  203,  194,  193,  192,  191,  185,  181,  180,  177,
-      172,  171,  169,  168,  167,  165,  164,  163,  162,  161,
-
-      160,  159,  158,  157,  155,  153,  146,  145,  142,  141,
-      140,  139,  138,  133,  131,  129,  127,  126,  125,  122,
-      118,  116,  115,  112,  111,  109,  104,  102,  100,   96,
-       93,   92,   83,   78,   74,   73,   70,   69,   64,   60,
-       56,   55,   54,   50,   49,   47,   46,   45,   44,   43,
-       42,   41,   35,   33,   29,   27,   26,   25,   24,   20,
-       15,   12,   10,    8,    6,    4,    2,  532,  532,  532,
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
-      532,  532,  532,  532
+       31,   48,   38,   39,   39,   39,   39,   49,   51,   52,
+       49,   53,   51,   80,   84,   48,   52,   58,   66,   58,
+       66,   53,  106,   14,   38,   76,  566,   76,   85,   85,
+       85,   85,   86,   86,   87,   87,   84,   98,   80,   98,
+      107,  107,  107,  107,  106,  108,  108,  110,  110,  113,
+      114,  120,   80,  121,  114,  113,  119,  121,  564,  117,
+      123,   80,  120,  560,  119,  114,  124,  114,  117,  117,
+      123,  117,  134,  117,  134,  144,  124,  144,  150,  150,
+      117,  117,  117,  124,  154,  124,  152,  152,  152,  152,
+      156,  154,  167,  156,  171,  124,  124,  154,  124,  175,
+
+      171,  175,  117,  180,  188,  180,  188,  197,  197,  533,
+      124,  167,  199,  199,  199,  199,  208,  532,  208,  214,
+      214,  216,  216,  216,  216,  226,  254,  254,  274,  274,
+      329,  226,  308,  308,  313,  313,  530,  529,  527,  524,
+      522,  519,  515,  514,  329,  536,  536,  536,  536,  536,
+      536,  537,  537,  537,  537,  537,  537,  538,  513,  538,
+      538,  538,  538,  539,  539,  540,  540,  540,  540,  540,
+      540,  541,  541,  541,  541,  542,  512,  542,  542,  542,
+      542,  543,  543,  544,  544,  544,  544,  544,  544,  545,
+      545,  546,  546,  546,  546,  546,  546,  547,  547,  547,
+
+      547,  548,  548,  549,  549,  549,  549,  549,  549,  550,
+      511,  550,  550,  550,  550,  551,  551,  552,  552,  552,
+      552,  552,  552,  553,  510,  553,  553,  553,  553,  554,
+      554,  555,  555,  555,  555,  555,  555,  556,  556,  556,
+      556,  556,  556,  557,  557,  557,  557,  557,  557,  558,
+      558,  559,  559,  561,  561,  562,  562,  563,  563,  565,
+      565,  567,  567,  567,  568,  568,  568,  569,  569,  569,
+      570,  570,  570,  571,  571,  571,  572,  572,  572,  508,
+      507,  506,  504,  502,  501,  499,  498,  497,  496,  495,
+      494,  493,  492,  491,  487,  486,  484,  482,  481,  480,
+
+      479,  478,  476,  475,  472,  471,  470,  467,  466,  465,
+      460,  459,  458,  457,  453,  452,  450,  449,  448,  447,
+      445,  443,  442,  441,  440,  436,  435,  434,  433,  432,
+      431,  428,  427,  426,  425,  424,  423,  421,  420,  419,
+      418,  417,  416,  414,  413,  411,  408,  407,  406,  405,
+      404,  403,  402,  401,  400,  398,  397,  396,  395,  394,
+      393,  391,  389,  388,  387,  385,  384,  381,  379,  377,
+      375,  374,  373,  371,  370,  368,  367,  366,  365,  364,
+      363,  362,  361,  360,  359,  358,  357,  356,  355,  352,
+      351,  350,  349,  347,  346,  345,  344,  343,  342,  338,
+
+      337,  336,  335,  333,  332,  331,  330,  324,  323,  322,
+      321,  320,  319,  318,  317,  316,  312,  311,  310,  306,
+      304,  303,  302,  301,  300,  299,  298,  297,  296,  295,
+      294,  293,  292,  291,  290,  289,  287,  286,  285,  283,
+      282,  280,  279,  276,  273,  272,  271,  270,  269,  268,
+      266,  264,  262,  260,  259,  258,  257,  256,  255,  253,
+      250,  249,  248,  247,  246,  245,  244,  243,  241,  240,
+      239,  238,  237,  232,  231,  230,  229,  228,  227,  225,
+      224,  223,  206,  205,  204,  195,  194,  193,  192,  186,
+      182,  181,  178,  173,  172,  170,  169,  168,  166,  165,
+
+      164,  163,  162,  161,  160,  159,  158,  157,  155,  153,
+      146,  145,  142,  141,  140,  139,  138,  133,  131,  129,
+      127,  126,  125,  122,  118,  116,  115,  112,  111,  109,
+      104,  102,  100,   96,   93,   92,   83,   78,   74,   73,
+       70,   69,   64,   60,   56,   55,   54,   50,   47,   46,
+       45,   44,   43,   42,   41,   35,   33,   29,   27,   26,
+       25,   24,   20,   15,   12,   10,    8,    6,    4,    2,
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
+      535,  535,  535,  535,  535,  535,  535
     } ;
 
 /* Table of booleans, true if rule could match eol. */
-static const flex_int32_t yy_rule_can_match_eol[166] =
+static const flex_int32_t yy_rule_can_match_eol[168] =
     {   0,
 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
+    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,
-    0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 1, 0, 1, 1, 0,     };
+    0, 0, 0, 1, 0, 1, 1, 0,     };
 
 static yy_state_type yy_last_accepting_state;
 static char *yy_last_accepting_cpos;
@@ -1881,13 +1883,13 @@ yy_match:
 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 				{
 				yy_current_state = (int) yy_def[yy_current_state];
-				if ( yy_current_state >= 533 )
+				if ( yy_current_state >= 536 )
 					yy_c = yy_meta[yy_c];
 				}
 			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
 			++yy_cp;
 			}
-		while ( yy_base[yy_current_state] != 968 );
+		while ( yy_base[yy_current_state] != 971 );
 
 yy_find_action:
 		yy_act = yy_accept[yy_current_state];
@@ -2080,63 +2082,63 @@ YY_RULE_SETUP
 	YY_BREAK
 case 39:
 YY_RULE_SETUP
-{ return ENDIAN_KEY; }
+{ return OCT_KEY; }
 	YY_BREAK
 case 40:
 YY_RULE_SETUP
-{ return ALIGN_KEY; }
+{ return BIN_KEY; }
 	YY_BREAK
 case 41:
 YY_RULE_SETUP
-{ return BIG_KEY; }
+{ return ENDIAN_KEY; }
 	YY_BREAK
 case 42:
 YY_RULE_SETUP
-{ return LITTLE_KEY; }
+{ return ALIGN_KEY; }
 	YY_BREAK
 case 43:
 YY_RULE_SETUP
-{ return SIZE_KEY; }
+{ return BIG_KEY; }
 	YY_BREAK
 case 44:
 YY_RULE_SETUP
-{ return WORDSIZE_KEY; }
+{ return LITTLE_KEY; }
 	YY_BREAK
 case 45:
 YY_RULE_SETUP
-{ return OFFSET_KEY; }
+{ return SIZE_KEY; }
 	YY_BREAK
 case 46:
 YY_RULE_SETUP
-{ return NAMES_KEY; }
+{ return WORDSIZE_KEY; }
 	YY_BREAK
 case 47:
 YY_RULE_SETUP
-{ return VALUES_KEY; }
+{ return OFFSET_KEY; }
 	YY_BREAK
 case 48:
 YY_RULE_SETUP
-{ return VARIABLES_KEY; }
+{ return NAMES_KEY; }
 	YY_BREAK
 case 49:
 YY_RULE_SETUP
-{ return PCODEOP_KEY; }
+{ return VALUES_KEY; }
 	YY_BREAK
 case 50:
 YY_RULE_SETUP
-
+{ return VARIABLES_KEY; }
 	YY_BREAK
 case 51:
 YY_RULE_SETUP
-{  return find_symbol();  }
+{ return PCODEOP_KEY; }
 	YY_BREAK
 case 52:
 YY_RULE_SETUP
-{ return scan_number(sleightext,&sleighlval,false); }
+
 	YY_BREAK
 case 53:
 YY_RULE_SETUP
-{ return scan_number(sleightext,&sleighlval,false); }
+{  return find_symbol();  }
 	YY_BREAK
 case 54:
 YY_RULE_SETUP
@@ -2144,159 +2146,159 @@ YY_RULE_SETUP
 	YY_BREAK
 case 55:
 YY_RULE_SETUP
-{ sleighlval.str = new string(sleightext+1,strlen(sleightext)-2); return STRING; }
+{ return scan_number(sleightext,&sleighlval,false); }
 	YY_BREAK
 case 56:
 YY_RULE_SETUP
-
+{ return scan_number(sleightext,&sleighlval,false); }
 	YY_BREAK
 case 57:
-/* rule 57 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); }
+{ sleighlval.str = new string(sleightext+1,strlen(sleightext)-2); return STRING; }
 	YY_BREAK
 case 58:
 YY_RULE_SETUP
-{ return sleightext[0]; }
+
 	YY_BREAK
 case 59:
 /* rule 59 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); BEGIN( preprocess(print,preproc) ); }
+{ slgh->nextLine(); }
 	YY_BREAK
 case 60:
 YY_RULE_SETUP
-{ preproc_macroexpand(); }
+{ return sleightext[0]; }
 	YY_BREAK
 case 61:
+/* rule 61 can match eol */
 YY_RULE_SETUP
-{ sleighlval.ch = sleightext[0]; return CHAR; }
+{ slgh->nextLine(); BEGIN( preprocess(print,preproc) ); }
 	YY_BREAK
 case 62:
 YY_RULE_SETUP
-{ sleighlval.ch = '^'; return '^'; }
+{ preproc_macroexpand(); }
 	YY_BREAK
 case 63:
 YY_RULE_SETUP
-{ BEGIN(pattern); actionon=0; return IS_KEY; }
+{ sleighlval.ch = sleightext[0]; return CHAR; }
 	YY_BREAK
 case 64:
 YY_RULE_SETUP
-{  sleighlval.str = new string(sleightext); return SYMBOLSTRING;  }
+{ sleighlval.ch = '^'; return '^'; }
 	YY_BREAK
 case 65:
 YY_RULE_SETUP
-{ sleighlval.str = new string(sleightext+1,strlen(sleightext)-2); return STRING; }
+{ BEGIN(pattern); actionon=0; return IS_KEY; }
 	YY_BREAK
 case 66:
 YY_RULE_SETUP
-{ sleighlval.ch = ' '; return ' '; }
+{  sleighlval.str = new string(sleightext); return SYMBOLSTRING;  }
 	YY_BREAK
 case 67:
-/* rule 67 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); return ' '; }
+{ sleighlval.str = new string(sleightext+1,strlen(sleightext)-2); return STRING; }
 	YY_BREAK
 case 68:
 YY_RULE_SETUP
-{ return sleightext[0]; }
+{ sleighlval.ch = ' '; return ' '; }
 	YY_BREAK
 case 69:
 /* rule 69 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); BEGIN( preprocess(pattern,preproc) ); }
+{ slgh->nextLine(); return ' '; }
 	YY_BREAK
 case 70:
 YY_RULE_SETUP
-{ preproc_macroexpand(); }
+{ return sleightext[0]; }
 	YY_BREAK
 case 71:
+/* rule 71 can match eol */
 YY_RULE_SETUP
-{ BEGIN((withsection==1) ? INITIAL:sem); withsection=0; sleighlval.ch = sleightext[0]; return sleightext[0]; }
+{ slgh->nextLine(); BEGIN( preprocess(pattern,preproc) ); }
 	YY_BREAK
 case 72:
 YY_RULE_SETUP
-{ BEGIN(INITIAL); return OP_UNIMPL; }
+{ preproc_macroexpand(); }
 	YY_BREAK
 case 73:
 YY_RULE_SETUP
-{ return GLOBALSET_KEY; }
+{ BEGIN((withsection==1) ? INITIAL:sem); withsection=0; sleighlval.ch = sleightext[0]; return sleightext[0]; }
 	YY_BREAK
 case 74:
 YY_RULE_SETUP
-{ return OP_RIGHT; }
+{ BEGIN(INITIAL); return OP_UNIMPL; }
 	YY_BREAK
 case 75:
 YY_RULE_SETUP
-{ return OP_LEFT; }
+{ return GLOBALSET_KEY; }
 	YY_BREAK
 case 76:
 YY_RULE_SETUP
-{ return OP_NOTEQUAL; }
+{ return OP_RIGHT; }
 	YY_BREAK
 case 77:
 YY_RULE_SETUP
-{ return OP_LESSEQUAL; }
+{ return OP_LEFT; }
 	YY_BREAK
 case 78:
 YY_RULE_SETUP
-{ return OP_GREATEQUAL; }
+{ return OP_NOTEQUAL; }
 	YY_BREAK
 case 79:
 YY_RULE_SETUP
-{ return OP_AND; }
+{ return OP_LESSEQUAL; }
 	YY_BREAK
 case 80:
 YY_RULE_SETUP
-{ return OP_OR; }
+{ return OP_GREATEQUAL; }
 	YY_BREAK
 case 81:
 YY_RULE_SETUP
-{ return OP_XOR; }
+{ return OP_AND; }
 	YY_BREAK
 case 82:
 YY_RULE_SETUP
-{ return ELLIPSIS_KEY; }
+{ return OP_OR; }
 	YY_BREAK
 case 83:
 YY_RULE_SETUP
-{ actionon = 1; sleighlval.ch = sleightext[0]; return sleightext[0]; }
+{ return OP_XOR; }
 	YY_BREAK
 case 84:
 YY_RULE_SETUP
-{ actionon = 0; sleighlval.ch = sleightext[0]; return sleightext[0]; }
+{ return ELLIPSIS_KEY; }
 	YY_BREAK
 case 85:
 YY_RULE_SETUP
-{ sleighlval.ch = sleightext[0];  return (actionon==0) ? sleightext[0] : OP_AND; }
+{ actionon = 1; sleighlval.ch = sleightext[0]; return sleightext[0]; }
 	YY_BREAK
 case 86:
 YY_RULE_SETUP
-{ sleighlval.ch = sleightext[0];  return (actionon==0) ? sleightext[0] : OP_OR; }
+{ actionon = 0; sleighlval.ch = sleightext[0]; return sleightext[0]; }
 	YY_BREAK
 case 87:
 YY_RULE_SETUP
-{ return OP_XOR; }
+{ sleighlval.ch = sleightext[0];  return (actionon==0) ? sleightext[0] : OP_AND; }
 	YY_BREAK
 case 88:
 YY_RULE_SETUP
-{ sleighlval.ch = sleightext[0]; return sleightext[0]; }
+{ sleighlval.ch = sleightext[0];  return (actionon==0) ? sleightext[0] : OP_OR; }
 	YY_BREAK
 case 89:
 YY_RULE_SETUP
-
+{ return OP_XOR; }
 	YY_BREAK
 case 90:
 YY_RULE_SETUP
-{ return find_symbol();   }
+{ sleighlval.ch = sleightext[0]; return sleightext[0]; }
 	YY_BREAK
 case 91:
 YY_RULE_SETUP
-{ return scan_number(sleightext,&sleighlval,true); }
+
 	YY_BREAK
 case 92:
 YY_RULE_SETUP
-{ return scan_number(sleightext,&sleighlval,true); }
+{ return find_symbol();   }
 	YY_BREAK
 case 93:
 YY_RULE_SETUP
@@ -2304,265 +2306,265 @@ YY_RULE_SETUP
 	YY_BREAK
 case 94:
 YY_RULE_SETUP
-
+{ return scan_number(sleightext,&sleighlval,true); }
 	YY_BREAK
 case 95:
-/* rule 95 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); }
+{ return scan_number(sleightext,&sleighlval,true); }
 	YY_BREAK
 case 96:
 YY_RULE_SETUP
-{ return sleightext[0]; }
+
 	YY_BREAK
 case 97:
 /* rule 97 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); BEGIN( preprocess(sem,preproc) ); }
+{ slgh->nextLine(); }
 	YY_BREAK
 case 98:
 YY_RULE_SETUP
-{ preproc_macroexpand(); }
+{ return sleightext[0]; }
 	YY_BREAK
 case 99:
+/* rule 99 can match eol */
 YY_RULE_SETUP
-{ BEGIN(INITIAL); sleighlval.ch = sleightext[0]; return sleightext[0]; }
+{ slgh->nextLine(); BEGIN( preprocess(sem,preproc) ); }
 	YY_BREAK
 case 100:
 YY_RULE_SETUP
-{ return OP_BOOL_OR; }
+{ preproc_macroexpand(); }
 	YY_BREAK
 case 101:
 YY_RULE_SETUP
-{ return OP_BOOL_AND; }
+{ BEGIN(INITIAL); sleighlval.ch = sleightext[0]; return sleightext[0]; }
 	YY_BREAK
 case 102:
 YY_RULE_SETUP
-{ return OP_BOOL_XOR; }
+{ return OP_BOOL_OR; }
 	YY_BREAK
 case 103:
 YY_RULE_SETUP
-{ return OP_RIGHT; }
+{ return OP_BOOL_AND; }
 	YY_BREAK
 case 104:
 YY_RULE_SETUP
-{ return OP_LEFT; }
+{ return OP_BOOL_XOR; }
 	YY_BREAK
 case 105:
 YY_RULE_SETUP
-{ return OP_EQUAL; }
+{ return OP_RIGHT; }
 	YY_BREAK
 case 106:
 YY_RULE_SETUP
-{ return OP_NOTEQUAL; }
+{ return OP_LEFT; }
 	YY_BREAK
 case 107:
 YY_RULE_SETUP
-{ return OP_LESSEQUAL; }
+{ return OP_EQUAL; }
 	YY_BREAK
 case 108:
 YY_RULE_SETUP
-{ return OP_GREATEQUAL; }
+{ return OP_NOTEQUAL; }
 	YY_BREAK
 case 109:
 YY_RULE_SETUP
-{ return OP_SDIV; }
+{ return OP_LESSEQUAL; }
 	YY_BREAK
 case 110:
 YY_RULE_SETUP
-{ return OP_SREM; }
+{ return OP_GREATEQUAL; }
 	YY_BREAK
 case 111:
 YY_RULE_SETUP
-{ return OP_SRIGHT; }
+{ return OP_SDIV; }
 	YY_BREAK
 case 112:
 YY_RULE_SETUP
-{ return OP_SLESS; }
+{ return OP_SREM; }
 	YY_BREAK
 case 113:
 YY_RULE_SETUP
-{ return OP_SGREAT; }
+{ return OP_SRIGHT; }
 	YY_BREAK
 case 114:
 YY_RULE_SETUP
-{ return OP_SLESSEQUAL; }
+{ return OP_SLESS; }
 	YY_BREAK
 case 115:
 YY_RULE_SETUP
-{ return OP_SGREATEQUAL; }
+{ return OP_SGREAT; }
 	YY_BREAK
 case 116:
 YY_RULE_SETUP
-{ return OP_FADD; }
+{ return OP_SLESSEQUAL; }
 	YY_BREAK
 case 117:
 YY_RULE_SETUP
-{ return OP_FSUB; }
+{ return OP_SGREATEQUAL; }
 	YY_BREAK
 case 118:
 YY_RULE_SETUP
-{ return OP_FMULT; }
+{ return OP_FADD; }
 	YY_BREAK
 case 119:
 YY_RULE_SETUP
-{ return OP_FDIV; }
+{ return OP_FSUB; }
 	YY_BREAK
 case 120:
 YY_RULE_SETUP
-{ return OP_FEQUAL; }
+{ return OP_FMULT; }
 	YY_BREAK
 case 121:
 YY_RULE_SETUP
-{ return OP_FNOTEQUAL; }
+{ return OP_FDIV; }
 	YY_BREAK
 case 122:
 YY_RULE_SETUP
-{ return OP_FLESS; }
+{ return OP_FEQUAL; }
 	YY_BREAK
 case 123:
 YY_RULE_SETUP
-{ return OP_FGREAT; }
+{ return OP_FNOTEQUAL; }
 	YY_BREAK
 case 124:
 YY_RULE_SETUP
-{ return OP_FLESSEQUAL; }
+{ return OP_FLESS; }
 	YY_BREAK
 case 125:
 YY_RULE_SETUP
-{ return OP_FGREATEQUAL; }
+{ return OP_FGREAT; }
 	YY_BREAK
 case 126:
 YY_RULE_SETUP
-{ return OP_ZEXT; }
+{ return OP_FLESSEQUAL; }
 	YY_BREAK
 case 127:
 YY_RULE_SETUP
-{ return OP_CARRY; }
+{ return OP_FGREATEQUAL; }
 	YY_BREAK
 case 128:
 YY_RULE_SETUP
-{ return OP_BORROW; }
+{ return OP_ZEXT; }
 	YY_BREAK
 case 129:
 YY_RULE_SETUP
-{ return OP_SEXT; }
+{ return OP_CARRY; }
 	YY_BREAK
 case 130:
 YY_RULE_SETUP
-{ return OP_SCARRY; }
+{ return OP_BORROW; }
 	YY_BREAK
 case 131:
 YY_RULE_SETUP
-{ return OP_SBORROW; }
+{ return OP_SEXT; }
 	YY_BREAK
 case 132:
 YY_RULE_SETUP
-{ return OP_NAN; }
+{ return OP_SCARRY; }
 	YY_BREAK
 case 133:
 YY_RULE_SETUP
-{ return OP_ABS; }
+{ return OP_SBORROW; }
 	YY_BREAK
 case 134:
 YY_RULE_SETUP
-{ return OP_SQRT; }
+{ return OP_NAN; }
 	YY_BREAK
 case 135:
 YY_RULE_SETUP
-{ return OP_CEIL; }
+{ return OP_ABS; }
 	YY_BREAK
 case 136:
 YY_RULE_SETUP
-{ return OP_FLOOR; }
+{ return OP_SQRT; }
 	YY_BREAK
 case 137:
 YY_RULE_SETUP
-{ return OP_ROUND; }
+{ return OP_CEIL; }
 	YY_BREAK
 case 138:
 YY_RULE_SETUP
-{ return OP_INT2FLOAT; }
+{ return OP_FLOOR; }
 	YY_BREAK
 case 139:
 YY_RULE_SETUP
-{ return OP_FLOAT2FLOAT; }
+{ return OP_ROUND; }
 	YY_BREAK
 case 140:
 YY_RULE_SETUP
-{ return OP_TRUNC; }
+{ return OP_INT2FLOAT; }
 	YY_BREAK
 case 141:
 YY_RULE_SETUP
-{ return OP_CPOOLREF; }
+{ return OP_FLOAT2FLOAT; }
 	YY_BREAK
 case 142:
 YY_RULE_SETUP
-{ return OP_NEW; }
+{ return OP_TRUNC; }
 	YY_BREAK
 case 143:
 YY_RULE_SETUP
-{ return OP_POPCOUNT; }
+{ return OP_CPOOLREF; }
 	YY_BREAK
 case 144:
 YY_RULE_SETUP
-{ return OP_LZCOUNT; }
+{ return OP_NEW; }
 	YY_BREAK
 case 145:
 YY_RULE_SETUP
-{ return IF_KEY; }
+{ return OP_POPCOUNT; }
 	YY_BREAK
 case 146:
 YY_RULE_SETUP
-{ return GOTO_KEY; }
+{ return OP_LZCOUNT; }
 	YY_BREAK
 case 147:
 YY_RULE_SETUP
-{ return CALL_KEY; }
+{ return IF_KEY; }
 	YY_BREAK
 case 148:
 YY_RULE_SETUP
-{ return RETURN_KEY; }
+{ return GOTO_KEY; }
 	YY_BREAK
 case 149:
 YY_RULE_SETUP
-{ return DELAYSLOT_KEY; }
+{ return CALL_KEY; }
 	YY_BREAK
 case 150:
 YY_RULE_SETUP
-{ return CROSSBUILD_KEY; }
+{ return RETURN_KEY; }
 	YY_BREAK
 case 151:
 YY_RULE_SETUP
-{ return EXPORT_KEY; }
+{ return DELAYSLOT_KEY; }
 	YY_BREAK
 case 152:
 YY_RULE_SETUP
-{ return BUILD_KEY; }
+{ return CROSSBUILD_KEY; }
 	YY_BREAK
 case 153:
 YY_RULE_SETUP
-{ return LOCAL_KEY; }
+{ return EXPORT_KEY; }
 	YY_BREAK
 case 154:
 YY_RULE_SETUP
-{ sleighlval.ch = sleightext[0]; return sleightext[0]; }
+{ return BUILD_KEY; }
 	YY_BREAK
 case 155:
 YY_RULE_SETUP
-
+{ return LOCAL_KEY; }
 	YY_BREAK
 case 156:
 YY_RULE_SETUP
-{ return find_symbol();   }
+{ sleighlval.ch = sleightext[0]; return sleightext[0]; }
 	YY_BREAK
 case 157:
 YY_RULE_SETUP
-{ return scan_number(sleightext,&sleighlval,false); }
+
 	YY_BREAK
 case 158:
 YY_RULE_SETUP
-{ return scan_number(sleightext,&sleighlval,false); }
+{ return find_symbol();   }
 	YY_BREAK
 case 159:
 YY_RULE_SETUP
@@ -2570,24 +2572,32 @@ YY_RULE_SETUP
 	YY_BREAK
 case 160:
 YY_RULE_SETUP
-
+{ return scan_number(sleightext,&sleighlval,false); }
 	YY_BREAK
 case 161:
-/* rule 161 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); }
+{ return scan_number(sleightext,&sleighlval,false); }
 	YY_BREAK
 case 162:
 YY_RULE_SETUP
-{ return sleightext[0]; }
+
 	YY_BREAK
 case 163:
 /* rule 163 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); BEGIN( preprocess(preproc,preproc) ); }
+{ slgh->nextLine(); }
 	YY_BREAK
 case 164:
-/* rule 164 can match eol */
+YY_RULE_SETUP
+{ return sleightext[0]; }
+	YY_BREAK
+case 165:
+/* rule 165 can match eol */
+YY_RULE_SETUP
+{ slgh->nextLine(); BEGIN( preprocess(preproc,preproc) ); }
+	YY_BREAK
+case 166:
+/* rule 166 can match eol */
 YY_RULE_SETUP
 { slgh->nextLine(); }
 	YY_BREAK
@@ -2609,7 +2619,7 @@ case YY_STATE_EOF(preproc):
           slgh->parseFileFinished();
         }
 	YY_BREAK
-case 165:
+case 167:
 YY_RULE_SETUP
 ECHO;
 	YY_BREAK
@@ -2908,7 +2918,7 @@ static int yy_get_next_buffer (void)
 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 			{
 			yy_current_state = (int) yy_def[yy_current_state];
-			if ( yy_current_state >= 533 )
+			if ( yy_current_state >= 536 )
 				yy_c = yy_meta[yy_c];
 			}
 		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
@@ -2936,11 +2946,11 @@ static int yy_get_next_buffer (void)
 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 		{
 		yy_current_state = (int) yy_def[yy_current_state];
-		if ( yy_current_state >= 533 )
+		if ( yy_current_state >= 536 )
 			yy_c = yy_meta[yy_c];
 		}
 	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
-	yy_is_jam = (yy_current_state == 532);
+	yy_is_jam = (yy_current_state == 535);
 
 		return yy_is_jam ? 0 : yy_current_state;
 }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l
index c831a4791e..f5097abe1d 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l
@@ -539,6 +539,8 @@ with   { BEGIN(pattern); withsection = 1; slgh->calcContextLayout(); return WITH
 <defblock>noflow    { return NOFLOW_KEY; }
 <defblock>hex       { return HEX_KEY; }
 <defblock>dec       { return DEC_KEY; }
+<defblock>oct       { return OCT_KEY; }
+<defblock>bin       { return BIN_KEY; }
 <defblock>endian    { return ENDIAN_KEY; }
 <defblock>alignment { return ALIGN_KEY; }
 <defblock>big       { return BIG_KEY; }
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/BaseLexer.g b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/BaseLexer.g
index aaec246069..15ce0128dc 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/BaseLexer.g
+++ b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/BaseLexer.g
@@ -14,6 +14,7 @@ tokens {
 	OP_ARGUMENTS;
 	OP_ASSIGN;
 	OP_BIG;
+	OP_BIN;
 	OP_BIN_CONSTANT;
 	OP_BITRANGE;
 	OP_BITRANGE2;
@@ -83,13 +84,14 @@ tokens {
 	OP_NAMES;
 	OP_NEGATE;
 	OP_NIL;
-    OP_NOFLOW;
-    OP_NOP;
-    OP_NOT;
+	OP_NOFLOW;
+	OP_NOP;
+	OP_NOT;
 	OP_NOTEQUAL;
 	OP_NOT_DEFAULT;
 	OP_NO_CONTEXT_BLOCK;
 	OP_NO_FIELD_MOD;
+	OP_OCT;
 	OP_OR;
 	OP_PARENTHESIZED;
 	OP_PCODE;
@@ -104,8 +106,8 @@ tokens {
 	OP_SEQUENCE;
 	OP_SGREAT;
 	OP_SGREATEQUAL;
-    OP_SIGNED;
-    OP_SIZING_SIZE;
+	OP_SIGNED;
+	OP_SIZING_SIZE;
 	OP_SIZE;
 	OP_SLESS;
 	OP_SLESSEQUAL;
@@ -157,6 +159,7 @@ RES_WITH		:	'with';
 KEY_ALIGNMENT	:	'alignment';
 KEY_ATTACH		:	'attach';
 KEY_BIG			:	'big';
+KEY_BIN			:	'bin';
 KEY_BITRANGE	:	'bitrange';
 KEY_BUILD		:	'build';
 KEY_CALL		:	'call';
@@ -175,6 +178,7 @@ KEY_MACRO		:	'macro';
 KEY_NAMES		:	'names';
 KEY_NOFLOW		:	'noflow';
 KEY_OFFSET		:	'offset';
+KEY_OCT			:	'oct';
 KEY_PCODEOP		:	'pcodeop';
 KEY_RETURN		:	'return';
 KEY_SIGNED		:	'signed';
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighCompiler.g b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighCompiler.g
index d254d2bd92..0d4d89536b 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighCompiler.g
+++ b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighCompiler.g
@@ -235,8 +235,10 @@ fieldmods
 fieldmod
     :   OP_SIGNED { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.signext = true; }
     |   OP_NOFLOW { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.flow = false; }
-    |   OP_HEX { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.hex = true; }
-    |   OP_DEC { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.hex = false; }
+    |   OP_HEX { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.base = 16; }
+    |   OP_DEC { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.base = 10; }
+    |   OP_OCT { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.base = 8; }
+    |   OP_BIN { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.base = 2; }
     ;
 
 specific_identifier[String purpose] returns [Tree value]
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighEcho.g b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighEcho.g
index fcb42e4c19..cd44ac6de1 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighEcho.g
+++ b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighEcho.g
@@ -82,6 +82,8 @@ fieldmod returns [String value]
     |   OP_NOFLOW { $value = "noflow"; }
     |   OP_HEX { $value = "hex"; }
     |   OP_DEC { $value = "dec"; }
+    |   OP_OCT { $value = "oct"; }
+    |   OP_BIN { $value = "bin"; }
     ;
 
 contextdef
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighParser.g b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighParser.g
index 6beda0844a..e2fc25d470 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighParser.g
+++ b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighParser.g
@@ -94,6 +94,8 @@ fieldmod
     :   lc=KEY_SIGNED -> OP_SIGNED[$lc]
     |   lc=KEY_HEX -> OP_HEX[$lc]
     |   lc=KEY_DEC -> OP_DEC[$lc]
+    |   lc=KEY_OCT -> OP_OCT[$lc]
+    |   lc=KEY_BIN -> OP_BIN[$lc]
     ;
 
 contextfielddefs[Token lc]
@@ -114,6 +116,8 @@ contextfieldmod
     |   lc=KEY_NOFLOW -> OP_NOFLOW[$lc]
     |   lc=KEY_HEX -> OP_HEX[$lc]
     |   lc=KEY_DEC -> OP_DEC[$lc]
+    |   lc=KEY_OCT -> OP_OCT[$lc]
+    |   lc=KEY_BIN -> OP_BIN[$lc]
     ;
 
 contextdef
@@ -549,32 +553,34 @@ identifier
 key_as_id
 	:	lc=KEY_ALIGNMENT	-> ^(OP_IDENTIFIER[$lc, "KEY_ALIGNMENT"] KEY_ALIGNMENT)
 	|	lc=KEY_ATTACH		-> ^(OP_IDENTIFIER[$lc, "KEY_ATTACH"] KEY_ATTACH)
-	|	lc=KEY_BIG			-> ^(OP_IDENTIFIER[$lc, "KEY_BIG"] KEY_BIG)
+	|	lc=KEY_BIG		-> ^(OP_IDENTIFIER[$lc, "KEY_BIG"] KEY_BIG)
+	|	lc=KEY_BIN		-> ^(OP_IDENTIFIER[$lc, "KEY_BIN"] KEY_BIN)
 	|	lc=KEY_BITRANGE		-> ^(OP_IDENTIFIER[$lc, "KEY_BITRANGE"] KEY_BITRANGE)
 	|	lc=KEY_BUILD		-> ^(OP_IDENTIFIER[$lc, "KEY_BUILD"] KEY_BUILD)
-	|	lc=KEY_CALL			-> ^(OP_IDENTIFIER[$lc, "KEY_CALL"] KEY_CALL)	// appeared in printpiece
+	|	lc=KEY_CALL		-> ^(OP_IDENTIFIER[$lc, "KEY_CALL"] KEY_CALL)	// appeared in printpiece
 	|	lc=KEY_CONTEXT		-> ^(OP_IDENTIFIER[$lc, "KEY_CONTEXT"] KEY_CONTEXT)
 	|	lc=KEY_CROSSBUILD	-> ^(OP_IDENTIFIER[$lc, "KEY_CROSSBUILD"] KEY_CROSSBUILD)
-	|	lc=KEY_DEC			-> ^(OP_IDENTIFIER[$lc, "KEY_DEC"] KEY_DEC)	// appeared in printpiece
+	|	lc=KEY_DEC		-> ^(OP_IDENTIFIER[$lc, "KEY_DEC"] KEY_DEC)	// appeared in printpiece
 	|	lc=KEY_DEFAULT		-> ^(OP_IDENTIFIER[$lc, "KEY_DEFAULT"] KEY_DEFAULT)
 	|	lc=KEY_DEFINE		-> ^(OP_IDENTIFIER[$lc, "KEY_DEFINE"] KEY_DEFINE)
 	|	lc=KEY_ENDIAN		-> ^(OP_IDENTIFIER[$lc, "KEY_ENDIAN"] KEY_ENDIAN)
 	|	lc=KEY_EXPORT		-> ^(OP_IDENTIFIER[$lc, "KEY_EXPORT"] KEY_EXPORT)
-	|	lc=KEY_GOTO			-> ^(OP_IDENTIFIER[$lc, "KEY_GOTO"] KEY_GOTO)
-	|	lc=KEY_HEX			-> ^(OP_IDENTIFIER[$lc, "KEY_HEX"] KEY_HEX)
+	|	lc=KEY_GOTO		-> ^(OP_IDENTIFIER[$lc, "KEY_GOTO"] KEY_GOTO)
+	|	lc=KEY_HEX		-> ^(OP_IDENTIFIER[$lc, "KEY_HEX"] KEY_HEX)
 	|	lc=KEY_LITTLE		-> ^(OP_IDENTIFIER[$lc, "KEY_LITTLE"] KEY_LITTLE)
 	|	lc=KEY_LOCAL		-> ^(OP_IDENTIFIER[$lc, "KEY_LOCAL"] KEY_LOCAL)
 	|	lc=KEY_MACRO		-> ^(OP_IDENTIFIER[$lc, "KEY_MACRO"] KEY_MACRO)
 	|	lc=KEY_NAMES		-> ^(OP_IDENTIFIER[$lc, "KEY_NAMES"] KEY_NAMES)
 	|	lc=KEY_NOFLOW		-> ^(OP_IDENTIFIER[$lc, "KEY_NOFLOW"] KEY_NOFLOW)
+	|	lc=KEY_OCT		-> ^(OP_IDENTIFIER[$lc, "KEY_OCT"] KEY_OCT)
 	|	lc=KEY_OFFSET		-> ^(OP_IDENTIFIER[$lc, "KEY_OFFSET"] KEY_OFFSET)
 	|	lc=KEY_PCODEOP		-> ^(OP_IDENTIFIER[$lc, "KEY_PCODEOP"] KEY_PCODEOP)
 	|	lc=KEY_RETURN		-> ^(OP_IDENTIFIER[$lc, "KEY_RETURN"] KEY_RETURN)
 	|	lc=KEY_SIGNED		-> ^(OP_IDENTIFIER[$lc, "KEY_SIGNED"] KEY_SIGNED)
-	|	lc=KEY_SIZE			-> ^(OP_IDENTIFIER[$lc, "KEY_SIZE"] KEY_SIZE)
+	|	lc=KEY_SIZE		-> ^(OP_IDENTIFIER[$lc, "KEY_SIZE"] KEY_SIZE)
 	|	lc=KEY_SPACE		-> ^(OP_IDENTIFIER[$lc, "KEY_SPACE"] KEY_SPACE)
 	|	lc=KEY_TOKEN		-> ^(OP_IDENTIFIER[$lc, "KEY_TOKEN"] KEY_TOKEN)
-	|	lc=KEY_TYPE			-> ^(OP_IDENTIFIER[$lc, "KEY_TYPE"] KEY_TYPE)
+	|	lc=KEY_TYPE		-> ^(OP_IDENTIFIER[$lc, "KEY_TYPE"] KEY_TYPE)
 	|	lc=KEY_UNIMPL		-> ^(OP_IDENTIFIER[$lc, "KEY_UNIMPL"] KEY_UNIMPL)
 	|	lc=KEY_VALUES		-> ^(OP_IDENTIFIER[$lc, "KEY_VALUES"] KEY_VALUES)
 	|	lc=KEY_VARIABLES	-> ^(OP_IDENTIFIER[$lc, "KEY_VARIABLES"] KEY_VARIABLES)
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/ContextField.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/ContextField.java
index e5b562afd3..f4ad7fb0a2 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/ContextField.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/ContextField.java
@@ -37,6 +37,7 @@ public class ContextField extends PatternValue {
 	private int startbyte, endbyte;
 	private int shift;
 	private boolean signbit;
+	private int base;
 
 	@Override
 	public int hashCode() {
@@ -80,6 +81,10 @@ public class ContextField extends PatternValue {
 		return signbit;
 	}
 
+	public int getBase() {
+		return base;
+	}
+
 	@Override
 	public long minValue() {
 		return 0;
@@ -115,6 +120,7 @@ public class ContextField extends PatternValue {
 		startbyte = (int) decoder.readSignedInteger(ATTRIB_STARTBYTE);
 		endbyte = (int) decoder.readSignedInteger(ATTRIB_ENDBYTE);
 		shift = (int) decoder.readSignedInteger(ATTRIB_SHIFT);
+		base = (int) decoder.readSignedInteger(ATTRIB_BASE);
 		decoder.closeElement(el);
 	}
 
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/TokenField.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/TokenField.java
index c56ba44e93..df4f09094b 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/TokenField.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/TokenField.java
@@ -38,6 +38,7 @@ public class TokenField extends PatternValue {
 	private int bitstart, bitend;	// Bits within token, 0 bit is LEAST sig
 	private int bytestart, byteend;	// Bytes to read to get value
 	private int shift;				// Amount to shift to align value
+	private int base;               // The base to use to display the token value.
 
 	@Override
 	public int hashCode() {
@@ -50,6 +51,8 @@ public class TokenField extends PatternValue {
 		result += Boolean.hashCode(signbit);
 		result *= 31;
 		result += Boolean.hashCode(bigendian);
+		result *= 31;
+		result += base;
 		return result;
 	}
 
@@ -71,6 +74,9 @@ public class TokenField extends PatternValue {
 		if (this.bigendian != that.bigendian) {
 			return false;
 		}
+		if (this.base != that.base) {
+			return false;
+		}
 		return true;
 	}
 
@@ -117,6 +123,10 @@ public class TokenField extends PatternValue {
 		return byteend;
 	}
 
+	public int getBase() {
+		return base;
+	}
+
 	@Override
 	public void decode(Decoder decoder, SleighLanguage lang) throws DecoderException {
 		int el = decoder.openElement(ELEM_TOKENFIELD);
@@ -127,6 +137,7 @@ public class TokenField extends PatternValue {
 		bytestart = (int) decoder.readSignedInteger(ATTRIB_STARTBYTE);
 		byteend = (int) decoder.readSignedInteger(ATTRIB_ENDBYTE);
 		shift = (int) decoder.readSignedInteger(ATTRIB_SHIFT);
+		base = (int) decoder.readSignedInteger(ATTRIB_BASE);
 		decoder.closeElement(el);
 	}
 
@@ -234,6 +245,7 @@ public class TokenField extends PatternValue {
 		}
 		sb.append(", bytes " + bytestart + "-" + byteend);
 		sb.append(", shift=" + shift);
+		sb.append(", base=" + base);
 		sb.append("]");
 		return sb.toString();
 	}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/OperandSymbol.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/OperandSymbol.java
index 02680346d4..ac11b815e0 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/OperandSymbol.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/OperandSymbol.java
@@ -26,6 +26,7 @@ import java.util.ArrayList;
 import ghidra.app.plugin.processors.sleigh.*;
 import ghidra.app.plugin.processors.sleigh.expression.OperandValue;
 import ghidra.app.plugin.processors.sleigh.expression.PatternExpression;
+import ghidra.app.plugin.processors.sleigh.expression.TokenField;
 import ghidra.program.model.mem.MemoryAccessException;
 import ghidra.program.model.pcode.Decoder;
 import ghidra.program.model.pcode.DecoderException;
@@ -105,11 +106,15 @@ public class OperandSymbol extends SpecificSymbol {
 		}
 		else {		// Must be expression resulting in a constant
 			long val = defexp.getValue(walker);
-			if (val >= 0) {
-				res = "0x" + Long.toHexString(val);
-			}
-			else {
-				res = "-0x" + Long.toHexString(-val);
+			if (defexp instanceof TokenField && ((TokenField) defexp).getBase() == 10) {
+				res = String.valueOf(val);
+			} else {
+				if (val >= 0) {
+					res = "0x" + Long.toHexString(val);
+				}
+				else {
+					res = "-0x" + Long.toHexString(-val);
+				}
 			}
 		}
 		walker.popOperand();
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/FieldQuality.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/FieldQuality.java
index 17a81ed187..8ceafdfa1b 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/FieldQuality.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/FieldQuality.java
@@ -24,7 +24,7 @@ public class FieldQuality {
     public int low, high;
     public boolean signext;
     public boolean flow;
-    public boolean hex;
+    public int base;
 
     public FieldQuality(String nm, Location location, long l, long h) {
         name = nm;
@@ -33,10 +33,10 @@ public class FieldQuality {
         high = (int) h;
         signext = false;
         flow = true;
-        hex = true;
+        base = 16;
     }
     @Override
     public String toString() {
-        return "fq:{" + name + "," + low + "," + high + "," + signext + "," + hex + "}";
+        return "fq:{" + name + "," + low + "," + high + "," + signext + "," + base + "}";
     }
 }
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/SleighCompile.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/SleighCompile.java
index a953e401ff..9a4d4c30b4 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/SleighCompile.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/SleighCompile.java
@@ -441,7 +441,7 @@ public class SleighCompile extends SleighBase {
 				qual = contexttable.get(i + start).qual;
 				int l = qual.low - min + low;
 				int h = numbits - 1 - (max - qual.high);
-				ContextField field = new ContextField(qual.location, qual.signext, l, h);
+				ContextField field = new ContextField(qual.location, qual.signext, l, h, qual.base);
 				int id = addSymbol(new ContextSymbol(qual.location, qual.name, field, sym, qual.low,
 					qual.high, qual.flow));
 				if (firstContextField == null) {
@@ -942,7 +942,7 @@ public class SleighCompile extends SleighBase {
 			reportError(location, "Field '" + qual.name + "' high must be less than token size");
 		}
 		TokenField field =
-			new TokenField(location, sym.getToken(), qual.signext, qual.low, qual.high);
+			new TokenField(location, sym.getToken(), qual.signext, qual.low, qual.high, qual.base);
 		addSymbol(new ValueSymbol(location, qual.name, field));
 	}
 
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/ContextField.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/ContextField.java
index 53e8f976e3..9ed747ba37 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/ContextField.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/ContextField.java
@@ -30,6 +30,7 @@ public class ContextField extends PatternValue {
 	private int startbyte, endbyte;
 	private int shift;
 	private boolean signbit;
+	private int base;
 
 	public ContextField(Location location) {
 		super(location);
@@ -47,6 +48,10 @@ public class ContextField extends PatternValue {
 		return signbit;
 	}
 
+	public int getBase() {
+		return base;
+	}
+
 	@Override
 	public TokenPattern genMinPattern(VectorSTL<TokenPattern> ops) {
 		return new TokenPattern(location);
@@ -65,7 +70,7 @@ public class ContextField extends PatternValue {
 		return res;
 	}
 
-	public ContextField(Location location, boolean s, int sbit, int ebit)
+	public ContextField(Location location, boolean s, int sbit, int ebit, int fbase)
 
 	{
 		super(location);
@@ -75,12 +80,13 @@ public class ContextField extends PatternValue {
 		startbyte = startbit / 8;
 		endbyte = endbit / 8;
 		shift = 7 - (endbit % 8);
+		base = fbase;
 	}
 
 	@Override
 	public String toString() {
 		return "cf:{" + startbit + "," + endbit + "," + startbyte + "," + endbyte + "," + shift +
-			"," + signbit + "}";
+			"," + signbit + "," + base + "}";
 	}
 
 	@Override
@@ -97,6 +103,7 @@ public class ContextField extends PatternValue {
 		encoder.writeSignedInteger(ATTRIB_STARTBYTE, startbyte);
 		encoder.writeSignedInteger(ATTRIB_ENDBYTE, endbyte);
 		encoder.writeSignedInteger(ATTRIB_SHIFT, shift);
+		encoder.writeSignedInteger(ATTRIB_BASE, base);
 		encoder.closeElement(ELEM_CONTEXTFIELD);
 	}
 
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/TokenField.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/TokenField.java
index c3ae656d5f..cfe6071976 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/TokenField.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/TokenField.java
@@ -33,6 +33,7 @@ public class TokenField extends PatternValue {
 	private int bitstart, bitend; // Bits within the token, 0 bit is LEAST signifigant
 	private int bytestart, byteend; // Bytes to read to get value
 	private int shift; // Amount to shift to align value (bitstart % 8)
+	private int base; // Display base
 
 	public TokenField(Location location) {
 		super(location);
@@ -56,13 +57,14 @@ public class TokenField extends PatternValue {
 		return res;
 	}
 
-	public TokenField(Location location, Token tk, boolean s, int bstart, int bend) {
+	public TokenField(Location location, Token tk, boolean s, int bstart, int bend, int tbase) {
 		super(location);
 		tok = tk;
 		bigendian = tok.isBigEndian();
 		signbit = s;
 		bitstart = bstart;
 		bitend = bend;
+		base = tbase;
 		if (tk.isBigEndian()) {
 			byteend = (tk.getSize() * 8 - bitstart - 1) / 8;
 			bytestart = (tk.getSize() * 8 - bitend - 1) / 8;
@@ -90,6 +92,7 @@ public class TokenField extends PatternValue {
 		encoder.writeSignedInteger(ATTRIB_STARTBYTE, bytestart);
 		encoder.writeSignedInteger(ATTRIB_ENDBYTE, byteend);
 		encoder.writeSignedInteger(ATTRIB_SHIFT, shift);
+		encoder.writeSignedInteger(ATTRIB_BASE, base);
 		encoder.closeElement(ELEM_TOKENFIELD);
 	}
 
diff --git a/GhidraDocs/languages/html/sleigh_tokens.html b/GhidraDocs/languages/html/sleigh_tokens.html
index 2ba08cdfa2..617ea520cf 100644
--- a/GhidraDocs/languages/html/sleigh_tokens.html
+++ b/GhidraDocs/languages/html/sleigh_tokens.html
@@ -79,6 +79,8 @@ keywords:
 signed
 hex
 dec
+bin
+oct
 </pre></div>
 <p>
 These attributes are defined in the next section. There can be any
@@ -104,11 +106,14 @@ The attributes of the field affect the resulting specific symbol in
 obvious ways. The <span class="bold"><strong>signed</strong></span> attribute
 determines whether the integer encoding should be treated as just an
 unsigned encoding or if a twos-complement encoding should be used to
-obtain a signed integer. The <span class="bold"><strong>hex</strong></span>
-or <span class="bold"><strong>dec</strong></span> attributes describe whether
-the integer should be displayed with a hexadecimal or decimal
-representation. The default is hexadecimal. [Currently
-the <span class="bold"><strong>dec</strong></span> attribute is not supported]
+obtain a signed integer. The <span class="bold"><strong>hex</strong></span>,
+<span class="bold"><strong>dec</strong></span>,
+<span class="bold"><strong>oct</strong></span> or
+<span class="bold"><strong>bin</strong></span> attributes describe which numeric
+base should be used to display the integer (respectively hexadecimal, decimal,
+octal or binary). The default is hexadecimal. [Currently
+the <span class="bold"><strong>oct</strong></span> and
+<span class="bold"><strong>bin</strong></span> attributes are not supported]
 </p>
 </div>
 <div class="sect2">
-- 
2.45.1

