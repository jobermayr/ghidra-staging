From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kkots <okknots@gmail.com>
Date: Mon, 15 Jul 2024 06:14:54 +0300
Subject: [PATCH] 6718: decompiler: fix loops with shifted structure offset

---
 .../src/decompile/cpp/blockaction.cc          |   1 +
 .../cpp/include/ghidra/ruleaction.hh          |   2 +
 .../src/decompile/cpp/ruleaction.cc           | 123 ++++++++++++++++++
 3 files changed, 126 insertions(+)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc
index 56626bf593..584ff2023b 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc
@@ -2076,6 +2076,7 @@ void ConditionalJoin::setupMultiequals(void)
     Varnode *outvn = data.newUniqueOut(vn1->getSize(),multi);
     data.opSetInput(multi,vn1,0);
     data.opSetInput(multi,vn2,1);
+    outvn->updateType(vn1->getType(), false, false);  // protect work done by RulePtrArith from being undone by RulePtraddUndo
     (*iter).second = outvn;
     data.opInsertEnd(multi,joinblock);
   }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/ruleaction.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/ruleaction.hh
index f3007a7060..d39703ce3b 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/ruleaction.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/ruleaction.hh
@@ -61,6 +61,7 @@ class AddTreeState {
   PcodeOp *distributeOp;	///< A CPUI_INT_MULT op that needs to be distributed
   uint8 multsum;		///< Sum of multiple constants
   uint8 nonmultsum;		///< Sum of non-multiple constants
+  vector<Varnode*> multiequalsToInspect;  ///< CPUI_MULTIEQUALs that might potentially lead to discovering the constant multiple being used
   bool preventDistribution;	///< Do not distribute "multiply by constant" operation
   bool isDistributeUsed;	///< Are terms produced by distributing used
   bool isSubtype;		///< Is there a sub-type (using CPUI_PTRSUB)
@@ -76,6 +77,7 @@ class AddTreeState {
   bool buildDegenerate(void);		///< Transform ADD into degenerate PTRADD
   void buildTree(void);			///< Build the transformed ADD tree
   void clear(void);			///< Reset for a new ADD tree traversal
+  bool inspectMultiequals(void);        ///< Check all potential CPUI_MULTIEQUALs in an attempt to transform the expression and find the multiple
 public:
   AddTreeState(Funcdata &d,PcodeOp *op,int4 slot);	///< Construct given root of ADD tree and pointer
   bool apply(void);		///< Attempt to transform the pointer expression
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
index 907bff0370..3f76589129 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
@@ -5793,6 +5793,7 @@ void AddTreeState::clear(void)
   multiple.clear();
   coeff.clear();
   nonmult.clear();
+  multiequalsToInspect.clear();
   correct = 0;
   offset = 0;
   valid = true;
@@ -6011,6 +6012,8 @@ bool AddTreeState::checkTerm(Varnode *vn,uint8 treeCoeff)
     }
     if (def->code() == CPUI_INT_MULT)	// Check for constant coeff indicating size
       return checkMultTerm(vn, def, treeCoeff);
+    if (treeCoeff == 1 && def->code() == CPUI_MULTIEQUAL)
+      multiequalsToInspect.push_back(vn);
   }
   else if (vn->isFree()) {
     valid = false;
@@ -6056,6 +6059,120 @@ bool AddTreeState::spanAddTree(PcodeOp *op,uint8 treeCoeff)
   return false;		// At least one of the sides contains multiples
 }
 
+// \brief Modify surrounding expressions in an attempt to recover the multiple
+//
+// For situations like this:
+// int sliding_offset = 0;  // or any constant divisible by element_size
+// // or int sliding_offset = something * element_size;
+// do {
+//   ... *(pointer_to_element + sliding_offset + optional_member_offset) ...
+//   sliding_offset += element_size;
+//   // or
+//   sliding_offset -= element_size;
+// } while (true);
+// , where element_size is the size of element pointed to by pointer_to_element
+//
+// It modifies expressions which set or write the sliding_offset variable
+// by dividing their constant by element_size, and applying * element_size
+// (multiplication by element_size) to all places where the sliding_offset is used instead.
+// This makes RulePtrArith more likely to recognize that the CPUI_INT_ADD expression
+// is actually a CPUI_PTRADD.
+// \return \b true if successful, \b false otherwise
+bool AddTreeState::inspectMultiequals(void) {
+  vector<Varnode *>::iterator iter;
+  for (iter = multiequalsToInspect.begin(); iter != multiequalsToInspect.end(); ++iter) {
+    Varnode *vn = *iter;
+    if (!vn->isWritten()) continue;
+    PcodeOp *op = vn->getDef();
+    if (op->code() != CPUI_MULTIEQUAL) continue;
+    if (op->numInput() != 2) continue;
+    Varnode *in1 = op->getIn(0);
+    if (!in1->isWritten() || in1->loneDescend() != op) continue;
+    PcodeOp *op1 = in1->getDef();
+    int4 op1Size = 0;
+    intb op1Val = 0;
+    int op1ReplacementSlot = 0;
+    if (op1->code() == CPUI_INT_MULT) {
+      Varnode *multTerm = op1->getIn(0);
+      if (multTerm->isFree()) continue;
+      Varnode *multConst = op1->getIn(1);
+      if (!multConst->isConstant()) continue;
+      uintb multval = multConst->getOffset() & ptrmask;
+      intb multsval = sign_extend(multval, in1->getSize() * 8 - 1);
+      intb multrem = multsval % size;
+      if (multrem != 0 || multsval == 0) continue;
+      op1Val = multsval;
+      op1ReplacementSlot = 1;
+      op1Size = multConst->getSize();
+    } else if (op1->code() == CPUI_COPY) {
+      Varnode *assignmentConst = op1->getIn(0);
+      if (!assignmentConst->isConstant() || op1->numInput() != 1) continue;
+      uintb assignval = assignmentConst->getOffset() & ptrmask;
+      intb assignsval = sign_extend(assignval, in1->getSize() * 8 - 1);
+      intb assignrem = assignsval % size;
+      if (assignrem != 0) continue;
+      op1Val = assignsval;
+      op1ReplacementSlot = 0;
+      op1Size = assignmentConst->getSize();
+    } else {
+      continue;
+    }
+    Varnode *in2 = op->getIn(1);
+    if (!in2->isWritten() || in2->loneDescend() != op) continue;
+    PcodeOp *op2 = in2->getDef();
+    if (op2->code() != CPUI_INT_ADD) continue;
+    Varnode *addTerm = op2->getIn(0);
+    if (addTerm != vn) continue;
+    Varnode *addConst = op2->getIn(1);
+    if (!addConst->isConstant()) continue;
+    uintb addval = addConst->getOffset() & ptrmask;
+    intb addsval = sign_extend(addval, in2->getSize() * 8 - 1);
+    intb addrem = addsval % size;
+    if (addrem != 0 || addsval == 0) continue;
+    intb op1multiplier = op1Val / size;
+    if (op1multiplier < 0) op1multiplier = -op1multiplier;
+    intb addmultiplier = addsval / size;
+    if (addmultiplier < 0) addmultiplier = -addmultiplier;
+    intb multiplier;
+    if (op1multiplier != 0 && addmultiplier != 0) {
+      while (addmultiplier != op1multiplier) {  // greatest common divisor: euclid's algorithm
+	if (addmultiplier > op1multiplier) {
+	  addmultiplier -= op1multiplier;
+	} else {
+	  op1multiplier -= addmultiplier;
+	}
+      }
+      multiplier = addmultiplier;
+    } else if (op1multiplier != 0) {
+      multiplier = op1multiplier;
+    } else if (addmultiplier != 0) {
+      multiplier = addmultiplier;
+    } else {
+      continue;
+    }
+    multiple.push_back(vn);
+    coeff.push_back(multiplier * size);
+    Varnode *newConstForOp1 = data.newConstant(op1Size, (op1Val / (size * multiplier)) & ptrmask);
+    data.opSetInput(op1, newConstForOp1, op1ReplacementSlot);
+    Varnode *newConstForAdd = data.newConstant(addConst->getSize(), (addsval / (size * multiplier)) & ptrmask);
+    data.opSetInput(op2, newConstForAdd, 1);
+    list<PcodeOp *>::const_iterator descendListIter;
+    vector<PcodeOp *> descendants;
+    for (descendListIter = vn->beginDescend(); descendListIter != vn->endDescend(); ++descendListIter) {
+      descendants.push_back(*descendListIter);
+    }
+    vector<PcodeOp *>::const_iterator descendIter;
+    for (descendIter = descendants.begin(); descendIter != descendants.end(); ++descendIter) {
+      PcodeOp *desc = *descendIter;
+      if (desc == op1 || desc == op2 || desc->code() == CPUI_INDIRECT) continue;
+      PcodeOp *newMultOp = data.newOpBefore(desc, CPUI_INT_MULT, vn, data.newConstant(addConst->getSize(), (multiplier * size) & ptrmask));
+      data.opSetInput(desc, newMultOp->getOut(), desc->getSlot(vn));
+    }
+    return true;
+  }
+  return false;
+}
+
 /// Make final calcultions to determine if a pointer to a sub data-type of the base
 /// data-type is being calculated, which will result in a CPUI_PTRSUB being generated.
 void AddTreeState::calcSubtype(void)
@@ -6236,6 +6353,12 @@ bool AddTreeState::apply(void)
     return buildDegenerate();
   spanAddTree(baseOp,1);
   if (!valid) return false;		// Were there any show stoppers
+  if (multiple.empty() && !multiequalsToInspect.empty() && size != 0) {
+    if (inspectMultiequals()) {
+      clear();
+      spanAddTree(baseOp,1);
+    }
+  }
   if (distributeOp != (PcodeOp *)0 && !isDistributeUsed) {
     clear();
     preventDistribution = true;
-- 
2.45.1

