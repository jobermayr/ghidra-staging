From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: nevesnunes <9061071+nevesnunes@users.noreply.github.com>
Date: Sun, 3 Sep 2023 15:40:55 +0100
Subject: [PATCH] 5740: Fix several bugs in 6502 ops

---
 .../6502/data/languages/6502.slaspec          | 81 +++++++++++--------
 .../6502/data/languages/65c02.slaspec         | 14 +---
 2 files changed, 49 insertions(+), 46 deletions(-)

diff --git a/Ghidra/Processors/6502/data/languages/6502.slaspec b/Ghidra/Processors/6502/data/languages/6502.slaspec
index d22f4785e..1025d1abc 100644
--- a/Ghidra/Processors/6502/data/languages/6502.slaspec
+++ b/Ghidra/Processors/6502/data/languages/6502.slaspec
@@ -44,7 +44,6 @@ macro popSR() {
 @ifdef MITSUBISHI_MELPS740
 	T = ccr[5,1];
 @endif
-	B = ccr[4,1];   # consider commenting out this B assignment
 	D = ccr[3,1];
 	I = ccr[2,1];
 	Z = ccr[1,1];
@@ -52,13 +51,12 @@ macro popSR() {
 }
 
 macro pushSR() {
-	local ccr:1 = 0xff;
+	local ccr:1 = 0xff;  # Break (B) flag and bit 5 set to 1
 	ccr[7,1] = N;
 	ccr[6,1] = V;
 @ifdef MITSUBISHI_MELPS740
 	ccr[5,1] = T;
 @endif
-	# ccr[4,1] = B;  # always set B flag to 1
 	ccr[3,1] = D;
 	ccr[2,1] = I;
 	ccr[1,1] = Z;
@@ -72,13 +70,12 @@ macro resultFlags(value) {
 	N = (value s< 0);
 }
 
-macro subtraction_flags1(register, operand, result) {
-	local complement_register = ~register;
-	
-	V = ( ((register & ~operand & ~result) | (complement_register & operand & result)) & 0b10000000 ) != 0;
-	N = (result s< 0);
-	Z = (result == 0);
-	C = ( ((complement_register & operand) | (operand & result) | (result & complement_register)) & 0b10000000 ) != 0;
+macro adc(op1) {
+    local result:2 = zext(A) + zext(op1) + zext(C);
+    resultFlags(result:1);
+    V = (~(A ^ op1) & (A ^ result:1) & 0x80) != 0;
+    C = (result & 0x100) != 0;
+    A = result:1;
 }
 
 
@@ -104,9 +101,28 @@ OP1: imm16,X    is bbb=7 & X; imm16		{ tmp:2 = imm16 + zext(X); export *:1 tmp;
 # Absolute Indexed Y
 OP1: imm16,Y    is bbb=6 & Y; imm16		{ tmp:2 = imm16 + zext(Y); export *:1 tmp; }
 # Indirect X
-OP1: (imm8,X)   is bbb=0 & X; imm8		{ addr:2 = zext(imm8 + X); tmp:2 = *:2 addr; export *:1 tmp; }
+OP1: (imm8,X)   is bbb=0 & X; imm8		{
+    # When the first (low) byte of address to load is 0xff,
+    # the second (high) byte to load is at 0x0000, not 0x0100
+    addr8_lo:1 = imm8 + X;
+    addr8_hi:1 = addr8_lo + 1;
+    addr16_lo:2 = zext(addr8_lo);
+    addr16_hi:2 = zext(addr8_hi);
+    tmp:2 = zext(*:1 addr16_hi) << 8 | zext(*:1 addr16_lo);
+    export *:1 tmp;
+}
 # Indirect Y
-OP1: (imm8),Y   is bbb=4 & Y; imm8		{ addr:2 = imm8; tmp:2 = *:2 addr; tmp = tmp + zext(Y); export *:1 tmp; }
+OP1: (imm8),Y   is bbb=4 & Y; imm8		{
+    # When the first (low) byte of address to load is 0xff,
+    # the second (high) byte to load is at 0x0000, not 0x0100
+    addr8_lo:1 = imm8;
+    addr8_hi:1 = addr8_lo + 1;
+    addr16_lo:2 = zext(addr8_lo);
+    addr16_hi:2 = zext(addr8_hi);
+    tmp:2 = zext(*:1 addr16_hi) << 8 | zext(*:1 addr16_lo);
+    tmp = tmp + zext(Y);
+    export *:1 tmp;
+}
 
 # Immediate
 OP2: "#"imm8    is bbb=0; imm8			{ tmp:1 = imm8; export tmp; }
@@ -130,7 +146,18 @@ OP2LD: imm16,Y  is bbb=7 & Y; imm16		{ tmp:2 = imm16 + zext(Y); export *:1 tmp;
 
 ADDR8:  imm8    is imm8		{ export *:1 imm8; }
 ADDR16: imm16   is imm16   	{ export *:1 imm16; }
-ADDRI:  (imm16)   is imm16    { tmp:2 = imm16; export *:2 tmp; }
+ADDRI:  (imm16)   is imm16    {
+    # With page given by high byte of imm16 (e.g. 0x01),
+    # when the first (low) byte of address to load is 0xff,
+    # the second (high) byte to load is at 0x0100, not 0x0200
+    addr8_lo:1 = imm16:1;
+    addr8_hi:1 = addr8_lo + 1;
+    page:2 = imm16 & 0xff00;
+    addr16_lo:2 = page | zext(addr8_lo);
+    addr16_hi:2 = page | zext(addr8_hi);
+    tmp:2 = zext(*:1 addr16_hi) << 8 | zext(*:1 addr16_lo);
+    export tmp;
+}
 
 
 # Instructions
@@ -138,15 +165,7 @@ ADDRI:  (imm16)   is imm16    { tmp:2 = imm16; export *:2 tmp; }
 
 :ADC OP1     is (cc=1 & aaa=3) ... & OP1
 {
-	local op1 = OP1;
-	local tmpC = C;
-	
-	C = carry(A, op1);
-	
-	A = A + op1 + tmpC;
-
-	resultFlags(A);
-	V = C;
+	adc(OP1);
 }
 
 :AND OP1     is (cc=1 & aaa=1) ... & OP1
@@ -324,8 +343,10 @@ ADDRI:  (imm16)   is imm16    { tmp:2 = imm16; export *:2 tmp; }
 
 :JSR   ADDR16    is op=0x20; ADDR16
 {
-	*:2 (SP-1) = inst_next;
-	SP=SP-2; 
+	# Value stored is actually the address before the location the program
+	# will eventually return to. Thus, the effective return address is PC + 1.
+	*:2 (SP-1) = inst_next - 1;
+	SP=SP-2;
 	call ADDR16;
 }
 
@@ -429,20 +450,12 @@ ADDRI:  (imm16)   is imm16    { tmp:2 = imm16; export *:2 tmp; }
 	tmp:2 = *:2 SP;
 	SP = SP+1;
 	
-	return [tmp];
+	return [tmp + 1];
 }
 
 :SBC OP1     is (cc=1 & aaa=7) ... & OP1
 {
-	local op1 = OP1;
-	local result = A - op1 - !C;
-	
-	subtraction_flags1(A, op1, result);
-	A = result;	
-	
-	# resultFlags(tmp);
-	# C = ((A <= op1) * C) | (A < op1);
-	# A = tmp;
+	adc(~OP1);
 }
 
 :SEC     is op=0x38
diff --git a/Ghidra/Processors/6502/data/languages/65c02.slaspec b/Ghidra/Processors/6502/data/languages/65c02.slaspec
index adb21eee5..ce51472c3 100644
--- a/Ghidra/Processors/6502/data/languages/65c02.slaspec
+++ b/Ghidra/Processors/6502/data/languages/65c02.slaspec
@@ -31,13 +31,7 @@ ADDRIX: (imm16,X) is X; imm16     { addr:2 = imm16 + zext(X); tmp:2 = *:2 addr;
 
 :ADC ZIOP                      is (cc=2 & aaa=3) ... & ZIOP
 {
-    local op1 = ZIOP;
-    local tmpC = C;
-
-    C = carry(A, op1);
-    A = A + op1 + tmpC;
-    resultFlags(A);
-    V = C;
+    adc(ZIOP);
 }
 
 :AND ZIOP                      is (cc=2 & aaa=1) ... & ZIOP
@@ -162,11 +156,7 @@ ADDRIX: (imm16,X) is X; imm16     { addr:2 = imm16 + zext(X); tmp:2 = *:2 addr;
 
 :SBC ZIOP                      is (cc=2 & aaa=7) ... & ZIOP
 {
-    local op1 = ZIOP;
-    local result = A - op1 - !C;
-
-    subtraction_flags1(A, op1, result);
-    A = result;
+    adc(~ZIOP);
 }
 
 :SMB "#"bitindex, imm8         is (action=1 & optype=7) & bitindex ; imm8 {
-- 
2.41.0

