From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: foralost <kombii4@gmail.com>
Date: Sun, 26 Feb 2023 22:28:51 +0100
Subject: [PATCH] 5037: getValueAsInt - Adjusting askInt method to accept only
 valid ints (like askLong)

getValueAsInt - Checking if parsed long is within Java Integer.INT range
getValueAsInt - Using the int copy of NumerUtilities.parseLong
AskDialog: Organize commits
---
 .../java/ghidra/app/script/AskDialog.java     | 104 ++++++++----------
 .../java/ghidra/util/NumericUtilities.java    |  48 ++++++++
 2 files changed, 96 insertions(+), 56 deletions(-)

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/script/AskDialog.java b/Ghidra/Features/Base/src/main/java/ghidra/app/script/AskDialog.java
index a89ce3495..ca4884c95 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/script/AskDialog.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/script/AskDialog.java
@@ -55,8 +55,8 @@ public class AskDialog<T> extends DialogComponentProvider {
 		this(parent, title, message, type, null, null);
 	}
 
-	public AskDialog(final Component parent, String title, String message, int type,
-			List<T> choices, Object defaultValue) {
+	public AskDialog(final Component parent, String title, String message, int type, List<T> choices,
+			Object defaultValue) {
 		super(title, true, true, true, false);
 
 		this.type = type;
@@ -80,13 +80,12 @@ public class AskDialog<T> extends DialogComponentProvider {
 
 		if (choices == null) {
 			textField = new JTextField(20);
-			textField.setName("JTextField");//for JUnits...
+			textField.setName("JTextField");// for JUnits...
 			textField.addKeyListener(keyListener);
 			textField.setText(defaultValue == null ? "" : defaultValue.toString());
 			textField.selectAll();
 			panel.add(textField, BorderLayout.CENTER);
-		}
-		else {
+		} else {
 			comboField = new GComboBox<>(choices.toArray(new Object[choices.size()]));
 			comboField.setEditable(false);
 			comboField.setName("JComboBox");
@@ -123,11 +122,10 @@ public class AskDialog<T> extends DialogComponentProvider {
 		Preferences.setProperty("Ask Dialog Bounds", buffer.toString());
 	}
 
-	@SuppressWarnings("unchecked")  // the type must be correct, as the values were passed in
+	@SuppressWarnings("unchecked") // the type must be correct, as the values were passed in
 	public T getChoiceValue() {
 		if (comboField == null) {
-			throw new IllegalStateException(
-				"Cannot call getChoiceValue() when using a " + "dialog without choices");
+			throw new IllegalStateException("Cannot call getChoiceValue() when using a " + "dialog without choices");
 		}
 
 		return (T) comboField.getSelectedItem();
@@ -136,7 +134,7 @@ public class AskDialog<T> extends DialogComponentProvider {
 	public String getTextFieldValue() {
 		if (textField == null) {
 			throw new IllegalStateException(
-				"Cannot call getTextFieldValue() when using a " + "dialog with multiple choices");
+					"Cannot call getTextFieldValue() when using a " + "dialog with multiple choices");
 		}
 		return textField.getText();
 	}
@@ -149,54 +147,50 @@ public class AskDialog<T> extends DialogComponentProvider {
 				setStatusText("Please make a selection from the pulldown choices.");
 				return;
 			}
-		}
-		else {
+		} else {
 			switch (type) {
-				case STRING: {
-					if (textField.getText().length() == 0) {
-						setStatusText("Please enter a valid STRING.");
-						return;
-					}
-					break;
+			case STRING: {
+				if (textField.getText().length() == 0) {
+					setStatusText("Please enter a valid STRING.");
+					return;
 				}
-				case INT: {
-					try {
-						getValueAsInt();
-					}
-					catch (Exception e) {
-						setStatusText("Please enter a valid INTEGER.");
-						return;
-					}
-					break;
+				break;
+			}
+			case INT: {
+				try {
+					getValueAsInt();
+				} catch (Exception e) {
+					setStatusText("Please enter a valid INTEGER.");
+					return;
 				}
-				case LONG: {
-					try {
-						getValueAsLong();
-					}
-					catch (Exception e) {
-						setStatusText("Please enter a valid LONG.");
-						return;
-					}
-					break;
+				break;
+			}
+			case LONG: {
+				try {
+					getValueAsLong();
+				} catch (Exception e) {
+					setStatusText("Please enter a valid LONG.");
+					return;
 				}
-				case DOUBLE: {
-					try {
-						getValueAsDouble();
-					}
-					catch (Exception e) {
-						setStatusText("Please enter a valid DOUBLE.");
-						return;
-					}
-					break;
+				break;
+			}
+			case DOUBLE: {
+				try {
+					getValueAsDouble();
+				} catch (Exception e) {
+					setStatusText("Please enter a valid DOUBLE.");
+					return;
 				}
-				case BYTES: {
+				break;
+			}
+			case BYTES: {
 
-					if (!isValidBytePattern()) {
-						setStatusText("Please enter a valid BYTE PATTERN separated by spaces.");
-						return;
-					}
-					break;
+				if (!isValidBytePattern()) {
+					setStatusText("Please enter a valid BYTE PATTERN separated by spaces.");
+					return;
 				}
+				break;
+			}
 			}
 		}
 		saveCurrentDimensions();
@@ -212,8 +206,7 @@ public class AskDialog<T> extends DialogComponentProvider {
 		try {
 			NumericUtilities.convertStringToBytes(text);
 			return true;
-		}
-		catch (Exception e) {
+		} catch (Exception e) {
 			return false;
 		}
 	}
@@ -246,13 +239,12 @@ public class AskDialog<T> extends DialogComponentProvider {
 
 	protected Integer getValueAsInt() {
 		String text = getValueAsString();
+
 		if (text == null) {
 			return null;
 		}
-		if (text.startsWith("0x")) {
-			return (int) NumericUtilities.parseHexLong(text);
-		}
-		return (int) NumericUtilities.parseLong(text);
+
+		return NumericUtilities.parseInt(text);
 	}
 
 	protected Long getValueAsLong() {
diff --git a/Ghidra/Framework/Generic/src/main/java/ghidra/util/NumericUtilities.java b/Ghidra/Framework/Generic/src/main/java/ghidra/util/NumericUtilities.java
index de9f07888..79b3b7252 100644
--- a/Ghidra/Framework/Generic/src/main/java/ghidra/util/NumericUtilities.java
+++ b/Ghidra/Framework/Generic/src/main/java/ghidra/util/NumericUtilities.java
@@ -97,6 +97,54 @@ public final class NumericUtilities {
 		return value;
 	}
 
+	/**
+	 * Parses the given string as a numeric value, detecting whether or not it begins with a hex
+	 * prefix, and if not, parses as a int value.
+	 * @param s the string to parse
+	 * @return the int value
+	 * @throws NumberFormatException if the string is blank or has too many digits
+	 */
+	public static int parseInt(String s) {
+		String origStr = s;
+		int value = 0;
+		int sign = 1;
+
+		s = (s == null ? "" : s.trim());
+		if (s.length() == 0) {
+			return value;
+		}
+		if (s.startsWith("-")) {
+			sign = -1;
+			s = s.substring(1);
+		}
+		int radix = 10;
+
+		if (s.startsWith(HEX_PREFIX_x) || s.startsWith(HEX_PREFIX_X)) {
+			if (s.length() > 10) {
+				throw new NumberFormatException(s + " has too many digits.");
+			}
+			s = s.substring(2);
+			radix = 16;
+		}
+		if (s.length() == 0) {
+			return 0;
+		}
+		try {
+			BigInteger bi = new BigInteger(s, radix);
+			return bi.intValue() * sign;
+		}
+		catch (NumberFormatException e) {
+			// A little hacky, but the message should be complete and report the original string
+			NumberFormatException e2 =
+				new NumberFormatException("Cannot parse int from " + origStr);
+			e2.setStackTrace(e.getStackTrace());
+			throw e2;
+		}
+		catch (ArithmeticException e) {
+			throw new NumberFormatException(origStr + " is too big.");
+		}
+	}
+
 	/**
 	 * Parses the given string as a numeric value, detecting whether or not it begins with a hex
 	 * prefix, and if not, parses as a long int value.
-- 
2.43.0

