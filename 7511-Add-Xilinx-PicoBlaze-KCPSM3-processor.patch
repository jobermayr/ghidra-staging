From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: CUB3D <callumthom11@gmail.com>
Date: Sat, 15 Feb 2025 21:21:36 +0000
Subject: [PATCH] 7511: Add Xilinx PicoBlaze KCPSM3 processor

Add PicoBlaze
---
 Ghidra/Processors/PicoBlaze/Module.manifest   |   0
 Ghidra/Processors/PicoBlaze/README.md         |   1 +
 Ghidra/Processors/PicoBlaze/build.gradle      |  20 +
 .../PicoBlaze/certification.manifest          |   8 +
 .../PicoBlaze/data/buildLanguage.xml          |  50 +++
 .../PicoBlaze/data/languages/KCPSM3.cspec     |  17 +
 .../PicoBlaze/data/languages/KCPSM3.pspec     |   9 +
 .../PicoBlaze/data/languages/KCPSM3.slaspec   | 392 ++++++++++++++++++
 .../PicoBlaze/data/languages/picoblaze.ldefs  |  17 +
 .../Processors/PicoBlaze/data/sleighArgs.txt  |   6 +
 10 files changed, 520 insertions(+)
 create mode 100644 Ghidra/Processors/PicoBlaze/Module.manifest
 create mode 100644 Ghidra/Processors/PicoBlaze/README.md
 create mode 100644 Ghidra/Processors/PicoBlaze/build.gradle
 create mode 100644 Ghidra/Processors/PicoBlaze/certification.manifest
 create mode 100644 Ghidra/Processors/PicoBlaze/data/buildLanguage.xml
 create mode 100644 Ghidra/Processors/PicoBlaze/data/languages/KCPSM3.cspec
 create mode 100644 Ghidra/Processors/PicoBlaze/data/languages/KCPSM3.pspec
 create mode 100644 Ghidra/Processors/PicoBlaze/data/languages/KCPSM3.slaspec
 create mode 100644 Ghidra/Processors/PicoBlaze/data/languages/picoblaze.ldefs
 create mode 100644 Ghidra/Processors/PicoBlaze/data/sleighArgs.txt

diff --git a/Ghidra/Processors/PicoBlaze/Module.manifest b/Ghidra/Processors/PicoBlaze/Module.manifest
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/Ghidra/Processors/PicoBlaze/README.md b/Ghidra/Processors/PicoBlaze/README.md
new file mode 100644
index 0000000000..55d8a320d6
--- /dev/null
+++ b/Ghidra/Processors/PicoBlaze/README.md
@@ -0,0 +1 @@
+# PicoBlaze
diff --git a/Ghidra/Processors/PicoBlaze/build.gradle b/Ghidra/Processors/PicoBlaze/build.gradle
new file mode 100644
index 0000000000..66c190bf6b
--- /dev/null
+++ b/Ghidra/Processors/PicoBlaze/build.gradle
@@ -0,0 +1,20 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+apply from: "$rootProject.projectDir/gradle/distributableGhidraModule.gradle"
+apply from: "$rootProject.projectDir/gradle/processorProject.gradle"
+apply plugin: 'eclipse'
+
+eclipse.project.name = 'Processors PicoBlaze'
diff --git a/Ghidra/Processors/PicoBlaze/certification.manifest b/Ghidra/Processors/PicoBlaze/certification.manifest
new file mode 100644
index 0000000000..4edccc996c
--- /dev/null
+++ b/Ghidra/Processors/PicoBlaze/certification.manifest
@@ -0,0 +1,8 @@
+Module.manifest||GHIDRA||||END|
+README.md||GHIDRA||||END|
+data/buildLanguage.xml||GHIDRA||||END|
+data/sleighArgs.txt||GHIDRA||||END|
+data/languages/picoblaze.ldefs||GHIDRA||||END|
+data/languages/KCPSM3.slaspec||GHIDRA||||END|
+data/languages/KCPSM3.pspec||GHIDRA||||END|
+data/languages/KCPSM3.cspec||GHIDRA||||END|
diff --git a/Ghidra/Processors/PicoBlaze/data/buildLanguage.xml b/Ghidra/Processors/PicoBlaze/data/buildLanguage.xml
new file mode 100644
index 0000000000..74a29faf79
--- /dev/null
+++ b/Ghidra/Processors/PicoBlaze/data/buildLanguage.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  + Compile sleigh languages within this module.
+  + Sleigh compiler options are read from the sleighArgs.txt file.
+  + Eclipse: right-click on this file and choose menu item "Run As->Ant Build"
+  -->
+
+<project name="privateBuildDeveloper" default="sleighCompile">
+
+	<property name="sleigh.compile.class" value="ghidra.pcodeCPort.slgh_compile.SleighCompile"/>
+
+	<!--Import optional ant properties.  GhidraDev Eclipse plugin produces this so this file can find the Ghidra installation-->
+	<import file="../.antProperties.xml" optional="false" />
+
+	<target name="sleighCompile">
+
+		<!-- If language module is detached from installation, get Ghidra installation directory path from imported properties -->
+		<property name="framework.path" value="${ghidra.install.dir}/Ghidra/Framework"/>
+
+		<path id="sleigh.class.path">
+			<fileset dir="${framework.path}/SoftwareModeling/lib">
+				<include name="*.jar"/>
+			</fileset>
+			<fileset dir="${framework.path}/Generic/lib">
+				<include name="*.jar"/>
+			</fileset>
+			<fileset dir="${framework.path}/Utility/lib">
+				<include name="*.jar"/>
+			</fileset>
+		</path>
+
+		<available classname="${sleigh.compile.class}" classpathref="sleigh.class.path" property="sleigh.compile.exists"/>
+
+		<fail unless="sleigh.compile.exists" />
+
+		<java classname="${sleigh.compile.class}"
+			classpathref="sleigh.class.path"
+			fork="true"
+			failonerror="true">
+			<jvmarg value="-Xmx2048M"/>
+			<arg value="-i"/>
+			<arg value="sleighArgs.txt"/>
+			<arg value="-a"/>
+			<arg value="./languages"/>
+		</java>
+
+	</target>
+
+</project>
diff --git a/Ghidra/Processors/PicoBlaze/data/languages/KCPSM3.cspec b/Ghidra/Processors/PicoBlaze/data/languages/KCPSM3.cspec
new file mode 100644
index 0000000000..248cad321e
--- /dev/null
+++ b/Ghidra/Processors/PicoBlaze/data/languages/KCPSM3.cspec
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<compiler_spec>
+  <global>
+    <range space="rom"/>
+  </global>
+  <stackpointer register="SP" space="stack_buffer"/>
+
+  <default_proto>
+    <prototype name="__stdcall" extrapop="0" stackshift="0" strategy="register">
+      <input>
+      </input>
+      <output>
+      </output>
+    </prototype>
+  </default_proto>
+</compiler_spec>
diff --git a/Ghidra/Processors/PicoBlaze/data/languages/KCPSM3.pspec b/Ghidra/Processors/PicoBlaze/data/languages/KCPSM3.pspec
new file mode 100644
index 0000000000..4bcf8877de
--- /dev/null
+++ b/Ghidra/Processors/PicoBlaze/data/languages/KCPSM3.pspec
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<processor_spec>
+  <default_symbols>
+    <symbol name="entry" address="rom:0000" entry="true"/>
+    <!-- 0x3FF * 3 -->
+    <symbol name="ISR" address="rom:0xBDF"/>
+  </default_symbols>
+</processor_spec>
diff --git a/Ghidra/Processors/PicoBlaze/data/languages/KCPSM3.slaspec b/Ghidra/Processors/PicoBlaze/data/languages/KCPSM3.slaspec
new file mode 100644
index 0000000000..cfc053996f
--- /dev/null
+++ b/Ghidra/Processors/PicoBlaze/data/languages/KCPSM3.slaspec
@@ -0,0 +1,392 @@
+# Specification for the PicoBlaze KCPSM3 processor
+
+# Known differences from actual KCPSM3:
+# - PC should be a 10-bit value with wraparound, Ghidra cannot handle non byte-aligned space sizes
+
+define endian=big;
+define alignment=3;
+
+# This should be rom_space but thats not actually supported in the sleigh compiler
+define space rom            type=ram_space      size=3   wordsize=1 default;
+define space scratchpad     type=ram_space      size=1   wordsize=1;
+define space stack_buffer   type=ram_space      size=1   wordsize=1;
+define space register       type=register_space size=1;
+
+
+define token opcode(24)
+	op0_17 = (0, 17)
+
+	op6_7 = (6,7)
+	op3_7 = (3,7)
+	op0_9 = (0,9)
+	op0_7 = (0,7)
+	op0_5 = (0,5)
+	op0_3 = (0,3)
+	op0_2 = (0,2)
+	op12_17 = (12, 17)
+	op10_11 = (10, 11)
+	op12 = (12, 12)
+	op13_17 = (13, 17)
+
+	reg8_11 = (8, 11)
+	reg4_7 = (4, 7)
+;
+
+define register offset=0x00 size=1 [
+	s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sA sB sC sD sE sF
+    SP
+    flags
+];
+
+define bitrange Z=flags[0,1]
+                C=flags[1,1]
+;
+
+attach variables [ reg8_11 reg4_7 ] [
+	s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sA sB sC sD sE sF
+];
+
+define pcodeop enable_interrupt;
+define pcodeop disable_interrupt;
+
+macro push(v) {
+    *[stack_buffer]:2 SP = v;
+    SP = (SP + 1) % 32;
+}
+
+# JUMP
+
+jtgt: tgt is op0_9 [ tgt = op0_9 * 3; ] {
+    local addr:3 = tgt;
+    export addr;
+}
+
+# Conditional
+with jcond: op12=1 {
+    :"Z"  is op10_11=0b00 {
+        local v:1 = Z == 0;
+        export v;
+    }
+    :"NZ"  is op10_11=0b01 {
+        local v:1 = Z != 0;
+        export v;
+    }
+    :"C"  is op10_11=0b10 {
+        local v:1 = C == 0;
+        export v;
+    }
+    :"NC" is op10_11=0b11 {
+        local v:1 = C != 0;
+        export v;
+    }
+}
+
+:"JUMP " jcond, jtgt is op13_17=0b11010 & jcond & jtgt {
+    if(jcond == 0) goto <end>;
+    goto [jtgt];
+    <end>
+}
+# Unconditional
+:"JUMP " jtgt is op13_17=0b11010 & op12=0 & jtgt {
+    goto [jtgt];
+}
+
+# CALL
+
+:"CALL " jcond, jtgt is op13_17=0b11000 & jcond & jtgt {
+    if(jcond == 0) goto <end>;
+    local tmp:2 = inst_start;
+    push(tmp);
+    call [jtgt];
+    <end>
+}
+# Unconditional
+:"CALL " jtgt is op13_17=0b11000 & op12=0 & jtgt {
+    local tmp:2 = inst_start;
+    push(tmp);
+    call [jtgt];
+}
+
+# RETURN
+
+:"RETURN " jcond  is op13_17=0b10101 & jcond & op0_9=0 {
+    if(jcond == 0) goto <end>;
+        SP = (SP - 1) % 32;
+        local tmp:2 = *[stack_buffer]:2 SP;
+        tmp = tmp + 3;
+        return [tmp];
+    <end>
+}
+# Unconditional
+:"RETURN" is op13_17=0b10101 & op12=0 & op0_9=0 {
+    SP = (SP - 1) % 32;
+    local tmp:2 = *[stack_buffer]:2 SP;
+    tmp = tmp + 3;
+    return [tmp];
+}
+
+# RETURNI
+
+:"RETURNI_ENABLE "  is op0_17=0b111000000000000001 {
+    SP = (SP - 1) % 32;
+    local tmp:2 = *[stack_buffer]:2 SP;
+    enable_interrupt();
+    return [tmp];
+}
+
+:"RETURNI_DISABLE "  is op0_17=0b111000000000000000 {
+    SP = (SP - 1) % 32;
+    local tmp:2 = *[stack_buffer]:2 SP;
+    disable_interrupt();
+    return [tmp];
+}
+
+# ENABLE/DISABLE INTERRUPT
+
+
+:ENABLE_INTERRUPT is op0_17=0b111100000000000001 {
+    enable_interrupt();
+}
+
+:DISABLE_INTERRUPT is op0_17=0b111100000000000000 {
+    disable_interrupt();
+}
+
+macro update_flags(v) {
+    C = 0;
+    Z = (v == 0);
+}
+
+# LOAD
+
+:LOAD reg8_11,op0_7 is op12_17=0b000000 & reg8_11 & op0_7 {
+	reg8_11 = op0_7;
+}
+
+:LOAD reg8_11,reg4_7 is op12_17=0b000001 & reg8_11 & reg4_7 & op0_3=0b0000 {
+	reg8_11 = reg4_7;
+}
+
+# AND
+
+:AND reg8_11,op0_7 is op12_17=0b001010 & reg8_11 & op0_7 {
+	reg8_11 = reg8_11 & op0_7;
+    update_flags(reg8_11);
+}
+
+:AND reg8_11,reg4_7 is op12_17=0b001011 & reg8_11 & reg4_7 & op0_3=0b0000 {
+	reg8_11 = reg8_11 & reg4_7;
+    update_flags(reg8_11);
+}
+
+# OR
+
+:OR reg8_11,op0_7 is op12_17=0b001100 & reg8_11 & op0_7 {
+	reg8_11 = reg8_11 | op0_7;
+    update_flags(reg8_11);
+}
+
+:OR reg8_11,reg4_7 is op12_17=0b001101 & reg8_11 & reg4_7 & op0_3=0b0000 {
+	reg8_11 = reg8_11 | reg4_7;
+    update_flags(reg8_11);
+}
+
+# XOR
+
+:XOR reg8_11,op0_7 is op12_17=0b001110 & reg8_11 & op0_7 {
+	reg8_11 = reg8_11 ^ op0_7;
+    update_flags(reg8_11);
+}
+
+:XOR reg8_11,reg4_7 is op12_17=0b001111 & reg8_11 & reg4_7 & op0_3=0b0000 {
+	reg8_11 = reg8_11 ^ reg4_7;
+    update_flags(reg8_11);
+}
+
+# TEST
+define pcodeop odd_parity;
+
+:TEST reg8_11,op0_7 is op12_17=0b010010 & reg8_11 & op0_7 {
+	local tmp:1 = reg8_11 & op0_7;
+    Z = tmp == 0;
+    C = odd_parity(tmp);
+}
+
+:TEST reg8_11,reg4_7 is op12_17=0b010010 & reg8_11 & reg4_7 & op0_3=0b0000 {
+	local tmp:1 = reg8_11 & reg4_7;
+    Z = tmp == 0;
+    C = odd_parity(tmp);
+}
+
+# ADD
+
+:ADD reg8_11,op0_7 is op12_17=0b011000 & reg8_11 & op0_7 {
+	reg8_11 = reg8_11 + op0_7;
+    C = carry(reg8_11, op0_7);
+    Z = (reg8_11 == 0);
+}
+
+:ADD reg8_11,reg4_7 is op12_17=0b011001 & reg8_11 & reg4_7 & op0_3=0b0000 {
+	reg8_11 = reg8_11 + reg4_7;
+    C = carry(reg8_11, reg4_7);
+    Z = (reg8_11 == 0);
+}
+
+# ADDCY
+
+:ADDCY reg8_11,op0_7 is op12_17=0b011010 & reg8_11 & op0_7 {
+    local tmp:1 = reg8_11 + op0_7;
+	reg8_11 = reg8_11 + op0_7 + C;
+    C = carry(reg8_11, op0_7) || carry(tmp, C);
+    Z = (reg8_11 == 0);
+}
+
+:ADDCY reg8_11,reg4_7 is op12_17=0b011010 & reg8_11 & reg4_7 & op0_3=0b0000 {
+    local tmp:1 = reg8_11 + reg4_7;
+	reg8_11 = reg8_11 + reg4_7 + C;
+    C = carry(reg8_11, reg4_7) || carry(tmp, C);
+    Z = (reg8_11 == 0);
+}
+
+# SUB
+
+:SUB reg8_11,op0_7 is op12_17=0b011100 & reg8_11 & op0_7 {
+	reg8_11 = reg8_11 - op0_7;
+    C = reg8_11 < op0_7;
+    Z = reg8_11 == 0;
+}
+
+:SUB reg8_11,reg4_7 is op12_17=0b011100 & reg8_11 & reg4_7 & op0_3=0b0000 {
+	reg8_11 = reg8_11 - reg4_7;
+    C = reg8_11 < reg4_7;
+    Z = reg8_11 == 0;
+}
+
+# SUBCY
+
+:SUBCY reg8_11,op0_7 is op12_17=0b011110 & reg8_11 & op0_7 {
+    local tmp:1 = reg8_11 - op0_7;
+	reg8_11 = reg8_11 - op0_7 - C;
+    C = reg8_11 < op0_7 || tmp < C;
+    Z = (reg8_11 == 0);
+}
+
+:SUBCY reg8_11,reg4_7 is op12_17=0b011111 & reg8_11 & reg4_7 & op0_3=0b0000 {
+    local tmp:1 = reg8_11 - reg4_7;
+	reg8_11 = reg8_11 - reg4_7 - C;
+    C = reg8_11 < reg4_7 || tmp < C;
+    Z = (reg8_11 == 0);
+}
+
+# COMPARE
+
+:COMPARE reg8_11,op0_7 is op12_17=0b010100 & reg8_11 & op0_7 {
+    Z = (reg8_11 == op0_7);
+    C = (reg8_11 < op0_7);
+}
+
+:COMPARE reg8_11,reg4_7 is op12_17=0b010101 & reg8_11 & reg4_7 & op0_3=0b0000 {
+    Z = (reg8_11 == reg4_7);
+    C = (reg8_11 < reg4_7);
+}
+
+# SR0 / SR1 / SRX / SRA / RR
+
+:SR0 reg8_11 is op12_17=0b100000 & reg8_11 & op3_7=0b00001 & op0_2=0b110 {
+    C = reg8_11 & 1;
+    reg8_11 = reg8_11 >> 1;
+    Z = reg8_11 == 0;
+}
+:SR1 reg8_11 is op12_17=0b100000 & reg8_11 & op3_7=0b00001 & op0_2=0b111 {
+    Z = 0;
+    C = reg8_11 & 1;
+    reg8_11 = (0b10000000 | ( reg8_11 >> 1));
+}
+:SRX reg8_11 is op12_17=0b100000 & reg8_11 & op3_7=0b00001 & op0_2=0b010 {
+    C = reg8_11 & 1;
+    reg8_11 = (( reg8_11 & 0b10000000) | ( reg8_11 >> 1));
+    Z = reg8_11 == 0;
+}
+:SRA reg8_11 is op12_17=0b100000 & reg8_11 & op3_7=0b00001 & op0_2=0b000 {
+    local tmp:1 = reg8_11 & 1;
+    reg8_11 = (( C << 7) | ( reg8_11 >> 1));
+    C = tmp;
+    Z = reg8_11 == 0;
+}
+:RR reg8_11 is op12_17=0b100000 & reg8_11 & op3_7=0b00001 & op0_2=0b100 {
+    C = reg8_11 & 1;
+    reg8_11 = (( C << 7) | ( reg8_11 >> 1));
+    Z = reg8_11 == 0;
+}
+
+# SL0 / SL1 / SLX / SLA / RL
+:SL0 reg8_11 is op12_17=0b100000 & reg8_11 & op3_7=0b00000 & op0_2=0b110 {
+    C = reg8_11 >> 7;
+    reg8_11 = reg8_11 << 1;
+    Z = reg8_11 == 0;
+}
+:SL1 reg8_11 is op12_17=0b100000 & reg8_11 & op3_7=0b00000 & op0_2=0b111 {
+    Z = 0;
+    C = reg8_11 >> 7;
+    reg8_11 = (1 | ( reg8_11 << 1));
+}
+:SLX reg8_11 is op12_17=0b100000 & reg8_11 & op3_7=0b00000 & op0_2=0b010 {
+    C = reg8_11 >> 7;
+    reg8_11 = (( reg8_11 & 1) | ( reg8_11 << 1));
+    Z = reg8_11 == 0;
+}
+:SLA reg8_11 is op12_17=0b100000 & reg8_11 & op3_7=0b00000 & op0_2=0b000 {
+    local tmp:1 = reg8_11 >> 7;
+    reg8_11 = ( C | ( reg8_11 << 1));
+    C = tmp;
+    Z = reg8_11 == 0;
+}
+:RL reg8_11 is op12_17=0b100000 & reg8_11 & op3_7=0b00000 & op0_2=0b100 {
+    C = reg8_11 >> 7;
+    reg8_11 = (( C ) | ( reg8_11 << 1));
+    Z = reg8_11 == 0;
+}
+
+# OUTPUT
+
+define pcodeop output;
+
+:OUTPUT reg8_11,op0_7 is op12_17=0b101100 & reg8_11 & op0_7 {
+    output(reg8_11, op0_7:1);
+}
+
+:OUTPUT reg8_11,reg4_7 is op12_17=0b101101 & reg8_11 & reg4_7 & op0_3=0b0000 {
+    output(reg8_11, reg4_7);
+}
+
+# INPUT
+
+define pcodeop input;
+
+:INPUT reg8_11,op0_7 is op12_17=0b000100 & reg8_11 & op0_7 {
+    reg8_11 = input(op0_7:1);
+}
+
+:INPUT reg8_11,reg4_7 is op12_17=0b000101 & reg8_11 & reg4_7 & op0_3=0b0000 {
+    reg8_11 = input(reg4_7);
+}
+
+# STORE
+
+:STORE reg8_11,op0_5 is op12_17=0b101110 & reg8_11 & op6_7=0 & op0_5 {
+    *[scratchpad]:1 op0_5:1 = reg8_11;
+}
+
+:STORE reg8_11,reg4_7 is op12_17=0b101111 & reg8_11 & reg4_7 & op0_3=0b0000 {
+    *[scratchpad]:1 reg4_7 = reg8_11;
+}
+
+# FETCH
+
+:FETCH reg8_11,op0_5 is op12_17=0b000110 & reg8_11 & op6_7=0 & op0_5 {
+    reg8_11 = *[scratchpad]:1 op0_5:1;
+}
+
+:FETCH reg8_11,reg4_7 is op12_17=0b000111 & reg8_11 & reg4_7 & op0_3=0b0000 {
+    reg8_11 = *[scratchpad]:1 reg4_7;
+}
diff --git a/Ghidra/Processors/PicoBlaze/data/languages/picoblaze.ldefs b/Ghidra/Processors/PicoBlaze/data/languages/picoblaze.ldefs
new file mode 100644
index 0000000000..65e52a9201
--- /dev/null
+++ b/Ghidra/Processors/PicoBlaze/data/languages/picoblaze.ldefs
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+
+<language_definitions>
+
+   <language processor="Xilinx PicoBlaze"
+            endian="big"
+            size="24"
+            variant="KCPSM3"
+            version="1.0"
+            slafile="KCPSM3.sla"
+            processorspec="KCPSM3.pspec"
+            id="KCPSM3:LE:24:default">
+    <description>PicoBlaze KCPSM3</description>
+    <compiler name="default" spec="KCPSM3.cspec" id="default"/>
+  </language>
+</language_definitions>
diff --git a/Ghidra/Processors/PicoBlaze/data/sleighArgs.txt b/Ghidra/Processors/PicoBlaze/data/sleighArgs.txt
new file mode 100644
index 0000000000..ce06926358
--- /dev/null
+++ b/Ghidra/Processors/PicoBlaze/data/sleighArgs.txt
@@ -0,0 +1,6 @@
+# Add sleigh compiler options to this file (one per line) which will
+# be used when compiling each language within this module.
+# All options should start with a '-' character.
+#
+# IMPORTANT: The -a option should NOT be specified
+#
\ No newline at end of file
-- 
2.45.1

