From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Eric Lee <erhlee.bird@gmail.com>
Date: Tue, 15 Feb 2022 10:54:19 -0500
Subject: [PATCH] 4001: Update CodeBlockReferenceIterator to be Iterable

make sure CodeBlockReferenceIterator passes unit test checks
---
 .../block/CodeBlockReferenceIterator.java     | 60 +++++++++++++++----
 1 file changed, 50 insertions(+), 10 deletions(-)

diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/block/CodeBlockReferenceIterator.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/block/CodeBlockReferenceIterator.java
index e33e1499e..a14cadcde 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/block/CodeBlockReferenceIterator.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/block/CodeBlockReferenceIterator.java
@@ -16,24 +16,64 @@
  */
 package ghidra.program.model.block;
 
+import java.util.Iterator;
+
 import ghidra.util.exception.CancelledException;
+import ghidra.util.task.TaskMonitor;
+import util.CollectionUtils;
 
 /**
  * An iterator interface over CodeBlockReferences.
+ *
+ * <P>Note: this iterator is also {@link Iterable}.  The {@link #hasNext()} and {@link #next()}
+ * methods of this interface throw a {@link CancelledException} if the monitor is cancelled.  The
+ * iterator returned from {@link #iterator()} does <b>not</b> throw a cancelled exception.  If
+ * you need to know the cancelled state of this iterator, then you must check the cancelled state
+ * of the monitor passed into this iterator via the {@link CodeBlockModel}.  See
+ * {@link TaskMonitor#isCancelled()}.
+ *
  * @see ghidra.program.model.block.CodeBlockReference
+ * @see CollectionUtils#asIterable
  */
-public interface CodeBlockReferenceIterator {
+public interface CodeBlockReferenceIterator extends Iterable<CodeBlockReference> {
 
-    /**
-     * Return true if next() will return a CodeBlockReference.
-     * @throws CancelledException thrown if the operation is cancelled.
-     */
+	/**
+	 * Return true if next() will return a CodeBlockReference.
+	 * @return true if next() will return a CodeBlockReference.
+	 * @throws CancelledException thrown if the operation is cancelled.
+	 */
 	public boolean hasNext() throws CancelledException;
 
-    /**
-     * Return the next CodeBlockReference.
-     * @throws CancelledException thrown if the operation is cancelled.
-     */
-    public CodeBlockReference next() throws CancelledException;
+	/**
+	 * Return the next CodeBlockReference.
+	 * @return the next CodeBlockReference.
+	 * @throws CancelledException thrown if the operation is cancelled.
+	 */
+	public CodeBlockReference next() throws CancelledException;
+
+	@Override
+	default Iterator<CodeBlockReference> iterator() {
+		return new Iterator<>() {
+			@Override
+			public boolean hasNext() {
+				try {
+					return CodeBlockReferenceIterator.this.hasNext();
+				}
+				catch (CancelledException e) {
+					return false;
+				}
+			}
+
+			@Override
+			public CodeBlockReference next() {
+				try {
+					return CodeBlockReferenceIterator.this.next();
+				}
+				catch (CancelledException e) {
+					return null;
+				}
+			}
+		};
+	}
 }
 
-- 
2.43.0

