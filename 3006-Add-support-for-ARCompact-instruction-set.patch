From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nicolas Iooss <nicolas.iooss@ledger.fr>
Date: Wed, 5 May 2021 17:17:48 +0200
Subject: [PATCH] 3006: Add support for ARCompact instruction set

ARCompact is the instruction set which was used in some versions of
Intel's Management Engine, in some versions of Lenovo's Thinkpad
Embedded Controller and some versions of Intel's Wireless-AC chips.

This commit squashed commits from the initial submission on
https://github.com/NationalSecurityAgency/ghidra/pull/3006.

The full history is still available on
https://github.com/niooss-ledger/ghidra/compare/27fbe7278d08a84aedeaa05f821275ca05ce509f...arcompact_on_9.1.2
---
 .../SleighDevTools/pcodetest/pcode_defs.py    |    8 +
 Ghidra/Processors/ARC/Module.manifest         |    0
 Ghidra/Processors/ARC/build.gradle            |   26 +
 .../ARC/data/languages/ARCompact.cspec        |  157 ++
 .../ARC/data/languages/ARCompact.dwarf        |   19 +
 .../ARC/data/languages/ARCompact.ldefs        |   17 +
 .../ARC/data/languages/ARCompact.opinion      |    5 +
 .../ARC/data/languages/ARCompact.pspec        |  290 ++
 .../ARC/data/languages/ARCompact.slaspec      | 2332 +++++++++++++++++
 ...ompactEmulateInstructionStateModifier.java |   68 +
 .../processors/ARC700_O0_EmulatorTest.java    |   40 +
 .../processors/ARC700_O3_EmulatorTest.java    |   40 +
 12 files changed, 3002 insertions(+)
 create mode 100644 Ghidra/Processors/ARC/Module.manifest
 create mode 100644 Ghidra/Processors/ARC/build.gradle
 create mode 100644 Ghidra/Processors/ARC/data/languages/ARCompact.cspec
 create mode 100644 Ghidra/Processors/ARC/data/languages/ARCompact.dwarf
 create mode 100644 Ghidra/Processors/ARC/data/languages/ARCompact.ldefs
 create mode 100644 Ghidra/Processors/ARC/data/languages/ARCompact.opinion
 create mode 100644 Ghidra/Processors/ARC/data/languages/ARCompact.pspec
 create mode 100644 Ghidra/Processors/ARC/data/languages/ARCompact.slaspec
 create mode 100644 Ghidra/Processors/ARC/src/main/java/ghidra/program/emulation/ARCompactEmulateInstructionStateModifier.java
 create mode 100644 Ghidra/Processors/ARC/src/test.processors/java/ghidra/test/processors/ARC700_O0_EmulatorTest.java
 create mode 100644 Ghidra/Processors/ARC/src/test.processors/java/ghidra/test/processors/ARC700_O3_EmulatorTest.java

diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py b/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py
index 800b433a52..a2e25f6c64 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py
@@ -805,3 +805,11 @@ PCodeTest({
     'has_double': 0,
     'has_longlong': 0,
 })
+
+PCodeTest({
+    'name': 'ARC700',
+    'build_all': 1,
+    'toolchain': 'ARC/arc700-elf',
+    'language_id': 'ARCompact:LE:32:default',
+    'ccflags': '-mcpu=arc700 -lgcc',
+})
diff --git a/Ghidra/Processors/ARC/Module.manifest b/Ghidra/Processors/ARC/Module.manifest
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/Ghidra/Processors/ARC/build.gradle b/Ghidra/Processors/ARC/build.gradle
new file mode 100644
index 0000000000..2ef1c6c361
--- /dev/null
+++ b/Ghidra/Processors/ARC/build.gradle
@@ -0,0 +1,26 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+apply from: "$rootProject.projectDir/gradle/distributableGhidraModule.gradle"
+apply from: "$rootProject.projectDir/gradle/javaProject.gradle"
+apply from: "$rootProject.projectDir/gradle/jacocoProject.gradle"
+apply from: "$rootProject.projectDir/gradle/javaTestProject.gradle"
+apply from: "$rootProject.projectDir/gradle/processorProject.gradle"
+apply plugin: 'eclipse'
+eclipse.project.name = 'Processors ARC'
+
+dependencies {
+	api project(':Base')
+}
diff --git a/Ghidra/Processors/ARC/data/languages/ARCompact.cspec b/Ghidra/Processors/ARC/data/languages/ARCompact.cspec
new file mode 100644
index 0000000000..25115fca59
--- /dev/null
+++ b/Ghidra/Processors/ARC/data/languages/ARCompact.cspec
@@ -0,0 +1,157 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<compiler_spec>
+  <data_organization>  <!-- These tags were copied from https://github.com/xyzz/ghidra-mep -->
+    <absolute_max_alignment value="0" />
+    <machine_alignment value="2" />
+    <default_alignment value="1" />
+    <default_pointer_alignment value="4" />
+    <pointer_size value="4" />
+    <wchar_size value="4" />
+    <short_size value="2" />
+    <integer_size value="4" />
+    <long_size value="4" />
+    <long_long_size value="8" />
+    <float_size value="4" />
+    <double_size value="8" />
+    <long_double_size value="8" />
+    <size_alignment_map>
+      <entry size="1" alignment="1" />
+      <entry size="2" alignment="2" />
+      <entry size="4" alignment="4" />
+      <entry size="8" alignment="8" />
+    </size_alignment_map>
+  </data_organization>
+  <global>
+    <range space="ram"/>
+    <range space="auxregs"/>
+  </global>
+  <stackpointer register="sp" space="ram"/>
+  <funcptr align="2"/>
+  <default_proto>
+    <prototype name="__stdcall" extrapop="0" stackshift="0">
+      <input>
+        <pentry minsize="1" maxsize="4" extension="inttype">
+          <register name="r0"/>
+        </pentry>
+        <pentry minsize="1" maxsize="4" extension="inttype">
+          <register name="r1"/>
+        </pentry>
+        <pentry minsize="1" maxsize="4" extension="inttype">
+          <register name="r2"/>
+        </pentry>
+        <pentry minsize="1" maxsize="4" extension="inttype">
+          <register name="r3"/>
+        </pentry>
+        <pentry minsize="1" maxsize="4" extension="inttype">
+          <register name="r4"/>
+        </pentry>
+        <pentry minsize="1" maxsize="4" extension="inttype">
+          <register name="r5"/>
+        </pentry>
+        <pentry minsize="1" maxsize="4" extension="inttype">
+          <register name="r6"/>
+        </pentry>
+        <pentry minsize="1" maxsize="4" extension="inttype">
+          <register name="r7"/>
+        </pentry>
+        <pentry minsize="1" maxsize="500" align="4">
+          <addr offset="0" space="stack"/>
+        </pentry>
+      </input>
+      <output>
+        <pentry minsize="1" maxsize="4" extension="inttype">
+          <register name="r0"/>
+        </pentry>
+        <pentry minsize="5" maxsize="8">
+          <addr space="join" piece1="r1" piece2="r0"/>
+        </pentry>
+      </output>
+      <unaffected>
+        <register name="r13"/>
+        <register name="r14"/>
+        <register name="r15"/>
+        <register name="r16"/>
+        <register name="r17"/>
+        <register name="r18"/>
+        <register name="r19"/>
+        <register name="r20"/>
+        <register name="r21"/>
+        <register name="r22"/>
+        <register name="r23"/>
+        <register name="r25"/>
+        <register name="gp"/>
+        <register name="fp"/>
+        <register name="sp"/>
+      </unaffected>
+    </prototype>
+  </default_proto>
+  <prototype name="__stdcall64" extrapop="0" stackshift="0" strategy="register">
+    <input>
+      <pentry minsize="1" maxsize="4" extension="inttype">
+        <register name="r0"/>
+      </pentry>
+      <pentry minsize="1" maxsize="4" extension="inttype">
+        <register name="r1"/>
+      </pentry>
+      <pentry minsize="5" maxsize="8">
+        <addr space="join" piece1="r1" piece2="r0"/>
+      </pentry>
+      <pentry minsize="1" maxsize="4" extension="inttype">
+        <register name="r2"/>
+      </pentry>
+      <pentry minsize="1" maxsize="4" extension="inttype">
+        <register name="r3"/>
+      </pentry>
+      <pentry minsize="5" maxsize="8">
+        <addr space="join" piece1="r3" piece2="r2"/>
+      </pentry>
+      <pentry minsize="1" maxsize="4" extension="inttype">
+        <register name="r4"/>
+      </pentry>
+      <pentry minsize="1" maxsize="4" extension="inttype">
+        <register name="r5"/>
+      </pentry>
+      <pentry minsize="5" maxsize="8">
+        <addr space="join" piece1="r5" piece2="r4"/>
+      </pentry>
+      <pentry minsize="1" maxsize="4" extension="inttype">
+        <register name="r6"/>
+      </pentry>
+      <pentry minsize="1" maxsize="4" extension="inttype">
+        <register name="r7"/>
+      </pentry>
+      <pentry minsize="5" maxsize="8">
+        <addr space="join" piece1="r7" piece2="r6"/>
+      </pentry>
+      <pentry minsize="1" maxsize="500" align="4">
+        <addr offset="0" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+      <pentry minsize="1" maxsize="4" extension="inttype">
+        <register name="r0"/>
+      </pentry>
+      <pentry minsize="5" maxsize="8">
+        <addr space="join" piece1="r1" piece2="r0"/>
+      </pentry>
+    </output>
+    <unaffected>
+      <register name="r13"/>
+      <register name="r14"/>
+      <register name="r15"/>
+      <register name="r16"/>
+      <register name="r17"/>
+      <register name="r18"/>
+      <register name="r19"/>
+      <register name="r20"/>
+      <register name="r21"/>
+      <register name="r22"/>
+      <register name="r23"/>
+      <register name="r25"/>
+      <register name="gp"/>
+      <register name="fp"/>
+      <register name="sp"/>
+    </unaffected>
+  </prototype>
+</compiler_spec>
diff --git a/Ghidra/Processors/ARC/data/languages/ARCompact.dwarf b/Ghidra/Processors/ARC/data/languages/ARCompact.dwarf
new file mode 100644
index 0000000000..27e03bf759
--- /dev/null
+++ b/Ghidra/Processors/ARC/data/languages/ARCompact.dwarf
@@ -0,0 +1,19 @@
+<dwarf>
+	<register_mappings>
+		<register_mapping dwarf="0" ghidra="r0" auto_count="26"/> <!-- r0..r25 -->
+		<register_mapping dwarf="26" ghidra="gp"/>
+		<register_mapping dwarf="27" ghidra="fp"/>
+		<register_mapping dwarf="28" ghidra="sp" stackpointer="true"/>
+		<register_mapping dwarf="29" ghidra="ilink1"/>
+		<register_mapping dwarf="30" ghidra="blink"/>
+		<register_mapping dwarf="31" ghidra="ilink2"/>
+		<register_mapping dwarf="32" ghidra="r32" auto_count="25"/> <!-- r32..r56 -->
+		<register_mapping dwarf="57" ghidra="mlo"/>
+		<register_mapping dwarf="58" ghidra="mmid"/>
+		<register_mapping dwarf="59" ghidra="mhi"/>
+		<register_mapping dwarf="60" ghidra="lp_count"/>
+		<!-- r61 is reserved and r62 is the long immediate data indicator -->
+		<register_mapping dwarf="63" ghidra="pcl"/>
+	</register_mappings>
+	<call_frame_cfa value="0"/>
+</dwarf>
diff --git a/Ghidra/Processors/ARC/data/languages/ARCompact.ldefs b/Ghidra/Processors/ARC/data/languages/ARCompact.ldefs
new file mode 100644
index 0000000000..b6173a8dd6
--- /dev/null
+++ b/Ghidra/Processors/ARC/data/languages/ARCompact.ldefs
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!-- See Relax specification: Ghidra/Framework/SoftwareModeling/data/languages/language_definitions.rxg -->
+<language_definitions>
+  <language processor="ARCompact"
+            endian="little"
+            size="32"
+            variant="default"
+            version="1.0"
+            slafile="ARCompact.sla"
+            processorspec="ARCompact.pspec"
+            id="ARCompact:LE:32:default">
+    <description>ARCompact microcontroller</description>
+    <compiler name="default" spec="ARCompact.cspec" id="default"/>
+    <external_name tool="DWARF.register.mapping.file" name="ARCompact.dwarf"/>
+  </language>
+</language_definitions>
diff --git a/Ghidra/Processors/ARC/data/languages/ARCompact.opinion b/Ghidra/Processors/ARC/data/languages/ARCompact.opinion
new file mode 100644
index 0000000000..bc403fc12f
--- /dev/null
+++ b/Ghidra/Processors/ARC/data/languages/ARCompact.opinion
@@ -0,0 +1,5 @@
+<opinions>
+    <constraint loader="Executable and Linking Format (ELF)" compilerSpecID="default">
+        <constraint primary="93" processor="ARCompact" size="32" />
+    </constraint>
+</opinions>
diff --git a/Ghidra/Processors/ARC/data/languages/ARCompact.pspec b/Ghidra/Processors/ARC/data/languages/ARCompact.pspec
new file mode 100644
index 0000000000..181b5007c7
--- /dev/null
+++ b/Ghidra/Processors/ARC/data/languages/ARCompact.pspec
@@ -0,0 +1,290 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!-- See Relax specification: Ghidra/Framework/SoftwareModeling/data/languages/processor_spec.rxg -->
+
+<processor_spec>
+  <properties>
+    <property key="emulateInstructionStateModifierClass" value="ghidra.program.emulation.ARCompactEmulateInstructionStateModifier"/>
+  </properties>
+  <programcounter register="pcl"/>
+  <volatile outputop="write_volatile" inputop="read_volatile">
+    <range space="auxregs" first="0x0" last="0x7"/>
+    <!-- do not mark LP_START and LP_END as volatile -->
+    <range space="auxregs" first="0x10" last="0xFFFF"/>
+  </volatile>
+  <default_symbols>
+    <symbol name="STATUS" address="auxregs:0000"/>
+    <symbol name="SEMAPHORE" address="auxregs:0004"/>
+    <symbol name="LP_START" address="auxregs:0008"/>
+    <symbol name="LP_END" address="auxregs:000C"/>
+    <symbol name="IDENTITY" address="auxregs:0010"/>
+    <symbol name="DEBUG" address="auxregs:0014"/>
+    <symbol name="PC" address="auxregs:0018"/>
+    <symbol name="ADCR" address="auxregs:001C"/>
+    <symbol name="APCR" address="auxregs:0020"/>
+    <symbol name="ACR" address="auxregs:0024"/>
+    <symbol name="STATUS32" address="auxregs:0028"/>
+    <symbol name="STATUS32_L1" address="auxregs:002C"/>
+    <symbol name="STATUS32_L2" address="auxregs:0030"/>
+    <symbol name="IVIC" address="auxregs:0040"/>
+    <symbol name="CHE_MODE" address="auxregs:0044"/>
+    <symbol name="MULHI" address="auxregs:0048"/>
+    <symbol name="LOCKLINE" address="auxregs:004C"/>
+    <symbol name="DMC_CODE_RAM" address="auxregs:0050"/>
+    <symbol name="TAG_ADDR_MASK" address="auxregs:0054"/>
+    <symbol name="TAG_DATA_MASK" address="auxregs:0058"/>
+    <symbol name="LINE_LENGTH_MASK" address="auxregs:005C"/>
+    <symbol name="DCCM_BASE" address="auxregs:0060"/>
+    <symbol name="UNLOCKLINE" address="auxregs:0064"/>
+    <symbol name="IC_RAM_ADDRESS" address="auxregs:0068"/>
+    <symbol name="IC_TAG" address="auxregs:006C"/>
+    <symbol name="IC_WP" address="auxregs:0070"/>
+    <symbol name="IC_DATA" address="auxregs:0074"/>
+    <symbol name="IC_PTAG" address="auxregs:0078"/>
+    <symbol name="IC_PTAG_HI" address="auxregs:007C"/>
+    <symbol name="COUNT0" address="auxregs:0084"/>
+    <symbol name="CONTROL0" address="auxregs:0088"/>
+    <symbol name="LIMIT0" address="auxregs:008C"/>
+    <symbol name="PCPORT" address="auxregs:0090"/>
+    <symbol name="INT_VECTOR_BASE" address="auxregs:0094"/>
+    <symbol name="AUX_VBFDW_MODE" address="auxregs:0098"/>
+    <symbol name="AUX_VBFDW_BM0" address="auxregs:009C"/>
+    <symbol name="AUX_VBFDW_BM1" address="auxregs:00A0"/>
+    <symbol name="AUX_VBFDW_ACCU" address="auxregs:00A4"/>
+    <symbol name="AUX_VBFDW_OFST" address="auxregs:00A8"/>
+    <symbol name="AUX_VBFDW_INTSTAT" address="auxregs:00AC"/>
+    <symbol name="AUX_XMAC0_24" address="auxregs:00B0"/>
+    <symbol name="AUX_XMAC1_24" address="auxregs:00B4"/>
+    <symbol name="AUX_XMAC2_24" address="auxregs:00B8"/>
+    <symbol name="AUX_FBF_STORE_16" address="auxregs:00BC"/>
+    <symbol name="ERP_CTRL" address="auxregs:00FC"/>
+    <symbol name="AUX_MACMODE" address="auxregs:0104"/>
+    <symbol name="AUX_IRQ_LV12" address="auxregs:010C"/>
+    <symbol name="AUX_XMAC0" address="auxregs:0110"/>
+    <symbol name="AUX_XMAC1" address="auxregs:0114"/>
+    <symbol name="AUX_XMAC2" address="auxregs:0118"/>
+    <symbol name="DC_IVDC" address="auxregs:011C"/>
+    <symbol name="DC_CTRL" address="auxregs:0120"/>
+    <symbol name="DC_LDL" address="auxregs:0124"/>
+    <symbol name="DC_IVDL" address="auxregs:0128"/>
+    <symbol name="DC_FLSH" address="auxregs:012C"/>
+    <symbol name="DC_FLDL" address="auxregs:0130"/>
+    <symbol name="DC_STARTR" address="auxregs:0134"/>
+    <symbol name="DC_ENDR" address="auxregs:0138"/>
+    <symbol name="SWSTAT" address="auxregs:015C"/>
+    <symbol name="DC_RAM_ADDR" address="auxregs:0160"/>
+    <symbol name="DC_TAG" address="auxregs:0164"/>
+    <symbol name="DC_WP" address="auxregs:0168"/>
+    <symbol name="DC_DATA" address="auxregs:016C"/>
+    <symbol name="DC_PTAG" address="auxregs:0170"/>
+    <symbol name="AUX_VOLATILE" address="auxregs:0178"/>
+    <symbol name="DC_PTAG_HI" address="auxregs:017C"/>
+    <symbol name="BCR_VER" address="auxregs:0180"/>
+    <symbol name="DCCM_BASE_BUILD" address="auxregs:0184"/>
+    <symbol name="CRC_BUILD" address="auxregs:0188"/>
+    <symbol name="BTA_LINK_BUILD" address="auxregs:018C"/>
+    <symbol name="VBFDW_BUILD" address="auxregs:0190"/>
+    <symbol name="EA_BUILD" address="auxregs:0194"/>
+    <symbol name="DATASPACE" address="auxregs:0198"/>
+    <symbol name="MEMSUBSYS" address="auxregs:019C"/>
+    <symbol name="VECBASE_AC_BUILD" address="auxregs:01A0"/>
+    <symbol name="PERIBASE_ADDR" address="auxregs:01A4"/>
+    <symbol name="DATA_UNCACHED_BUILD" address="auxregs:01A8"/>
+    <symbol name="FP_BUILD" address="auxregs:01AC"/>
+    <symbol name="DPFP_BUILD" address="auxregs:01B0"/>
+    <symbol name="MPU_BUILD" address="auxregs:01B4"/>
+    <symbol name="RF_BUILD" address="auxregs:01B8"/>
+    <symbol name="MMU_BUILD" address="auxregs:01BC"/>
+    <symbol name="VECBASE_BUILD" address="auxregs:01C4"/>
+    <symbol name="D_CACHE_BUILD" address="auxregs:01C8"/>
+    <symbol name="MADI_BUILD" address="auxregs:01CC"/>
+    <symbol name="DCCM_BUILD" address="auxregs:01D0"/>
+    <symbol name="TIMER_BUILD" address="auxregs:01D4"/>
+    <symbol name="AP_BUILD" address="auxregs:01D8"/>
+    <symbol name="I_CACHE_BUILD" address="auxregs:01DC"/>
+    <symbol name="ICCM_BUILD" address="auxregs:01E0"/>
+    <symbol name="DSPRAM_BUILD" address="auxregs:01E4"/>
+    <symbol name="MAC_BUILD" address="auxregs:01E8"/>
+    <symbol name="MULTIPLY_BUILD" address="auxregs:01EC"/>
+    <symbol name="SWAP_BUILD" address="auxregs:01F0"/>
+    <symbol name="NORM_BUILD" address="auxregs:01F4"/>
+    <symbol name="MINMAX_BUILD" address="auxregs:01F8"/>
+    <symbol name="BARREL_BUILD" address="auxregs:01FC"/>
+    <symbol name="AX0" address="auxregs:0200"/>
+    <symbol name="AX1" address="auxregs:0204"/>
+    <symbol name="AX2" address="auxregs:0208"/>
+    <symbol name="AX3" address="auxregs:020C"/>
+    <symbol name="AY0" address="auxregs:0210"/>
+    <symbol name="AY1" address="auxregs:0214"/>
+    <symbol name="AY2" address="auxregs:0218"/>
+    <symbol name="AY3" address="auxregs:021C"/>
+    <symbol name="MX00" address="auxregs:0220"/>
+    <symbol name="MX01" address="auxregs:0224"/>
+    <symbol name="MX10" address="auxregs:0228"/>
+    <symbol name="MX11" address="auxregs:022C"/>
+    <symbol name="MX20" address="auxregs:0230"/>
+    <symbol name="MX21" address="auxregs:0234"/>
+    <symbol name="MX30" address="auxregs:0238"/>
+    <symbol name="MX31" address="auxregs:023C"/>
+    <symbol name="MY00" address="auxregs:0240"/>
+    <symbol name="MY01" address="auxregs:0244"/>
+    <symbol name="MY10" address="auxregs:0248"/>
+    <symbol name="MY11" address="auxregs:024C"/>
+    <symbol name="MY20" address="auxregs:0250"/>
+    <symbol name="MY21" address="auxregs:0254"/>
+    <symbol name="MY30" address="auxregs:0258"/>
+    <symbol name="MY31" address="auxregs:025C"/>
+    <symbol name="XYCONFIG" address="auxregs:0260"/>
+    <symbol name="BURSTSYS" address="auxregs:0264"/>
+    <symbol name="BURSTXYM" address="auxregs:0268"/>
+    <symbol name="BURSTSZ" address="auxregs:026C"/>
+    <symbol name="BURSTVAL" address="auxregs:0270"/>
+    <symbol name="XYLSBASEX" address="auxregs:0274"/>
+    <symbol name="XYLSBASEY" address="auxregs:0278"/>
+    <symbol name="AUX_XMACLW_H" address="auxregs:027C"/>
+    <symbol name="AUX_XMACLW_L" address="auxregs:0280"/>
+    <symbol name="SE_CTRL" address="auxregs:0284"/>
+    <symbol name="SE_STATUS" address="auxregs:0288"/>
+    <symbol name="SE_ERR" address="auxregs:028C"/>
+    <symbol name="SE_EADR" address="auxregs:0290"/>
+    <symbol name="SE_SPC" address="auxregs:0294"/>
+    <symbol name="SDM_BASE" address="auxregs:0298"/>
+    <symbol name="SCM_BASE" address="auxregs:029C"/>
+    <symbol name="SE_DBG_CTRL" address="auxregs:02A0"/>
+    <symbol name="SE_DBG_DATA0" address="auxregs:02A4"/>
+    <symbol name="SE_DBG_DATA1" address="auxregs:02A8"/>
+    <symbol name="SE_DBG_DATA2" address="auxregs:02AC"/>
+    <symbol name="SE_DBG_DATA3" address="auxregs:02B0"/>
+    <symbol name="SE_WATCH" address="auxregs:02B4"/>
+    <symbol name="BPU_BUILD" address="auxregs:0300"/>
+    <symbol name="ISA_CONFIG_BUILD" address="auxregs:0304"/>
+    <symbol name="ERP_BUILD" address="auxregs:031C"/>
+    <symbol name="FP_V2_BUILD" address="auxregs:0320"/>
+    <symbol name="AGU_BUILD" address="auxregs:0330"/>
+    <symbol name="SLC_BUILD" address="auxregs:0338"/>
+    <symbol name="CLUSTER_BUILD" address="auxregs:033C"/>
+    <symbol name="LPB_BUILD" address="auxregs:03A4"/>
+    <symbol name="RTT_BUILD" address="auxregs:03C8"/>
+    <symbol name="IRQ_BUILD" address="auxregs:03CC"/>
+    <symbol name="HWP_BUILD" address="auxregs:03D0"/>
+    <symbol name="PCT_BUILD" address="auxregs:03D4"/>
+    <symbol name="CC_BUILD" address="auxregs:03D8"/>
+    <symbol name="PM_BUILD" address="auxregs:03DC"/>
+    <symbol name="SCQ_SWITCH_BUILD" address="auxregs:03E0"/>
+    <symbol name="VRAPTOR_BUILD" address="auxregs:03E4"/>
+    <symbol name="DMA_CONFIG" address="auxregs:03E8"/>
+    <symbol name="SIMD_CONFIG" address="auxregs:03EC"/>
+    <symbol name="VLC_BUILD" address="auxregs:03F0"/>
+    <symbol name="SIMD_DMA_BUILD" address="auxregs:03F4"/>
+    <symbol name="IFETCH_QUEUE_BUILD" address="auxregs:03F8"/>
+    <symbol name="SMART_BUILD" address="auxregs:03FC"/>
+    <symbol name="COUNT1" address="auxregs:0400"/>
+    <symbol name="CONTROL1" address="auxregs:0404"/>
+    <symbol name="LIMIT1" address="auxregs:0408"/>
+    <symbol name="AUX_IRQ_LEV" address="auxregs:0800"/>
+    <symbol name="AUX_IRQ_HINT" address="auxregs:0804"/>
+    <symbol name="AUX_INTER_CORE_INT" address="auxregs:0808"/>
+    <symbol name="AUX_ICCM" address="auxregs:0820"/>
+    <symbol name="AES_AUX_0" address="auxregs:0840"/>
+    <symbol name="AES_AUX_1" address="auxregs:0844"/>
+    <symbol name="AES_AUX_2" address="auxregs:0848"/>
+    <symbol name="AES_CRYPT_MODE" address="auxregs:084C"/>
+    <symbol name="AES_AUXS" address="auxregs:0850"/>
+    <symbol name="AES_AUXI" address="auxregs:0854"/>
+    <symbol name="AES_AUX_3" address="auxregs:0858"/>
+    <symbol name="AES_AUX_4" address="auxregs:085C"/>
+    <symbol name="ARITH_CTL_AUX" address="auxregs:0860"/>
+    <symbol name="DES_AUX" address="auxregs:0864"/>
+    <symbol name="AP_AMV0" address="auxregs:0880"/>
+    <symbol name="AP_AMM0" address="auxregs:0884"/>
+    <symbol name="AP_AC0" address="auxregs:0888"/>
+    <symbol name="AP_AMV1" address="auxregs:088C"/>
+    <symbol name="AP_AMM1" address="auxregs:0890"/>
+    <symbol name="AP_AC1" address="auxregs:0894"/>
+    <symbol name="AP_AMV2" address="auxregs:0898"/>
+    <symbol name="AP_AMM2" address="auxregs:089C"/>
+    <symbol name="AP_AC2" address="auxregs:08A0"/>
+    <symbol name="AP_AMV3" address="auxregs:08A4"/>
+    <symbol name="AP_AMM3" address="auxregs:08A8"/>
+    <symbol name="AP_AC3" address="auxregs:08AC"/>
+    <symbol name="AP_AMV4" address="auxregs:08B0"/>
+    <symbol name="AP_AMM4" address="auxregs:08B4"/>
+    <symbol name="AP_AC4" address="auxregs:08B8"/>
+    <symbol name="AP_AMV5" address="auxregs:08BC"/>
+    <symbol name="AP_AMM5" address="auxregs:08C0"/>
+    <symbol name="AP_AC5" address="auxregs:08C4"/>
+    <symbol name="AP_AMV6" address="auxregs:08C8"/>
+    <symbol name="AP_AMM6" address="auxregs:08CC"/>
+    <symbol name="AP_AC6" address="auxregs:08D0"/>
+    <symbol name="AP_AMV7" address="auxregs:08D4"/>
+    <symbol name="AP_AMM7" address="auxregs:08D8"/>
+    <symbol name="AP_AC7" address="auxregs:08DC"/>
+    <symbol name="FPU_STATUS" address="auxregs:0C00"/>
+    <symbol name="DPFP_1L" address="auxregs:0C04"/>
+    <symbol name="DPFP_1H" address="auxregs:0C08"/>
+    <symbol name="DPFP_2L" address="auxregs:0C0C"/>
+    <symbol name="DPFP_2H" address="auxregs:0C10"/>
+    <symbol name="DPFP_STATUS" address="auxregs:0C14"/>
+    <symbol name="ERET" address="auxregs:1000"/>
+    <symbol name="ERBTA" address="auxregs:1004"/>
+    <symbol name="ERSTATUS" address="auxregs:1008"/>
+    <symbol name="ECR" address="auxregs:100C"/>
+    <symbol name="EFA" address="auxregs:1010"/>
+    <symbol name="MMU_TLBPD0" address="auxregs:1014"/>
+    <symbol name="MMU_TLBPD1" address="auxregs:1018"/>
+    <symbol name="MMU_TLBINDEX" address="auxregs:101C"/>
+    <symbol name="MMU_TLBCOMMAND" address="auxregs:1020"/>
+    <symbol name="MMU_PID_and_MPUEN" address="auxregs:1024"/>
+    <symbol name="ICAUSE1" address="auxregs:1028"/>
+    <symbol name="ICAUSE2" address="auxregs:102C"/>
+    <symbol name="AUX_IENABLE" address="auxregs:1030"/>
+    <symbol name="AUX_ITRIGGER" address="auxregs:1034"/>
+    <symbol name="XPU" address="auxregs:1040"/>
+    <symbol name="BTA" address="auxregs:1048"/>
+    <symbol name="BTA_L1" address="auxregs:104C"/>
+    <symbol name="BTA_L2" address="auxregs:1050"/>
+    <symbol name="AUX_IRQ_PULSE_CANCEL" address="auxregs:1054"/>
+    <symbol name="AUX_IRQ_PENDING" address="auxregs:1058"/>
+    <symbol name="MMU_SCRATCH_DATA0" address="auxregs:1060"/>
+    <symbol name="MPUIC" address="auxregs:1080"/>
+    <symbol name="MPUFA" address="auxregs:1084"/>
+    <symbol name="MPURDB0" address="auxregs:1088"/>
+    <symbol name="MPURDP0" address="auxregs:108C"/>
+    <symbol name="MPURDB1" address="auxregs:1090"/>
+    <symbol name="MPURDP1" address="auxregs:1094"/>
+    <symbol name="MPURDB2" address="auxregs:1098"/>
+    <symbol name="MPURDP2" address="auxregs:109C"/>
+    <symbol name="MPURDB3" address="auxregs:10A0"/>
+    <symbol name="MPURDP3" address="auxregs:10A4"/>
+    <symbol name="MPURDB4" address="auxregs:10A8"/>
+    <symbol name="MPURDP4" address="auxregs:10AC"/>
+    <symbol name="MPURDB5" address="auxregs:10B0"/>
+    <symbol name="MPURDP5" address="auxregs:10B4"/>
+    <symbol name="MPURDB6" address="auxregs:10B8"/>
+    <symbol name="MPURDP6" address="auxregs:10BC"/>
+    <symbol name="MPURDB7" address="auxregs:10C0"/>
+    <symbol name="MPURDP7" address="auxregs:10C4"/>
+    <symbol name="MPURDB8" address="auxregs:10C8"/>
+    <symbol name="MPURDP8" address="auxregs:10CC"/>
+    <symbol name="MPURDB9" address="auxregs:10D0"/>
+    <symbol name="MPURDP9" address="auxregs:10D4"/>
+    <symbol name="MPURDB10" address="auxregs:10D8"/>
+    <symbol name="MPURDP10" address="auxregs:10DC"/>
+    <symbol name="MPURDB11" address="auxregs:10E0"/>
+    <symbol name="MPURDP11" address="auxregs:10E4"/>
+    <symbol name="MPURDB12" address="auxregs:10E8"/>
+    <symbol name="MPURDP12" address="auxregs:10EC"/>
+    <symbol name="MPURDB13" address="auxregs:10F0"/>
+    <symbol name="MPURDP13" address="auxregs:10F4"/>
+    <symbol name="MPURDB14" address="auxregs:10F8"/>
+    <symbol name="MPURDP14" address="auxregs:10FC"/>
+    <symbol name="MPURDB15" address="auxregs:1100"/>
+    <symbol name="MPURDP15" address="auxregs:1104"/>
+    <symbol name="PM_STATUS" address="auxregs:1140"/>
+    <symbol name="WAKE" address="auxregs:1144"/>
+    <symbol name="DVFS_PERFORMANCE" address="auxregs:1148"/>
+    <symbol name="PWR_CTRL" address="auxregs:114C"/>
+    <symbol name="LPB_CTRL" address="auxregs:1220"/>
+    <symbol name="SMART_CONTROL" address="auxregs:1C00"/>
+  </default_symbols>
+</processor_spec>
diff --git a/Ghidra/Processors/ARC/data/languages/ARCompact.slaspec b/Ghidra/Processors/ARC/data/languages/ARCompact.slaspec
new file mode 100644
index 0000000000..6b813e2b46
--- /dev/null
+++ b/Ghidra/Processors/ARC/data/languages/ARCompact.slaspec
@@ -0,0 +1,2332 @@
+# sleigh specification file for ARCompact
+
+define endian=little;
+define alignment=2;
+
+define space ram type=ram_space size=4 default;
+define space register type=register_space size=2;
+
+# Define the space for auxiliary registers as "RAM space" in order to be able to
+# access it by address (instructions lr and sr)
+define space auxregs type=ram_space size=2;
+
+# 64 32-bit registers:
+# * r0...r25 = Basecase Core Registers
+# * r26 = Global Pointer
+# * r27 = Frame Pointer
+# * r28 = Stack Pointer
+# * r29 = Interrupt Link 1
+# * r30 = Interrupt Link 2
+# * r31 = Branch Link
+# * r32...r59 = Extension Core Registers
+#   * r57 = mlo
+#   * r58 = mmid
+#   * r59 = mhi
+# * r60 = Loop Count Register
+# * r61 = Reserved Register
+# * r62 = Long Immediate Data Indicator Register fake register
+# * r63 = Program Counter Long-Word
+define register offset=0x00 size=4 [
+    r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15
+    r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 gp fp sp ilink1 ilink2 blink
+    r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47
+    r48 r49 r50 r51 r52 r53 r54 r55 r56 mlo mmid mhi lp_count r61reserved r62limm pcl
+];
+
+# Bits of the STATUS32 register: Zero, Negative, Carry, Overflow
+define register offset=0x120 size=1 [ Z N C V ];
+
+define register offset=0x130 size=1 [ is_in_loop ];
+define register offset=0x134 size=4 [ contextreg ];
+
+define context contextreg
+  phase = (0,0)
+  loopEnd = (1,1) noflow
+;
+
+define pcodeop asm_instruction_04;
+define pcodeop asm_instruction_05;
+define pcodeop asm_instruction_06;
+define pcodeop asm_instruction_07;
+define pcodeop asm_instruction_08;
+define pcodeop brk;
+define pcodeop ext_condition;
+define pcodeop norm;
+define pcodeop rtie;
+define pcodeop sleep;
+define pcodeop swi;
+define pcodeop sync;
+define pcodeop trap_s;
+
+macro push4(x) {
+  local mysave:4 = x;
+  sp = sp - 4;
+  *:4 sp = mysave;
+}
+macro pop4(x) {
+  x = *:4 sp;
+  sp = sp + 4;
+}
+
+# Update flags according to a value
+macro update_flags_zn(value) {
+  Z = value == 0:4;
+  N = value s< 0:4;
+}
+
+# flags before an addition
+macro update_flags_add_cv(op1, op2) {
+  C = carry(op1, op2);
+  V = scarry(op1, op2);
+}
+
+# Update flags before a subtraction
+macro update_flags_sub_zncv(op1, op2, result) {
+  Z = op1 == op2;
+  N = result s< 0:4;
+  C = op1 < op2;
+  V = sborrow(op1, op2);
+}
+
+# Conditional branch with delay slot
+macro cond_goto_with_delayslot(take_branch, target) {
+  local _take_branch:1 = take_branch;
+  delayslot(1);
+  if (_take_branch) goto target;
+}
+
+# Short opcodes (major opcode between 0x0c and 0x1f)
+define token instr16 (16)
+  s_major_opcode = (11, 15)
+  s_sub_opcode_b9b10 = (9, 10)
+  s_rb = (8, 10)
+  s_rb_ = (8, 10)
+  s_sub_opcode_b7 = (7, 7)
+  s_sub_opcode_b6b7b8 = (6, 8)
+  s_middle_u6 = (5, 10)
+  s_rc = (5, 7)
+  s_rh_low_0 = (5, 7)
+  s_rh_low_1 = (5, 7)
+  s_rh_low_2 = (5, 7)
+  s_rh_low_3 = (5, 7)
+  s_rh_low_4 = (5, 7)
+  s_rh_low_5 = (5, 7)
+  s_rh_low_6 = (5, 7)
+  s_rh_low_7 = (5, 7)
+  s_sub_opcode_b5b6b7 = (5, 7)
+  s_sub_opcode_b3b4 = (3, 4)
+  s_s11 = (0, 10) signed
+  s_s9 = (0, 8) signed
+  s_u8 = (0, 7)
+  s_s7 = (0, 6) signed
+  s_u7 = (0, 6)
+  s_s6 = (0, 5) signed
+  s_u5 = (0, 4)
+  s_u3 = (0, 2)
+  s_ra = (0, 2)
+  s_rh_high = (0, 2)
+;
+
+# Long opcodes (major opcode between 0 and 0x0b)
+define token instr32 (32)
+  l_major_opcode = (11, 15)
+  l_rb_low_0 = (8, 10)
+  l_rb_low_1 = (8, 10)
+  l_rb_low_2 = (8, 10)
+  l_rb_low_3 = (8, 10)
+  l_rb_low_4 = (8, 10)
+  l_rb_low_5 = (8, 10)
+  l_rb_low_6 = (8, 10)
+  l_rb_low_7 = (8, 10)
+  l_op_format = (6, 7)
+  l_op4_ld_addr_mode = (6, 7)
+  l_op4_ld_opcode = (3, 5)
+  l_s19_low9 = (2, 10)
+  l_s20_low10 = (1, 10)
+  l_s_low_b17b23 = (1, 7)
+  l_op4_ld_data_size = (1, 2)
+  l_sub_opcode_b17 = (1, 1)
+  l_s9_low8 = (0, 7)
+  l_sub_opcode6 = (0, 5)
+  l_sub_opcode_b16 = (0, 0)
+  l_op4_ld_sign_ext = (0, 0)
+
+  l_flag = (31, 31)
+  l_op4_ld_direct = (31, 31)
+  l_s9_highbit = (31, 31) signed
+  l_rb_high = (28, 30)
+  l_ld_direct = (27, 27)
+  l_ld_addr_mode = (25, 26)
+  l_ld_data_size = (23, 24)
+  l_s23_middle10 = (22, 31)
+  l_s24_middle10 = (22, 31)
+  l_s19_high10 = (22, 31) signed
+  l_s20_high10 = (22, 31) signed
+  l_rc_raw = (22, 27)
+  l_u6 = (22, 27)
+  l_ld_sign_ext = (22, 22)
+  l_m = (21, 21)
+  l_delay_slot_b5 = (21, 21)
+  l_st_direct = (21, 21)
+  l_cond_high_bit = (20, 20)
+  l_sub_opcode_b4 = (20, 20)
+  l_st_addr_mode = (19, 20)
+  l_st_data_size = (17, 18)
+  l_ra_raw = (16, 21)
+  l_s12_high = (16, 21) signed
+  l_cond_bits = (16, 20)
+  l_sub_opcode_b0b1b2b3 = (16, 19)
+  l_s23_high = (16, 19) signed
+  l_s24_high = (16, 19) signed
+;
+
+define token limm_low_token (16) limm_low = (0, 15);
+define token limm_high_token (16) limm_high = (0, 15);
+
+attach variables [ s_ra s_rb s_rb_ s_rc ] [ r0 r1 r2 r3 r12 r13 r14 r15 ];
+
+attach variables [ l_ra_raw l_rc_raw ] [
+    r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15
+    r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 gp fp sp ilink1 ilink2 blink
+    r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47
+    r48 r49 r50 r51 r52 r53 r54 r55 r56 mlo mmid mhi lp_count r61reserved r62limm pcl
+];
+
+# Use trick from https://github.com/NationalSecurityAgency/ghidra/issues/1191 to merge bits which define registers
+attach variables [ l_rb_low_0 s_rh_low_0 ] [ r0 r1 r2 r3 r4 r5 r6 r7 ];
+attach variables [ l_rb_low_1 s_rh_low_1 ] [ r8 r9 r10 r11 r12 r13 r14 r15 ];
+attach variables [ l_rb_low_2 s_rh_low_2 ] [ r16 r17 r18 r19 r20 r21 r22 r23 ];
+attach variables [ l_rb_low_3 s_rh_low_3 ] [ r24 r25 gp fp sp ilink1 ilink2 blink ];
+attach variables [ l_rb_low_4 s_rh_low_4 ] [ r32 r33 r34 r35 r36 r37 r38 r39 ];
+attach variables [ l_rb_low_5 s_rh_low_5 ] [ r40 r41 r42 r43 r44 r45 r46 r47 ];
+attach variables [ l_rb_low_6 s_rh_low_6 ] [ r48 r49 r50 r51 r52 r53 r54 r55 ];
+attach variables [ l_rb_low_7 s_rh_low_7 ] [ r56 mlo mmid mhi lp_count r61reserved r62limm pcl ];
+s_rh: s_rh_low_0 is s_rh_high=0 & s_rh_low_0 { export s_rh_low_0; }
+s_rh: s_rh_low_1 is s_rh_high=1 & s_rh_low_1 { export s_rh_low_1; }
+s_rh: s_rh_low_2 is s_rh_high=2 & s_rh_low_2 { export s_rh_low_2; }
+s_rh: s_rh_low_3 is s_rh_high=3 & s_rh_low_3 { export s_rh_low_3; }
+s_rh: s_rh_low_4 is s_rh_high=4 & s_rh_low_4 { export s_rh_low_4; }
+s_rh: s_rh_low_5 is s_rh_high=5 & s_rh_low_5 { export s_rh_low_5; }
+s_rh: s_rh_low_6 is s_rh_high=6 & s_rh_low_6 { export s_rh_low_6; }
+s_rh: s_rh_low_7 is s_rh_high=7 & s_rh_low_7 { export s_rh_low_7; }
+l_rb: l_rb_low_0 is l_rb_high=0 & l_rb_low_0 { export l_rb_low_0; }
+l_rb: l_rb_low_1 is l_rb_high=1 & l_rb_low_1 { export l_rb_low_1; }
+l_rb: l_rb_low_2 is l_rb_high=2 & l_rb_low_2 { export l_rb_low_2; }
+l_rb: l_rb_low_3 is l_rb_high=3 & l_rb_low_3 { export l_rb_low_3; }
+l_rb: l_rb_low_4 is l_rb_high=4 & l_rb_low_4 { export l_rb_low_4; }
+l_rb: l_rb_low_5 is l_rb_high=5 & l_rb_low_5 { export l_rb_low_5; }
+l_rb: l_rb_low_6 is l_rb_high=6 & l_rb_low_6 { export l_rb_low_6; }
+l_rb: l_rb_low_7 is l_rb_high=7 & l_rb_low_7 { export l_rb_low_7; }
+
+# Combine and shift immediate values
+limm: limm is limm_high ; limm_low [ limm = (limm_high << 16) + limm_low; ] { export *[const]:4 limm; }
+
+s_u5shift1: value is s_u5 [ value=s_u5 << 1; ] { export *[const]:4 value; }
+s_u5shift2: value is s_u5 [ value=s_u5 << 2; ] { export *[const]:4 value; }
+s_u8shift2: value is s_u8 [ value=s_u8 << 2; ] { export *[const]:4 value; }
+s_s9shift1: value is s_s9 [ value=s_s9 << 1; ] { export *[const]:4 value; }
+s_s9shift2: value is s_s9 [ value=s_s9 << 2; ] { export *[const]:4 value; }
+
+l_s9: value is l_s9_low8 & l_s9_highbit [ value = l_s9_low8 + (l_s9_highbit << 8); ] { export *[const]:4 value; }
+l_s9shift1: value is l_s9_low8 & l_s9_highbit [ value = (l_s9_low8 << 1) + (l_s9_highbit << 9); ] { export *[const]:4 value; }
+l_s9shift2: value is l_s9_low8 & l_s9_highbit [ value = (l_s9_low8 << 2) + (l_s9_highbit << 10); ] { export *[const]:4 value; }
+
+op1_u6_bit: value is l_u6 [ value = 1 << l_u6; ] { export *[const]:4 value; }
+
+# Replace long immediate in registers
+s_rh_limm: limm is s_rh_high=7 & s_rh_low_7=6 ; limm { export *[const]:4 limm; }
+s_rh_limm: pcl=pcl_value is s_rh_high=7 & s_rh_low_7=7 & pcl [ pcl_value = inst_start & ~3; ] { export *[const]:4 pcl_value; }
+s_rh_limm: s_rh is s_rh { export s_rh; }
+
+l_rb_limm: limm is l_rb_high=7 & l_rb_low_7=6 ; limm { export *[const]:4 limm; }
+l_rb_limm: pcl=pcl_value is l_rb_high=7 & l_rb_low_7=7 & pcl [ pcl_value = inst_start & ~3; ] { export *[const]:4 pcl_value; }
+l_rb_limm: l_rb is l_rb { export l_rb; }
+
+l_rc_limm: limm is l_rc_raw=62 ; limm { export *[const]:4 limm; }
+l_rc_limm: pcl=pcl_value is l_rc_raw=63 & pcl [ pcl_value = inst_start & ~3; ] { export *[const]:4 pcl_value; }
+l_rc_limm: l_rc_raw is l_rc_raw { export l_rc_raw; }
+
+l_ldst_mem_rb_s9: [l_rb_limm] is (l_s9_low8=0 & l_s9_highbit=0) ... & l_rb_limm { export l_rb_limm; }
+l_ldst_mem_rb_s9: [l_rb_limm, l_s9] is l_s9 ... & l_rb_limm { local tmp:4 = l_rb_limm + l_s9; export tmp; }
+
+# Compute branch target or data location for various instructions
+op1_1_target: target is l_s_low_b17b23 & l_s9_highbit [ target=(inst_start & ~3) + (l_s_low_b17b23 << 1) + (l_s9_highbit << 8); ] { export *[ram]:4 target; }
+l_target_s19shift2: target is l_s19_low9 & l_s19_high10 [ target=(inst_start & ~3) + (l_s19_low9 << 2) + (l_s19_high10 << 11); ] { export *[ram]:4 target; }
+l_target_s20shift1: target is l_s20_low10 & l_s20_high10 [ target=(inst_start & ~3) + (l_s20_low10 << 1) + (l_s20_high10 << 11); ] { export *[ram]:4 target; }
+l_target_s23shift2: target is l_s19_low9 & l_s23_middle10 & l_s23_high [ target=(inst_start & ~3) + (l_s19_low9 << 2) + (l_s23_middle10 << 11) + (l_s23_high << 21); ] { export *[ram]:4 target; }
+l_target_s24shift1: target is l_s20_low10 & l_s24_middle10 & l_s24_high [ target=(inst_start & ~3) + (l_s20_low10 << 1) + (l_s24_middle10 << 11) + (l_s24_high << 21); ] { export *[ram]:4 target; }
+s_target_s6shift1: target is s_s6 [ target=(inst_start & ~3) + (s_s6 << 1); ] { export *[ram]:4 target; }
+s_target_s7shift1: target is s_s7 [ target=(inst_start & ~3) + (s_s7 << 1); ] { export *[ram]:4 target; }
+s_target_s9shift1: target is s_s9 [ target=(inst_start & ~3) + (s_s9 << 1); ] { export *[ram]:4 target; }
+s_target_s11shift2: target is s_s11 [ target=(inst_start & ~3) + (s_s11 << 2); ] { export *[ram]:4 target; }
+s_target_u8shift2: target is s_u8 [ target=(inst_start & ~3) + (s_u8 << 2); ] { export *[ram]:4 target; }
+
+# Condition Codes, using the invert value
+l_cc_not_value: "al" is l_cond_bits=0 { local tmp:1 = 0; export tmp; }
+l_cc_not_value: "eq" is l_cond_bits=1 { local tmp:1 = !Z; export tmp; }
+l_cc_not_value: "ne" is l_cond_bits=2 { export Z; }
+l_cc_not_value: "pl" is l_cond_bits=3 { export N; }
+l_cc_not_value: "mi" is l_cond_bits=4 { local tmp:1 = !N; export tmp; }
+l_cc_not_value: "cs" is l_cond_bits=5 { local tmp:1 = !C; export tmp; }
+l_cc_not_value: "cc" is l_cond_bits=6 { export C; }
+l_cc_not_value: "vs" is l_cond_bits=7 { local tmp:1 = !V; export tmp; }
+l_cc_not_value: "vc" is l_cond_bits=8 { export V; }
+l_cc_not_value: "gt" is l_cond_bits=9 { local tmp:1 = Z || (V != N); export tmp; }
+l_cc_not_value: "ge" is l_cond_bits=10 { local tmp:1 = V != N; export tmp; } # (N && !V) || (!N && V)
+l_cc_not_value: "lt" is l_cond_bits=11 { local tmp:1 = V == N; export tmp; } # (N && V) || (!N && !V)
+l_cc_not_value: "le" is l_cond_bits=12 { local tmp:1 = !Z && (V == N); export tmp; }
+l_cc_not_value: "hi" is l_cond_bits=13 { local tmp:1 = C || Z; export tmp; }
+l_cc_not_value: "ls" is l_cond_bits=14 { local tmp:1 = !C && !Z; export tmp; }
+l_cc_not_value: "pnz" is l_cond_bits=15 { local tmp:1 = N || Z; export tmp; }
+# Condition codes 16-31 are used by specific ISA extensions
+l_cc_not_value: "e"^l_cond_bits is l_cond_high_bit=1 & l_cond_bits {
+  local tmp:1 = ext_condition(l_cond_bits:1) == 0:1;
+  export tmp;
+}
+
+l_ld_di: "" is l_ld_direct=0 { }
+l_ld_di: ".di" is l_ld_direct=1 { }
+
+l_st_di: "" is l_st_direct=0 { }
+l_st_di: ".di" is l_st_direct=1 { }
+
+# Decode l_major_opcode=0x04 parameters, which are the same as l_major_opcode=0x05, 0x06, 0x07 and 0x08 (Extension Instructions)
+op4_c_src: l_rc_limm is l_op_format=0 ... & l_rc_limm { export l_rc_limm; }
+op4_c_src: l_u6 is l_op_format=1 & l_u6 { export *[const]:4 l_u6; }
+op4_c_src: s12 is l_op_format=2 & l_u6 & l_s12_high [ s12 = (l_s12_high << 6) + l_u6; ] { export *[const]:4 s12; }
+op4_c_src: l_rc_limm is (l_op_format=3 & l_m=0) ... & l_rc_limm { export l_rc_limm; }
+op4_c_src: l_u6 is l_op_format=3 & l_m=1 & l_u6 { export *[const]:4 l_u6; }
+
+op4_b_src: l_rb_limm is l_rb_limm { export l_rb_limm; }
+op4_b_src: l_rb=pcl_value is l_rb_high=7 & l_rb_low_7=7 & l_rb [ pcl_value = inst_start & ~3; ] { export *[const]:4 pcl_value; } # Special case for pcl
+
+op4_b_dst: l_rb is l_rb { export l_rb; }
+op4_b_dst: 0x0 is l_rb_high=7 & l_rb_low_7=6 { local tmp = 0:4; export tmp; }
+
+op4_a: l_ra_raw is (l_op_format=0 | l_op_format=1) & l_ra_raw { export l_ra_raw; }
+op4_a: 0x0 is (l_op_format=0 | l_op_format=1) & l_ra_raw=62 { local tmp = 0:4; export tmp; }
+op4_a: op4_b_dst is (l_op_format=2 | l_op_format=3) & op4_b_dst { export op4_b_dst; }
+
+op4_j_limm_target: limm is limm { export *[ram]:4 limm; } # Optimize absolute jump
+
+op4_lp_loop_end: target is l_op_format=2 & l_u6 & l_s12_high [ target=(inst_start & ~3) + (l_s12_high << 7) + (l_u6 << 1); ] { export *[ram]:4 target; }
+op4_lp_loop_end: target is l_op_format=3 & l_m=1 & l_u6 [ target=(inst_start & ~3) + (l_u6 << 1); ] { export *[ram]:4 target; }
+
+op4_ld_di: "" is l_op4_ld_direct=0 { }
+op4_ld_di: ".di" is l_op4_ld_direct=1 { }
+
+op4_ld_ra: 0x0 is l_ra_raw=62 { local tmp = 0:4; export tmp; }
+op4_ld_ra: l_ra_raw is l_ra_raw { export l_ra_raw; }
+
+# Implement loop logic, for instruction "LP"
+:^instruction is phase=0 & instruction [ phase = 1; ] {
+  build instruction;
+}
+:^instruction is phase=0 & loopEnd=1 & instruction [ phase = 1; ] {
+  if (is_in_loop == 0) goto <end_loop>;
+  lp_count = lp_count - 1;
+  if (lp_count == 0) goto <end_loop>;
+  # Load LP_START
+  pcl = *[auxregs]:4 (0x08:2);
+  goto [pcl];
+<end_loop>
+  is_in_loop = 0;
+  build instruction;
+}
+
+with : phase=1 {
+
+# Branch Conditionally, 0x00, [0x0]
+:b^l_cc_not_value l_target_s20shift1 is l_major_opcode=0x00 & l_sub_opcode_b16=0 & l_delay_slot_b5=0 & l_target_s20shift1 & l_cc_not_value {
+  if (l_cc_not_value == 0:1) goto l_target_s20shift1;
+}
+:b^l_cc_not_value^".d" l_target_s20shift1 is l_major_opcode=0x00 & l_sub_opcode_b16=0 & l_delay_slot_b5=1 & l_target_s20shift1 & l_cc_not_value {
+  local do_branch:1 = l_cc_not_value == 0:1;
+  delayslot(1);
+  if (do_branch) goto l_target_s20shift1;
+}
+:b l_target_s20shift1 is l_major_opcode=0x00 & l_sub_opcode_b16=0 & l_delay_slot_b5=0 & l_target_s20shift1 & l_cond_bits=0 {
+  goto l_target_s20shift1;
+}
+:b.d l_target_s20shift1 is l_major_opcode=0x00 & l_sub_opcode_b16=0 & l_delay_slot_b5=1 & l_target_s20shift1 & l_cond_bits=0 {
+  delayslot(1);
+  goto l_target_s20shift1;
+}
+
+# Branch Unconditional Far, 0x00, [0x1]
+:b l_target_s24shift1 is l_major_opcode=0x00 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_delay_slot_b5=0 & l_target_s24shift1 {
+  goto l_target_s24shift1;
+}
+:b.d l_target_s24shift1 is l_major_opcode=0x00 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_delay_slot_b5=1 & l_target_s24shift1 {
+  delayslot(1);
+  goto l_target_s24shift1;
+}
+
+# Branch on Compare Register-Register, 0x01, [0x1, 0x0]
+:breq l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x00 & l_delay_slot_b5=0 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  if (l_rb_limm == l_rc_limm) goto op1_1_target;
+}
+:breq.d l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x00 & l_delay_slot_b5=1 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  cond_goto_with_delayslot(l_rb_limm == l_rc_limm, op1_1_target);
+}
+:brne l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x01 & l_delay_slot_b5=0 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  if (l_rb_limm != l_rc_limm) goto op1_1_target;
+}
+:brne.d l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x01 & l_delay_slot_b5=1 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  cond_goto_with_delayslot(l_rb_limm != l_rc_limm, op1_1_target);
+}
+:brlt l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x02 & l_delay_slot_b5=0 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  if (l_rb_limm s< l_rc_limm) goto op1_1_target;
+}
+:brlt.d l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x02 & l_delay_slot_b5=1 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  cond_goto_with_delayslot(l_rb_limm s< l_rc_limm, op1_1_target);
+}
+:brge l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x03 & l_delay_slot_b5=0 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  if (l_rb_limm s>= l_rc_limm) goto op1_1_target;
+}
+:brge.d l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x03 & l_delay_slot_b5=1 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  cond_goto_with_delayslot(l_rb_limm s>= l_rc_limm, op1_1_target);
+}
+:brlo l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x04 & l_delay_slot_b5=0 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  if (l_rb_limm < l_rc_limm) goto op1_1_target;
+}
+:brlo.d l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x04 & l_delay_slot_b5=1 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  cond_goto_with_delayslot(l_rb_limm < l_rc_limm, op1_1_target);
+}
+:brhs l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x05 & l_delay_slot_b5=0 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  if (l_rb_limm >= l_rc_limm) goto op1_1_target;
+}
+:brhs.d l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x05 & l_delay_slot_b5=1 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  cond_goto_with_delayslot(l_rb_limm >= l_rc_limm, op1_1_target);
+}
+:bbit0 l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x0e & l_delay_slot_b5=0 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  if ((l_rb_limm & (1:4 << (l_rc_limm[0,5]))) == 0:4) goto op1_1_target;
+}
+:bbit0.d l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x0e & l_delay_slot_b5=1 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  cond_goto_with_delayslot((l_rb_limm & (1:4 << (l_rc_limm[0,5]))) == 0, op1_1_target);
+}
+:bbit1 l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x0f & l_delay_slot_b5=0 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  if ((l_rb_limm & (1:4 << (l_rc_limm[0,5]))) != 0:4) goto op1_1_target;
+}
+:bbit1.d l_rb_limm, l_rc_limm, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=0 & l_sub_opcode_b0b1b2b3=0x0f & l_delay_slot_b5=1 & op1_1_target) ... & l_rb_limm & l_rc_limm {
+  cond_goto_with_delayslot((l_rb_limm & (1:4 << (l_rc_limm[0,5]))) != 0, op1_1_target);
+}
+
+# Branch on Compare/Bit Test Register-Immediate, 0x01, [0x1, 0x1]
+:breq l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x00 & l_delay_slot_b5=0 & op1_1_target & l_u6) ... & l_rb_limm {
+  if (l_rb_limm == l_u6) goto op1_1_target;
+}
+:breq.d l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x00 & l_delay_slot_b5=1 & op1_1_target & l_u6) ... & l_rb_limm {
+  cond_goto_with_delayslot(l_rb_limm == l_u6, op1_1_target);
+}
+:brne l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x01 & l_delay_slot_b5=0 & op1_1_target & l_u6) ... & l_rb_limm {
+  if (l_rb_limm != l_u6) goto op1_1_target;
+}
+:brne.d l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x01 & l_delay_slot_b5=1 & op1_1_target & l_u6) ... & l_rb_limm {
+  cond_goto_with_delayslot(l_rb_limm != l_u6, op1_1_target);
+}
+:brlt l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x02 & l_delay_slot_b5=0 & op1_1_target & l_u6) ... & l_rb_limm {
+  if (l_rb_limm s< l_u6) goto op1_1_target;
+}
+:brlt.d l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x02 & l_delay_slot_b5=1 & op1_1_target & l_u6) ... & l_rb_limm {
+  cond_goto_with_delayslot(l_rb_limm s< l_u6, op1_1_target);
+}
+:brge l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x03 & l_delay_slot_b5=0 & op1_1_target & l_u6) ... & l_rb_limm {
+  if (l_rb_limm s>= l_u6) goto op1_1_target;
+}
+:brge.d l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x03 & l_delay_slot_b5=1 & op1_1_target & l_u6) ... & l_rb_limm {
+  cond_goto_with_delayslot(l_rb_limm s>= l_u6, op1_1_target);
+}
+:brlo l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x04 & l_delay_slot_b5=0 & op1_1_target & l_u6) ... & l_rb_limm {
+  if (l_rb_limm < l_u6) goto op1_1_target;
+}
+:brlo.d l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x04 & l_delay_slot_b5=1 & op1_1_target & l_u6) ... & l_rb_limm {
+  cond_goto_with_delayslot(l_rb_limm < l_u6, op1_1_target);
+}
+:brhs l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x05 & l_delay_slot_b5=0 & op1_1_target & l_u6) ... & l_rb_limm {
+  if (l_rb_limm >= l_u6) goto op1_1_target;
+}
+:brhs.d l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x05 & l_delay_slot_b5=1 & op1_1_target & l_u6) ... & l_rb_limm {
+  cond_goto_with_delayslot(l_rb_limm >= l_u6, op1_1_target);
+}
+:bbit0 l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x0e & l_delay_slot_b5=0 & op1_1_target & l_u6 & op1_u6_bit) ... & l_rb_limm {
+  if ((l_rb_limm & op1_u6_bit) == 0) goto op1_1_target;
+}
+:bbit0.d l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x0e & l_delay_slot_b5=1 & op1_1_target & l_u6 & op1_u6_bit) ... & l_rb_limm {
+  cond_goto_with_delayslot((l_rb_limm & op1_u6_bit) == 0, op1_1_target);
+}
+:bbit1 l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x0f & l_delay_slot_b5=0 & op1_1_target & l_u6 & op1_u6_bit) ... & l_rb_limm {
+  if ((l_rb_limm & op1_u6_bit) != 0) goto op1_1_target;
+}
+:bbit1.d l_rb_limm, l_u6, op1_1_target is (l_major_opcode=0x01 & l_sub_opcode_b16=1 & l_sub_opcode_b4=1 & l_sub_opcode_b0b1b2b3=0x0f & l_delay_slot_b5=1 & op1_1_target & l_u6 & op1_u6_bit) ... & l_rb_limm {
+  cond_goto_with_delayslot((l_rb_limm & op1_u6_bit) != 0, op1_1_target);
+}
+
+# Branch and Link Conditionally, 0x01, [0x0, 0x0]
+:bl^l_cc_not_value l_target_s19shift2 is l_major_opcode=0x01 & l_sub_opcode_b16=0 & l_sub_opcode_b17=0 & l_delay_slot_b5=0 & l_target_s19shift2 & l_cc_not_value {
+  if (l_cc_not_value) goto inst_next;
+  blink = inst_next;
+  call l_target_s19shift2;
+}
+:bl^l_cc_not_value^".d" l_target_s19shift2 is l_major_opcode=0x01 & l_sub_opcode_b16=0 & l_sub_opcode_b17=0 & l_delay_slot_b5=1 & l_target_s19shift2 & l_cc_not_value {
+  local _l_cc_not_value:1 = l_cc_not_value;
+  delayslot(1);
+  if (_l_cc_not_value) goto inst_next;
+  blink = inst_next;
+  call l_target_s19shift2;
+}
+:bl l_target_s19shift2 is l_major_opcode=0x01 & l_sub_opcode_b16=0 & l_sub_opcode_b17=0 & l_delay_slot_b5=0 & l_target_s19shift2 & l_cond_bits=0 {
+  blink = inst_next;
+  call l_target_s19shift2;
+}
+:bl.d l_target_s19shift2 is l_major_opcode=0x01 & l_sub_opcode_b16=0 & l_sub_opcode_b17=0 & l_delay_slot_b5=1 & l_target_s19shift2 & l_cond_bits=0 {
+  blink = inst_next;
+  delayslot(1);
+  call l_target_s19shift2;
+}
+
+# Branch and Link Unconditional Far, 0x01, [0x0, 0x1]
+:bl l_target_s23shift2 is l_major_opcode=0x01 & l_sub_opcode_b16=0 & l_sub_opcode_b17=1 & l_sub_opcode_b4=0 & l_delay_slot_b5=0 & l_target_s23shift2 {
+  blink = inst_next;
+  call l_target_s23shift2;
+}
+:bl.d l_target_s23shift2 is l_major_opcode=0x01 & l_sub_opcode_b16=0 & l_sub_opcode_b17=1 & l_sub_opcode_b4=0 & l_delay_slot_b5=1 & l_target_s23shift2 {
+  blink = inst_next;
+  delayslot(1);
+  call l_target_s23shift2;
+}
+
+# Load Register with Offset, 0x02
+:ld^l_ld_di l_ra_raw, l_ldst_mem_rb_s9 is (l_major_opcode=0x02 & l_ld_addr_mode=0 & l_ld_data_size=0 & l_ld_sign_ext=0 & l_ld_di & l_ra_raw) ... & l_ldst_mem_rb_s9 {
+  l_ra_raw = *[ram]:4 l_ldst_mem_rb_s9;
+}
+:ldb^l_ld_di l_ra_raw, l_ldst_mem_rb_s9 is (l_major_opcode=0x02 & l_ld_addr_mode=0 & l_ld_data_size=1 & l_ld_sign_ext=0 & l_ld_di & l_ra_raw) ... & l_ldst_mem_rb_s9 {
+  l_ra_raw = zext(*[ram]:1 l_ldst_mem_rb_s9);
+}
+:ldb.x^l_ld_di l_ra_raw, l_ldst_mem_rb_s9 is (l_major_opcode=0x02 & l_ld_addr_mode=0 & l_ld_data_size=1 & l_ld_sign_ext=1 & l_ld_di & l_ra_raw) ... & l_ldst_mem_rb_s9 {
+  l_ra_raw = sext(*[ram]:1 l_ldst_mem_rb_s9);
+}
+:ldw^l_ld_di l_ra_raw, l_ldst_mem_rb_s9 is (l_major_opcode=0x02 & l_ld_addr_mode=0 & l_ld_data_size=2 & l_ld_sign_ext=0 & l_ld_di & l_ra_raw) ... & l_ldst_mem_rb_s9 {
+  l_ra_raw = zext(*[ram]:2 l_ldst_mem_rb_s9);
+}
+:ldw.x^l_ld_di l_ra_raw, l_ldst_mem_rb_s9] is (l_major_opcode=0x02 & l_ld_addr_mode=0 & l_ld_data_size=2 & l_ld_sign_ext=1 & l_ld_di & l_ra_raw) ... & l_ldst_mem_rb_s9 {
+  l_ra_raw = sext(*[ram]:2 l_ldst_mem_rb_s9);
+}
+
+# For each instruction, add patterns with r62 (long immediate), which are invalid instructions
+:ld.a^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=1 & l_ld_data_size=0 & l_ld_sign_ext=0 & l_s9 & l_ld_di & l_ra_raw & l_rb {
+  l_rb = l_rb + l_s9;
+  l_ra_raw = *[ram]:4 l_rb;
+}
+:ld.a^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=1 & l_ld_data_size=0 & l_ld_sign_ext=0 & l_s9 & l_ld_di & l_ra_raw & l_rb_high=7 & l_rb_low_7=6 & l_rb unimpl
+:ldb.a^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=1 & l_ld_data_size=1 & l_ld_sign_ext=0 & l_s9 & l_ld_di & l_ra_raw & l_rb {
+  l_rb = l_rb + l_s9;
+  l_ra_raw = zext(*[ram]:1 l_rb);
+}
+:ldb.a^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=1 & l_ld_data_size=1 & l_ld_sign_ext=0 & l_s9 & l_ld_di & l_ra_raw & l_rb_high=7 & l_rb_low_7=6 & l_rb unimpl
+:ldb.x.a^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=1 & l_ld_data_size=1 & l_ld_sign_ext=1 & l_s9 & l_ld_di & l_ra_raw & l_rb {
+  l_rb = l_rb + l_s9;
+  l_ra_raw = sext(*[ram]:1 l_rb);
+}
+:ldb.x.a^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=1 & l_ld_data_size=1 & l_ld_sign_ext=1 & l_s9 & l_ld_di & l_ra_raw & l_rb_high=7 & l_rb_low_7=6 & l_rb unimpl
+:ldw.a^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=1 & l_ld_data_size=2 & l_ld_sign_ext=0 & l_s9 & l_ld_di & l_ra_raw & l_rb {
+  l_rb = l_rb + l_s9;
+  l_ra_raw = zext(*[ram]:2 l_rb);
+}
+:ldw.a^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=1 & l_ld_data_size=2 & l_ld_sign_ext=0 & l_s9 & l_ld_di & l_ra_raw & l_rb_high=7 & l_rb_low_7=6 & l_rb unimpl
+:ldw.x.a^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=1 & l_ld_data_size=2 & l_ld_sign_ext=1 & l_s9 & l_ld_di & l_ra_raw & l_rb {
+  l_rb = l_rb + l_s9;
+  l_ra_raw = sext(*[ram]:2 l_rb);
+}
+:ldw.x.a^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=1 & l_ld_data_size=2 & l_ld_sign_ext=1 & l_s9 & l_ld_di & l_ra_raw & l_rb_high=7 & l_rb_low_7=6 & l_rb unimpl
+
+:ld.ab^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=2 & l_ld_data_size=0 & l_ld_sign_ext=0 & l_s9 & l_ld_di & l_ra_raw & l_rb {
+  l_ra_raw = *[ram]:4 l_rb;
+  l_rb = l_rb + l_s9;
+}
+:ld.ab^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=2 & l_ld_data_size=0 & l_ld_sign_ext=0 & l_s9 & l_ld_di & l_ra_raw & l_rb_high=7 & l_rb_low_7=6 & l_rb unimpl
+:ldb.ab^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=2 & l_ld_data_size=1 & l_ld_sign_ext=0 & l_s9 & l_ld_di & l_ra_raw & l_rb {
+  l_ra_raw = zext(*[ram]:1 l_rb);
+  l_rb = l_rb + l_s9;
+}
+:ldb.ab^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=2 & l_ld_data_size=1 & l_ld_sign_ext=0 & l_s9 & l_ld_di & l_ra_raw & l_rb_high=7 & l_rb_low_7=6 & l_rb unimpl
+:ldb.x.ab^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=2 & l_ld_data_size=1 & l_ld_sign_ext=1 & l_s9 & l_ld_di & l_ra_raw & l_rb {
+  l_ra_raw = zext(*[ram]:1 l_rb);
+  l_rb = l_rb + l_s9;
+}
+:ldb.x.ab^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=2 & l_ld_data_size=1 & l_ld_sign_ext=1 & l_s9 & l_ld_di & l_ra_raw & l_rb_high=7 & l_rb_low_7=6 & l_rb unimpl
+:ldw.ab^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=2 & l_ld_data_size=2 & l_ld_sign_ext=0 & l_s9 & l_ld_di & l_ra_raw & l_rb {
+  l_ra_raw = zext(*[ram]:2 l_rb);
+  l_rb = l_rb + l_s9;
+}
+:ldw.ab^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=2 & l_ld_data_size=2 & l_ld_sign_ext=0 & l_s9 & l_ld_di & l_ra_raw & l_rb_high=7 & l_rb_low_7=6 & l_rb unimpl
+:ldw.x.ab^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=2 & l_ld_data_size=2 & l_ld_sign_ext=1 & l_s9 & l_ld_di & l_ra_raw & l_rb {
+  l_ra_raw = zext(*[ram]:2 l_rb);
+  l_rb = l_rb + l_s9;
+}
+:ldw.x.ab^l_ld_di l_ra_raw, [l_rb, l_s9] is l_major_opcode=0x02 & l_ld_addr_mode=2 & l_ld_data_size=2 & l_ld_sign_ext=1 & l_s9 & l_ld_di & l_ra_raw & l_rb_high=7 & l_rb_low_7=6 & l_rb unimpl
+
+:ld.as^l_ld_di l_ra_raw, [l_rb_limm, l_s9shift2] is (l_major_opcode=0x02 & l_ld_addr_mode=3 & l_ld_data_size=0 & l_ld_sign_ext=0 & l_s9shift2 & l_ld_di & l_ra_raw) ... & l_rb_limm {
+  local addr:4 = l_rb_limm + l_s9shift2;
+  l_ra_raw = *[ram]:4 addr;
+}
+:ldw.as^l_ld_di l_ra_raw, [l_rb_limm, l_s9shift1] is (l_major_opcode=0x02 & l_ld_addr_mode=3 & l_ld_data_size=2 & l_ld_sign_ext=0 & l_s9shift1 & l_ld_di & l_ra_raw) ... & l_rb_limm {
+  local addr:4 = l_rb_limm + l_s9shift1;
+  l_ra_raw = zext(*[ram]:2 addr);
+}
+:ldw.x.as^l_ld_di l_ra_raw, [l_rb_limm, l_s9shift1] is (l_major_opcode=0x02 & l_ld_addr_mode=3 & l_ld_data_size=2 & l_ld_sign_ext=1 & l_s9shift1 & l_ld_di & l_ra_raw) ... & l_rb_limm {
+  local addr:4 = l_rb_limm + l_s9shift1;
+  l_ra_raw = sext(*[ram]:2 addr);
+}
+
+# Store Register with Offset, 0x03
+:st^l_st_di l_rc_limm, l_ldst_mem_rb_s9 is (l_major_opcode=0x03 & l_st_addr_mode=0 & l_st_data_size=0 & l_st_di) ... & l_ldst_mem_rb_s9 & l_rc_limm {
+  *[ram]:4 l_ldst_mem_rb_s9 = l_rc_limm;
+}
+:stb^l_st_di l_rc_limm, l_ldst_mem_rb_s9 is (l_major_opcode=0x03 & l_st_addr_mode=0 & l_st_data_size=1 & l_st_di) ... & l_ldst_mem_rb_s9 & l_rc_limm {
+  *[ram]:1 l_ldst_mem_rb_s9 = l_rc_limm:1;
+}
+:stw^l_st_di l_rc_limm, l_ldst_mem_rb_s9 is (l_major_opcode=0x03 & l_st_addr_mode=0 & l_st_data_size=2 & l_st_di) ... & l_ldst_mem_rb_s9 & l_rc_limm {
+  *[ram]:2 l_ldst_mem_rb_s9 = l_rc_limm:2;
+}
+
+:st.a^l_st_di l_rc_limm, [l_rb, l_s9] is (l_major_opcode=0x03 & l_st_addr_mode=1 & l_st_data_size=0 & l_s9 & l_st_di & l_rb) ... & l_rc_limm {
+  l_rb = l_rb + l_s9;
+  *[ram]:4 l_rb = l_rc_limm;
+}
+:st.a^l_st_di l_rc_limm, [l_rb, l_s9] is (l_major_opcode=0x03 & l_st_addr_mode=1 & l_st_data_size=0 & l_s9 & l_st_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+:stb.a^l_st_di l_rc_limm, [l_rb, l_s9] is (l_major_opcode=0x03 & l_st_addr_mode=1 & l_st_data_size=1 & l_s9 & l_st_di & l_rb) ... & l_rc_limm {
+  l_rb = l_rb + l_s9;
+  *[ram]:1 l_rb = l_rc_limm:1;
+}
+:stb.a^l_st_di l_rc_limm, [l_rb, l_s9] is (l_major_opcode=0x03 & l_st_addr_mode=1 & l_st_data_size=1 & l_s9 & l_st_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+:stw.a^l_st_di l_rc_limm, [l_rb, l_s9] is (l_major_opcode=0x03 & l_st_addr_mode=1 & l_st_data_size=2 & l_s9 & l_st_di & l_rb) ... & l_rc_limm {
+  l_rb = l_rb + l_s9;
+  *[ram]:2 l_rb = l_rc_limm:2;
+}
+:stw.a^l_st_di l_rc_limm, [l_rb, l_s9] is (l_major_opcode=0x03 & l_st_addr_mode=1 & l_st_data_size=2 & l_s9 & l_st_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+
+:st.ab^l_st_di l_rc_limm, [l_rb, l_s9] is (l_major_opcode=0x03 & l_st_addr_mode=2 & l_st_data_size=0 & l_s9 & l_st_di & l_rb) ... & l_rc_limm {
+  *[ram]:4 l_rb = l_rc_limm;
+  l_rb = l_rb + l_s9;
+}
+:st.ab^l_st_di l_rc_limm, [l_rb, l_s9] is (l_major_opcode=0x03 & l_st_addr_mode=2 & l_st_data_size=0 & l_s9 & l_st_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+:stb.ab^l_st_di l_rc_limm, [l_rb, l_s9] is (l_major_opcode=0x03 & l_st_addr_mode=2 & l_st_data_size=1 & l_s9 & l_st_di & l_rb) ... & l_rc_limm {
+  *[ram]:1 l_rb = l_rc_limm:1;
+  l_rb = l_rb + l_s9;
+}
+:stb.ab^l_st_di l_rc_limm, [l_rb, l_s9] is (l_major_opcode=0x03 & l_st_addr_mode=2 & l_st_data_size=1 & l_s9 & l_st_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+:stw.ab^l_st_di l_rc_limm, [l_rb, l_s9] is (l_major_opcode=0x03 & l_st_addr_mode=2 & l_st_data_size=2 & l_s9 & l_st_di & l_rb) ... & l_rc_limm {
+  *[ram]:2 l_rb = l_rc_limm:2;
+  l_rb = l_rb + l_s9;
+}
+:stw.ab^l_st_di l_rc_limm, [l_rb, l_s9] is (l_major_opcode=0x03 & l_st_addr_mode=2 & l_st_data_size=2 & l_s9 & l_st_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+
+:st.as^l_st_di l_rc_limm, [l_rb_limm, l_s9shift2] is (l_major_opcode=0x03 & l_st_addr_mode=3 & l_st_data_size=0 & l_s9shift2 & l_st_di) ... & l_rb_limm & l_rc_limm {
+  local addr:4 = l_rb_limm + l_s9shift2;
+  *[ram]:4 addr = l_rc_limm;
+}
+:stw.as^l_st_di l_rc_limm, [l_rb_limm, l_s9shift1] is (l_major_opcode=0x03 & l_st_addr_mode=3 & l_st_data_size=2 & l_s9shift1 & l_st_di) ... & l_rb_limm & l_rc_limm {
+  local addr:4 = l_rb_limm + l_s9shift1;
+  *[ram]:2 addr = l_rc_limm:2;
+}
+
+# General Operations, 0x04, [0x00 - 0x3F]
+# ALU Operations, 0x04, [0x00-0x1F]
+with : l_major_opcode=0x04 ... {
+  :add op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x00 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src + op4_c_src;
+  }
+  :add.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x00 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    # Do not use "goto inst_next", as this does not have the right semantics when the instruction appears in a delay slot.
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src + op4_c_src;
+  <next>
+  }
+  :add.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x00 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    update_flags_add_cv(op4_b_src, op4_c_src);
+    op4_a = op4_b_src + op4_c_src;
+    update_flags_zn(op4_a);
+  }
+  :add.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x00 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    update_flags_add_cv(op4_b_src, op4_c_src);
+    op4_a = op4_b_src + op4_c_src;
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :adc op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x01 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src + op4_c_src + zext(C);
+  }
+  :adc.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x01 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src + op4_c_src + zext(C);
+  <next>
+  }
+  :adc.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x01 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    local sign_b:1 = (op4_b_src >> 31) != 0;
+    local sign_c:1 = (op4_c_src >> 31) != 0;
+    local new_C:1 = ((C == 0) && carry(op4_b_src, op4_c_src)) || ((C == 1) && (op4_b_src >= op4_b_src + op4_c_src + 1:4));
+    op4_a = op4_b_src + op4_c_src + zext(C);
+    local sign_a:1 = (op4_a >> 31) != 0;
+    C = new_C;
+    V = (sign_b == sign_c) && (sign_a != sign_b);
+    update_flags_zn(op4_a);
+  }
+  :adc.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x01 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local sign_b:1 = (op4_b_src >> 31) != 0;
+    local sign_c:1 = (op4_c_src >> 31) != 0;
+    local new_C:1 = ((C == 0) && carry(op4_b_src, op4_c_src)) || ((C == 1) && (op4_b_src >= op4_b_src + op4_c_src + 1:4));
+    op4_a = op4_b_src + op4_c_src + zext(C);
+    local sign_a:1 = (op4_a >> 31) != 0;
+    C = new_C;
+    V = (sign_b == sign_c) && (sign_a != sign_b);
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :sub op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x02 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src - op4_c_src;
+  }
+  :sub.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x02 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src - op4_c_src;
+  <next>
+  }
+  :sub.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x02 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    local result:4 = op4_b_src - op4_c_src;
+    update_flags_sub_zncv(op4_b_src, op4_c_src, result);
+    op4_a = result;
+  }
+  :sub.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x02 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local result:4 = op4_b_src - op4_c_src;
+    update_flags_sub_zncv(op4_b_src, op4_c_src, result);
+    op4_a = result;
+  <next>
+  }
+  :sbc op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x03 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src - op4_c_src - zext(C);
+  }
+  :sbc.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x03 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src - op4_c_src - zext(C);
+  <next>
+  }
+  :sbc.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x03 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    local sub_b_c:4 = op4_b_src - op4_c_src;
+    local old_C:4 = zext(C);
+    C = (op4_b_src < op4_c_src) || ((old_C == 1:4) && (op4_b_src == op4_c_src));
+    V = sborrow(op4_b_src, op4_c_src) || ((old_C == 1:4) && sborrow(sub_b_c, old_C));
+    op4_a = sub_b_c - old_C;
+    update_flags_zn(op4_a);
+  }
+  :sbc.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x03 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local sub_b_c:4 = op4_b_src - op4_c_src;
+    local old_C:4 = zext(C);
+    C = (op4_b_src < op4_c_src) || ((old_C == 1:4) && (op4_b_src == op4_c_src));
+    V = sborrow(op4_b_src, op4_c_src) || ((old_C == 1:4) && sborrow(sub_b_c, old_C));
+    op4_a = sub_b_c - old_C;
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :and op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x04 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src & op4_c_src;
+  }
+  :and.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x04 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src & op4_c_src;
+  <next>
+  }
+  :and.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x04 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src & op4_c_src;
+    update_flags_zn(op4_a);
+  }
+  :and.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x04 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src & op4_c_src;
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :or op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x05 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src | op4_c_src;
+  }
+  :or.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x05 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src | op4_c_src;
+  <next>
+  }
+  :or.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x05 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src | op4_c_src;
+    update_flags_zn(op4_a);
+  }
+  :or.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x05 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src | op4_c_src;
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :bic op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x06 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src & ~op4_c_src;
+  }
+  :bic.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x06 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src & ~op4_c_src;
+  <next>
+  }
+  :bic.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x06 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src & ~op4_c_src;
+    update_flags_zn(op4_a);
+  }
+  :bic.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x06 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src & ~op4_c_src;
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :xor op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x07 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src ^ op4_c_src;
+  }
+  :xor.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x07 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src ^ op4_c_src;
+  <next>
+  }
+  :xor.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x07 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src ^ op4_c_src;
+    update_flags_zn(op4_a);
+  }
+  :xor.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x07 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src ^ op4_c_src;
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :max op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x08 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    local c_greatereq_b:1 = op4_c_src s>= op4_b_src;
+    op4_a = op4_b_src * zext(c_greatereq_b == 0:1) + op4_c_src * zext(c_greatereq_b);
+  }
+  :max.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x08 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local c_greatereq_b:1 = op4_c_src s>= op4_b_src;
+    op4_a = op4_b_src * zext(c_greatereq_b == 0:1) + op4_c_src * zext(c_greatereq_b);
+  <next>
+  }
+  :max.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x08 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    Z = op4_c_src == op4_b_src;
+    N = (op4_b_src - op4_c_src) s< 0:4;
+    C = op4_c_src s>= op4_b_src;
+    V = sborrow(op4_b_src, op4_c_src);
+    op4_a = op4_b_src * zext(C == 0:1) + op4_c_src * zext(C);
+  }
+  :max.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x08 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    Z = op4_c_src == op4_b_src;
+    N = (op4_b_src - op4_c_src) s< 0:4;
+    C = op4_c_src s>= op4_b_src;
+    V = sborrow(op4_b_src, op4_c_src);
+    op4_a = op4_b_src * zext(C == 0:1) + op4_c_src * zext(C);
+  <next>
+  }
+  :min op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x09 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    local c_lowereq_b:1 = op4_c_src s<= op4_b_src;
+    op4_a = op4_b_src * zext(c_lowereq_b == 0:1) + op4_c_src * zext(c_lowereq_b);
+  }
+  :min.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x09 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local c_lowereq_b:1 = op4_c_src s<= op4_b_src;
+    op4_a = op4_b_src * zext(c_lowereq_b == 0:1) + op4_c_src * zext(c_lowereq_b);
+  <next>
+  }
+  :min.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x09 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    Z = op4_c_src == op4_b_src;
+    N = (op4_b_src - op4_c_src) s< 0:4;
+    C = op4_c_src s<= op4_b_src;
+    V = sborrow(op4_b_src, op4_c_src);
+    op4_a = op4_b_src * zext(C == 0:1) + op4_c_src * zext(C);
+  }
+  :min.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x09 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    Z = op4_c_src == op4_b_src;
+    N = (op4_b_src - op4_c_src) s< 0:4;
+    C = op4_c_src s<= op4_b_src;
+    V = sborrow(op4_b_src, op4_c_src);
+    op4_a = op4_b_src * zext(C == 0:1) + op4_c_src * zext(C);
+  <next>
+  }
+  :mov op4_b_dst, op4_c_src is (l_sub_opcode6=0x0a & l_flag=0 & op4_b_dst) ... & op4_c_src {
+    op4_b_dst = op4_c_src;
+  }
+  :mov.^l_cc_not_value op4_b_dst, op4_c_src is (l_sub_opcode6=0x0a & l_flag=0 & op4_b_dst & l_op_format=3 & l_cc_not_value) ... & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_b_dst = op4_c_src;
+  <next>
+  }
+  :mov.f op4_b_dst, op4_c_src is (l_sub_opcode6=0x0a & l_flag=1 & op4_b_dst) ... & op4_c_src {
+    update_flags_zn(op4_c_src);
+    op4_b_dst = op4_c_src;
+  }
+  :mov.^l_cc_not_value^".f" op4_b_dst, op4_c_src is (l_sub_opcode6=0x0a & l_flag=1 & op4_b_dst & l_op_format=3 & l_cc_not_value) ... & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    update_flags_zn(op4_c_src);
+    op4_b_dst = op4_c_src;
+  <next>
+  }
+  :tst op4_b_src, op4_c_src is (l_sub_opcode6=0x0b & l_flag=1) ... & op4_b_src & op4_c_src {
+    update_flags_zn(op4_b_src & op4_c_src);
+  }
+  :tst.^l_cc_not_value op4_b_src, op4_c_src is (l_sub_opcode6=0x0b & l_flag=1 & l_op_format=3 & l_cc_not_value) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    update_flags_zn(op4_b_src & op4_c_src);
+  <next>
+  }
+  :cmp op4_b_src, op4_c_src is (l_sub_opcode6=0x0c & l_flag=1) ... & op4_b_src & op4_c_src {
+    local result:4 = op4_b_src - op4_c_src;
+    update_flags_sub_zncv(op4_b_src, op4_c_src, result);
+  }
+  :cmp.^l_cc_not_value op4_b_src, op4_c_src is (l_sub_opcode6=0x0c & l_flag=1 & l_op_format=3 & l_cc_not_value) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local result:4 = op4_b_src - op4_c_src;
+    update_flags_sub_zncv(op4_b_src, op4_c_src, result);
+  <next>
+  }
+  :rcmp op4_b_src, op4_c_src is (l_sub_opcode6=0x0d & l_flag=1) ... & op4_b_src & op4_c_src {
+    local result:4 = op4_c_src - op4_b_src;
+    update_flags_sub_zncv(op4_c_src, op4_b_src, result);
+  }
+  :rcmp.^l_cc_not_value op4_b_src, op4_c_src is (l_sub_opcode6=0x0d & l_flag=1 & l_op_format=3 & l_cc_not_value) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local result:4 = op4_c_src - op4_b_src;
+    update_flags_sub_zncv(op4_c_src, op4_b_src, result);
+  <next>
+  }
+  :rsub op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0e & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_c_src - op4_b_src;
+  }
+  :rsub.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0e & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_c_src - op4_b_src;
+  <next>
+  }
+  :rsub.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0e & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    local result:4 = op4_c_src - op4_b_src;
+    update_flags_sub_zncv(op4_c_src, op4_b_src, result);
+    op4_a = result;
+  }
+  :rsub.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0e & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local result:4 = op4_c_src - op4_b_src;
+    update_flags_sub_zncv(op4_c_src, op4_b_src, result);
+    op4_a = result;
+  <next>
+  }
+  :bset op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0f & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src | (1:4 << (op4_c_src[0,5]));
+  }
+  :bset.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0f & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src | (1:4 << (op4_c_src[0,5]));
+  <next>
+  }
+  :bset.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0f & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src | (1:4 << (op4_c_src[0,5]));
+    update_flags_zn(op4_a);
+  }
+  :bset.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0f & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src | (1:4 << (op4_c_src[0,5]));
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :bclr op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x10 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src & ~(1:4 << (op4_c_src[0,5]));
+  }
+  :bclr.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x10 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src & ~(1:4 << (op4_c_src[0,5]));
+  <next>
+  }
+  :bclr.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x10 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src & ~(1:4 << (op4_c_src[0,5]));
+    update_flags_zn(op4_a);
+  }
+  :bclr.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x10 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src & ~(1:4 << (op4_c_src[0,5]));
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :btst op4_b_src, op4_c_src is (l_sub_opcode6=0x11 & l_flag=1) ... & op4_b_src & op4_c_src {
+    update_flags_zn(op4_b_src & (1:4 << (op4_c_src[0,5])));
+  }
+  :btst.^l_cc_not_value op4_b_src, op4_c_src is (l_sub_opcode6=0x11 & l_flag=1 & l_op_format=3 & l_cc_not_value) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    update_flags_zn(op4_b_src & (1:4 << (op4_c_src[0,5])));
+  <next>
+  }
+  :bxor op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x12 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src ^ (1:4 << (op4_c_src[0,5]));
+  }
+  :bxor.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x12 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src ^ (1:4 << (op4_c_src[0,5]));
+  <next>
+  }
+  :bxor.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x12 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src ^ (1:4 << (op4_c_src[0,5]));
+    update_flags_zn(op4_a);
+  }
+  :bxor.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x12 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src ^ (1:4 << (op4_c_src[0,5]));
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :bmsk op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x13 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    local c_src_plus_one:4 = op4_c_src + 1:4;
+    op4_a = op4_b_src & ((1:4 << (c_src_plus_one[0,5])) - 1:4);
+  }
+  :bmsk.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x13 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local c_src_plus_one:4 = op4_c_src + 1:4;
+    op4_a = op4_b_src & ((1:4 << (c_src_plus_one[0,5])) - 1:4);
+  <next>
+  }
+  :bmsk.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x13 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    local c_src_plus_one:4 = op4_c_src + 1:4;
+    op4_a = op4_b_src & ((1:4 << (c_src_plus_one[0,5])) - 1:4);
+    update_flags_zn(op4_a);
+  }
+  :bmsk.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x13 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local c_src_plus_one:4 = op4_c_src + 1:4;
+    op4_a = op4_b_src & ((1:4 << (c_src_plus_one[0,5])) - 1:4);
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :add1 op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x14 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src + (op4_c_src << 1);
+    update_flags_zn(op4_a);
+  }
+  :add1.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x14 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src + (op4_c_src << 1);
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :add1^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x14 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    local op2:4 = op4_c_src << 1;
+    update_flags_add_cv(op4_b_src, op2);
+    op4_a = op4_b_src + op2;
+    update_flags_zn(op4_a);
+  }
+  :add1.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x14 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local op2:4 = op4_c_src << 1;
+    update_flags_add_cv(op4_b_src, op2);
+    op4_a = op4_b_src + op2;
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :add2 op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x15 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src + (op4_c_src << 2);
+  }
+  :add2.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x15 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src + (op4_c_src << 2);
+  <next>
+  }
+  :add2^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x15 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    local op2:4 = op4_c_src << 2;
+    update_flags_add_cv(op4_b_src, op2);
+    op4_a = op4_b_src + op2;
+    update_flags_zn(op4_a);
+  }
+  :add2.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x15 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local op2:4 = op4_c_src << 2;
+    update_flags_add_cv(op4_b_src, op2);
+    op4_a = op4_b_src + op2;
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :add3 op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x16 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src + (op4_c_src << 3);
+  }
+  :add3.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x16 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src + (op4_c_src << 3);
+  <next>
+  }
+  :add3^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x16 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    local op2:4 = op4_c_src << 3;
+    update_flags_add_cv(op4_b_src, op2);
+    op4_a = op4_b_src + op2;
+    update_flags_zn(op4_a);
+  }
+  :add3.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x16 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local op2:4 = op4_c_src << 3;
+    update_flags_add_cv(op4_b_src, op2);
+    op4_a = op4_b_src + op2;
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :sub1 op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x17 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src - (op4_c_src << 1);
+  }
+  :sub1.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x17 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src - (op4_c_src << 1);
+  <next>
+  }
+  :sub1^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x17 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    local op2:4 = op4_c_src << 1;
+    local result:4 = op4_b_src - op2;
+    update_flags_sub_zncv(op4_b_src, op2, result);
+    op4_a = result;
+  }
+  :sub1.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x17 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local op2:4 = op4_c_src << 1;
+    local result:4 = op4_b_src - op2;
+    update_flags_sub_zncv(op4_b_src, op2, result);
+    op4_a = result;
+  <next>
+  }
+  :sub2 op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x18 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src - (op4_c_src << 2);
+  }
+  :sub2.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x18 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src - (op4_c_src << 2);
+  <next>
+  }
+  :sub2^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x18 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    local op2:4 = op4_c_src << 2;
+    local result:4 = op4_b_src - op2;
+    update_flags_sub_zncv(op4_b_src, op2, result);
+    op4_a = op4_b_src - op2;
+  }
+  :sub2.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x18 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local op2:4 = op4_c_src << 2;
+    local result:4 = op4_b_src - op2;
+    update_flags_sub_zncv(op4_b_src, op2, result);
+    op4_a = op4_b_src - op2;
+  <next>
+  }
+  :sub3 op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x19 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src - (op4_c_src << 3);
+  }
+  :sub3.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x19 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src - (op4_c_src << 3);
+  <next>
+  }
+  :sub3^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x19 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    local op2:4 = op4_c_src << 3;
+    local result:4 = op4_b_src - op2;
+    update_flags_sub_zncv(op4_b_src, op2, result);
+    op4_a = op4_b_src - op2;
+  }
+  :sub3.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x19 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local op2:4 = op4_c_src << 3;
+    local result:4 = op4_b_src - op2;
+    update_flags_sub_zncv(op4_b_src, op2, result);
+    op4_a = op4_b_src - op2;
+  <next>
+  }
+  :mpy op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x1a & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    local val_b:8 = sext(op4_b_src);
+    local val_c:8 = sext(op4_c_src);
+    local result:8 = val_b * val_c;
+    op4_a = result:4; # extract low 32 bits
+  }
+  :mpy.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x1a & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local val_b:8 = sext(op4_b_src);
+    local val_c:8 = sext(op4_c_src);
+    local result:8 = val_b * val_c;
+    op4_a = result:4; # extract low 32 bits
+  <next>
+  }
+  :mpyh op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x1b & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src  {
+    local val_b:8 = sext(op4_b_src);
+    local val_c:8 = sext(op4_c_src);
+    local result:8 = val_b * val_c;
+    op4_a = result(4); # extract high 32 bits
+  }
+  :mpyh.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x1b & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src  {
+    if (l_cc_not_value) goto <next>;
+    local val_b:8 = sext(op4_b_src);
+    local val_c:8 = sext(op4_c_src);
+    local result:8 = val_b * val_c;
+    op4_a = result(4); # extract high 32 bits
+  <next>
+  }
+  :mpyhu op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x1c & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    local val_b:8 = zext(op4_b_src);
+    local val_c:8 = zext(op4_c_src);
+    local result:8 = val_b * val_c;
+    op4_a = result(4); # extract high 32 bits
+  }
+  :mpyhu.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x1c & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local val_b:8 = zext(op4_b_src);
+    local val_c:8 = zext(op4_c_src);
+    local result:8 = val_b * val_c;
+    op4_a = result(4); # extract high 32 bits
+  <next>
+  }
+  :mpyu op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x1d & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    local val_b:8 = zext(op4_b_src);
+    local val_c:8 = zext(op4_c_src);
+    local result:8 = val_b * val_c;
+    op4_a = result:4; # extract low 32 bits
+  }
+  :mpyu.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x1d & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local val_b:8 = zext(op4_b_src);
+    local val_c:8 = zext(op4_c_src);
+    local result:8 = val_b * val_c;
+    op4_a = result:4; # extract low 32 bits
+  <next>
+  }
+
+  # Special Format Instructions, 0x04, [0x20 - 0x3F]
+  :j op4_c_src is (l_sub_opcode6=0x20 & l_flag=0) ... & op4_c_src {
+    pcl = op4_c_src;
+    goto [pcl];
+  }
+  :j^l_cc_not_value op4_c_src is (l_sub_opcode6=0x20 & l_flag=0 & l_op_format=3 & l_cc_not_value) ... & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    pcl = op4_c_src;
+    goto [pcl];
+  <next>
+  }
+  :j op4_j_limm_target is l_sub_opcode6=0x20 & l_flag=0 & l_op_format=0 & l_rc_raw=62 ; limm & op4_j_limm_target {
+    pcl = limm;
+    goto op4_j_limm_target;
+  }
+  :j^l_cc_not_value op4_j_limm_target is l_sub_opcode6=0x20 & l_flag=0 & l_op_format=3 & l_m=0 & l_rc_raw=62 & l_cc_not_value ; limm & op4_j_limm_target {
+    if (l_cc_not_value) goto <next>;
+    pcl = limm;
+    goto op4_j_limm_target;
+  <next>
+  }
+}
+with : l_major_opcode=0x04 {
+  :j blink is l_sub_opcode6=0x20 & l_flag=0 & l_op_format=0 & l_rc_raw=31 & blink {
+    pcl = blink;
+    return [pcl];
+  }
+  :j^l_cc_not_value blink is l_sub_opcode6=0x20 & l_flag=0 & l_op_format=3 & l_m=0 & l_rc_raw=31 & l_cc_not_value & blink {
+    if (l_cc_not_value) goto <next>;
+    pcl = blink;
+    return [pcl];
+  <next>
+  }
+  :j.f ilink1 is l_sub_opcode6=0x20 & l_flag=1 & l_op_format=0 & l_rc_raw=29 & ilink1 {
+    # get STATUS_L1 register at 0x0b * 4 = 0x2c
+    local new_status:4 = *[auxregs]:4 (0x2c:2);
+    Z = (new_status & (1 << 11)) != 0;
+    N = (new_status & (1 << 10)) != 0;
+    C = (new_status & (1 << 9)) != 0;
+    V = (new_status & (1 << 8)) != 0;
+    pcl = ilink1;
+    goto [pcl];
+  }
+  :j^l_cc_not_value^".f" ilink1 is l_sub_opcode6=0x20 & l_flag=1 & l_op_format=3 & l_m=0 & l_rc_raw=29 & l_cc_not_value & ilink1 {
+    if (l_cc_not_value) goto <next>;
+    # get STATUS_L1 register at 0x0b * 4 = 0x2c
+    local new_status:4 = *[auxregs]:4 (0x2c:2);
+    Z = (new_status & (1 << 11)) != 0;
+    N = (new_status & (1 << 10)) != 0;
+    C = (new_status & (1 << 9)) != 0;
+    V = (new_status & (1 << 8)) != 0;
+    pcl = ilink1;
+    goto [pcl];
+  <next>
+  }
+  :j.f ilink2 is l_sub_opcode6=0x20 & l_flag=1 & l_op_format=0 & l_rc_raw=30 & ilink2 {
+    # get STATUS_L2 register at 0x0c * 4 = 0x30
+    local new_status:4 = *[auxregs]:4 (0x30:2);
+    Z = (new_status & (1 << 11)) != 0;
+    N = (new_status & (1 << 10)) != 0;
+    C = (new_status & (1 << 9)) != 0;
+    V = (new_status & (1 << 8)) != 0;
+    pcl = ilink2;
+    goto [pcl];
+  }
+  :j^l_cc_not_value^".f" ilink2 is l_sub_opcode6=0x20 & l_flag=1 & l_op_format=3 & l_m=0 & l_rc_raw=30 & l_cc_not_value & ilink2 {
+    if (l_cc_not_value) goto <next>;
+    # get STATUS_L2 register at 0x0c * 4 = 0x30
+    local new_status:4 = *[auxregs]:4 (0x30:2);
+    Z = (new_status & (1 << 11)) != 0;
+    N = (new_status & (1 << 10)) != 0;
+    C = (new_status & (1 << 9)) != 0;
+    V = (new_status & (1 << 8)) != 0;
+    pcl = ilink2;
+    goto [pcl];
+  <next>
+  }
+}
+with : l_major_opcode=0x04 ... {
+  :j.d op4_c_src is (l_sub_opcode6=0x21 & l_flag=0) ... & op4_c_src {
+    pcl = op4_c_src;
+    delayslot(1);
+    goto [pcl];
+  }
+  :j^l_cc_not_value^".d" op4_c_src is (l_sub_opcode6=0x21 & l_flag=0 & l_op_format=3 & l_cc_not_value) ... & op4_c_src {
+    local _l_cc_not_value:1 = l_cc_not_value;
+    local _op4_c_src:4 = op4_c_src;
+    delayslot(1);
+    if (_l_cc_not_value) goto <next>;
+    pcl = _op4_c_src;
+    goto [pcl];
+  <next>
+  }
+}
+with : l_major_opcode=0x04 {
+  :j.d blink is l_sub_opcode6=0x21 & l_flag=0 & l_op_format=0 & l_rc_raw=31 & blink {
+    pcl = blink;
+    delayslot(1);
+    return [pcl];
+  }
+  :j^l_cc_not_value^".d" blink is l_sub_opcode6=0x21 & l_flag=0 & l_op_format=3 & l_m=0 & l_rc_raw=31 & l_cc_not_value & blink {
+    local _l_cc_not_value:1 = l_cc_not_value;
+    local _blink:4 = blink;
+    delayslot(1);
+    if (_l_cc_not_value) goto <next>;
+    pcl = _blink;
+    return [pcl];
+  <next>
+  }
+}
+with : l_major_opcode=0x04 ... {
+  :jl op4_c_src is (l_sub_opcode6=0x22 & l_flag=0) ... & op4_c_src {
+    blink = inst_next;
+    pcl = op4_c_src;
+    call [pcl];
+  }
+  :jl^l_cc_not_value op4_c_src is (l_sub_opcode6=0x22 & l_flag=0 & l_op_format=3 & l_cc_not_value) ... & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    blink = inst_next;
+    pcl = op4_c_src;
+    call [pcl];
+  <next>
+  }
+  :jl.d op4_c_src is (l_sub_opcode6=0x23 & l_flag=0) ... & op4_c_src {
+    blink = inst_next;
+    pcl = op4_c_src;
+    delayslot(1);
+    call [pcl];
+  }
+  :jl^l_cc_not_value^".d" op4_c_src is (l_sub_opcode6=0x23 & l_flag=0 & l_op_format=3 & l_cc_not_value) ... & op4_c_src {
+    local _l_cc_not_value:1 = l_cc_not_value;
+    local _op4_c_src:4 = op4_c_src;
+    delayslot(1);
+    if (_l_cc_not_value) goto <next>;
+    blink = inst_next;
+    pcl = _op4_c_src;
+    call [pcl];
+  <next>
+  }
+}
+with : l_major_opcode=0x04 {
+  :lp^l_cc_not_value op4_lp_loop_end is l_sub_opcode6=0x28 & l_flag=0 & l_op_format=3 & l_m=1 & l_u6 & l_cc_not_value & op4_lp_loop_end
+    [ loopEnd = 1; globalset(op4_lp_loop_end, loopEnd); ]
+  {
+    # Loop Set Up (Conditional)
+    is_in_loop = 0;
+    if (l_cc_not_value) goto op4_lp_loop_end;
+    # Write LP_START and LP_END registers
+    *[auxregs]:4 (0x08:2) = inst_next;
+    *[auxregs]:4 (0x0c:2) = &op4_lp_loop_end;
+    is_in_loop = 1;
+  }
+  :lp op4_lp_loop_end is l_sub_opcode6=0x28 & l_flag=0 & l_op_format=2 & op4_lp_loop_end
+    [ loopEnd = 1; globalset(op4_lp_loop_end, loopEnd); ]
+  {
+    # Loop Set Up (Unconditional)
+    # Write LP_START and LP_END registers
+    *[auxregs]:4 (0x08:2) = inst_next;
+    *[auxregs]:4 (0x0c:2) = &op4_lp_loop_end;
+    is_in_loop = 1;
+  }
+}
+with : l_major_opcode=0x04 ... {
+  :flag op4_c_src is (l_sub_opcode6=0x29 & l_flag=0) ... & op4_c_src {
+    # set STATUS32 register at 0x0a * 4 = 0x28
+    *[auxregs]:4 (0x28:2) = op4_c_src;
+    Z = (op4_c_src & (1:4 << 11)) != 0;
+    N = (op4_c_src & (1:4 << 10)) != 0;
+    C = (op4_c_src & (1:4 << 9)) != 0;
+    V = (op4_c_src & (1:4 << 8)) != 0;
+  }
+  :flag.^l_cc_not_value op4_c_src is (l_sub_opcode6=0x29 & l_flag=0 & l_op_format=3 & l_cc_not_value) ... & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    # set STATUS32 register at 0x0a * 4 = 0x28
+    *[auxregs]:4 (0x28:2) = op4_c_src;
+    Z = (op4_c_src & (1:4 << 11)) != 0;
+    N = (op4_c_src & (1:4 << 10)) != 0;
+    C = (op4_c_src & (1:4 << 9)) != 0;
+    V = (op4_c_src & (1:4 << 8)) != 0;
+  <next>
+  }
+
+  :lr op4_b_dst, [op4_c_src] is (l_sub_opcode6=0x2a & l_flag=0 & (l_op_format=0 | l_op_format=1 | l_op_format=2) & op4_b_dst) ... & op4_c_src {
+    op4_b_dst = *[auxregs]:4 (op4_c_src:2 << 2:2);
+  }
+  :sr op4_b_src, [op4_c_src] is (l_sub_opcode6=0x2b & l_flag=0 & (l_op_format=0 | l_op_format=1 | l_op_format=2)) ... & op4_b_src & op4_c_src {
+    *[auxregs]:4 (op4_c_src:2 << 2:2) = op4_b_src;
+  }
+
+  # Single Operand Instructions, 0x04, [0x2F, 0x00 - 0x3F]
+  with : (l_sub_opcode6=0x2f & (l_op_format=0 | l_op_format=1)) ... {
+    :asl op4_b_dst, op4_c_src, 1 is (l_ra_raw=0x00 & l_flag=0 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = op4_c_src + op4_c_src;
+    }
+    :asl.f op4_b_dst, op4_c_src, 1 is (l_ra_raw=0x00 & l_flag=1 & op4_b_dst) ... & op4_c_src {
+      update_flags_add_cv(op4_c_src, op4_c_src);
+      op4_b_dst = op4_c_src + op4_c_src;
+      update_flags_zn(op4_b_dst);
+    }
+    :asr op4_b_dst, op4_c_src, 1 is (l_ra_raw=0x01 & l_flag=0 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = op4_c_src s>> 1;
+    }
+    :asr.f op4_b_dst, op4_c_src, 1 is (l_ra_raw=0x01 & l_flag=1 & op4_b_dst) ... & op4_c_src {
+      C = (op4_c_src & 1:4) != 0:4;
+      op4_b_dst = op4_c_src s>> 1;
+      update_flags_zn(op4_b_dst);
+    }
+    :lsr op4_b_dst, op4_c_src, 1 is (l_ra_raw=0x02 & l_flag=0 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = op4_c_src >> 1;
+    }
+    :lsr.f op4_b_dst, op4_c_src, 1 is (l_ra_raw=0x02 & l_flag=1 & op4_b_dst) ... & op4_c_src {
+      C = (op4_c_src & 1:4) != 0:4;
+      op4_b_dst = op4_c_src >> 1;
+      update_flags_zn(op4_b_dst);
+    }
+    :ror op4_b_dst, op4_c_src, 1 is (l_ra_raw=0x03 & l_flag=0 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = (op4_c_src >> 1) | (op4_c_src << 31);
+    }
+    :ror.f op4_b_dst, op4_c_src, 1 is (l_ra_raw=0x03 & l_flag=1 & op4_b_dst) ... & op4_c_src {
+      C = (op4_c_src & 1:4) != 0:4;
+      op4_b_dst = (op4_c_src >> 1) | (op4_c_src << 31);
+      update_flags_zn(op4_b_dst);
+    }
+    :rrc op4_b_dst, op4_c_src, 1 is (l_ra_raw=0x04 & l_flag=0 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = (op4_c_src >> 1) | (zext(C) << 31);
+    }
+    :rrc.f op4_b_dst, op4_c_src, 1 is (l_ra_raw=0x04 & l_flag=1 & op4_b_dst) ... & op4_c_src {
+      local carry:1 = (op4_c_src & 1:4) != 0:4;
+      op4_b_dst = (op4_c_src >> 1) | (zext(C) << 31);
+      C = carry;
+      update_flags_zn(op4_b_dst);
+    }
+    :sexb op4_b_dst, op4_c_src is (l_ra_raw=0x05 & l_flag=0 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = sext(op4_c_src:1);
+    }
+    :sexb.f op4_b_dst, op4_c_src is (l_ra_raw=0x05 & l_flag=1 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = sext(op4_c_src:1);
+      update_flags_zn(op4_b_dst);
+    }
+    :sexw op4_b_dst, op4_c_src is (l_ra_raw=0x06 & l_flag=0 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = sext(op4_c_src:2);
+    }
+    :sexw.f op4_b_dst, op4_c_src is (l_ra_raw=0x06 & l_flag=1 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = sext(op4_c_src:2);
+      update_flags_zn(op4_b_dst);
+    }
+    :extb op4_b_dst, op4_c_src is (l_ra_raw=0x07 & l_flag=0 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = zext(op4_c_src:1);
+    }
+    :extb.f op4_b_dst, op4_c_src is (l_ra_raw=0x07 & l_flag=1 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = zext(op4_c_src:1);
+      update_flags_zn(op4_b_dst);
+    }
+    :extw op4_b_dst, op4_c_src is (l_ra_raw=0x08 & l_flag=0 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = zext(op4_c_src:2);
+    }
+    :extw.f op4_b_dst, op4_c_src is (l_ra_raw=0x08 & l_flag=1 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = zext(op4_c_src:2);
+      update_flags_zn(op4_b_dst);
+    }
+    :abs op4_b_dst, op4_c_src is (l_ra_raw=0x09 & l_flag=0 & op4_b_dst) ... & op4_c_src {
+      local acond:1 = op4_c_src s< 0:4;
+      op4_b_dst = (op4_c_src * zext(acond == 0)) + (-op4_c_src * zext(acond != 0));
+    }
+    :abs.f op4_b_dst, op4_c_src is (l_ra_raw=0x09 & l_flag=1 & op4_b_dst) ... & op4_c_src {
+      N = op4_c_src == 0x80000000:4;
+      V = N;
+      C = op4_c_src s< 0:4;
+      op4_b_dst = (op4_c_src * zext(C == 0)) + (-op4_c_src * zext(C != 0));
+      Z = op4_b_dst == 0:4;
+    }
+    :not op4_b_dst, op4_c_src is (l_ra_raw=0x0a & l_flag=0 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = ~op4_c_src;
+    }
+    :not.f op4_b_dst, op4_c_src is (l_ra_raw=0x0a & l_flag=1 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = ~op4_c_src;
+      update_flags_zn(op4_b_dst);
+    }
+    :rlc op4_b_dst, op4_c_src, 1 is (l_ra_raw=0x0b & l_flag=0 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = (op4_c_src << 1) | zext(C);
+    }
+    :rlc.f op4_b_dst, op4_c_src, 1 is (l_ra_raw=0x0b & l_flag=1 & op4_b_dst) ... & op4_c_src {
+      local msb:4 = op4_c_src >> 31;
+      op4_b_dst = (op4_c_src << 1) | zext(C);
+      C = msb:1;
+      update_flags_zn(op4_b_dst);
+    }
+    :ex^op4_ld_di op4_b_dst, op4_c_src is (l_ra_raw=0x0c & l_flag=0 & op4_b_dst & op4_ld_di) ... & op4_c_src {
+      local old_b:4 = op4_b_dst;
+      op4_b_dst = *[ram]:4 op4_c_src;
+      *[ram]:4 op4_c_src = old_b;
+    }
+
+    # Zero Operand Instructions, 0x04, [0x2F, 0x3F, 0x00 - 0x3F]
+    with : l_ra_raw=0x3f ... {
+      :sleep op4_c_src is (l_rb_high=0 & l_rb_low_0=1 & l_flag=0) ... & op4_c_src {
+        sleep(op4_c_src);
+      }
+      :swi op4_c_src is (l_rb_high=0 & l_rb_low_0=2 & l_flag=0) ... & op4_c_src {
+        swi(op4_c_src);
+      }
+      :sync op4_c_src is (l_rb_high=0 & l_rb_low_0=3 & l_flag=0) ... & op4_c_src {
+        sync(op4_c_src);
+      }
+      :rtie op4_c_src is (l_rb_high=0 & l_rb_low_0=4 & l_flag=0) ... & op4_c_src {
+        pcl = rtie(op4_c_src);
+        return [pcl];
+      }
+      :brk is (l_rb_high=0 & l_rb_low_0=5 & l_flag=0 & l_rc_raw=0) ... {
+        brk();
+        goto inst_start;
+      }
+    }
+  }
+
+  # Load Register-Register, 0x04, [0x30 - 0x37]
+  with : l_op4_ld_opcode=6 ... { # Do not decode generic format
+    :ld^op4_ld_di op4_ld_ra, [l_rb_limm, l_rc_limm] is (l_op4_ld_addr_mode=0 & l_op4_ld_data_size=0 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di) ... & l_rb_limm & l_rc_limm {
+      local addr:4 = l_rb_limm + l_rc_limm;
+      op4_ld_ra = *[ram]:4 addr;
+    }
+    :ldb^op4_ld_di op4_ld_ra, [l_rb_limm, l_rc_limm] is (l_op4_ld_addr_mode=0 & l_op4_ld_data_size=1 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di) ... & l_rb_limm & l_rc_limm {
+      local addr:4 = l_rb_limm + l_rc_limm;
+      op4_ld_ra = zext(*[ram]:1 addr);
+    }
+    :ldb.x^op4_ld_di op4_ld_ra, [l_rb_limm, l_rc_limm] is (l_op4_ld_addr_mode=0 & l_op4_ld_data_size=1 & l_op4_ld_sign_ext=1 & op4_ld_ra & op4_ld_di) ... & l_rb_limm & l_rc_limm {
+      local addr:4 = l_rb_limm + l_rc_limm;
+      op4_ld_ra = sext(*[ram]:1 addr);
+    }
+    :ldw^op4_ld_di op4_ld_ra, [l_rb_limm, l_rc_limm] is (l_op4_ld_addr_mode=0 & l_op4_ld_data_size=2 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di) ... & l_rb_limm & l_rc_limm {
+      local addr:4 = l_rb_limm + l_rc_limm;
+      op4_ld_ra = zext(*[ram]:2 addr);
+    }
+    :ldw.x^op4_ld_di op4_ld_ra, [l_rb_limm, l_rc_limm] is (l_op4_ld_addr_mode=0 & l_op4_ld_data_size=2 & l_op4_ld_sign_ext=1 & op4_ld_ra & op4_ld_di) ... & l_rb_limm & l_rc_limm {
+      local addr:4 = l_rb_limm + l_rc_limm;
+      op4_ld_ra = sext(*[ram]:2 addr);
+    }
+
+    :ld.a^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=1 & l_op4_ld_data_size=0 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di & l_rb) ... & l_rc_limm {
+      l_rb = l_rb + l_rc_limm;
+      op4_ld_ra = *[ram]:4 l_rb;
+    }
+    :ld.a^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=1 & l_op4_ld_data_size=0 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+    :ldb.a^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=1 & l_op4_ld_data_size=1 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di & l_rb) ... & l_rc_limm {
+      l_rb = l_rb + l_rc_limm;
+      op4_ld_ra = zext(*[ram]:1 l_rb);
+    }
+    :ldb.a^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=1 & l_op4_ld_data_size=1 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+    :ldb.x.a^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=1 & l_op4_ld_data_size=1 & l_op4_ld_sign_ext=1 & op4_ld_ra & op4_ld_di & l_rb) ... & l_rc_limm {
+      l_rb = l_rb + l_rc_limm;
+      op4_ld_ra = sext(*[ram]:1 l_rb);
+    }
+    :ldb.x.a^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=1 & l_op4_ld_data_size=1 & l_op4_ld_sign_ext=1 & op4_ld_ra & op4_ld_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+    :ldw.a^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=1 & l_op4_ld_data_size=2 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di & l_rb) ... & l_rc_limm {
+      l_rb = l_rb + l_rc_limm;
+      op4_ld_ra = zext(*[ram]:2 l_rb);
+    }
+    :ldw.a^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=1 & l_op4_ld_data_size=2 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+    :ldw.x.a^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=1 & l_op4_ld_data_size=2 & l_op4_ld_sign_ext=1 & op4_ld_ra & op4_ld_di & l_rb) ... & l_rc_limm {
+      l_rb = l_rb + l_rc_limm;
+      op4_ld_ra = sext(*[ram]:2 l_rb);
+    }
+    :ldw.x.a^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=1 & l_op4_ld_data_size=2 & l_op4_ld_sign_ext=1 & op4_ld_ra & op4_ld_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+
+    :ld.ab^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=2 & l_op4_ld_data_size=0 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di & l_rb) ... & l_rc_limm {
+      op4_ld_ra = *[ram]:4 l_rb;
+      l_rb = l_rb + l_rc_limm;
+    }
+    :ld.ab^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=2 & l_op4_ld_data_size=0 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+    :ldb.ab^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=2 & l_op4_ld_data_size=1 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di & l_rb) ... & l_rc_limm {
+      op4_ld_ra = zext(*[ram]:1 l_rb);
+      l_rb = l_rb + l_rc_limm;
+    }
+    :ldb.ab^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=2 & l_op4_ld_data_size=1 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+    :ldb.x.ab^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=2 & l_op4_ld_data_size=1 & l_op4_ld_sign_ext=1 & op4_ld_ra & op4_ld_di & l_rb) ... & l_rc_limm {
+      op4_ld_ra = sext(*[ram]:1 l_rb);
+      l_rb = l_rb + l_rc_limm;
+    }
+    :ldb.x.ab^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=2 & l_op4_ld_data_size=1 & l_op4_ld_sign_ext=1 & op4_ld_ra & op4_ld_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+    :ldw.ab^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=2 & l_op4_ld_data_size=2 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di & l_rb) ... & l_rc_limm {
+      op4_ld_ra = zext(*[ram]:2 l_rb);
+      l_rb = l_rb + l_rc_limm;
+    }
+    :ldw.ab^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=2 & l_op4_ld_data_size=2 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+    :ldw.x.ab^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=2 & l_op4_ld_data_size=2 & l_op4_ld_sign_ext=1 & op4_ld_ra & op4_ld_di & l_rb) ... & l_rc_limm {
+      op4_ld_ra = sext(*[ram]:2 l_rb);
+      l_rb = l_rb + l_rc_limm;
+    }
+    :ldw.x.ab^op4_ld_di op4_ld_ra, [l_rb, l_rc_limm] is (l_op4_ld_addr_mode=2 & l_op4_ld_data_size=2 & l_op4_ld_sign_ext=1 & op4_ld_ra & op4_ld_di & l_rb_high=7 & l_rb_low_7=6 & l_rb) ... & l_rc_limm unimpl
+
+    :ld.as^op4_ld_di op4_ld_ra, [l_rb_limm, l_rc_limm] is (l_op4_ld_addr_mode=3 & l_op4_ld_data_size=0 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di) ... & l_rb_limm & l_rc_limm {
+      local addr:4 = l_rb_limm + (l_rc_limm << 2);
+      op4_ld_ra = *[ram]:4 addr;
+    }
+    :ldw.as^op4_ld_di op4_ld_ra, [l_rb_limm, l_rc_limm] is (l_op4_ld_addr_mode=3 & l_op4_ld_data_size=2 & l_op4_ld_sign_ext=0 & op4_ld_ra & op4_ld_di) ... & l_rb_limm & l_rc_limm {
+      local addr:4 = l_rb_limm + (l_rc_limm << 1);
+      op4_ld_ra = zext(*[ram]:2 addr);
+    }
+    :ldw.x.as^op4_ld_di op4_ld_ra, [l_rb_limm, l_rc_limm] is (l_op4_ld_addr_mode=3 & l_op4_ld_data_size=2 & l_op4_ld_sign_ext=1 & op4_ld_ra & op4_ld_di) ... & l_rb_limm & l_rc_limm {
+      local addr:4 = l_rb_limm + (l_rc_limm << 1);
+      op4_ld_ra = sext(*[ram]:2 addr);
+    }
+  }
+}
+
+# 32-bit Extension Instructions, 0x05 - 0x08
+with : l_major_opcode=0x05 ... {
+  :asl op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x00 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src << (op4_c_src[0,5]);
+  }
+  :asl.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x00 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src << (op4_c_src[0,5]);
+  <next>
+  }
+  :asl.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x00 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    C = (op4_b_src & ((0x80000000 >> (op4_c_src[0,5])) << 1)) != 0:4;
+    op4_a = op4_b_src << (op4_c_src[0,5]);
+    update_flags_zn(op4_a);
+  }
+  :asl.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x00 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    C = (op4_b_src & ((0x80000000 >> (op4_c_src[0,5])) << 1)) != 0:4;
+    op4_a = op4_b_src << (op4_c_src[0,5]);
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :lsr op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x01 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src >> (op4_c_src[0,5]);
+  }
+  :lsr.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x01 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src >> (op4_c_src[0,5]);
+  <next>
+  }
+  :lsr.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x01 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    C = (op4_b_src & ((1:4 << (op4_c_src[0,5])) >> 1)) != 0:4;
+    op4_a = op4_b_src >> (op4_c_src[0,5]);
+    update_flags_zn(op4_a);
+  }
+  :lsr.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x01 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    C = (op4_b_src & ((1:4 << (op4_c_src[0,5])) >> 1)) != 0:4;
+    op4_a = op4_b_src >> (op4_c_src[0,5]);
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :asr op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x02 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    op4_a = op4_b_src s>> (op4_c_src[0,5]);
+  }
+  :asr.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x02 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    op4_a = op4_b_src s>> (op4_c_src[0,5]);
+  <next>
+  }
+  :asr.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x02 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    C = (op4_b_src & ((1:4 << (op4_c_src[0,5])) >> 1)) != 0:4;
+    op4_a = op4_b_src s>> (op4_c_src[0,5]);
+    update_flags_zn(op4_a);
+  }
+  :asr.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x02 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    C = (op4_b_src & ((1:4 << (op4_c_src[0,5])) >> 1)) != 0:4;
+    op4_a = op4_b_src s>> (op4_c_src[0,5]);
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :ror op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x03 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    local other_shift:4 = 32:4 - op4_c_src;
+    op4_a = (op4_b_src >> (op4_c_src[0,5])) | (op4_b_src << (other_shift[0,5]));
+  }
+  :ror.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x03 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local other_shift:4 = 32:4 - op4_c_src;
+    op4_a = (op4_b_src >> (op4_c_src[0,5])) | (op4_b_src << (other_shift[0,5]));
+  <next>
+  }
+  :ror.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x03 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    local shift_min1:4 = op4_c_src - 1:4;
+    C = op4_c_src != 0:4 && (op4_c_src & (1:4 << (shift_min1[0,5]))) != 0:4;
+    local other_shift:4 = 32:4 - op4_c_src;
+    op4_a = (op4_b_src >> (op4_c_src[0,5])) | (op4_b_src << (other_shift[0,5]));
+    update_flags_zn(op4_a);
+  }
+  :ror.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x03 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local shift_min1:4 = op4_c_src - 1:4;
+    C = op4_c_src != 0:4 && (op4_c_src & (1:4 << (shift_min1[0,5]))) != 0:4;
+    local other_shift:4 = 32:4 - op4_c_src;
+    op4_a = (op4_b_src >> (op4_c_src[0,5])) | (op4_b_src << (other_shift[0,5]));
+    update_flags_zn(op4_a);
+  <next>
+  }
+  :mul64 op4_b_src, op4_c_src is (l_sub_opcode6=0x04 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    local val_b:8 = sext(op4_b_src);
+    local val_c:8 = sext(op4_c_src);
+    local result:8 = val_b * val_c;
+    mlo = result:4;
+    mmid = result(2);
+    mhi = result(4);
+  }
+  :mul64.^l_cc_not_value op4_b_src, op4_c_src is (l_sub_opcode6=0x04 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local val_b:8 = sext(op4_b_src);
+    local val_c:8 = sext(op4_c_src);
+    local result:8 = val_b * val_c;
+    mlo = result:4;
+    mmid = result(2);
+    mhi = result(4);
+  <next>
+  }
+  :mulu64 op4_b_src, op4_c_src is (l_sub_opcode6=0x05 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    local val_b:8 = zext(op4_b_src);
+    local val_c:8 = zext(op4_c_src);
+    local result:8 = val_b * val_c;
+    mlo = result:4;
+    mmid = result(2);
+    mhi = result(4);
+  }
+  :mulu64.^l_cc_not_value op4_b_src, op4_c_src is (l_sub_opcode6=0x05 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local val_b:8 = zext(op4_b_src);
+    local val_c:8 = zext(op4_c_src);
+    local result:8 = val_b * val_c;
+    mlo = result:4;
+    mmid = result(2);
+    mhi = result(4);
+  <next>
+  }
+  :adds op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x06 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    # Signed Add with Saturation
+    local sat:1 = scarry(op4_b_src, op4_c_src);
+    if (sat) goto <saturate>;
+    op4_a = op4_b_src + op4_c_src;
+    goto <next>; # Do not use "goto inst_next", as this does not have the right semantics in delay slot
+  <saturate>
+    if (op4_c_src s< 0:4) goto <saturate_negative>;
+    op4_a = 0x7fffffff:4;
+    goto <next>;
+  <saturate_negative>
+    op4_a = 0x80000000:4;
+  <next>
+  }
+  :adds.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x06 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local sat:1 = scarry(op4_b_src, op4_c_src);
+    if (sat) goto <saturate>;
+    op4_a = op4_b_src + op4_c_src;
+    goto <next>; # Do not use "goto inst_next", as this does not have the right semantics in delay slot
+  <saturate>
+    if (op4_c_src s< 0:4) goto <saturate_negative>;
+    op4_a = 0x7fffffff:4;
+    goto <next>;
+  <saturate_negative>
+    op4_a = 0x80000000:4;
+  <next>
+  }
+  :adds.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x06 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    # Signed Add with Saturation and Flag Updates
+    C = 0;
+    V = scarry(op4_b_src, op4_c_src);
+    if (V) goto <saturate>;
+    op4_a = op4_b_src + op4_c_src;
+    update_flags_zn(op4_a);
+    goto <next>;
+  <saturate>
+    if (op4_c_src s< 0:4) goto <saturate_negative>;
+    op4_a = 0x7fffffff:4;
+    Z = 0;
+    N = 0;
+    goto <next>;
+  <saturate_negative>
+    op4_a = 0x80000000:4;
+    Z = 0;
+    N = 1;
+  <next>
+  }
+  :adds.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x06 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    C = 0;
+    V = scarry(op4_b_src, op4_c_src);
+    if (V) goto <saturate>;
+    op4_a = op4_b_src + op4_c_src;
+    update_flags_zn(op4_a);
+    goto <next>;
+  <saturate>
+    if (op4_c_src s< 0:4) goto <saturate_negative>;
+    op4_a = 0x7fffffff:4;
+    Z = 0;
+    N = 0;
+    goto <next>;
+  <saturate_negative>
+    op4_a = 0x80000000:4;
+    Z = 0;
+    N = 1;
+  <next>
+  }
+  :subs op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x07 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src {
+    # Signed Subtraction with Saturation
+    local sat:1 = sborrow(op4_b_src, op4_c_src);
+    if (sat) goto <saturate>;
+    op4_a = op4_b_src - op4_c_src;
+    goto <next>;
+  <saturate>
+    if (op4_c_src s> 0:4) goto <saturate_negative>;
+    op4_a = 0x7fffffff:4;
+    goto <next>;
+  <saturate_negative>
+    op4_a = 0x80000000:4;
+  <next>
+  }
+  :subs.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x07 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    local sat:1 = sborrow(op4_b_src, op4_c_src);
+    if (sat) goto <saturate>;
+    op4_a = op4_b_src - op4_c_src;
+    goto <next>;
+  <saturate>
+    if (op4_c_src s> 0:4) goto <saturate_negative>;
+    op4_a = 0x7fffffff:4;
+    goto <next>;
+  <saturate_negative>
+    op4_a = 0x80000000:4;
+  <next>
+  }
+  :subs.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x07 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src {
+    # Signed Subtraction with Saturation and Flag Updates
+    Z = op4_b_src == op4_c_src;
+    C = 0;
+    V = sborrow(op4_b_src, op4_c_src);
+    if (V) goto <saturate>;
+    op4_a = op4_b_src - op4_c_src;
+    N = op4_a s< 0:4;
+    goto <next>;
+  <saturate>
+    if (op4_c_src s> 0:4) goto <saturate_negative>;
+    op4_a = 0x7fffffff:4;
+    N = 0;
+    goto <next>;
+  <saturate_negative>
+    op4_a = 0x80000000:4;
+    N = 1;
+  <next>
+  }
+  :subs.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x07 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src {
+    if (l_cc_not_value) goto <next>;
+    Z = op4_b_src == op4_c_src;
+    C = 0;
+    V = sborrow(op4_b_src, op4_c_src);
+    if (V) goto <saturate>;
+    op4_a = op4_b_src - op4_c_src;
+    N = op4_a s< 0:4;
+    goto <next>;
+  <saturate>
+    if (op4_c_src s> 0:4) goto <saturate_negative>;
+    op4_a = 0x7fffffff:4;
+    N = 0;
+    goto <next>;
+  <saturate_negative>
+    op4_a = 0x80000000:4;
+    N = 1;
+  <next>
+  }
+  :divaw op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x08 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src unimpl # Division assist
+  :divaw.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x08 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :asls op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0a & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :asls.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0a & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :asls.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0a & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :asls.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0a & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :asrs op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0b & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :asrs.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0b & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :asrs.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0b & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :asrs.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x0b & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :addsdw op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x28 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :addsdw.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x28 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :addsdw.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x28 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :addsdw.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x28 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :subsdw op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x29 & l_flag=0 & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :subsdw.^l_cc_not_value op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x29 & l_flag=0 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :subsdw.f op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x29 & l_flag=1 & op4_a) ... & op4_b_src & op4_c_src unimpl
+  :subsdw.^l_cc_not_value^".f" op4_a, op4_b_src, op4_c_src is (l_sub_opcode6=0x29 & l_flag=1 & l_op_format=3 & l_cc_not_value & op4_a) ... & op4_b_src & op4_c_src unimpl
+
+  # Extension Single Operand Instructions, 0x05, [0x2F, 0x00 - 0x3F]
+  with : (l_sub_opcode6=0x2f & (l_op_format=0 | l_op_format=1)) ... {
+    :swap op4_b_dst, op4_c_src is (l_ra_raw=0x00 & l_flag=0 & op4_b_dst) ... & op4_c_src unimpl
+    :swap.f op4_b_dst, op4_c_src is (l_ra_raw=0x00 & l_flag=1 & op4_b_dst) ... & op4_c_src unimpl
+    :norm op4_b_dst, op4_c_src is (l_ra_raw=0x01 & l_flag=0 & op4_b_dst) ... & op4_c_src {
+      op4_b_dst = norm(op4_c_src);
+    }
+    :norm.f op4_b_dst, op4_c_src is (l_ra_raw=0x01 & l_flag=1 & op4_b_dst) ... & op4_c_src {
+      update_flags_zn(op4_c_src);
+      op4_b_dst = norm(op4_c_src);
+    }
+    :sat16 op4_b_dst, op4_c_src is (l_ra_raw=0x02 & l_flag=0 & op4_b_dst) ... & op4_c_src unimpl
+    :sat16.f op4_b_dst, op4_c_src is (l_ra_raw=0x02 & l_flag=1 & op4_b_dst) ... & op4_c_src unimpl
+    :rnd16 op4_b_dst, op4_c_src is (l_ra_raw=0x03 & l_flag=0 & op4_b_dst) ... & op4_c_src unimpl
+    :rnd16.f op4_b_dst, op4_c_src is (l_ra_raw=0x03 & l_flag=1 & op4_b_dst) ... & op4_c_src unimpl
+    :abssw op4_b_dst, op4_c_src is (l_ra_raw=0x04 & l_flag=0 & op4_b_dst) ... & op4_c_src unimpl
+    :abssw.f op4_b_dst, op4_c_src is (l_ra_raw=0x04 & l_flag=1 & op4_b_dst) ... & op4_c_src unimpl
+    :abss op4_b_dst, op4_c_src is (l_ra_raw=0x05 & l_flag=0 & op4_b_dst) ... & op4_c_src unimpl
+    :abss.f op4_b_dst, op4_c_src is (l_ra_raw=0x05 & l_flag=1 & op4_b_dst) ... & op4_c_src unimpl
+    :negsw op4_b_dst, op4_c_src is (l_ra_raw=0x06 & l_flag=0 & op4_b_dst) ... & op4_c_src unimpl
+    :negsw.f op4_b_dst, op4_c_src is (l_ra_raw=0x06 & l_flag=1 & op4_b_dst) ... & op4_c_src unimpl
+    :negs op4_b_dst, op4_c_src is (l_ra_raw=0x07 & l_flag=0 & op4_b_dst) ... & op4_c_src unimpl
+    :negs.f op4_b_dst, op4_c_src is (l_ra_raw=0x07 & l_flag=1 & op4_b_dst) ... & op4_c_src unimpl
+    :normw op4_b_dst, op4_c_src is (l_ra_raw=0x08 & l_flag=0 & op4_b_dst) ... & op4_c_src unimpl
+    :normw.f op4_b_dst, op4_c_src is (l_ra_raw=0x08 & l_flag=1 & op4_b_dst) ... & op4_c_src unimpl
+  }
+}
+
+# Mark unknown operations as extensions
+:EXT04 l_sub_opcode6, op4_a, op4_b_src, op4_c_src is (l_major_opcode=0x04 & l_flag=0 & l_sub_opcode6 & op4_a) ... & op4_b_src & op4_c_src {
+  local operation:1 = l_sub_opcode6;
+  op4_a = asm_instruction_04(operation, op4_b_src, op4_c_src);
+}
+:EXT04.f l_sub_opcode6, op4_a, op4_b_src, op4_c_src is (l_major_opcode=0x04 & l_flag=1 & l_sub_opcode6 & op4_a) ... & op4_b_src & op4_c_src {
+  local operation:1 = l_sub_opcode6;
+  op4_a = asm_instruction_04(operation, op4_b_src, op4_c_src);
+  update_flags_zn(op4_a);
+}
+:EXT05 l_sub_opcode6, op4_a, op4_b_src, op4_c_src is (l_major_opcode=0x05 & l_flag=0 & l_sub_opcode6 & op4_a) ... & op4_b_src & op4_c_src {
+  local operation:1 = l_sub_opcode6;
+  op4_a = asm_instruction_05(operation, op4_b_src, op4_c_src);
+}
+:EXT05.f l_sub_opcode6, op4_a, op4_b_src, op4_c_src is (l_major_opcode=0x05 & l_flag=1 & l_sub_opcode6 & op4_a) ... & op4_b_src & op4_c_src {
+  local operation:1 = l_sub_opcode6;
+  op4_a = asm_instruction_05(operation, op4_b_src, op4_c_src);
+  update_flags_zn(op4_a);
+}
+:EXT06 l_sub_opcode6, op4_a, op4_b_src, op4_c_src is (l_major_opcode=0x06 & l_flag=0 & l_sub_opcode6 & op4_a) ... & op4_b_src & op4_c_src {
+  local operation:1 = l_sub_opcode6;
+  op4_a = asm_instruction_06(operation, op4_b_src, op4_c_src);
+}
+:EXT06.f l_sub_opcode6, op4_a, op4_b_src, op4_c_src is (l_major_opcode=0x06 & l_flag=1 & l_sub_opcode6 & op4_a) ... & op4_b_src & op4_c_src {
+  local operation:1 = l_sub_opcode6;
+  op4_a = asm_instruction_06(operation, op4_b_src, op4_c_src);
+  update_flags_zn(op4_a);
+}
+:EXT07 l_sub_opcode6, op4_a, op4_b_src, op4_c_src is (l_major_opcode=0x07 & l_flag=0 & l_sub_opcode6 & op4_a) ... & op4_b_src & op4_c_src {
+  local operation:1 = l_sub_opcode6;
+  op4_a = asm_instruction_07(operation, op4_b_src, op4_c_src);
+}
+:EXT07.f l_sub_opcode6, op4_a, op4_b_src, op4_c_src is (l_major_opcode=0x07 & l_flag=1 & l_sub_opcode6 & op4_a) ... & op4_b_src & op4_c_src {
+  local operation:1 = l_sub_opcode6;
+  op4_a = asm_instruction_07(operation, op4_b_src, op4_c_src);
+  update_flags_zn(op4_a);
+}
+:EXT08 l_sub_opcode6, op4_a, op4_b_src, op4_c_src is (l_major_opcode=0x08 & l_flag=0 & l_sub_opcode6 & op4_a) ... & op4_b_src & op4_c_src {
+  local operation:1 = l_sub_opcode6;
+  op4_a = asm_instruction_08(operation, op4_b_src, op4_c_src);
+}
+:EXT08.f l_sub_opcode6, op4_a, op4_b_src, op4_c_src is (l_major_opcode=0x08 & l_flag=1 & l_sub_opcode6 & op4_a) ... & op4_b_src & op4_c_src {
+  local operation:1 = l_sub_opcode6;
+  op4_a = asm_instruction_08(operation, op4_b_src, op4_c_src);
+  update_flags_zn(op4_a);
+}
+
+# Load/Add Register-Register, 0x0C, [0x00 - 0x03]
+:ld_s s_ra, [s_rb, s_rc] is s_major_opcode=0x0c & s_sub_opcode_b3b4=0 & s_rb & s_rc & s_ra {
+  local addr:4 = s_rb + s_rc;
+  s_ra = *[ram]:4 addr;
+}
+:ldb_s s_ra, [s_rb, s_rc] is s_major_opcode=0x0c & s_sub_opcode_b3b4=1 & s_rb & s_rc & s_ra {
+  local addr:4 = s_rb + s_rc;
+  s_ra = zext(*[ram]:1 addr);
+}
+:ldw_s s_ra, [s_rb, s_rc] is s_major_opcode=0x0c & s_sub_opcode_b3b4=2 & s_rb & s_rc & s_ra {
+  local addr:4 = s_rb + s_rc;
+  s_ra = zext(*[ram]:2 addr);
+}
+:add_s s_ra, s_rb, s_rc is s_major_opcode=0x0c & s_sub_opcode_b3b4=3 & s_rb & s_rc & s_ra {
+  s_ra = s_rb + s_rc;
+}
+
+# Add/Sub/Shift Register-Immediate, 0x0D, [0x00 - 0x03]
+:add_s s_rc, s_rb, s_u3 is s_major_opcode=0x0d & s_sub_opcode_b3b4=0 & s_rb & s_rc & s_u3 {
+  s_rc = s_rb + s_u3;
+}
+:sub_s s_rc, s_rb, s_u3 is s_major_opcode=0x0d & s_sub_opcode_b3b4=1 & s_rb & s_rc & s_u3 {
+  s_rc = s_rb - s_u3;
+}
+:asl_s s_rc, s_rb, s_u3 is s_major_opcode=0x0d & s_sub_opcode_b3b4=2 & s_rb & s_rc & s_u3 {
+  s_rc = s_rb << s_u3;
+}
+:asr_s s_rc, s_rb, s_u3 is s_major_opcode=0x0d & s_sub_opcode_b3b4=3 & s_rb & s_rc & s_u3 {
+  s_rc = s_rb s>> s_u3;
+}
+
+# Mov/Cmp/Add with High Register, 0x0E, [0x00 - 0x03]
+:add_s s_rb, s_rb_, s_rh_limm is (s_major_opcode=0x0e & s_sub_opcode_b3b4=0 & s_rb & s_rb_) ... & s_rh_limm {
+  s_rb = s_rb_ + s_rh_limm;
+}
+:mov_s s_rb, s_rh_limm is (s_major_opcode=0x0e & s_sub_opcode_b3b4=1 & s_rb) ... & s_rh_limm {
+  s_rb = s_rh_limm;
+}
+:cmp_s s_rb, s_rh_limm is (s_major_opcode=0x0e & s_sub_opcode_b3b4=2 & s_rb) ... & s_rh_limm {
+  local result:4 = s_rb - s_rh_limm;
+  update_flags_sub_zncv(s_rb, s_rh_limm, result);
+}
+:mov_s s_rh, s_rb is s_major_opcode=0x0e & s_sub_opcode_b3b4=3 & s_rb & s_rh {
+  s_rh = s_rb;
+}
+
+# General Register Format Instructions, 0x0F, [0x00 - 0x1F]
+:j_s s_rb is s_major_opcode=0x0f & s_u5=0 & s_sub_opcode_b5b6b7=0 & s_rb {
+  pcl = s_rb;
+  goto [pcl];
+}
+:j_s.d s_rb is s_major_opcode=0x0f & s_u5=0 & s_sub_opcode_b5b6b7=1 & s_rb {
+  pcl = s_rb;
+  delayslot(1);
+  goto [pcl];
+}
+:jl_s s_rb is s_major_opcode=0x0f & s_u5=0 & s_sub_opcode_b5b6b7=2 & s_rb {
+  blink = inst_next;
+  pcl = s_rb;
+  call [pcl];
+}
+:jl_s.d s_rb is s_major_opcode=0x0f & s_u5=0 & s_sub_opcode_b5b6b7=3 & s_rb {
+  blink = inst_next;
+  pcl = s_rb;
+  delayslot(1);
+  call [pcl];
+}
+:sub_s.ne s_rb, s_rb_ is s_major_opcode=0x0f & s_u5=0 & s_sub_opcode_b5b6b7=6 & s_rb & s_rb_ {
+  if (Z) goto <next>;
+  s_rb = 0;
+<next>
+}
+
+:nop_s is s_major_opcode=0x0f & s_u5=0 & s_sub_opcode_b5b6b7=7 & s_rb=0 { }
+:jeq_s blink is s_major_opcode=0x0f & s_u5=0 & s_sub_opcode_b5b6b7=7 & s_rb=4 & blink {
+  if (!Z) goto <next>;
+  pcl = blink;
+  return [pcl];
+<next>
+}
+:jne_s blink is s_major_opcode=0x0f & s_u5=0 & s_sub_opcode_b5b6b7=7 & s_rb=5 & blink {
+  if (Z) goto <next>;
+  pcl = blink;
+  return [pcl];
+<next>
+}
+:j_s blink is s_major_opcode=0x0f & s_u5=0 & s_sub_opcode_b5b6b7=7 & s_rb=6 & blink {
+  pcl = blink;
+  return [pcl];
+}
+:j_s.d blink is s_major_opcode=0x0f & s_u5=0 & s_sub_opcode_b5b6b7=7 & s_rb=7 & blink {
+  pcl = blink;
+  delayslot(1);
+  return [pcl];
+}
+
+:sub_s s_rb, s_rb_, s_rc is s_major_opcode=0x0f & s_u5=0x02 & s_rb & s_rb_ & s_rc {
+  s_rb = s_rb_ - s_rc;
+}
+:and_s s_rb, s_rb_, s_rc is s_major_opcode=0x0f & s_u5=0x04 & s_rb & s_rb_ & s_rc {
+  s_rb = s_rb_ & s_rc;
+}
+:or_s s_rb, s_rb_, s_rc is s_major_opcode=0x0f & s_u5=0x05 & s_rb & s_rb_ & s_rc {
+  s_rb = s_rb_ | s_rc;
+}
+:bic_s s_rb, s_rb_, s_rc is s_major_opcode=0x0f & s_u5=0x06 & s_rb & s_rb_ & s_rc {
+  s_rb = s_rb_ & ~s_rc;
+}
+:xor_s s_rb, s_rb_, s_rc is s_major_opcode=0x0f & s_u5=0x07 & s_rb & s_rb_ & s_rc {
+  s_rb = s_rb_ ^ s_rc;
+}
+:tst_s s_rb, s_rc is s_major_opcode=0x0f & s_u5=0x0b & s_rb & s_rc {
+  update_flags_zn(s_rb & s_rc);
+}
+:mul64_s s_rb, s_rc is s_major_opcode=0x0f & s_u5=0x0c & s_rb & s_rc {
+  local val_b:8 = sext(s_rb);
+  local val_c:8 = sext(s_rc);
+  local result:8 = val_b * val_c;
+  mlo = result:4;
+  mmid = result(2);
+  mhi = result(4);
+}
+:sexb_s s_rb, s_rc is s_major_opcode=0x0f & s_u5=0x0d & s_rb & s_rc {
+  s_rb = sext(s_rc:1);
+}
+:sexw_s s_rb, s_rc is s_major_opcode=0x0f & s_u5=0x0e & s_rb & s_rc {
+  s_rb = sext(s_rc:2);
+}
+:extb_s s_rb, s_rc is s_major_opcode=0x0f & s_u5=0x0f & s_rb & s_rc {
+  s_rb = s_rc & 0xff;
+}
+:extw_s s_rb, s_rc is s_major_opcode=0x0f & s_u5=0x10 & s_rb & s_rc {
+  s_rb = s_rc & 0xffff;
+}
+:abs_s s_rb, s_rc is s_major_opcode=0x0f & s_u5=0x11 & s_rb & s_rc {
+  local acond:1 = s_rc s< 0:4;
+  s_rb = (s_rc * zext(acond == 0)) + (-s_rc * zext(acond != 0));
+}
+:not_s s_rb, s_rc is s_major_opcode=0x0f & s_u5=0x12 & s_rb & s_rc {
+  s_rb = ~s_rc;
+}
+:neg_s s_rb, s_rc is s_major_opcode=0x0f & s_u5=0x13 & s_rb & s_rc {
+  s_rb = -s_rc;
+}
+:add1_s s_rb, s_rb_, s_rc is s_major_opcode=0x0f & s_u5=0x14 & s_rb & s_rb_ & s_rc {
+  s_rb = s_rb_ + (s_rc << 1);
+}
+:add2_s s_rb, s_rb_, s_rc is s_major_opcode=0x0f & s_u5=0x15 & s_rb & s_rb_ & s_rc {
+  s_rb = s_rb_ + (s_rc << 2);
+}
+:add3_s s_rb, s_rb_, s_rc is s_major_opcode=0x0f & s_u5=0x16 & s_rb & s_rb_ & s_rc {
+  s_rb = s_rb_ + (s_rc << 3);
+}
+:asl_s s_rb, s_rb_, s_rc is s_major_opcode=0x0f & s_u5=0x18 & s_rb & s_rb_ & s_rc {
+  s_rb = s_rb_ << (s_rc[0,5]);
+}
+:lsr_s s_rb, s_rb_, s_rc is s_major_opcode=0x0f & s_u5=0x19 & s_rb & s_rb_ & s_rc {
+  s_rb = s_rb_ >> (s_rc[0,5]);
+}
+:asr_s s_rb, s_rb_, s_rc is s_major_opcode=0x0f & s_u5=0x1a & s_rb & s_rb_ & s_rc {
+  s_rb = s_rb_ s>> (s_rc[0,5]);
+}
+:asl_s s_rb, s_rc, 1 is s_major_opcode=0x0f & s_u5=0x1b & s_rb & s_rc {
+  s_rb = s_rc + s_rc;
+}
+:asr_s s_rb, s_rc, 1 is s_major_opcode=0x0f & s_u5=0x1c & s_rb & s_rc {
+  s_rb = s_rc s>> 1;
+}
+:lsr_s s_rb, s_rc, 1 is s_major_opcode=0x0f & s_u5=0x1d & s_rb & s_rc {
+  s_rb = s_rc >> 1;
+}
+:trap_s s_middle_u6 is s_major_opcode=0x0f & s_u5=0x1e & s_middle_u6 {
+  trap_s(s_middle_u6:1);
+  goto inst_start;
+}
+:brk_s is s_major_opcode=0x0f & s_u5=0x1f & s_rb=7 & s_rc=7 {
+  # brk_s is encoded 0x7fff
+  brk();
+  goto inst_start;
+}
+
+# Load/Store with Offset, 0x10 - 0x16
+:ld_s s_rc, [s_rb] is s_major_opcode=0x10 & s_rb & s_rc & s_u5=0 {
+  s_rc = *:4 s_rb;
+}
+:ld_s s_rc, [s_rb, s_u5shift2] is s_major_opcode=0x10 & s_rb & s_rc & s_u5shift2 {
+  s_rc = *:4 (s_rb + s_u5shift2);
+}
+:ldb_s s_rc, [s_rb] is s_major_opcode=0x11 & s_rb & s_rc & s_u5=0 {
+  s_rc = zext(*:1 s_rb);
+}
+:ldb_s s_rc, [s_rb, s_u5] is s_major_opcode=0x11 & s_rb & s_rc & s_u5 {
+  local addr:4 = s_rb + s_u5;
+  s_rc = zext(*:1 addr);
+}
+:ldw_s s_rc, [s_rb] is s_major_opcode=0x12 & s_rb & s_rc & s_u5=0 {
+  s_rc = zext(*:2 s_rb);
+}
+:ldw_s s_rc, [s_rb, s_u5shift1] is s_major_opcode=0x12 & s_rb & s_rc & s_u5shift1 {
+  local addr:4 = s_rb + s_u5shift1;
+  s_rc = zext(*:2 addr);
+}
+:ldw_s.x s_rc, [s_rb] is s_major_opcode=0x13 & s_rb & s_rc & s_u5=0 {
+  s_rc = sext(*:2 s_rb);
+}
+:ldw_s.x s_rc, [s_rb, s_u5shift1] is s_major_opcode=0x13 & s_rb & s_rc & s_u5shift1 {
+  local addr:4 = s_rb + s_u5shift1;
+  s_rc = sext(*:2 addr);
+}
+:st_s s_rc, [s_rb] is s_major_opcode=0x14 & s_rb & s_rc & s_u5=0 {
+  *:4 s_rb = s_rc;
+}
+:st_s s_rc, [s_rb, s_u5shift2] is s_major_opcode=0x14 & s_rb & s_rc & s_u5shift2 {
+  *:4 (s_rb + s_u5shift2) = s_rc;
+}
+:stb_s s_rc, [s_rb] is s_major_opcode=0x15 & s_rb & s_rc & s_u5=0 {
+  *:1 s_rb = s_rc:1;
+}
+:stb_s s_rc, [s_rb, s_u5] is s_major_opcode=0x15 & s_rb & s_rc & s_u5 {
+  *:1 (s_rb + s_u5) = s_rc:1;
+}
+:stw_s s_rc, [s_rb] is s_major_opcode=0x16 & s_rb & s_rc & s_u5=0 {
+  *:2 s_rb = s_rc:2;
+}
+:stw_s s_rc, [s_rb, s_u5shift1] is s_major_opcode=0x16 & s_rb & s_rc & s_u5shift1 {
+  *:2 (s_rb + s_u5shift1) = s_rc:2;
+}
+
+# Shift/Subtract/Bit Immediate, 0x17, [0x00 - 0x07]
+:asl_s s_rb, s_rb_, s_u5 is s_major_opcode=0x17 & s_sub_opcode_b5b6b7=0 & s_rb & s_rb_ & s_u5 {
+  s_rb = s_rb_ << s_u5;
+}
+:lsr_s s_rb, s_rb_, s_u5 is s_major_opcode=0x17 & s_sub_opcode_b5b6b7=1 & s_rb & s_rb_ & s_u5 {
+  s_rb = s_rb_ >> s_u5;
+}
+:asr_s s_rb, s_rb_, s_u5 is s_major_opcode=0x17 & s_sub_opcode_b5b6b7=2 & s_rb & s_rb_ & s_u5 {
+  s_rb = s_rb_ s>> s_u5;
+}
+:sub_s s_rb, s_rb_, s_u5 is s_major_opcode=0x17 & s_sub_opcode_b5b6b7=3 & s_rb & s_rb_ & s_u5 {
+  s_rb = s_rb_ - s_u5;
+}
+:bset_s s_rb, s_rb_, s_u5 is s_major_opcode=0x17 & s_sub_opcode_b5b6b7=4 & s_rb & s_rb_ & s_u5 {
+  s_rb = s_rb_ | (1:4 << s_u5);
+}
+:bclr_s s_rb, s_rb_, s_u5 is s_major_opcode=0x17 & s_sub_opcode_b5b6b7=5 & s_rb & s_rb_ & s_u5 {
+  s_rb = s_rb_ & ~(1:4 << s_u5);
+}
+:bmsk_s s_rb, s_rb_, s_u5 is s_major_opcode=0x17 & s_sub_opcode_b5b6b7=6 & s_rb & s_rb_ & s_u5 {
+  s_rb = s_rb_ & ((1:4 << (s_u5 + 1:4)) - 1);
+}
+:btst_s s_rb, s_u5 is s_major_opcode=0x17 & s_sub_opcode_b5b6b7=7 & s_rb & s_u5 {
+  update_flags_zn(s_rb & (1:4 << s_u5));
+}
+
+# Stack Pointer Based Instructions, 0x18, [0x00 - 0x07]
+:ld_s s_rb, [sp, s_u5shift2] is s_major_opcode=0x18 & s_sub_opcode_b5b6b7=0 & s_rb & s_u5shift2 & sp {
+  local addr:4 = sp + s_u5shift2;
+  s_rb = *:4 addr;
+}
+:ldb_s s_rb, [sp, s_u5shift2] is s_major_opcode=0x18 & s_sub_opcode_b5b6b7=1 & s_rb & s_u5shift2 & sp {
+  local addr:4 = sp + s_u5shift2;
+  s_rb = zext(*:1 addr);
+}
+:st_s s_rb, [sp, s_u5shift2] is s_major_opcode=0x18 & s_sub_opcode_b5b6b7=2 & s_rb & s_u5shift2 & sp {
+  *:4 (sp + s_u5shift2) = s_rb;
+}
+:stb_s s_rb, [sp, s_u5shift2] is s_major_opcode=0x18 & s_sub_opcode_b5b6b7=3 & s_rb & s_u5shift2 & sp {
+  *:1 (sp + s_u5shift2) = s_rb:1;
+}
+:add_s s_rb, sp, s_u5shift2 is s_major_opcode=0x18 & s_sub_opcode_b5b6b7=4 & s_rb & s_u5shift2 & sp {
+  s_rb = sp + s_u5shift2;
+}
+:add_s sp, s_u5shift2 is s_major_opcode=0x18 & s_sub_opcode_b5b6b7=5 & s_rb=0 & s_u5shift2 & sp {
+  sp = sp + s_u5shift2;
+}
+:sub_s sp, s_u5shift2 is s_major_opcode=0x18 & s_sub_opcode_b5b6b7=5 & s_rb=1 & s_u5shift2 & sp {
+  sp = sp - s_u5shift2;
+}
+:pop_s s_rb is s_major_opcode=0x18 & s_sub_opcode_b5b6b7=6 & s_u5=0x01 & s_rb {
+  pop4(s_rb);
+}
+:pop_s blink is s_major_opcode=0x18 & s_sub_opcode_b5b6b7=6 & s_u5=0x11 & blink {
+  pop4(blink);
+}
+:push_s s_rb is s_major_opcode=0x18 & s_sub_opcode_b5b6b7=7 & s_u5=0x01 & s_rb {
+  push4(s_rb);
+}
+:push_s blink is s_major_opcode=0x18 & s_sub_opcode_b5b6b7=7 & s_u5=0x11 & blink {
+  push4(blink);
+}
+
+# Load/Add GP-Relative, 0x19, [0x00 - 0x03]
+:ld_s r0, [gp, s_s9shift2] is s_major_opcode=0x19 & s_sub_opcode_b9b10=0 & s_s9shift2 & r0 & gp {
+  local addr:4 = gp + s_s9shift2;
+  r0 = *:4 addr;
+}
+:ldb_s r0, [gp, s_s9] is s_major_opcode=0x19 & s_sub_opcode_b9b10=1 & s_s9 & r0 & gp {
+  local addr:4 = gp + s_s9;
+  r0 = zext(*:1 addr);
+}
+:ldw_s r0, [gp, s_s9shift1] is s_major_opcode=0x19 & s_sub_opcode_b9b10=2 & s_s9shift1 & r0 & gp {
+  local addr:4 = gp + s_s9shift1;
+  r0 = zext(*:2 addr);
+}
+:add_s r0, gp, s_s9shift2 is s_major_opcode=0x19 & s_sub_opcode_b9b10=3 & s_s9shift2 & r0 & gp {
+  r0 = gp + s_s9shift2;
+}
+
+# Load PCL-Relative, 0x1A
+:ld_s s_rb, [pcl, s_u8shift2] is s_major_opcode=0x1a & s_rb & s_u8shift2 & s_target_u8shift2 & pcl {
+  s_rb = s_target_u8shift2;
+}
+
+# Move Immediate, 0x1B
+:mov_s s_rb, s_u8 is s_major_opcode=0x1b & s_rb & s_u8 {
+  s_rb = s_u8;
+}
+
+# ADD/CMP Immediate, 0x1C, [0x00 - 0x01]
+:add_s s_rb, s_u7 is s_major_opcode=0x1c & s_sub_opcode_b7=0 & s_rb & s_u7 {
+  s_rb = s_rb + s_u7;
+}
+:cmp_s s_rb, s_u7 is s_major_opcode=0x1c & s_sub_opcode_b7=1 & s_rb & s_u7 {
+  local result:4 = s_rb - s_u7;
+  update_flags_sub_zncv(s_rb, s_u7, result);
+}
+
+# Branch on Compare Register with Zero, 0x1D, [0x00 - 0x01]
+:breq_s s_rb, 0, s_target_s7shift1 is s_major_opcode=0x1d & s_sub_opcode_b7=0 & s_rb & s_target_s7shift1 {
+  if (s_rb == 0) goto s_target_s7shift1;
+}
+:brne_s s_rb, 0, s_target_s7shift1 is s_major_opcode=0x1d & s_sub_opcode_b7=1 & s_rb & s_target_s7shift1 {
+  if (s_rb != 0) goto s_target_s7shift1;
+}
+
+# Branch Conditionally, 0x1E, [0x00 - 0x03]
+:b_s s_target_s9shift1 is s_major_opcode=0x1e & s_sub_opcode_b9b10=0 & s_target_s9shift1 {
+  goto s_target_s9shift1;
+}
+:beq_s s_target_s9shift1 is s_major_opcode=0x1e & s_sub_opcode_b9b10=1 & s_target_s9shift1 {
+  if (Z) goto s_target_s9shift1;
+}
+:bne_s s_target_s9shift1 is s_major_opcode=0x1e & s_sub_opcode_b9b10=2 & s_target_s9shift1 {
+  if (!Z) goto s_target_s9shift1;
+}
+:bgt_s s_target_s6shift1 is s_major_opcode=0x1e & s_sub_opcode_b9b10=3 & s_sub_opcode_b6b7b8=0 & s_target_s6shift1 {
+  if (!Z && (V == N)) goto s_target_s6shift1;
+}
+:bge_s s_target_s6shift1 is s_major_opcode=0x1e & s_sub_opcode_b9b10=3 & s_sub_opcode_b6b7b8=1 & s_target_s6shift1 {
+  if (V == N) goto s_target_s6shift1;
+}
+:blt_s s_target_s6shift1 is s_major_opcode=0x1e & s_sub_opcode_b9b10=3 & s_sub_opcode_b6b7b8=2 & s_target_s6shift1 {
+  if (V != N) goto s_target_s6shift1;
+}
+:ble_s s_target_s6shift1 is s_major_opcode=0x1e & s_sub_opcode_b9b10=3 & s_sub_opcode_b6b7b8=3 & s_target_s6shift1 {
+  if (Z || (V != N)) goto s_target_s6shift1;
+}
+:bhi_s s_target_s6shift1 is s_major_opcode=0x1e & s_sub_opcode_b9b10=3 & s_sub_opcode_b6b7b8=4 & s_target_s6shift1 {
+  if (!C && !Z) goto s_target_s6shift1;
+}
+:bhs_s s_target_s6shift1 is s_major_opcode=0x1e & s_sub_opcode_b9b10=3 & s_sub_opcode_b6b7b8=5 & s_target_s6shift1 {
+  if (!C) goto s_target_s6shift1;
+}
+:blo_s s_target_s6shift1 is s_major_opcode=0x1e & s_sub_opcode_b9b10=3 & s_sub_opcode_b6b7b8=6 & s_target_s6shift1 {
+  if (C) goto s_target_s6shift1;
+}
+:bls_s s_target_s6shift1 is s_major_opcode=0x1e & s_sub_opcode_b9b10=3 & s_sub_opcode_b6b7b8=7 & s_target_s6shift1 {
+  if (C || Z) goto s_target_s6shift1;
+}
+
+# Branch and Link Unconditionally, 0x1F
+:bl_s s_target_s11shift2 is s_major_opcode=0x1f & s_target_s11shift2 {
+  blink = inst_next;
+  call s_target_s11shift2;
+}
+
+} # end of "with : phase=1"
diff --git a/Ghidra/Processors/ARC/src/main/java/ghidra/program/emulation/ARCompactEmulateInstructionStateModifier.java b/Ghidra/Processors/ARC/src/main/java/ghidra/program/emulation/ARCompactEmulateInstructionStateModifier.java
new file mode 100644
index 0000000000..4d7d7aa3af
--- /dev/null
+++ b/Ghidra/Processors/ARC/src/main/java/ghidra/program/emulation/ARCompactEmulateInstructionStateModifier.java
@@ -0,0 +1,68 @@
+package ghidra.program.emulation;
+
+import ghidra.pcode.emulate.Emulate;
+import ghidra.pcode.emulate.EmulateInstructionStateModifier;
+import ghidra.pcode.emulate.callother.OpBehaviorOther;
+import ghidra.pcode.memstate.MemoryState;
+import ghidra.pcodeCPort.error.LowlevelError;
+import ghidra.program.model.pcode.Varnode;
+
+public class ARCompactEmulateInstructionStateModifier extends EmulateInstructionStateModifier {
+
+	public ARCompactEmulateInstructionStateModifier(Emulate emu) {
+		super(emu);
+
+		registerPcodeOpBehavior("norm", new ARCompactNormOpBehavior());
+	}
+
+	/**
+	 * Implements ARCompact's norm instruction.
+	 *
+	 * It is defined by:
+	 *   Computes the normalization integer for the signed value in the
+	 *   operand. The normalization integer is the amount by which the
+	 *   operand must be shifted left to normalize the operand as a
+	 *   32-bit signed integer.
+	 *
+	 * An other way to understand this operation is to use some rules:
+	 * * norm(0) = 31
+	 * * if x s> 0, norm(x) = clz(x) - 1, with clz being "count leading zeros"
+	 * * if x s< 0, norm(x) = norm(~x)
+	 */
+	private class ARCompactNormOpBehavior implements OpBehaviorOther {
+		@Override
+		public void evaluate(Emulate emu, Varnode out, Varnode[] inputs) {
+			if (out == null) {
+				throw new LowlevelError("CALLOTHER: Norm op missing required output");
+			}
+
+			if (inputs.length != 2 || inputs[1].getSize() == 0 || inputs[1].isConstant()) {
+				throw new LowlevelError(
+					"CALLOTHER: Norm op requires one non-constant varnode input");
+			}
+
+			Varnode in = inputs[1];
+			if (in.getSize() != 4 ) {
+				throw new LowlevelError(
+					"CALLOTHER: Norm op only supports varnodes of size 4 bytes");
+			}
+
+			MemoryState memoryState = emu.getMemoryState();
+			long value = memoryState.getValue(in);
+			long mask = 1L << ((in.getSize() * 8) - 1);
+			if ((mask & value) != 0) {
+				value = ~value;
+			}
+			mask >>>= 1;
+			long count = 0;
+			while (mask != 0) {
+				if ((mask & value) != 0) {
+					break;
+				}
+				++count;
+				mask >>>= 1;
+			}
+			memoryState.setValue(out, count);
+		}
+	}
+}
diff --git a/Ghidra/Processors/ARC/src/test.processors/java/ghidra/test/processors/ARC700_O0_EmulatorTest.java b/Ghidra/Processors/ARC/src/test.processors/java/ghidra/test/processors/ARC700_O0_EmulatorTest.java
new file mode 100644
index 0000000000..6705039be5
--- /dev/null
+++ b/Ghidra/Processors/ARC/src/test.processors/java/ghidra/test/processors/ARC700_O0_EmulatorTest.java
@@ -0,0 +1,40 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.test.processors;
+
+import ghidra.test.processors.support.ProcessorEmulatorTestAdapter;
+import junit.framework.Test;
+
+public class ARC700_O0_EmulatorTest extends ProcessorEmulatorTestAdapter {
+
+	private static final String LANGUAGE_ID = "ARCompact:LE:32:default";
+	private static final String COMPILER_SPEC_ID = "default";
+
+	private static final String[] REG_DUMP_SET = new String[] {};
+
+	public ARC700_O0_EmulatorTest(String name) throws Exception {
+		super(name, LANGUAGE_ID, COMPILER_SPEC_ID, REG_DUMP_SET);
+	}
+
+	@Override
+	protected String getProcessorDesignator() {
+		return "ARC700_GCC_O0";
+	}
+
+	public static Test suite() {
+		return ProcessorEmulatorTestAdapter.buildEmulatorTestSuite(ARC700_O0_EmulatorTest.class);
+	}
+}
diff --git a/Ghidra/Processors/ARC/src/test.processors/java/ghidra/test/processors/ARC700_O3_EmulatorTest.java b/Ghidra/Processors/ARC/src/test.processors/java/ghidra/test/processors/ARC700_O3_EmulatorTest.java
new file mode 100644
index 0000000000..4ecc688cd2
--- /dev/null
+++ b/Ghidra/Processors/ARC/src/test.processors/java/ghidra/test/processors/ARC700_O3_EmulatorTest.java
@@ -0,0 +1,40 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.test.processors;
+
+import ghidra.test.processors.support.ProcessorEmulatorTestAdapter;
+import junit.framework.Test;
+
+public class ARC700_O3_EmulatorTest extends ProcessorEmulatorTestAdapter {
+
+	private static final String LANGUAGE_ID = "ARCompact:LE:32:default";
+	private static final String COMPILER_SPEC_ID = "default";
+
+	private static final String[] REG_DUMP_SET = new String[] {};
+
+	public ARC700_O3_EmulatorTest(String name) throws Exception {
+		super(name, LANGUAGE_ID, COMPILER_SPEC_ID, REG_DUMP_SET);
+	}
+
+	@Override
+	protected String getProcessorDesignator() {
+		return "ARC700_GCC_O3";
+	}
+
+	public static Test suite() {
+		return ProcessorEmulatorTestAdapter.buildEmulatorTestSuite(ARC700_O3_EmulatorTest.class);
+	}
+}
-- 
2.44.0

