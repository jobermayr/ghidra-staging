From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Andrew Strelsky <ajs222@njit.edu>
Date: Sun, 31 Dec 2023 09:58:16 -0500
Subject: [PATCH] 6072: golang support 1.21+

---
 .../ghidra/app/util/bin/format/golang/GoVer.java |  4 +++-
 .../format/golang/rtti/types/GoArrayType.java    |  2 +-
 .../bin/format/golang/rtti/types/GoBaseType.java |  8 ++++----
 .../bin/format/golang/rtti/types/GoChanType.java |  2 +-
 .../bin/format/golang/rtti/types/GoFuncType.java |  2 +-
 .../bin/format/golang/rtti/types/GoIMethod.java  |  4 ++--
 .../golang/rtti/types/GoInterfaceType.java       |  4 ++--
 .../bin/format/golang/rtti/types/GoMapType.java  |  4 ++--
 .../bin/format/golang/rtti/types/GoMethod.java   |  2 +-
 .../format/golang/rtti/types/GoPlainType.java    |  2 +-
 .../format/golang/rtti/types/GoPointerType.java  |  2 +-
 .../format/golang/rtti/types/GoSliceType.java    |  2 +-
 .../format/golang/rtti/types/GoStructField.java  |  2 +-
 .../format/golang/rtti/types/GoStructType.java   |  2 +-
 .../bin/format/golang/rtti/types/GoType.java     |  2 +-
 .../format/golang/rtti/types/GoTypeDetector.java |  4 ++--
 .../format/golang/rtti/types/GoUncommonType.java |  2 +-
 .../golang/structmapping/DataTypeMapper.java     | 11 ++++++++---
 .../golang/structmapping/StructureMapping.java   |  2 +-
 .../structmapping/StructureMappingInfo.java      | 16 ++++++++--------
 20 files changed, 43 insertions(+), 36 deletions(-)

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/GoVer.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/GoVer.java
index 06608003f..1afa8e429 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/GoVer.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/GoVer.java
@@ -28,7 +28,9 @@ public enum GoVer {
 	V1_17(1, 17),
 	V1_18(1, 18),
 	V1_19(1, 19),
-	V1_20(1, 20);
+	V1_20(1, 20),
+	V1_21(1, 21),
+	V1_22(1, 22);
 
 	private final int major;
 	private final int minor;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoArrayType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoArrayType.java
index d2f1a305f..1719ffceb 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoArrayType.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoArrayType.java
@@ -26,7 +26,7 @@ import ghidra.program.model.data.DataType;
 /**
  * {@link GoType} structure that defines an array.
  */
-@StructureMapping(structureName = "runtime.arraytype")
+@StructureMapping(structureName = {"runtime.arraytype", "internal/abi.ArrayType"})
 public class GoArrayType extends GoType {
 
 	@FieldMapping
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoBaseType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoBaseType.java
index 18b3ab423..a0d68d17b 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoBaseType.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoBaseType.java
@@ -35,7 +35,7 @@ import ghidra.app.util.bin.format.golang.structmapping.*;
  * struct specialized_type { basetype_struct; (various_fields)* } struct uncommon; 
  * </pre>
  */
-@StructureMapping(structureName = "runtime._type")
+@StructureMapping(structureName = {"runtime._type", "internal/abi.Type"})
 public class GoBaseType {
 
 	@ContextField
@@ -44,17 +44,17 @@ public class GoBaseType {
 	@ContextField
 	private GoRttiMapper programContext;
 
-	@FieldMapping(signedness = Signedness.Unsigned)
+	@FieldMapping(fieldName = {"size", "Size_"}, signedness = Signedness.Unsigned)
 	private long size;
 
-	@FieldMapping
+	@FieldMapping(fieldName = {"ptrdata", "PtrBytes"})
 	private long ptrdata;
 
 	@FieldMapping
 	@EOLComment("flags")
 	private int tflag;
 
-	@FieldMapping
+	@FieldMapping(fieldName = {"kind", "Kind_"})
 	@EOLComment
 	private int kind;
 
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoChanType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoChanType.java
index f30fb2173..5fbd13add 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoChanType.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoChanType.java
@@ -25,7 +25,7 @@ import ghidra.util.Msg;
 /**
  * A {@link GoType} structure that defines a go channel
  */
-@StructureMapping(structureName = "runtime.chantype")
+@StructureMapping(structureName = {"runtime.chantype", "internal/abi.ChanType"})
 public class GoChanType extends GoType {
 
 	@FieldMapping
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoFuncType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoFuncType.java
index 87da2072c..af85ddff3 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoFuncType.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoFuncType.java
@@ -27,7 +27,7 @@ import ghidra.program.model.data.*;
 /**
  * A {@link GoType} structure that defines a function type.
  */
-@StructureMapping(structureName = "runtime.functype")
+@StructureMapping(structureName = {"runtime.functype", "internal/abi.FuncType"})
 public class GoFuncType extends GoType {
 
 	/**
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoIMethod.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoIMethod.java
index 8f6b2f1b7..8b0f7eaa0 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoIMethod.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoIMethod.java
@@ -22,7 +22,7 @@ import ghidra.app.util.bin.format.golang.structmapping.*;
 import ghidra.program.model.address.Address;
 import ghidra.program.model.data.FunctionDefinition;
 
-@StructureMapping(structureName = "runtime.imethod")
+@StructureMapping(structureName = {"runtime.imethod", "internal/abi.Imethod"})
 public class GoIMethod implements StructureMarkup<GoIMethod> {
 
 	@ContextField
@@ -36,7 +36,7 @@ public class GoIMethod implements StructureMarkup<GoIMethod> {
 	@EOLComment("getName")
 	private long name;
 
-	@FieldMapping
+	@FieldMapping(fieldName = {"ityp", "Typ"})
 	@MarkupReference("getType")
 	private long ityp;
 
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoInterfaceType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoInterfaceType.java
index 26aa5fc2b..8382a0284 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoInterfaceType.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoInterfaceType.java
@@ -28,14 +28,14 @@ import ghidra.util.exception.CancelledException;
 /**
  * A {@link GoType} structure that defines a golang interface. 
  */
-@StructureMapping(structureName = "runtime.interfacetype")
+@StructureMapping(structureName = {"runtime.interfacetype", "internal/abi.InterfaceType"})
 public class GoInterfaceType extends GoType {
 
 	@FieldMapping
 	@MarkupReference("getPkgPath")
 	private long pkgpath;	// pointer to name 
 
-	@FieldMapping
+	@FieldMapping(fieldName = {"mhdr", "Methods"})
 	private GoSlice mhdr;
 
 	public GoInterfaceType() {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoMapType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoMapType.java
index 290f21b25..85be7d924 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoMapType.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoMapType.java
@@ -30,7 +30,7 @@ import ghidra.util.Msg;
  * See {@link GoRttiMapper#getMapGoType()} or the "runtime.hmap" type for the definition of
  * a instance of a map variable in memory. 
  */
-@StructureMapping(structureName = "runtime.maptype")
+@StructureMapping(structureName = {"runtime.maptype", "internal/abi.MapType"})
 public class GoMapType extends GoType {
 
 	@FieldMapping
@@ -51,7 +51,7 @@ public class GoMapType extends GoType {
 	@FieldMapping
 	private int keysize;
 
-	@FieldMapping
+	@FieldMapping(fieldName = {"elemsize", "ValueSize"})
 	private int elemsize;
 
 	@FieldMapping
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoMethod.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoMethod.java
index b67e235e4..7dc3c5751 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoMethod.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoMethod.java
@@ -28,7 +28,7 @@ import ghidra.util.NumericUtilities;
 /**
  * Structure that defines a method for a GoType, found in the type's {@link GoUncommonType} struct.
  */
-@StructureMapping(structureName = "runtime.method")
+@StructureMapping(structureName = {"runtime.method", "internal/abi.Method"})
 public class GoMethod implements StructureMarkup<GoMethod> {
 	@ContextField
 	private GoRttiMapper programContext;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoPlainType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoPlainType.java
index 2b1de9389..4647a8307 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoPlainType.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoPlainType.java
@@ -32,7 +32,7 @@ import ghidra.util.Msg;
  * <p>
  * {@link GoType} structure that defines a built-in primitive type.
  */
-@StructureMapping(structureName = "runtime._type")
+@StructureMapping(structureName = {"runtime._type", "internal/abi.Type"})
 public class GoPlainType extends GoType implements StructureReader<GoType> {
 	@Override
 	public void readStructure() throws IOException {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoPointerType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoPointerType.java
index d6aaa1daf..6d4824a31 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoPointerType.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoPointerType.java
@@ -26,7 +26,7 @@ import ghidra.program.model.data.PointerDataType;
 /**
  * {@link GoType} structure that defines a pointer.
  */
-@StructureMapping(structureName = "runtime.ptrtype")
+@StructureMapping(structureName = {"runtime.ptrtype", "internal/abi.PtrType"})
 public class GoPointerType extends GoType {
 	@FieldMapping
 	@MarkupReference("getElement")
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoSliceType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoSliceType.java
index 585dcbb29..741355ccb 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoSliceType.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoSliceType.java
@@ -29,7 +29,7 @@ import ghidra.program.model.data.*;
  * See {@link GoRttiMapper#getGenericSliceDT()} or the "runtime.slice" type for the definition of
  * a instance of a slice variable in memory. 
 */
-@StructureMapping(structureName = "runtime.slicetype")
+@StructureMapping(structureName = {"runtime.slicetype", "internal/abi.SliceType"})
 public class GoSliceType extends GoType {
 
 	@FieldMapping
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoStructField.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoStructField.java
index 843a117cc..1474c2955 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoStructField.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoStructField.java
@@ -24,7 +24,7 @@ import ghidra.app.util.bin.format.golang.structmapping.*;
 /**
  * Structure used to define a field in a {@link GoStructType struct type}.
  */
-@StructureMapping(structureName = "runtime.structfield")
+@StructureMapping(structureName = {"runtime.structfield", "internal/abi.StructField"})
 public class GoStructField {
 
 	@ContextField
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoStructType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoStructType.java
index 4a4cab90a..85f7de8b6 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoStructType.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoStructType.java
@@ -29,7 +29,7 @@ import ghidra.util.exception.CancelledException;
 /**
  * Golang type information about a specific structure type.
  */
-@StructureMapping(structureName = "runtime.structtype")
+@StructureMapping(structureName = {"runtime.structtype", "internal/abi.StructType"})
 public class GoStructType extends GoType {
 
 	@FieldMapping
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoType.java
index ea61eff21..e7836716c 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoType.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoType.java
@@ -69,7 +69,7 @@ public abstract class GoType implements StructureMarkup<GoType> {
 	@ContextField
 	protected StructureContext<GoType> context;
 
-	@FieldMapping
+	@FieldMapping(fieldName = {"typ", "Type"})
 	@Markup
 	@FieldOutput
 	protected GoBaseType typ;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoTypeDetector.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoTypeDetector.java
index 2d9ef56ca..6ebcf3b95 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoTypeDetector.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoTypeDetector.java
@@ -21,9 +21,9 @@ import ghidra.app.util.bin.format.golang.structmapping.StructureMapping;
 /**
  * Small stub that is only used to fetch the "kind" field so that the real gotype can be detected
  */
-@StructureMapping(structureName = "runtime._type")
+@StructureMapping(structureName = {"runtime._type", "internal/abi.Type"})
 public class GoTypeDetector {
-	@FieldMapping
+	@FieldMapping(fieldName = {"kind", "Kind_"})
 	private int kind;
 
 	public GoKind getKind() {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoUncommonType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoUncommonType.java
index 35eef0ed3..7b216afb2 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoUncommonType.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/rtti/types/GoUncommonType.java
@@ -26,7 +26,7 @@ import ghidra.util.Msg;
  * Structure found immediately after a {@link GoType} structure, if it has the uncommon flag
  * set.
  */
-@StructureMapping(structureName = "runtime.uncommontype")
+@StructureMapping(structureName = {"runtime.uncommontype", "internal/abi.UncommonType"})
 public class GoUncommonType {
 
 	@ContextField
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/structmapping/DataTypeMapper.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/structmapping/DataTypeMapper.java
index 829194365..ce37b9cff 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/structmapping/DataTypeMapper.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/structmapping/DataTypeMapper.java
@@ -170,11 +170,16 @@ public class DataTypeMapper implements AutoCloseable {
 	 */
 	public <T> void registerStructure(Class<T> clazz) throws IOException {
 		Structure structDT = null;
-		String structName = StructureMappingInfo.getStructureDataTypeNameForClass(clazz);
-		if (structName != null && !structName.isBlank()) {
-			structDT = getType(structName, Structure.class);
+		for (String structName : StructureMappingInfo.getStructureDataTypeNameForClass(clazz)) {
+			if (structName != null && !structName.isBlank()) {
+				structDT = getType(structName, Structure.class);
+				if (structDT != null) {
+					break;
+				}
+			}
 		}
 		if (!StructureReader.class.isAssignableFrom(clazz) && structDT == null) {
+			String structName = StructureMappingInfo.getStructureDataTypeNameForClass(clazz)[0];
 			if (structName == null || structName.isBlank()) {
 				structName = "<missing>";
 			}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/structmapping/StructureMapping.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/structmapping/StructureMapping.java
index cf0bd953c..9a5786951 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/structmapping/StructureMapping.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/structmapping/StructureMapping.java
@@ -63,7 +63,7 @@ public @interface StructureMapping {
 	 * 
 	 * @return name of a Ghidra structure data type
 	 */
-	String structureName();
+	String[] structureName();
 
 	/**
 	 * Optional reference to a 'function' (implemented via a class) that will be called to do 
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/structmapping/StructureMappingInfo.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/structmapping/StructureMappingInfo.java
index 8184b4d14..0ed897cde 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/structmapping/StructureMappingInfo.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/golang/structmapping/StructureMappingInfo.java
@@ -39,7 +39,7 @@ public class StructureMappingInfo<T> {
 	 * @param targetClass structure mapped class
 	 * @return the structure name
 	 */
-	public static String getStructureDataTypeNameForClass(Class<?> targetClass) {
+	public static String[] getStructureDataTypeNameForClass(Class<?> targetClass) {
 		StructureMapping sma = targetClass.getAnnotation(StructureMapping.class);
 		return sma != null ? sma.structureName() : null;
 	}
@@ -68,7 +68,7 @@ public class StructureMappingInfo<T> {
 	private final Class<T> targetClass;
 	private final ObjectInstanceCreator<T> instanceCreator;
 
-	private final String structureName;
+	private final String[] structureName;
 	private final Structure structureDataType;	// null if variable length fields
 
 	private final List<FieldMappingInfo<T>> fields = new ArrayList<>();
@@ -84,7 +84,7 @@ public class StructureMappingInfo<T> {
 		this.targetClass = targetClass;
 		this.structureDataType = structDataType;
 		this.structureName = structureDataType != null
-				? structureDataType.getName()
+				? new String[]{structureDataType.getName()}
 				: sma.structureName();
 		this.useFieldMappingInfo = !StructureReader.class.isAssignableFrom(targetClass);
 		this.instanceCreator = findInstanceCreator();
@@ -109,7 +109,7 @@ public class StructureMappingInfo<T> {
 	}
 
 	public String getDescription() {
-		return "%s-%s".formatted(targetClass.getSimpleName(), structureName);
+		return "%s-%s".formatted(targetClass.getSimpleName(), structureName[0]);
 	}
 
 	public Structure getStructureDataType() {
@@ -117,7 +117,7 @@ public class StructureMappingInfo<T> {
 	}
 
 	public String getStructureName() {
-		return structureName;
+		return structureName[0];
 	}
 
 	public int getStructureLength() {
@@ -187,7 +187,7 @@ public class StructureMappingInfo<T> {
 
 		Structure newStruct = new StructureDataType(
 			context.getDataTypeMapper().getDefaultVariableLengthStructCategoryPath(),
-			structureName,
+			structureName[0],
 			0,
 			context.getDataTypeMapper().getDTM());
 
@@ -204,7 +204,7 @@ public class StructureMappingInfo<T> {
 		}
 		if (!nameSuffix.isEmpty()) {
 			try {
-				newStruct.setName(structureName + nameSuffix);
+				newStruct.setName(structureName[0] + nameSuffix);
 			}
 			catch (InvalidNameException | DuplicateNameException e) {
 				throw new IOException(e);
@@ -264,7 +264,7 @@ public class StructureMappingInfo<T> {
 			return null;
 		}
 		for (DataTypeComponent dtc : structureDataType.getDefinedComponents()) {
-			if (name.equals(dtc.getFieldName())) {
+			if (name.equalsIgnoreCase(dtc.getFieldName())) {
 				return dtc;
 			}
 		}
-- 
2.43.0

