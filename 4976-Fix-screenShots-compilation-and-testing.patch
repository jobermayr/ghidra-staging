From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Eric Kilmer <eric.d.kilmer@gmail.com>
Date: Sun, 12 Feb 2023 13:44:41 -0500
Subject: [PATCH] 4976: Fix screenShots compilation and testing

Added a Test task for running screenShots tests from the command-line.

Running the screenShots test(s)
-------------------------------

!!!Only tested with the FunctionGraphPluginScreenShots tests!!! (other
tests might require more fixes)

Prerequisite 'Ghidra/Test/TestResources/data/WinHelloCPP.exe.gzf' needs
to be present before running this test.

Created with the following steps:

1. Build Ghidra
2. Install it
3. Create and open a new project
4. Import 'GhidraDocs/GhidraClass/ExerciseFiles/WinhelloCPP/WinHelloCPP.exe'
5. Run auto-analysis
6. Save
7. Close CodeBrowser screen
8. Right-click on WinHelloCPP.exe from project screen and "Export..." as
   "Ghidra Zip File" to 'Ghidra/Test/TestResources/data'

A single test can then be run:

    gradle :IntegrationTest:screenShots \
      --tests help.screenshot.FunctionGraphPluginScreenShots.testFunctionGraph_Vertex_Drop_Shadow

All tests can be run:

    gradle :IntegrationTest:screenShots \
      --tests help.screenshot.FunctionGraphPluginScreenShots
---
 .../AbstractFunctionGraphTest.java            |  3 ++-
 Ghidra/Test/IntegrationTest/build.gradle      |  2 ++
 .../FunctionGraphPluginScreenShots.java       | 11 +++++-----
 gradle/javaTestProject.gradle                 | 20 +++++++++++++++++++
 4 files changed, 30 insertions(+), 6 deletions(-)

diff --git a/Ghidra/Features/FunctionGraph/src/test.slow/java/ghidra/app/plugin/core/functiongraph/AbstractFunctionGraphTest.java b/Ghidra/Features/FunctionGraph/src/test.slow/java/ghidra/app/plugin/core/functiongraph/AbstractFunctionGraphTest.java
index 422e6744de..3c26e0afeb 100644
--- a/Ghidra/Features/FunctionGraph/src/test.slow/java/ghidra/app/plugin/core/functiongraph/AbstractFunctionGraphTest.java
+++ b/Ghidra/Features/FunctionGraph/src/test.slow/java/ghidra/app/plugin/core/functiongraph/AbstractFunctionGraphTest.java
@@ -564,7 +564,8 @@ public abstract class AbstractFunctionGraphTest extends AbstractGhidraHeadedInte
 
 	protected void installTestGraphLayout(FGProvider provider) {
 		FGActionManager actionManager = provider.getActionManager();
-		List<FGLayoutProvider> layouts = List.of(new TestFGLayoutProvider());
+		List<FGLayoutProvider> layouts = new ArrayList<>(List.of(new TestFGLayoutProvider()));
+		layouts.addAll(graphPlugin.getLayoutProviders());
 		runSwing(() -> actionManager.setLayouts(layouts));
 	}
 
diff --git a/Ghidra/Test/IntegrationTest/build.gradle b/Ghidra/Test/IntegrationTest/build.gradle
index 8aa416f5c8..0e90a1c9dc 100644
--- a/Ghidra/Test/IntegrationTest/build.gradle
+++ b/Ghidra/Test/IntegrationTest/build.gradle
@@ -67,6 +67,8 @@ dependencies {
 	testImplementation project(path: ':Framework-TraceModeling', configuration: 'testArtifacts')
 	testImplementation project(path: ':Framework-AsyncComm', configuration: 'testArtifacts')
 	testImplementation project(path: ':Debugger', configuration: 'testArtifacts')
+
+	screenShotsImplementation project(path: ':FunctionGraph', configuration: 'integrationTestArtifacts')
 }
 
 // For Java 9, we must explicitly export references to the internal classes we are using.
diff --git a/Ghidra/Test/IntegrationTest/src/screen/java/help/screenshot/FunctionGraphPluginScreenShots.java b/Ghidra/Test/IntegrationTest/src/screen/java/help/screenshot/FunctionGraphPluginScreenShots.java
index 671de541fc..97e461e63b 100644
--- a/Ghidra/Test/IntegrationTest/src/screen/java/help/screenshot/FunctionGraphPluginScreenShots.java
+++ b/Ghidra/Test/IntegrationTest/src/screen/java/help/screenshot/FunctionGraphPluginScreenShots.java
@@ -162,6 +162,7 @@ public class FunctionGraphPluginScreenShots extends AbstractFunctionGraphTest {
 		drawRectangleAroundMessageText();
 	}
 
+	@Test
 	public void testFunctionGraph_Vertex_Header() {
 		String address = "406630";
 		go(address);// _strlen function
@@ -784,14 +785,14 @@ public class FunctionGraphPluginScreenShots extends AbstractFunctionGraphTest {
 
 		Object actionManager = getInstanceField("actionManager", graphProvider);
 		@SuppressWarnings("unchecked")
-		final MultiStateDockingAction<Class<? extends FGLayoutProvider>> action =
-			(MultiStateDockingAction<Class<? extends FGLayoutProvider>>) getInstanceField(
+		final MultiStateDockingAction<FGLayoutProvider> action =
+			(MultiStateDockingAction<FGLayoutProvider>) getInstanceField(
 				"layoutAction", actionManager);
 		runSwing(() -> {
-			List<ActionState<Class<? extends FGLayoutProvider>>> states =
+			List<ActionState<FGLayoutProvider>> states =
 				action.getAllActionStates();
-			for (ActionState<Class<? extends FGLayoutProvider>> state : states) {
-				Class<? extends FGLayoutProvider> layoutClass = state.getUserData();
+			for (ActionState<FGLayoutProvider> state : states) {
+				Class<? extends FGLayoutProvider> layoutClass = state.getUserData().getClass();
 				if (layoutClass.getSimpleName().equals("DecompilerNestedLayoutProvider")) {
 					action.setCurrentActionState(state);
 					return;
diff --git a/gradle/javaTestProject.gradle b/gradle/javaTestProject.gradle
index bfe455092f..a1272bbf4e 100644
--- a/gradle/javaTestProject.gradle
+++ b/gradle/javaTestProject.gradle
@@ -75,6 +75,26 @@ task integrationTest (type: Test) { t ->
 	}
 }
 
+tasks.register('screenShots', Test) { t ->
+	group "screenShots"
+	dependsOn { project(":FunctionID").unpackFidDatabases }
+	testClassesDirs = files sourceSets.screenShots.output.classesDirs
+
+	classpath = sourceSets.screenShots.runtimeClasspath
+
+	// Enable if you want to force Gradle to launch a new JVM for each test.
+	forkEvery 1
+
+	initTestJVM(t, rootProject.ext.testRootDirName)
+
+	doFirst {
+		startTestTimer(t)
+	}
+	doLast {
+		endTestTimer(t)
+	}
+}
+
 task pcodeTest (type: Test) { t ->	
     group = "pcodeTest"	
     dependsOn { project(":FunctionID").unpackFidDatabases }	
-- 
2.45.1

