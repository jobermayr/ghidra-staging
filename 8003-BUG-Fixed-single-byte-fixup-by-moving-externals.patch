From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peter Belm <peterbelm@gmail.com>
Date: Fri, 11 Apr 2025 22:07:28 +0100
Subject: [PATCH] 8003: BUG: Fixed single byte fixup by moving externals to
 CODE start

---
 .../ghidra/app/util/opinion/Omf51Loader.java  | 28 +++++++------------
 1 file changed, 10 insertions(+), 18 deletions(-)

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/Omf51Loader.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/Omf51Loader.java
index 66edcdb1d2..34ea050903 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/Omf51Loader.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/Omf51Loader.java
@@ -120,6 +120,10 @@ public class Omf51Loader extends AbstractProgramWrapperLoader {
 		//     same-named segment can easily know where to go
 		// NOTE: The key for these maps needs to include both the segment name and the type
 		AddressSet usedAddresses = new AddressSet();
+		Address codeStart = program.getAddressFactory()
+			.getAddressSpace("CODE")
+			.getMinAddress();
+		usedAddresses.add(new AddressRangeImpl(codeStart, codeStart.add(256)));
 		Map<String, Integer> segmentSizes = new HashMap<>();
 		Map<String, Address> segmentEnds = new HashMap<>();
 		for (Omf51Segment segment : segments) {
@@ -186,26 +190,14 @@ public class Omf51Loader extends AbstractProgramWrapperLoader {
 			return map;
 		}
 
-		Address codeEndAddr = Arrays.stream(program.getMemory().getBlocks())
-				.filter(block -> block.getSourceName().equals("CODE"))
-				.map(block -> block.getEnd())
-				.sorted((a, b) -> b.compareTo(a))
-				.findFirst()
-				.get();
-
-		int availableSize = (int) (program.getAddressFactory()
+		Address codeStart = program.getAddressFactory()
 				.getAddressSpace("CODE")
-				.getMaxAddress()
-				.getOffset() -
-			codeEndAddr.getOffset());
-
-		if (availableSize < externalSize) {
-			throw new Exception("Not enough CODE space for externals");
-		}
+				.getMinAddress();
 
-		// Create an artificial 'EXTERNAL' block in CODE space.
+		// Create an artificial 'EXTERNAL' block at the start of CODE space.
+		// We put it at the start to make sure single byte fixups can work.
 		MemoryBlock block = MemoryBlockUtils.createUninitializedBlock(program, false, "EXTERNAL",
-			codeEndAddr.add(1), externalSize, "", "CODE", false, false, true, log);
+			codeStart, externalSize, "", "CODE", false, false, true, log);
 
 		if (block == null) {
 			throw new Exception("Couldn't create EXTERNAL block");
@@ -216,7 +208,7 @@ public class Omf51Loader extends AbstractProgramWrapperLoader {
 			"NOTE: This block is artificial and allows external fixups to work correctly");
 
 		// Create thunks for each external procedure def.
-		Address addr = codeEndAddr;
+		Address addr = codeStart;
 		for (Omf51ExternalDef def : defs) {
 			addr = addr.add(1);
 
-- 
2.45.1

