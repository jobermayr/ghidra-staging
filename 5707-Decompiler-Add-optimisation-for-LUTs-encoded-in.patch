From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Luke=20Sern=C3=A9?= <luke.serne@solconmail.nl>
Date: Fri, 25 Aug 2023 17:03:21 +0200
Subject: [PATCH] 5707: Decompiler: Add optimisation for LUTs encoded in
 constants gcc 13 and clang 16 at -O1 or higher compile an "||" sequence of
 comparisons of a single variable with various small values to a single right
 shift of a magic constant functioning as a lookup table (LUT) by a variable
 amount and a binary and with 1. This rule replaces this magic constant by a
 series of integer comparisons, which leads to better decompilation,
 especially if enums are involved.

---
 .../src/decompile/cpp/coreaction.cc           |   1 +
 .../src/decompile/cpp/ruleaction.cc           | 117 ++++++++++++++++++
 .../src/decompile/cpp/ruleaction.hh           |  11 ++
 3 files changed, 129 insertions(+)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/coreaction.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/coreaction.cc
index 17a9fc326..6699b2dc1 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/coreaction.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/coreaction.cc
@@ -5526,6 +5526,7 @@ void ActionDatabase::universalAction(Architecture *conf)
 	actprop->addRule( new RuleXorSwap("analysis") );
 	actprop->addRule( new RuleLzcountShiftBool("analysis") );
 	actprop->addRule( new RuleLzcntZeroTest("analysis") );
+	actprop->addRule( new RuleSimplifyConstantLUT("analysis") );
 	actprop->addRule( new RuleSubvarAnd("subvar") );
 	actprop->addRule( new RuleSubvarSubpiece("subvar") );
 	actprop->addRule( new RuleSplitFlow("subvar") );
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
index d386337ec..297c75736 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
@@ -10682,4 +10682,121 @@ int4 RuleLzcntZeroTest::applyOp(PcodeOp *op,Funcdata &data)
     return 1;
 }
 
+/// \class RuleSimplifyConstantLUT
+///
+/// \brief
+///
+/// '(c >> V) & 1' -> 'V == x0 || V == x1 || ...'
+/// 'sub((c >> V), #0) & 1' is also supported
+///
+/// where the xs represents bit indices that are set in the constant 'c'.
+///
+/// If most bits in 'c' are set, 'c' and the output term are negated:
+///
+/// '(c >> V) & 1' -> '!(V == x0 || V == x1 || ...)'
+///
+void RuleSimplifyConstantLUT::getOpList(vector<uint4> &oplist) const
+{
+  oplist.push_back(CPUI_INT_AND);
+}
+
+
+int4 RuleSimplifyConstantLUT::applyOp(PcodeOp *op, Funcdata &data)
+
+{
+  Varnode* one = op->getIn(0);
+  Varnode* shift = op->getIn(1);
+  if (!one->constantMatch(1)) {
+    shift = one;
+    one = op->getIn(1);
+    if (!one->constantMatch(1)) return 0;
+  }
+
+  PcodeOp* shiftOp = shift->getDef();
+  if (!shiftOp) return 0;
+  if (shiftOp->code() != CPUI_INT_RIGHT) {
+    // Don't choke on an intermediate SUBPIECE(x, 0)
+    if (shiftOp->code() != CPUI_SUBPIECE) return 0;
+    if (!shiftOp->getIn(1)->constantMatch(0)) return 0;
+
+    shift = shiftOp->getIn(0);
+    shiftOp = shift->getDef();
+    if (shiftOp->code() != CPUI_INT_RIGHT) return 0;
+  }
+
+  // The left operand of the shift should be a constant != 0, the right operand
+  // should be not be a constant
+  Varnode* cons = shiftOp->getIn(0);
+  Varnode* var = shiftOp->getIn(1);
+  if ((!cons->isConstant()) || cons->constantMatch(0)) return 0;
+  if (var->isConstant()) return 0;
+
+  uintb constValue = cons->getOffset();
+  uint4 constSize = cons->getSize();
+  uint4 numBitsSet = popcount(constValue);
+
+  bool negateCondition = 2 * numBitsSet > 8 * constSize;
+  if (negateCondition) {
+    constValue = ~constValue;
+    numBitsSet = constSize * 8 - numBitsSet;
+  }
+
+  uint4 bitIdx = 0;
+  Varnode* prevEqOut = NULL;
+  Varnode* tempVar = NULL;
+  PcodeOp* prevEqOutOp = NULL;
+  PcodeOp* tempOp = NULL;
+
+  for (uint4 i = 0; i < numBitsSet; i++) {
+    // Find the next smallest bit set
+    while (bitIdx < constSize * 8) {
+      if (!(constValue & 1)) {
+	constValue >>= 1;
+	bitIdx++;
+	continue;
+      }
+
+      // Add INT_EQUAL(var, bitIdx)
+      tempOp = data.newOp(2, shiftOp->getAddr());
+      data.opSetOpcode(tempOp, CPUI_INT_EQUAL);
+      data.opSetInput(tempOp, var, 0);
+      data.opSetInput(tempOp, data.newConstant(var->getSize(), bitIdx), 1);
+      tempVar = data.newUniqueOut(1, tempOp);
+      data.opInsertAfter(tempOp, shiftOp);
+
+      // Link it to the previous INT_EQUAL with a BOOL_OR
+      if (i != 0) {
+	tempOp = data.newOp(2, shiftOp->getAddr());
+	data.opSetOpcode(tempOp, CPUI_BOOL_OR);
+	data.opSetInput(tempOp, prevEqOut, 0);
+	data.opSetInput(tempOp, tempVar, 1);
+	tempVar = data.newUniqueOut(1, tempOp);
+	data.opInsertAfter(tempOp, shiftOp);
+      }
+
+      prevEqOutOp = tempOp;
+      prevEqOut = tempVar;
+      constValue >>= 1;
+      bitIdx++;
+      break;
+    }
+  }
+
+  // negate the condition if more than half of the bits are set
+  if (negateCondition) {
+    tempOp = data.newOp(1, shiftOp->getAddr());
+    data.opSetOpcode(tempOp, CPUI_BOOL_NEGATE);
+    data.opSetInput(tempOp, prevEqOut, 0);
+    prevEqOut = data.newUniqueOut(1, tempOp);
+    data.opInsertAfter(tempOp, prevEqOutOp);
+  }
+
+  // replace the INT_AND by a INT_ZEXT, making sure the output is the right size
+  data.opSetOpcode(op, CPUI_INT_ZEXT);
+  data.opSetInput(op, prevEqOut, 0);
+  data.opRemoveInput(op, 1);
+
+  return 1;
+}
+
 } // End namespace ghidra
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.hh
index 1c15bbf68..d30e60425 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.hh
@@ -1668,5 +1668,16 @@ public:
   virtual int4 applyOp(PcodeOp *op,Funcdata &data);
 };
 
+class RuleSimplifyConstantLUT : public Rule {
+public:
+  RuleSimplifyConstantLUT(const string &g) : Rule( g, 0, "simplifyconstantlut") {}        ///< Constructor
+  virtual Rule *clone(const ActionGroupList &grouplist) const {
+    if (!grouplist.contains(getGroup())) return (Rule *)0;
+    return new RuleSimplifyConstantLUT(getGroup());
+  }
+  virtual void getOpList(vector<uint4> &oplist) const;
+  virtual int4 applyOp(PcodeOp *op,Funcdata &data);
+};
+
 } // End namespace ghidra
 #endif
-- 
2.41.0

