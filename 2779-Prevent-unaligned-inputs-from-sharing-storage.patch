From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: astrelsky <ajs222@njit.edu>
Date: Thu, 18 Feb 2021 17:06:57 -0500
Subject: [PATCH] 2779: Prevent unaligned inputs from sharing storage

---
 .../Decompiler/src/decompile/cpp/fspec.cc     | 55 ++++++++++++++++---
 .../Decompiler/src/decompile/cpp/fspec.hh     |  3 +-
 .../Decompiler/src/decompile/cpp/translate.hh |  1 +
 .../ghidra/program/model/lang/ParamEntry.java |  4 +-
 .../program/model/lang/ParamListStandard.java | 47 ++++++++++++++--
 5 files changed, 94 insertions(+), 16 deletions(-)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.cc
index b503677a58..b367ac4317 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.cc
@@ -166,6 +166,21 @@ bool ParamEntry::subsumesDefinition(const ParamEntry &op2) const
 
 {
   if ((type!=TYPECLASS_GENERAL)&&(op2.type != type)) return false;
+  if (joinrec) {
+    if (op2.joinrec) {
+      for (const VarnodeData& var : op2.joinrec->getPieces()) {
+        bool contains = false;
+        const size_t len = joinrec->numPieces();
+        for (size_t i = 0; i < len && !contains; i++)
+          contains = joinrec->getPiece(i).contains(var);
+        if (!contains) return false;
+      }
+      return true;
+    }
+    VarnodeData v2{op2.spaceid, op2.addressbase, static_cast<uint4>(op2.size)};
+    for (const VarnodeData& v1 : joinrec->getPieces())
+      if (v1.contains(v2)) return true;
+  }
   if (spaceid != op2.spaceid) return false;
   if (op2.addressbase < addressbase) return false;
   if ((op2.addressbase+op2.size-1) > (addressbase+size-1)) return false;
@@ -664,9 +679,7 @@ int4 ParamListStandard::characterizeAsParam(const Address &loc,int4 size) const
 uint4 ParamListStandard::assignAddressFallback(type_class resource,Datatype *tp,bool matchExact,
 					       vector<int4> &status,ParameterPieces &param) const
 {
-  list<ParamEntry>::const_iterator iter;
-  for(iter=entry.begin();iter!=entry.end();++iter) {
-    const ParamEntry &curEntry( *iter );
+  for(const ParamEntry &curEntry : entry) {
     int4 grp = curEntry.getGroup();
     if (status[grp]<0) continue;
     if (resource != curEntry.getType()) {
@@ -676,11 +689,7 @@ uint4 ParamListStandard::assignAddressFallback(type_class resource,Datatype *tp,
 
     param.addr = curEntry.getAddrBySlot(status[grp],tp->getAlignSize(),tp->getAlignment());
     if (param.addr.isInvalid()) continue; // If -tp- doesn't fit an invalid address is returned
-    if (curEntry.isExclusion()) {
-      const vector<int4> &groupSet(curEntry.getAllGroups());
-      for(int4 j=0;j<groupSet.size();++j) 	// For an exclusion entry
-	status[groupSet[j]] = -1;		// some number of groups are taken up
-    }
+    if (curEntry.isExclusion()) consumeGroups(status, curEntry);
     param.type = tp;
     param.flags = 0;
     return AssignAction::success;
@@ -711,6 +720,36 @@ uint4 ParamListStandard::assignAddress(Datatype *dt,const PrototypePieces &proto
   return assignAddressFallback(store,dt,false,status,res);
 }
 
+static bool containsAny(const ParamEntry& p1,const ParamEntry& p2)
+
+{
+  for (const VarnodeData& v1 : p1.getJoinRecord()->getPieces())
+    for (const VarnodeData& v2 : p2.getJoinRecord()->getPieces())
+      if (v1.contains(v2)) return true;
+  return false;
+}
+
+void ParamListStandard::consumeGroups(vector<int4> &status,const ParamEntry &element) const
+
+{
+  const vector<int4> &groupSet(element.getAllGroups());
+  for(int4 i=0;i<groupSet.size();++i)	// For an exclusion entry
+    status[groupSet[i]] = -1;		// some number of groups are taken up
+
+  // any entries which this element contains must also be set as taken
+  for (const ParamEntry &e : entry) {
+    if (&e == &element) continue;
+    int4 group = e.getGroup();
+    if (status[group] < 0) continue;
+    if (element.contains(e) || e.contains(element)) {
+      status[group] -= 1;
+      continue;
+    }
+    if (element.getJoinRecord() && e.getJoinRecord())
+      if (containsAny(element, e)) status[group] -= 1;
+  }
+}
+
 void ParamListStandard::assignMap(const PrototypePieces &proto,TypeFactory &typefactory,vector<ParameterPieces> &res) const
 
 {
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.hh
index b4ef415a4d..e48bbf338f 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.hh
@@ -111,7 +111,7 @@ private:
   int4 minsize;			///< Minimum bytes allowed for the logical value
   int4 alignment;		///< How much alignment (0 means only 1 logical value is allowed)
   int4 numslots;		///< (Maximum) number of slots that can store separate parameters
-  JoinRecord *joinrec;		///< Non-null if this is logical variable from joined pieces
+  JoinRecord *joinrec;		///< Non-null if this is a logical variable from joined pieces
   static const ParamEntry *findEntryByStorage(const list<ParamEntry> &entryList,const VarnodeData &vn);
   void resolveJoin(list<ParamEntry> &curList); 	///< Make adjustments for a \e join ParamEntry
   void resolveOverlap(list<ParamEntry> &curList);	///< Make adjustments for ParamEntry that overlaps others
@@ -600,6 +600,7 @@ protected:
 		   int4 groupid,bool normalstack,bool autokill,bool splitFloat,bool grouped);
   void parseGroup(Decoder &decoder,vector<EffectRecord> &effectlist,
 		  int4 groupid,bool normalstack,bool autokill,bool splitFloat);
+  void consumeGroups(vector<int4> &status,const ParamEntry &element) const;
 public:
   ParamListStandard(void) {}						///< Construct for use with decode()
   ParamListStandard(const ParamListStandard &op2);			///< Copy constructor
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/translate.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/translate.hh
index 6892bf5d0f..575cd27523 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/translate.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/translate.hh
@@ -205,6 +205,7 @@ public:
   const VarnodeData &getUnified(void) const { return unified; }		///< Get the Varnode whole
   Address getEquivalentAddress(uintb offset,int4 &pos) const;	///< Given offset in \e join space, get equivalent address of piece
   bool operator<(const JoinRecord &op2) const; ///< Compare records lexigraphically by pieces
+  const vector<VarnodeData> &getPieces() const { return pieces; } ///< Get an iterator over the const pieces
 };
 
 /// \brief Comparator for JoinRecord objects
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/ParamEntry.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/ParamEntry.java
index 53f50a12e3..7bc5ff40d7 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/ParamEntry.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/ParamEntry.java
@@ -122,11 +122,13 @@ public class ParamEntry {
 	 * @param sz is the given size
 	 * @return the collected array of Varnodes or null
 	 */
-	private Varnode[] getJoinPieces(int sz) {
+	public Varnode[] getJoinPieces(int sz) {
 		int num = 0;
 		int first, replace;
 		Varnode vn = null;
 		Varnode[] res;
+		if (joinrec == null)
+			return null;
 		if (isBigEndian()) {
 			first = 0;
 			while (sz > 0) {
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/ParamListStandard.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/ParamListStandard.java
index f03b5b74ad..1f06ad93fe 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/ParamListStandard.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/ParamListStandard.java
@@ -29,6 +29,7 @@ import ghidra.program.model.lang.protorules.*;
 import ghidra.program.model.listing.Program;
 import ghidra.program.model.listing.VariableStorage;
 import ghidra.program.model.pcode.Encoder;
+import ghidra.program.model.pcode.Varnode;
 import ghidra.util.SystemUtilities;
 import ghidra.util.exception.InvalidInputException;
 import ghidra.util.xml.SpecXmlUtils;
@@ -101,12 +102,7 @@ public class ParamListStandard implements ParamList {
 			if (param.address == null) {
 				continue;	// -tp- does not fit in this entry
 			}
-			if (element.isExclusion()) {
-				for (int group : element.getAllGroups()) {
-					// For an exclusion entry
-					status[group] = -1;			// some number of groups are taken up
-				}
-			}
+			if (element.isExclusion()) excludeGroups(status, element);
 			param.type = tp;
 			return AssignAction.SUCCESS;
 		}
@@ -483,4 +479,43 @@ public class ParamListStandard implements ParamList {
 	public boolean isThisBeforeRetPointer() {
 		return thisbeforeret;
 	}
+
+	private void excludeGroups(int[] status, ParamEntry element) {
+		for (int group : element.getAllGroups()) {
+			// For an exclusion entry
+			status[group] = -1;			// some number of groups are taken up
+		}
+
+		// any entries which this element contains must also be set as taken
+		for (ParamEntry e : entry) {
+			if (e == element) {
+				continue;
+			}
+			int group = e.getGroup();
+			if (status[group] < 0) {
+				continue;
+			}
+			if (element.contains(e) || e.contains(element)) {
+				status[group] -= 1;
+				continue;
+			}
+			if (element.getJoinPieces(element.getSize()) != null && e.getJoinPieces(e.getSize()) != null) {
+				// contains only returns true if one contains all of the other
+				if (containsAny(element, e)) {
+					status[group] -= 1;
+				}
+			}
+		}
+	}
+
+	private static boolean containsAny(ParamEntry p1, ParamEntry p2) {
+		for (Varnode v1 : p1.getJoinPieces(p1.getSize())) {
+			for (Varnode v2 : p2.getJoinPieces(p2.getSize())) {
+				if (v1.contains(v2.getAddress())) {
+					return true;
+				}
+			}
+		}
+		return false;
+	}
 }
-- 
2.43.0

