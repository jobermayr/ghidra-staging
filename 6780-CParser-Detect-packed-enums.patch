From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Antonio=20V=C3=A1zquez=20Blanco?=
 <antoniovazquezblanco@gmail.com>
Date: Thu, 1 Aug 2024 13:44:43 +0200
Subject: [PATCH] 6780: CParser: Detect packed enums

---
 .../javacc/ghidra/app/util/cparser/C/C.jj     | 45 ++++++++++---------
 1 file changed, 23 insertions(+), 22 deletions(-)

diff --git a/Ghidra/Features/Base/src/main/javacc/ghidra/app/util/cparser/C/C.jj b/Ghidra/Features/Base/src/main/javacc/ghidra/app/util/cparser/C/C.jj
index 3e6be0b2e7..c07389e177 100644
--- a/Ghidra/Features/Base/src/main/javacc/ghidra/app/util/cparser/C/C.jj
+++ b/Ghidra/Features/Base/src/main/javacc/ghidra/app/util/cparser/C/C.jj
@@ -520,15 +520,13 @@ public class CParser {
     }
     
 
-    private DataType allocateEnumDT(Token t, ArrayList<EnumMember> list) {
+    private DataType allocateEnumDT(Token t, ArrayList<EnumMember> list, Declaration dec) {
     	String enumName = (t != null ? t.image : ("enum_" + cnt++));
-    	
-    	// get the normal enum size, which is an int
-    	// TODO: allow for packing of enum to smallest value with either dataOrganization, or packing flag
-        int normalEnumLen = (dtMgr != null ? dtMgr.getDataOrganization().getIntegerSize() : 4);
-        
-        // create an initial enum and add all new members
-        EnumDataType enumDT= new EnumDataType(getCurrentCategoryPath(), enumName, 8, dtMgr);
+
+        // Create an initial enum
+        EnumDataType enumDT = new EnumDataType(getCurrentCategoryPath(), enumName, 8, dtMgr);
+
+        // Add all new enum members
         if (list != null) {
             for (EnumMember member : list) {
                 try {
@@ -537,18 +535,21 @@ public class CParser {
                     addNearParseMessage("duplicate enum value: " + enumName + " : " + member.name + " : " + member.value);
                 }
             }
-            // get the minimum length to represent the values and resize if too big
-            int minLen = enumDT.getMinimumPossibleLength();
-            if (minLen > normalEnumLen) {
-                enumDT.setLength(minLen);
-            } else {
-                enumDT.setLength(normalEnumLen);
-            }
+        }
+
+        int defaultEnumLen = 0;
+        if (dec.getQualifiers().contains(PACKED)) {
+            // Get the default packed enum length
+            defaultEnumLen = (dtMgr != null ? dtMgr.getDataOrganization().getCharSize() : 1);
         } else {
-            // length doesn't really matter, forward declaration with no values
-            enumDT.setLength(normalEnumLen);
+            // Get the default enum size, which is an int
+            defaultEnumLen = (dtMgr != null ? dtMgr.getDataOrganization().getIntegerSize() : 4);
         }
-        
+
+        // If values in the enum require a bigger size, expand the enum...
+        int enumLen = Math.max(defaultEnumLen, enumDT.getMinimumPossibleLength());
+        enumDT.setLength(enumLen);
+
         return addDef(enums, enumDT.getName(), enumDT);
     }
 
@@ -1228,7 +1229,7 @@ TOKEN :
     |
     <UNALIGNED : "__unaligned" >
     |
-    <PACKED : "__packed" >
+    <PACKED : ( [ "_" ] )* "packed" >
     |
     <ATTRIBUTE : "__attribute" (["_"])* >
     |
@@ -1864,7 +1865,7 @@ Declaration TypeQualifier(Declaration dec) : {}
       <EXTENSION> |
       <STATIC> |
       ( BasedSpec() ) |
-      <PACKED> |
+      <PACKED> { dec.addQualifier(PACKED); } |
       <UNALIGNED> |
       ( DeclSpec(dec) )
     )
@@ -2312,7 +2313,7 @@ DataType EnumSpecifier() : {
         LOOKAHEAD(3)
         [AttributeSpecList(dec)] [ t= <IDENTIFIER> ] "{" list= EnumeratorList() "}" 
         {
-            dt = allocateEnumDT(t, list);
+            dt = allocateEnumDT(t, list, dec);
         }
         |
         t= <IDENTIFIER>
@@ -2320,7 +2321,7 @@ DataType EnumSpecifier() : {
             dt= getEnumDef(t.image);
             // not defined yet, define an empty one
             if (dt == null) {
-            	dt = allocateEnumDT(t, null);
+                dt = allocateEnumDT(t, null, dec);
             }
         }
     )
-- 
2.45.1

