From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tor Bap Ami <torbap@ungabunga.torbap>
Date: Sat, 22 Mar 2025 22:50:20 -0400
Subject: [PATCH] 7941: feat: Improve Rust detection via symbol analysis and
 rodata scan

fix: safely limit .rodata read to 1MB to prevent OOM
---
 Ghidra/Features/Base/certification.manifest   |  1 +
 .../util/bin/format/elf/RustUtilities.java    | 49 +++++++++++++++++++
 .../app/util/opinion/ElfProgramBuilder.java   | 26 +++++-----
 3 files changed, 64 insertions(+), 12 deletions(-)
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/elf/RustUtilities.java

diff --git a/Ghidra/Features/Base/certification.manifest b/Ghidra/Features/Base/certification.manifest
index a86ea82c51..efb33b027f 100644
--- a/Ghidra/Features/Base/certification.manifest
+++ b/Ghidra/Features/Base/certification.manifest
@@ -756,6 +756,7 @@ src/main/java/ghidra/app/cmd/register/package.html||GHIDRA||||END|
 src/main/java/ghidra/app/events/package.html||GHIDRA||reviewed||END|
 src/main/java/ghidra/app/plugin/core/disassembler/package.html||GHIDRA||reviewed||END|
 src/main/java/ghidra/app/services/package.html||GHIDRA||reviewed||END|
+src/main/java/ghidra/app/util/bin/format/elf/RustUtilities.java||GHIDRA||||END|
 src/main/java/ghidra/app/util/bin/format/elf/package.html||GHIDRA||||END|
 src/main/java/ghidra/app/util/bin/format/lx/LX.java||GHIDRA||||END|
 src/main/java/ghidra/app/util/bin/format/lx/LXFixupPageTable.java||GHIDRA||||END|
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/elf/RustUtilities.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/elf/RustUtilities.java
new file mode 100644
index 0000000000..0267458a46
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/elf/RustUtilities.java
@@ -0,0 +1,49 @@
+package ghidra.app.util.bin.format.elf;
+
+import ghidra.program.model.mem.MemoryBlock;
+import ghidra.program.model.symbol.Symbol;
+import ghidra.program.model.symbol.SymbolIterator;
+import ghidra.program.model.symbol.SymbolTable;
+
+public class RustUtilities {
+
+    private static final int MAX_SCAN_SIZE = 1024 * 1024; // 1MB
+
+    public static boolean isRust(MemoryBlock rodataBlock, SymbolTable symbolTable) {
+        //Safe .rodata scan
+        if (rodataBlock != null) {
+            try {
+                long size = rodataBlock.getSize();
+                int readSize = (int) Math.min(size, MAX_SCAN_SIZE);
+
+                byte[] bytes = new byte[readSize];
+                rodataBlock.getBytes(rodataBlock.getStart(), bytes);
+                String content = new String(bytes);
+                if (content.contains("rust_eh_personality")) {
+                    return true;
+                }
+            } catch (Exception e) {
+                // Ignore and continue
+            }
+        }
+
+        //Symbol-based detection
+        if (symbolTable != null) {
+            SymbolIterator symbols = symbolTable.getAllSymbols(true);
+            while (symbols.hasNext()) {
+                Symbol symbol = symbols.next();
+                String name = symbol.getName();
+                if (name == null) continue;
+
+                if (name.contains("rust_eh_personality") ||
+                    name.contains("core::") ||
+                    name.contains("alloc::") ||
+                    name.contains("std::")) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/ElfProgramBuilder.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/ElfProgramBuilder.java
index f1f5bec30c..94ecc09ce1 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/ElfProgramBuilder.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/ElfProgramBuilder.java
@@ -2464,19 +2464,21 @@ class ElfProgramBuilder extends MemorySectionResolver implements ElfLoadHelper {
 		}
 	}
 
-	private void setCompiler(TaskMonitor monitor) throws CancelledException {
-		// Check for Rust
-		try {
-			if (RustUtilities.isRust(program, memory.getBlock(ElfSectionHeaderConstants.dot_rodata),
-				monitor)) {
-				program.setCompiler(RustConstants.RUST_COMPILER);
-				int extensionCount = RustUtilities.addExtensions(program, monitor,
-					RustConstants.RUST_EXTENSIONS_UNIX);
-				log.appendMsg("Installed " + extensionCount + " Rust cspec extensions");
-			}
+private void setCompiler(TaskMonitor monitor) throws CancelledException {
+	// Check for Rust
+	try {
+		MemoryBlock rodataBlock = memory.getBlock(ElfSectionHeaderConstants.dot_rodata);
+
+		if (RustUtilities.isRust(program, rodataBlock, monitor)) {
+			program.setCompiler(RustConstants.RUST_COMPILER);
+			int extensionCount = RustUtilities.addExtensions(program, monitor,
+				RustConstants.RUST_EXTENSIONS_UNIX);
+			log.appendMsg("Installed " + extensionCount + " Rust cspec extensions");
 		}
-		catch (IOException e) {
-			log.appendMsg("Rust error: " + e.getMessage());
+	}
+	catch (IOException e) {
+		log.appendMsg("Rust error: " + e.getMessage());
+
 		}
 	}
 
-- 
2.45.1

