From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: astrelsky <ajs222@njit.edu>
Date: Mon, 20 Jan 2020 21:00:34 -0500
Subject: [PATCH] 1460: StabsParser

Removed unnecessary final modifiers
---
 Ghidra/Features/Base/certification.manifest   |   47 +
 .../stabs/AbstractStabsSymbolDescriptor.java  |   73 +
 .../stabs/StabsClassSymbolDescriptor.java     |  326 ++++
 .../stabs/StabsCompositeSymbolDescriptor.java |   68 +
 .../stabs/StabsConstantSymbolDescriptor.java  |  154 ++
 .../stabs/StabsExceptionSymbolDescriptor.java |   54 +
 .../app/util/bin/format/stabs/StabsFile.java  |  203 +++
 .../stabs/StabsFunctionSymbolDescriptor.java  |  194 +++
 .../stabs/StabsParameterSymbolDescriptor.java |   77 +
 .../bin/format/stabs/StabsParseException.java |   15 +
 .../util/bin/format/stabs/StabsParser.java    |  258 ++++
 .../format/stabs/StabsSymbolDescriptor.java   |   43 +
 .../stabs/StabsSymbolDescriptorType.java      |  116 ++
 .../app/util/bin/format/stabs/StabsToken.java |   77 +
 .../util/bin/format/stabs/StabsTokenizer.java |   82 +
 .../stabs/StabsTypeDefSymbolDescriptor.java   |  110 ++
 .../format/stabs/StabsTypeDescriptorType.java |   35 +
 .../bin/format/stabs/StabsTypeNumber.java     |  102 ++
 .../app/util/bin/format/stabs/StabsUtils.java |  177 +++
 .../stabs/StabsVariableSymbolDescriptor.java  |  101 ++
 .../stabs/cpp/StabsBaseClassDescriptor.java   |  124 ++
 .../cpp/StabsMemberSymbolDescriptor.java      |  161 ++
 .../cpp/StabsMethodSymbolDescriptor.java      |  312 ++++
 .../AbstractStabsFunctionTypeDescriptor.java  |   92 ++
 .../types/AbstractStabsTypeDescriptor.java    |   49 +
 ...tractStabsTypeReferenceTypeDescriptor.java |   59 +
 .../stabs/types/StabsArrayTypeDescriptor.java |   98 ++
 .../types/StabsBuiltinTypeDescriptor.java     |  256 ++++
 .../types/StabsCompositeTypeDescriptor.java   |  165 ++
 .../StabsCrossReferenceTypeDescriptor.java    |   77 +
 .../types/StabsFunctionTypeDescriptor.java    |  106 ++
 .../types/StabsMethodTypeDescriptor.java      |   74 +
 .../types/StabsParameterTypeDescriptor.java   |   67 +
 .../stabs/types/StabsRangeTypeDescriptor.java |  103 ++
 .../types/StabsReferenceTypeDescriptor.java   |   82 +
 .../stabs/types/StabsTypeDescriptor.java      |   38 +
 .../types/StabsTypeDescriptorFactory.java     |  119 ++
 .../StabsTypeModifierTypeDescriptor.java      |   78 +
 .../StabsTypeReferenceTypeDescriptor.java     |   47 +
 .../bin/format/stabs/AbstractStabsTest.java   |   78 +
 .../format/stabs/StabsCompositeTokenTest.java |   88 ++
 .../util/bin/format/stabs/StabsFullCTest.java |   23 +
 .../bin/format/stabs/StabsFullCppTest.java    |   23 +
 .../format/stabs/StabsFunctionTokenTest.java  |   56 +
 .../format/stabs/StabsTypeDefTokenTest.java   |   33 +
 .../types/StabArrayTypeDescriptorTest.java    |   37 +
 .../util/bin/format/stabs/full_c_stabs.txt    |  119 ++
 .../util/bin/format/stabs/full_cpp_stabs.txt  | 1336 +++++++++++++++++
 48 files changed, 6212 insertions(+)
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/AbstractStabsSymbolDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsClassSymbolDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsCompositeSymbolDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsConstantSymbolDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsExceptionSymbolDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsFile.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsFunctionSymbolDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsParameterSymbolDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsParseException.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsParser.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsSymbolDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsSymbolDescriptorType.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsToken.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTokenizer.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeDefSymbolDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeDescriptorType.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeNumber.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsUtils.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsVariableSymbolDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsBaseClassDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsMemberSymbolDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsMethodSymbolDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsFunctionTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsTypeReferenceTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsArrayTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsBuiltinTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsCompositeTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsCrossReferenceTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsFunctionTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsMethodTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsParameterTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsRangeTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsReferenceTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeDescriptorFactory.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeModifierTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeReferenceTypeDescriptor.java
 create mode 100644 Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/AbstractStabsTest.java
 create mode 100644 Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsCompositeTokenTest.java
 create mode 100644 Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsFullCTest.java
 create mode 100644 Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsFullCppTest.java
 create mode 100644 Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsFunctionTokenTest.java
 create mode 100644 Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsTypeDefTokenTest.java
 create mode 100644 Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/types/StabArrayTypeDescriptorTest.java
 create mode 100644 Ghidra/Features/Base/src/test/resources/ghidra/app/util/bin/format/stabs/full_c_stabs.txt
 create mode 100644 Ghidra/Features/Base/src/test/resources/ghidra/app/util/bin/format/stabs/full_cpp_stabs.txt

diff --git a/Ghidra/Features/Base/certification.manifest b/Ghidra/Features/Base/certification.manifest
index ef191cb016..3e6496d771 100644
--- a/Ghidra/Features/Base/certification.manifest
+++ b/Ghidra/Features/Base/certification.manifest
@@ -640,6 +640,44 @@ src/main/java/ghidra/app/util/bin/format/ne/package.html||GHIDRA||||END|
 src/main/java/ghidra/app/util/bin/format/package.html||GHIDRA||||END|
 src/main/java/ghidra/app/util/bin/format/pe/package.html||GHIDRA||||END|
 src/main/java/ghidra/app/util/bin/format/pe/resource/package.html||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/AbstractStabsSymbolDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsClassSymbolDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsCompositeSymbolDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsConstantSymbolDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsExceptionSymbolDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsFile.java||GHIDRA||||END||
+src/main/java/ghidra/app/util/bin/format/stabs/StabsFunctionSymbolDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsParameterSymbolDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsParseException.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsParser.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsSymbolDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsSymbolDescriptorType.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsToken.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsTokenizer.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeDefSymbolDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeDescriptorType.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeNumber.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsUtils.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/StabsVariableSymbolDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsBaseClassDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsMemberSymbolDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsMethodSymbolDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsFunctionTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsTypeReferenceTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/StabsArrayTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/StabsBuiltinTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/StabsCompositeTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/StabsCrossReferenceTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/StabsFunctionTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/StabsMethodTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/StabsParameterTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/StabsRangeTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/StabsReferenceTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeDescriptorFactory.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeModifierTypeDescriptor.java||GHIDRA||||END|
+src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeReferenceTypeDescriptor.java||GHIDRA||||END|
 src/main/java/ghidra/app/util/bin/package.html||GHIDRA||||END|
 src/main/java/ghidra/app/util/exporter/package.html||GHIDRA||||END|
 src/main/java/ghidra/app/util/importer/package.html||GHIDRA||||END|
@@ -931,4 +969,13 @@ src/test.slow/resources/filterTestDirList.txt||GHIDRA||||END|
 src/test.slow/resources/ghidra/app/plugin/core/datamgr/TestDataType.txt||GHIDRA||||END|
 src/test.slow/resources/ghidra/app/script/GhidraScriptAsk.properties||GHIDRA||||END|
 src/test/resources/defaultTools/TestCodeBrowser.tool||GHIDRA||||END|
+src/test/java/ghidra/app/util/bin/format/stabs/AbstractStabsTest.java||GHIDRA||||END|
+src/test/java/ghidra/app/util/bin/format/stabs/StabsCompositeTokenTest.java||GHIDRA||||END|
+src/test/java/ghidra/app/util/bin/format/stabs/StabsFullCTest.java||GHIDRA||||END|
+src/test/java/ghidra/app/util/bin/format/stabs/StabsFullCppTest.java||GHIDRA||||END|
+src/test/java/ghidra/app/util/bin/format/stabs/StabsFunctionTokenTest.java||GHIDRA||||END|
+src/test/java/ghidra/app/util/bin/format/stabs/StabsTypeDefTokenTest.java||GHIDRA||||END|
+src/test/java/ghidra/app/util/bin/format/stabs/types/StabArrayTypeDescriptorTest.java||GHIDRA||||END|
+src/test/resources/ghidra/app/util/bin/format/stabs/full_c_stabs.txt||GHIDRA||||END|
+src/test/resources/ghidra/app/util/bin/format/stabs/full_cpp_stabs.txt||GHIDRA||||END|
 src/test/resources/ghidra/app/util/opinion/test.ord||GHIDRA||||END|
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/AbstractStabsSymbolDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/AbstractStabsSymbolDescriptor.java
new file mode 100644
index 0000000000..0aa7840378
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/AbstractStabsSymbolDescriptor.java
@@ -0,0 +1,73 @@
+package ghidra.app.util.bin.format.stabs;
+
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.program.model.data.CategoryPath;
+import ghidra.program.model.data.DataTypeManager;
+
+/**
+ * Abstract Base Class for StabSymbolDescriptor Implementations
+ */
+public abstract class AbstractStabsSymbolDescriptor implements StabsSymbolDescriptor {
+
+	protected final String stab;
+	protected final String name;
+	protected final char descriptor;
+	protected final StabsFile file;
+	protected final DataTypeManager dtm;
+	protected final CategoryPath path;
+	private int anonCount = 0;
+
+	AbstractStabsSymbolDescriptor(String stab, StabsFile file) {
+		this.name = StabsParser.getNameFromStab(stab);
+		this.stab = stab;
+		this.file = file;
+		this.dtm = file.getProgram().getDataTypeManager();
+		this.path = file.getCategoryPath();
+		this.descriptor = stab.charAt(name.length()+1);
+	}
+
+	protected String getTypeSubStab() {
+		int index = stab.indexOf('=');
+		if (index != -1) {
+			return stab.substring(index+1);
+		}
+		index = stab.indexOf('(');
+		if (index != -1) {
+			return stab.substring(index);
+		}
+		return stab.substring(name.length()+2);
+	}
+
+	protected StabsParseException getError() {
+		return new StabsParseException(getName(), stab);
+	}
+
+	@Override
+	public String getName() {
+		return name;
+	}
+
+	@Override
+	public String getStab() {
+		return stab;
+	}
+
+	@Override
+	public final StabsFile getFile() {
+		return file;
+	}
+
+	@Override
+	public StabsTypeDescriptor getTypeInformation() {
+		//default case for having no type information
+		return null;
+	}
+
+	/**
+	 * Gets the next available number for an anonymous inner type
+	 * @return the next available number
+	 */
+	public int getNextAnonCount() {
+		return anonCount++;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsClassSymbolDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsClassSymbolDescriptor.java
new file mode 100644
index 0000000000..2234b5dbd8
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsClassSymbolDescriptor.java
@@ -0,0 +1,326 @@
+package ghidra.app.util.bin.format.stabs;
+
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import ghidra.app.util.NamespaceUtils;
+import ghidra.app.util.SymbolPath;
+import ghidra.app.util.bin.format.stabs.cpp.*;
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptorFactory;
+import ghidra.app.util.demangler.DemangledFunction;
+import ghidra.app.util.demangler.DemangledObject;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.InvalidDataTypeException;
+import ghidra.program.model.data.Structure;
+import ghidra.program.model.listing.GhidraClass;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.listing.VariableUtilities;
+import ghidra.program.model.symbol.Namespace;
+import ghidra.program.model.symbol.SourceType;
+import ghidra.util.Msg;
+import ghidra.util.exception.InvalidInputException;
+
+/**
+ * C++ Class Type (Structure, Union) implementation of the StabSymbolDescriptor
+ */
+public final class StabsClassSymbolDescriptor extends AbstractStabsSymbolDescriptor
+	implements StabsTypeDescriptor{
+
+	private static final String SUPER_CLASS = "super_%s";
+	private static final String CONSTRUCTOR_NAME = "__ct_base";
+	private static final Pattern COMPOSITE_START = Pattern.compile("(?<==)([su]\\d+)");
+	private static final Pattern FIRST_BASE_PATTERN =
+		Pattern.compile(String.format("~%%(%s.*?);", StabsTypeNumber.TYPE_NUMBER_PATTERN));
+
+	private final Program program;
+	private final GhidraClass gc;
+	private final List<StabsBaseClassDescriptor> bases;
+	private final List<StabsMemberSymbolDescriptor> members;
+	private final List<StabsMethodSymbolDescriptor> methods;
+	private final StabsTypeDescriptor firstBase;
+
+	/**
+	 * Constructs a new StabsClassSymbolDescriptor
+	 * @param stab the portion of the stab containing this descriptor
+	 * @param file the file containing this descriptor
+	 * @throws StabsParseException if the descriptor or one it relies on is invalid
+	 */
+	StabsClassSymbolDescriptor(String stab, StabsFile file) throws StabsParseException {
+		super(stab, file);
+		StabsTypeNumber typeNum = new StabsTypeNumber(stab);
+		file.addType(this, typeNum);
+		this.program = file.getProgram();
+		this.gc = doGetGhidraClass();
+		this.bases = StabsBaseClassDescriptor.getBases(this, getCompositeStart());
+		this.members = StabsMemberSymbolDescriptor.getMembers(this, getMembersStart());
+		this.methods = StabsMethodSymbolDescriptor.getMethods(this);
+		this.firstBase = doGetFirstBase();
+		fixupGhidraClass();
+		doAddBases();
+		doAddMembers();
+	}
+
+	@Override
+	public DataType getDataType() {
+		// don't change the category path as it causes problems
+		return VariableUtilities.findOrCreateClassStruct(gc, dtm);
+	}
+
+	@Override
+	public StabsSymbolDescriptorType getSymbolDescriptorType() {
+		return StabsSymbolDescriptorType.CLASS;
+	}
+
+	@Override
+	public StabsSymbolDescriptor getSymbolDescriptor() {
+		return this;
+	}
+
+	@Override
+	public StabsTypeDescriptorType getType() {
+		return StabsTypeDescriptorType.COMPOSITE;
+	}
+
+	@Override
+	public int getLength() {
+		throw new UnsupportedOperationException("A class cannot hava an inline definition");
+	}
+
+	private StabsTypeDescriptor doGetFirstBase() throws StabsParseException {
+		Matcher matcher = FIRST_BASE_PATTERN.matcher(stab);
+		if (matcher.find()) {
+			return StabsTypeDescriptorFactory.getTypeDescriptor(this, matcher.group(1));
+		}
+		return null;
+	}
+
+	private void fixupGhidraClass() {
+		if (stab.contains(CONSTRUCTOR_NAME) || gc.getName().indexOf('<') != -1) {
+			// no fixing required
+			return;
+		}
+		DemangledObject o = null;
+		for (StabsMemberSymbolDescriptor member : members) {
+			o = member.getDemangledObject();
+			if (o != null) {
+				break;
+			}
+		}
+		if (o != null) {
+			DataType dt = getDataType();
+			try {
+				dt.setName(o.getNamespace().getName());
+				gc.getSymbol().setName(o.getNamespace().getName(), SourceType.IMPORTED);
+			} catch (Exception e) {
+				// don't care
+				Msg.error(this, e);
+			}
+		} /*else {
+			likely didn't require fixing
+		}*/
+	}
+
+	private String getCompositeStart() {
+		Matcher matcher = COMPOSITE_START.matcher(stab);
+		if (matcher.find()) {
+			return stab.substring(matcher.end(1));
+		}
+		return "";
+	}
+
+	private String getMembersStart() {
+		if (bases.isEmpty()) {
+			return getCompositeStart();
+		}
+		int index = StabsBaseClassDescriptor.getBaseStartIndex(stab)+getBasesLength();
+		return stab.substring(index);
+	}
+
+	private int getBasesLength() {
+		return bases.stream()
+					.mapToInt(StabsBaseClassDescriptor::getLength)
+					.sum();
+	}
+
+	private DemangledFunction getCtor() throws StabsParseException {
+		 int index = stab.indexOf(CONSTRUCTOR_NAME);
+		if (index != -1) {
+			return StabsMethodSymbolDescriptor.getDemangledFunction(this);
+		}
+		DemangledFunction result =
+			StabsMethodSymbolDescriptor.getDemangledFunction(this);
+		if (result != null) {
+			return result;
+		}
+		throw getError();
+	}
+
+	private String toNamespace(DemangledFunction fun) {
+		return fun.getNamespace().getNamespaceString();
+	}
+
+	private GhidraClass getNextAvailableGc() throws StabsParseException {
+		SymbolPath sPath = new SymbolPath(name);
+		Namespace existingNs = null;
+		int i = 0;
+		do {
+			if (i == 0) {
+				i++;
+			} else {
+				sPath = new SymbolPath(String.format("%s_%d", name, ++i));
+			}
+			existingNs = NamespaceUtils.getNonFunctionNamespace(program, sPath);
+		} while (existingNs != null);
+		try {
+			existingNs = NamespaceUtils.createNamespaceHierarchy(
+				sPath.toString(), null, program, SourceType.IMPORTED);
+			if (!(existingNs instanceof GhidraClass)) {
+				existingNs = NamespaceUtils.convertNamespaceToClass(existingNs);
+			}
+			return (GhidraClass) existingNs;
+		} catch (InvalidInputException e) {
+			// if the input is invalid then so is the stab
+			throw new StabsParseException(name, stab);
+		}
+	}
+
+	private GhidraClass doGetGhidraClass() throws StabsParseException {
+		String nsPath;
+		try {
+			DemangledFunction fun = getCtor();
+			if (fun == null || fun.getNamespace() == null) {
+				return getNextAvailableGc();
+			}
+			nsPath = toNamespace(fun);
+		} catch (StabsParseException e) {
+			// We have no namespace information and no template information. Makeup a namespace.
+			return getNextAvailableGc();
+		}
+		try {
+			Namespace ns = NamespaceUtils.createNamespaceHierarchy(
+				nsPath, null, program, SourceType.IMPORTED);
+			if (!(ns instanceof GhidraClass)) {
+				ns = NamespaceUtils.convertNamespaceToClass(ns);
+			}
+			return (GhidraClass) ns;
+		} catch (InvalidInputException e) {
+			// if the input is invalid then so is the stab
+			throw new StabsParseException(name, stab);
+		}
+	}
+
+	private void doAddBases() {
+		// c++ unions cannot inherit. Safe to cast to Structure
+		Structure struct = (Structure) getDataType();
+		for (StabsBaseClassDescriptor base : bases) {
+			if (!base.isVirtual()) {
+				// TODO add virtual bases once supported
+				int offset = base.getOffset();
+				DataType typeDt = base.getDataType();
+				int length = typeDt.getLength();
+				String name = String.format(SUPER_CLASS, typeDt.getName());
+				String modifier = base.getModifier().getDeclaration();
+				struct.insertAtOffset(offset, typeDt, length,name, modifier);
+			}
+		}
+	}
+
+	private void doAddMembers() throws StabsParseException {
+		try {
+			StabsUtils.addCompositeMembers(getDataType(), members);
+		} catch (InvalidDataTypeException e) {
+			throw new StabsParseException(name, stab, e);
+		}
+	}
+
+	static boolean isClass(String stab) {
+		if (StabsMethodSymbolDescriptor.containsMethods(stab)) {
+			return true;
+		}
+		Pattern pattern = Pattern.compile(
+			String.format(".*?:Tt(%s)=s\\d+\\!", StabsTypeNumber.TYPE_NUMBER_PATTERN));
+		if (pattern.matcher(stab).lookingAt()) {
+			return true;
+		}
+		pattern = Pattern.compile(
+			String.format(":/[0129](%s)", StabsTypeNumber.TYPE_NUMBER_PATTERN));
+		if (pattern.matcher(stab).find()) {
+			return true;
+		}
+		return stab.indexOf('#') != -1 || stab.contains(CONSTRUCTOR_NAME);
+	}
+
+	/**
+	 * Gets the GhidraClass for this class descriptor
+	 * @return the ghidra class
+	 */
+	public GhidraClass getGhidraClass() {
+		return gc;
+	}
+
+	/**
+	 * @return the methods
+	 */
+	public List<StabsMethodSymbolDescriptor> getMethods() {
+		return methods;
+	}
+
+	/**
+	 * @return the firstBase
+	 */
+	public StabsTypeDescriptor getFirstBase() {
+		return firstBase;
+	}
+
+	/** Potential Visibility Modifiers */
+	public static enum Visibility {
+		PUBLIC,
+		PROTECTED,
+		PRIVATE,
+		NONE;
+
+		/**
+		 * Gets the visibility from the start of the stab
+		 * @param stab the portion of the stab where the modifier starts
+		 * @return the visibility
+		 */
+		public static Visibility getVisibility(CharSequence stab) {
+			if (stab != null) {
+				int index = stab.charAt(0) == '/' ? 1 : 0;
+				return getVisibility(stab.charAt(index));
+			}
+			return NONE;
+		}
+
+		/**
+		 * Gets the visibility from the start of the stab
+		 * @param c the visibility character
+		 * @return the visibility
+		 */
+		public static Visibility getVisibility(char c) {
+			switch (c) {
+				case '0':
+					return PRIVATE;
+				case '1':
+					return PROTECTED;
+				case '2':
+					return PUBLIC;
+				default:
+					return NONE;
+			}
+		}
+
+		/**
+		 * Gets the declaration of this visibility modifier
+		 * @return the visibility declaration or an empty string if none
+		 */
+		public String getDeclaration() {
+			if (this == NONE) {
+				return "";
+			}
+			return name().toLowerCase();
+		}
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsCompositeSymbolDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsCompositeSymbolDescriptor.java
new file mode 100644
index 0000000000..2450d80436
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsCompositeSymbolDescriptor.java
@@ -0,0 +1,68 @@
+package ghidra.app.util.bin.format.stabs;
+
+import ghidra.app.util.bin.format.stabs.types.StabsCompositeTypeDescriptor;
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.StructureDataType;
+import ghidra.program.model.data.UnionDataType;
+
+import static ghidra.program.model.data.DataTypeConflictHandler.REPLACE_HANDLER;
+
+/**
+ * Composite Type (Structure, Union, Enum) implementation of the StabSymbolDescriptor
+ */
+public class StabsCompositeSymbolDescriptor extends AbstractStabsSymbolDescriptor {
+
+	private final DataType dt;
+	private final StabsCompositeTypeDescriptor type;
+
+	/**
+	 * Constructs a new StabsCompositeSymbolDescriptor
+	 * @param stab the portion of the stab containing this descriptor
+	 * @param file the file containing this descriptor
+	 * @throws StabsParseException if the descriptor or one it relies on is invalid
+	 */
+	StabsCompositeSymbolDescriptor(String stab, StabsFile file) throws StabsParseException {
+		super(stab, file);
+		this.dt = initDataType();
+		this.type = StabsCompositeTypeDescriptor.getNamedDescriptor(this, getTypeSubStab());
+	}
+
+	@Override
+	public StabsTypeDescriptor getTypeInformation() {
+		return type;
+	}
+
+	@Override
+	public DataType getDataType() {
+		return dt;
+	}
+
+	@Override
+	public StabsSymbolDescriptorType getSymbolDescriptorType() {
+		return StabsSymbolDescriptorType.COMPOSITE;
+	}
+
+	private DataType initDataType() throws StabsParseException {
+		String typeString = getTypeSubStab();
+		DataType initDt = doGetDataType(typeString);
+		if (initDt != null) {
+			return dtm.resolve(initDt, REPLACE_HANDLER);
+		}
+		throw new StabsParseException(name, stab);
+	}
+
+	private DataType doGetDataType(String typeString) throws StabsParseException {
+		switch (typeString.charAt(0)) {
+			case 'e':
+				return StabsCompositeTypeDescriptor.parseEnum(typeString, name, path, dtm);
+			case 's':
+				return new StructureDataType(path, name, 0, dtm);
+			case 'u':
+				return new UnionDataType(path, name, dtm);
+			default:
+				throw getError();
+		}
+	}
+
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsConstantSymbolDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsConstantSymbolDescriptor.java
new file mode 100644
index 0000000000..7ca88d862a
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsConstantSymbolDescriptor.java
@@ -0,0 +1,154 @@
+package ghidra.app.util.bin.format.stabs;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.program.model.data.*;
+import ghidra.util.Msg;
+
+/**
+ * Constant implementation of the StabSymbolDescriptor
+ */
+public class StabsConstantSymbolDescriptor extends AbstractStabsSymbolDescriptor {
+
+	/** Potential constant types */
+	public enum ConstantType {
+		VALUE,
+		TYPE,
+		STRING,
+		NONE
+	}
+
+	/** Potential constant value types */
+	public enum ValueType {
+		/** true or false */
+		BOOL,
+		/** character value */
+		CHARACTER,
+		/** byte, short, int, long, etc. */
+		INTEGER,
+		/** float, double */
+		REAL,
+		/** not a value type constant */
+		NONE
+	}
+
+	private static final Pattern PATTERN = Pattern.compile("c=([bcirseS])(.*)");
+
+	private final ConstantType type;
+	private final ValueType vType;
+
+	/**
+	 * Constructs a new StabsConstantSymbolDescriptor
+	 * @param stab the portion of the stab containing this descriptor
+	 * @param file the file containing this descriptor
+	 * @throws StabsParseException if the descriptor or one it relies on is invalid
+	 */
+	StabsConstantSymbolDescriptor(String stab, StabsFile file) {
+		super(stab, file);
+		this.type = doGetConstantType();
+		this.vType = doGetValueType();
+	}
+
+	@Override
+	public DataType getDataType() {
+		switch (type) {
+			case STRING:
+				return StringDataType.dataType;
+			case VALUE:
+				switch (vType) {
+					case BOOL:
+						return BooleanDataType.dataType;
+					case CHARACTER:
+						return CharDataType.dataType;
+					case INTEGER:
+						// implicit int. for others e is used
+						return IntegerDataType.dataType;
+					case REAL:
+						return FloatDataType.dataType;
+					case NONE:
+					default:
+						break;
+				}
+				break;
+			case TYPE:
+				return getTypeDataType();
+			default:
+				break;
+		}
+		return DataType.VOID;
+	}
+
+	@Override
+	public StabsSymbolDescriptorType getSymbolDescriptorType() {
+		return StabsSymbolDescriptorType.CONSTANT;
+	}
+
+	private char getTypeCharacter() {
+		Matcher matcher = PATTERN.matcher(stab);
+		if (matcher.find()) {
+			return matcher.group(1).charAt(0);
+		}
+		return '\0';
+	}
+
+	private ConstantType doGetConstantType() {
+		switch (getTypeCharacter()) {
+			case 'b':
+			case 'c':
+			case 'i':
+			case 'r':
+				return ConstantType.VALUE;
+			case 's':
+				return ConstantType.STRING;
+			case 'e':
+			case 'S':
+				return ConstantType.TYPE;
+			default:
+				break;
+		}
+		Msg.warn(this, "Unknown constant type in stab string:\n" + getStab());
+		return ConstantType.NONE;
+	}
+
+	private DataType getTypeDataType() {
+		StabsTypeNumber num = new StabsTypeNumber(stab);
+		StabsTypeDescriptor type = file.getType(num);
+		return type != null ? type.getDataType() : DataType.VOID;
+	}
+
+	/**
+	 * Gets the type of constant this descriptor represents
+	 * @return the constant type
+	 */
+	public ConstantType getConstantType() {
+		return type;
+	}
+
+	/**
+	 * Gets the value type this constant value type descriptor represents
+	 * @return the value type
+	 */
+	public ValueType getValueType() {
+		return vType;
+	}
+
+	private ValueType doGetValueType() {
+		if (type.equals(ConstantType.VALUE)) {
+			switch (getTypeCharacter()) {
+				case 'b':
+					return ValueType.BOOL;
+				case 'c':
+					return ValueType.CHARACTER;
+				case 'i':
+					return ValueType.INTEGER;
+				case 'r':
+					return ValueType.REAL;
+				default:
+					break;
+			}
+		}
+		return ValueType.NONE;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsExceptionSymbolDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsExceptionSymbolDescriptor.java
new file mode 100644
index 0000000000..6b0d211fc8
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsExceptionSymbolDescriptor.java
@@ -0,0 +1,54 @@
+package ghidra.app.util.bin.format.stabs;
+
+import ghidra.app.plugin.core.analysis.AutoAnalysisManager;
+import ghidra.app.plugin.core.analysis.DefaultDataTypeManagerService;
+import ghidra.app.services.DataTypeManagerService;
+import ghidra.framework.plugintool.PluginTool;
+import ghidra.program.model.data.DataType;
+import ghidra.util.data.DataTypeParser;
+
+/**
+ * Exception implementation of the StabSymbolDescriptor
+ */
+public class StabsExceptionSymbolDescriptor extends AbstractStabsSymbolDescriptor {
+
+	private final DataTypeParser parser;
+	private final DataTypeManagerService service;
+
+	/**
+	 * Constructs a new StabsExceptionSymbolDescriptor
+	 * @param stab the portion of the stab containing this descriptor
+	 * @param file the file containing this descriptor
+	 * @throws StabsParseException if the descriptor or one it relies on is invalid
+	 */
+	StabsExceptionSymbolDescriptor(String stab, StabsFile file) {
+		super(stab, file);
+		PluginTool tool =
+			AutoAnalysisManager.getAnalysisManager(file.getProgram()).getAnalysisTool();
+		if (tool != null) {
+			this.service = tool.getService(DataTypeManagerService.class);
+		} else {
+			// if tool == null then we're in headless mode
+			this.service = new DefaultDataTypeManagerService();
+		}
+		this.parser = new DataTypeParser(service, DataTypeParser.AllowedDataTypes.ALL);
+	}
+
+	@Override
+	public DataType getDataType() {
+		try {
+			// return the exceptions datatype if known
+			DataType dt = parser.parse(name);
+			return dt;
+		}
+		catch (Exception e) {
+			// if we don't have it then return null
+		}
+		return null;
+	}
+
+	@Override
+	public StabsSymbolDescriptorType getSymbolDescriptorType() {
+		return StabsSymbolDescriptorType.EXCEPTION;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsFile.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsFile.java
new file mode 100644
index 0000000000..c2a27be403
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsFile.java
@@ -0,0 +1,203 @@
+package ghidra.app.util.bin.format.stabs;
+
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.stream.Stream;
+import java.util.stream.StreamSupport;
+
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.program.model.data.CategoryPath;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.listing.Program;
+import ghidra.util.datastruct.RedBlackEntry;
+import ghidra.util.datastruct.RedBlackTree;
+
+/**
+ * A Container representing a file which holds all StabDescriptors
+ * which may have been declared in the file.
+ */
+public class StabsFile {
+
+	private static final Pattern INCLUDE_PATTERN =
+		Pattern.compile("(?<=(?:(?:include/)|(?:sys\\-include/)))(.*)");
+	private static final String BUILTIN_NAME = "__builtin__";
+	private static final int BUILTIN_FILE_NUMBER = 0;
+	private static final CategoryPath STABS_ROOT = new CategoryPath(CategoryPath.ROOT, "stabs");
+
+	private final long fileNumber;
+	private final String fileName;
+	private final String fullPath;
+	private final StabsParser parser;
+	private final CategoryPath path;
+	private final RedBlackTree<Long, StabsTypeDescriptor> types = new RedBlackTree<>();
+	private final Set<StabsFunctionSymbolDescriptor> functions = new HashSet<>();
+	private final Set<StabsClassSymbolDescriptor> classes = new HashSet<>();
+
+	StabsFile(StabsParser parser) {
+		this.fileName = BUILTIN_NAME;
+		this.fullPath = fileName;
+		this.parser = parser;
+		this.path = CategoryPath.ROOT;
+		this.fileNumber = 0;
+	}
+
+	StabsFile(String fileName, StabsParser parser, int fileNumber) {
+		this.fullPath = fileName;
+		Path path = Paths.get(fileName);
+		path.normalize();
+		String strPath = path.toString().replaceAll("\\\\", "/").replaceAll("../", "");
+		Matcher matcher = INCLUDE_PATTERN.matcher(fileName);
+		matcher.reset(strPath);
+		if (matcher.find()) {
+			strPath = matcher.group(1);
+		}
+		this.fileName = strPath;
+		this.parser = parser;
+		this.fileNumber = fileNumber;
+		this.path = new CategoryPath(STABS_ROOT, strPath);
+	}
+
+	// this shouldn't be public. Not sure how to protect this though.
+	public void addType(StabsTypeDescriptor type, StabsTypeNumber typeNumber) {
+		if (isThisFile(typeNumber)) {
+			if (!typeNumber.hasFileNumber()) {
+				StabsFile file = parser.getFile(BUILTIN_FILE_NUMBER);
+				file.types.put(typeNumber.typeNumber, type);
+			}
+			// add to ourselves too so we know where it was defined
+			types.put(typeNumber.typeNumber, type);
+		} else {
+			StabsFile file = parser.getFile(typeNumber.fileNumber);
+			file.types.put(typeNumber.typeNumber, type);
+		}
+	}
+
+	private boolean isThisFile(StabsTypeNumber typeNumber) {
+		return typeNumber.fileNumber == fileNumber || !typeNumber.hasFileNumber();
+	}
+
+	/**
+	 * Returns true if this file or an included file defines the type
+	 * @param typeNumber the type number of the type to check for
+	 * @return true if the type has been defined
+	 */
+	public boolean containsType(StabsTypeNumber typeNumber) {
+		if (isThisFile(typeNumber)) {
+			return types.containsKey(typeNumber.typeNumber);
+		}
+		StabsFile otherFile = parser.getFile(typeNumber.fileNumber);
+		return otherFile.containsType(typeNumber);
+	}
+
+	/**
+	 * Gets the type descriptor for the provided type number
+	 * @param typeNumber the types type number
+	 * @return the type descriptor
+	 */
+	public StabsTypeDescriptor getType(StabsTypeNumber typeNumber) {
+		if (isThisFile(typeNumber)) {
+			if (!typeNumber.hasFileNumber()) {
+				StabsFile file = parser.getFile(BUILTIN_FILE_NUMBER);
+				return file.types.getOrCreateEntry(typeNumber.typeNumber).getValue();
+			}
+			return types.getOrCreateEntry(typeNumber.typeNumber).getValue();
+		}
+		return parser.getType(typeNumber);
+	}
+
+	/**
+	 * Gets the program
+	 * @return the program
+	 */
+	public Program getProgram() {
+		return parser.getProgram();
+	}
+
+	/**
+	 * Gets the CategoryPath
+	 * @return the category path
+	 */
+	public CategoryPath getCategoryPath() {
+		return path;
+	}
+
+	/**
+	 * Gets the file name
+	 * @return the file name
+	 */
+	public String getFileName() {
+		return fileName;
+	}
+
+	/**
+	 * Gets the type descriptor which has the typenumber in this file
+	 * @param typeNumber the type descriptors type number
+	 * @return the type descriptor
+	 */
+	public StabsTypeDescriptor getType(long typeNumber) {
+		RedBlackEntry<Long, StabsTypeDescriptor> entry = types.getOrCreateEntry(typeNumber);
+		return entry.getValue();
+	}
+
+	/**
+	 * Gets a set of all function descriptors
+	 * @return the set of function descriptors
+	 */
+	public Set<StabsFunctionSymbolDescriptor> getFunctions() {
+		return Collections.unmodifiableSet(functions);
+	}
+
+	/**
+	 * Gets a set of all the class descriptors defined in this file
+	 * @return the set of class descriptors
+	 */
+	public Set<StabsClassSymbolDescriptor> getClasses() {
+		return Collections.unmodifiableSet(classes);
+	}
+
+	boolean addFunction(StabsSymbolDescriptor symbol) {
+		if (symbol instanceof StabsFunctionSymbolDescriptor) {
+			return functions.add((StabsFunctionSymbolDescriptor) symbol);
+		}
+		return false;
+	}
+
+	boolean addClass(StabsSymbolDescriptor symbol) {
+		if (symbol instanceof StabsClassSymbolDescriptor) {
+			return classes.add((StabsClassSymbolDescriptor) symbol);
+		}
+		return false;
+	}
+
+	/**
+	 * Gets a stream of all type descriptors defined in this file
+	 * @return the stream of type descriptors
+	 */
+	public Stream<StabsTypeDescriptor> getTypeDescriptors() {
+		return StreamSupport.stream(types.spliterator(), false)
+							.map(RedBlackEntry::getValue);
+	}
+
+	/**
+	 * @return the fileNumber
+	 */
+	public long getFileNumber() {
+		return fileNumber;
+	}
+
+	/**
+	 * @return the fullPath
+	 */
+	public String getFilePath() {
+		return fullPath;
+	}
+
+	public DataType getDefaultFunction(DataType returnType) {
+		return parser.getDefaultFunction(returnType);
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsFunctionSymbolDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsFunctionSymbolDescriptor.java
new file mode 100644
index 0000000000..0d7bbbd792
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsFunctionSymbolDescriptor.java
@@ -0,0 +1,194 @@
+package ghidra.app.util.bin.format.stabs;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptorFactory;
+import ghidra.app.util.demangler.DemangledFunction;
+import ghidra.app.util.demangler.DemangledObject;
+import ghidra.app.util.demangler.DemanglerUtil;
+import ghidra.program.model.data.CategoryPath;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.DataTypeConflictHandler;
+import ghidra.program.model.data.FunctionDefinitionDataType;
+import ghidra.program.model.data.GenericCallingConvention;
+import ghidra.program.model.data.ParameterDefinition;
+import ghidra.program.model.data.ParameterDefinitionImpl;
+
+/**
+ * Function implementation of the StabSymbolDescriptor
+ */
+public final class StabsFunctionSymbolDescriptor extends AbstractStabsSymbolDescriptor {
+
+	public static final String CHILD_PATH = "functions";
+	private static final String THIS_PARAM = "this";
+
+	/** Potential Function Types */
+	public static enum FunctionType {
+		FILE,
+		GLOBAL,
+		NESTED,
+		MODULE,
+		STATIC
+	}
+
+	private final DataType dt;
+	private final FunctionType type;
+	private final List<StabsParameterSymbolDescriptor> parameters;
+	private final StabsTypeDescriptor returnType;
+	private final DemangledFunction demangled;
+	private GenericCallingConvention cc = GenericCallingConvention.unknown;
+
+	/**
+	 * Constructs a new StabsFunctionSymbolDescriptor
+	 * @param stabs the list of stabs containing this descriptor and the proceeding
+	 * ones containing any potential parameters.
+	 * @param file the file containing this descriptor
+	 * @throws StabsParseException if the descriptor or one of its parameters is invalid
+	 */
+	StabsFunctionSymbolDescriptor(List<String> stabs, StabsFile file) throws StabsParseException {
+		super(stabs.get(0), file);
+		this.type = getType(descriptor);
+		String typeString = stab.substring(name.length()+2);
+		this.returnType = StabsTypeDescriptorFactory.getTypeDescriptor(this, typeString);
+		this.demangled = doGetDemangled();
+		this.parameters = parseParameters(stabs.subList(1, stabs.size()));
+		this.dt = buildDataType();
+	}
+
+	@Override
+	public boolean equals(Object o) {
+		if (o instanceof StabsFunctionSymbolDescriptor) {
+			StabsFunctionSymbolDescriptor other = (StabsFunctionSymbolDescriptor) o;
+			if (other.returnType.getDataType() == null) {
+				return false;
+			}
+			return other.name.equals(name) &&
+				other.returnType.getDataType().isEquivalent(returnType.getDataType());
+		}
+		return false;
+	}
+
+	@Override
+	public int hashCode() {
+		return name.hashCode();
+	}
+
+	private DemangledFunction doGetDemangled() {
+		DemangledObject o = DemanglerUtil.demangle(file.getProgram(), name);
+		if (o instanceof DemangledFunction) {
+			return (DemangledFunction) o;
+		}
+		return null;
+	}
+
+	/**
+	 * Gets the number of StabTokens consumed while parsing this token
+	 * @return the number of consumed tokens
+	 */
+	int getTokenCount() {
+		return parameters.size();
+	}
+
+	/**
+	 * Gets an immutable list of the parameter tokens.
+	 * @return the parameter tokens.
+	 */
+	public List<StabsParameterSymbolDescriptor> getParameterDescriptors() {
+		return Collections.unmodifiableList(parameters);
+	}
+
+	private DataType buildDataType() {
+		CategoryPath funPath = new CategoryPath(path, CHILD_PATH);
+		FunctionDefinitionDataType funDt = new FunctionDefinitionDataType(funPath, name, dtm);
+		funDt.setReturnType(returnType.getDataType());
+		ParameterDefinition[] params = new ParameterDefinition[parameters.size()];
+		for (int i = 0; i < parameters.size(); i++) {
+			StabsParameterSymbolDescriptor token = parameters.get(i);
+			params[i] = new ParameterDefinitionImpl(
+				token.name, token.getDataType(), null);
+
+		}
+		funDt.setArguments(params);
+		funDt.setGenericCallingConvention(cc);
+		return dtm.resolve(funDt, DataTypeConflictHandler.REPLACE_HANDLER);
+	}
+
+	private FunctionType getType(char c) throws StabsParseException {
+		switch (c) {
+			case 'f':
+				return FunctionType.FILE;
+			case 'F':
+				return FunctionType.GLOBAL;
+			case 'I':
+			case 'J':
+				return FunctionType.NESTED;
+			case 'm':
+				return FunctionType.MODULE;
+			case 'Q':
+				return FunctionType.STATIC;
+			default:
+				throw new StabsParseException(name, stab);
+		}
+	}
+
+	private List<StabsParameterSymbolDescriptor> parseParameters(List<String> stabs) throws StabsParseException {
+		List<StabsParameterSymbolDescriptor> params = new LinkedList<>();
+		for (String stab : stabs) {
+			try {
+				StabsSymbolDescriptorType type =
+					StabsSymbolDescriptorType.getSymbolType(stab);
+				if (type == StabsSymbolDescriptorType.PARAMETER) {
+					StabsParameterSymbolDescriptor param =
+						new StabsParameterSymbolDescriptor(stab, file);
+					if (param.name.equals(THIS_PARAM)) {
+						// set the calling convention to __thiscall and continue
+						cc = GenericCallingConvention.thiscall;
+						continue;
+					}
+					params.add(param);
+				} else if (type == StabsSymbolDescriptorType.VARIABLE) {
+					new StabsVariableSymbolDescriptor(stab, file);
+				} else {
+					break;
+				}
+			} catch (IllegalStateException e) {
+				// no stab
+			} catch (StabsParseException e) {
+				// reached end of parameters
+				break;
+			}
+		}
+		return new ArrayList<>(params);
+	}
+
+	/**
+	 * Gets the type of function being represented
+	 * @return the function type
+	 */
+	public FunctionType getFunctionType() {
+		return type;
+	}
+
+	@Override
+	public DataType getDataType() {
+		return dt;
+	}
+
+	@Override
+	public StabsSymbolDescriptorType getSymbolDescriptorType() {
+		return StabsSymbolDescriptorType.FUNCTION;
+	}
+
+	/**
+	 * Gets the demangled function if the name was mangled
+	 * @return the demangled or null if the name wasn't mangled
+	 */
+	public DemangledFunction getDemangledFunction() {
+		return demangled;
+	}
+
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsParameterSymbolDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsParameterSymbolDescriptor.java
new file mode 100644
index 0000000000..7d8af5de01
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsParameterSymbolDescriptor.java
@@ -0,0 +1,77 @@
+package ghidra.app.util.bin.format.stabs;
+
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptorFactory;
+import ghidra.program.model.data.DataType;
+
+/**
+ * Fuction Parameter implementation of the StabSymbolDescriptor
+ */
+public final class StabsParameterSymbolDescriptor extends AbstractStabsSymbolDescriptor {
+
+	/** Potential Parameter Types */
+	public static enum ParameterType {
+		/** Register Parameter */
+		REGISTER,
+		/** Stack Parameter */
+		STACK,
+		/** Return Parameter */
+		RETURN
+	}
+
+	private final ParameterType paramType;
+	private final StabsTypeDescriptor type;
+
+	/**
+	 * Constructs a new StabsParameterSymbolDescriptor
+	 * @param stab the portion of the stab containing this descriptor
+	 * @param file the file containing this descriptor
+	 * @throws StabsParseException if the descriptor or one it relies on is invalid
+	 */
+	StabsParameterSymbolDescriptor(String stab, StabsFile file) throws StabsParseException {
+		super(stab, file);
+		this.paramType = getParameterType(descriptor);
+		String typeString = stab.substring(name.length()+2);
+		this.type = StabsTypeDescriptorFactory.getTypeDescriptor(this, typeString);
+	}
+
+	private ParameterType getParameterType(char c) throws StabsParseException {
+		switch (c) {
+			case 'a':
+			case 'D':
+			case 'i':
+			case 'R':
+			case 'P':
+				return ParameterType.REGISTER;
+			case 'p':
+			case 'v':
+				return ParameterType.STACK;
+			case 'x':
+				return ParameterType.RETURN;
+			default:
+				throw new StabsParseException(name, stab);
+		}
+	}
+
+	@Override
+	public DataType getDataType() {
+		return type.getDataType();
+	}
+
+	/**
+	 * @return the parameter type
+	 */
+	public ParameterType getParameterType() {
+		return paramType;
+	}
+
+	@Override
+	public StabsSymbolDescriptorType getSymbolDescriptorType() {
+		return StabsSymbolDescriptorType.PARAMETER;
+	}
+
+	@Override
+	public StabsTypeDescriptor getTypeInformation() {
+		return type;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsParseException.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsParseException.java
new file mode 100644
index 0000000000..df913cd11c
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsParseException.java
@@ -0,0 +1,15 @@
+package ghidra.app.util.bin.format.stabs;
+
+@SuppressWarnings("serial")
+public final class StabsParseException extends Exception {
+
+	public StabsParseException(String name, String stab) {
+		super(String.format(
+			"The stab type for %s failed to be parsed.\n%s", name, stab));
+	}
+
+	public StabsParseException(String name, String stab, Throwable t) {
+		super(String.format(
+			"The stab type for %s failed to be parsed.\n%s", name, stab), t);
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsParser.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsParser.java
new file mode 100644
index 0000000000..d5b6725c11
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsParser.java
@@ -0,0 +1,258 @@
+package ghidra.app.util.bin.format.stabs;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.stream.Stream;
+
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.program.model.data.CategoryPath;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.DataTypeConflictHandler;
+import ghidra.program.model.data.DataTypeManager;
+import ghidra.program.model.data.FunctionDefinition;
+import ghidra.program.model.data.FunctionDefinitionDataType;
+import ghidra.program.model.listing.Program;
+import ghidra.util.Msg;
+import ghidra.util.exception.CancelledException;
+import ghidra.util.task.TaskMonitor;
+
+/**
+ * A not so simplistic parser for the STABS debug format
+ */
+public class StabsParser {
+
+	/** The root CategoryPath for types parsed by the StabsParser */
+	public final static CategoryPath STABS_PATH = new CategoryPath(CategoryPath.ROOT, "stabs");
+	private final static CategoryPath FUN_PATH = new CategoryPath(STABS_PATH, "functions");
+
+	// name can be blank. rarely occurs though
+	public static final Pattern NAME_PATTERN = Pattern.compile("^(.*?)(?=(?:(?<!:):(?!:))):");
+	private static final Pattern STAB_PATTERN = Pattern.compile(NAME_PATTERN.pattern()+"(.*)");
+	private static final Pattern FILE_PATTERN = Pattern.compile("(.*\\.\\w+)/?$");
+
+	private StabsFile currentFile;
+	private final Program program;
+	private final List<StabsFile> files;
+	private final Map<DataType, DataType> defaultFunctions = new HashMap<>();
+
+	/**
+	 * Constructs a new StabssParser
+	 * @param program the program
+	 */
+	public StabsParser(Program program) {
+		this(program, -1);
+	}
+
+	/**
+	 * Constructs a new Stabs Parser
+	 * @param program the program with stab debug information
+	 * @param numFiles the number of files which comprises the program if known.
+	 */
+	public StabsParser(Program program, int numFiles) {
+		this.program = program;
+		if (numFiles > 0) {
+			files = new ArrayList<>(numFiles);
+		} else {
+			files = new LinkedList<>();
+		}
+		// file number 0 is for builtins
+		currentFile = new StabsFile(this);
+		files.add(currentFile);
+	}
+
+	/**
+	 * Parses the list of STABS strings
+	 * @param stabs the STABS strings
+	 * @return the number of successfully parsed strings
+	 * @throws CancelledException if the operation is cancelled
+	 * @throws StabsParseException if an invalid stab is encountered
+	 */
+	public int parse(List<String> stabs) throws CancelledException, StabsParseException {
+		return parse(stabs, TaskMonitor.DUMMY);
+	}
+
+	/**
+	 * Parses the list of STABS strings into a StabsFile with the provided fileName
+	 * @param stabs the STABS strings
+	 * @param fileName the filename
+	 * @param monitor the task monitor
+	 * @return the StabsFile
+	 * @throws CancelledException if the operation is cancelled
+	 * @throws StabsParseException if an invalid stab is encountered
+	 */
+	public StabsFile parseFile(List<String> stabs, String fileName, TaskMonitor monitor)
+			throws CancelledException, StabsParseException {
+		currentFile = new StabsFile(fileName, this, (int) currentFile.getFileNumber()+1);
+		if (parse(stabs, monitor) > 0) {
+			return currentFile;
+		}
+		return null;
+	}
+
+	public int parse(List<String> stabs, TaskMonitor monitor)
+		throws CancelledException, StabsParseException {
+			monitor.initialize(stabs.size());
+			monitor.setMessage("Parsing Stabs");
+			int parsed = 0;
+			for (;parsed < stabs.size(); parsed++) {
+				// stab all the stabs!
+				// but stop stabbing when requested
+				monitor.checkCanceled();
+				String stab = stabs.get(parsed);
+				Matcher matcher = FILE_PATTERN.matcher(stab);
+				if (matcher.lookingAt()) {
+					// they are conviently in order
+					if (!currentFile.getFilePath().equals(stab)) {
+						currentFile = new StabsFile(stab, this, files.size());
+						files.add(currentFile);
+					}
+					monitor.incrementProgress(1);
+					continue;
+				}
+				matcher.usePattern(STAB_PATTERN);
+				if (matcher.matches()) {
+					long fileIndex = StabsTypeNumber.getFileNumber(matcher.group(2));
+					StabsFile file = fileIndex != -1 ?
+					files.get((int) fileIndex) : currentFile;
+					StabsSymbolDescriptorType type =
+						StabsSymbolDescriptorType.getSymbolType(stab);
+					/*
+					 * all StabTypeDescriptor constructors have the side effect of
+					 * adding themselves to the file. It was the only way I could
+					 * think of to ensure the type was declared before ever being
+					 * referenced.
+					 */
+					switch (type) {
+						case FUNCTION:
+							/*
+							 * must pass current file for a function because
+							 * the type number is the return type
+							 */
+							List<String> subStabs = stabs.subList(parsed, stabs.size());
+							int count = parseFunction(subStabs, currentFile);
+							parsed += count;
+							break;
+						case PARAMETER:
+							Msg.error(this, "Parser encountered parameter token");
+							// create anyway incase it defines a type
+							new StabsParameterSymbolDescriptor(stab, file);
+							break;
+						case COMPOSITE:
+							new StabsCompositeSymbolDescriptor(stab, file);
+							break;
+						case CLASS:
+							file.addClass(new StabsClassSymbolDescriptor(stab, file));
+							break;
+						case TYPEDEF:
+							new StabsTypeDefSymbolDescriptor(stab, file);
+							break;
+						case VARIABLE:
+							new StabsVariableSymbolDescriptor(stab, file);
+						case CONSTANT:
+						case EXCEPTION:
+						case NONE:
+							// afaik there is nothing to parse here
+							break;
+					}
+				}
+				monitor.setProgress(parsed);
+			}
+			return parsed;
+		}
+
+	static String getNameFromStab(String stab) {
+		Matcher matcher = STAB_PATTERN.matcher(stab);
+		if (matcher.matches()) {
+			return matcher.group(1);
+		}
+		return "";
+	}
+
+	private int parseFunction(List<String> subList, StabsFile file) throws StabsParseException {
+		StabsFunctionSymbolDescriptor symbol = new StabsFunctionSymbolDescriptor(subList, file);
+		file.addFunction(symbol);
+		return symbol.getTokenCount();
+	}
+
+	StabsFile getFile(long fileNumber) {
+		return files.get((int) fileNumber);
+	}
+
+	/**
+	 * Gets the stab token for a stab string which has previously been parsed.
+	 *
+	 * @param stab the parsed stab string
+	 * @return the stab token or null if not parsed/invalid.
+	 * @see #parse(List, TaskMonitor)
+	 */
+	public StabsTypeDescriptor getType(String stab) {
+		StabsTypeNumber type = new StabsTypeNumber(stab);
+		return getType(type);
+	}
+
+	public StabsTypeDescriptor getType(long fileNum, long typeNum) {
+		StabsTypeNumber type = new StabsTypeNumber(fileNum, typeNum);
+		return getType(type);
+	}
+
+	StabsTypeDescriptor getType(StabsTypeNumber type) {
+		StabsFile file = files.get(type.fileNumber.intValue());
+		return file.getType(type);
+	}
+
+	/**
+	 * @return the program
+	 */
+	public Program getProgram() {
+		return program;
+	}
+
+	/**
+	 * Gets a stream of all parsed function descriptors
+	 * @return the stream of function descriptors
+	 */
+	public Stream<StabsFunctionSymbolDescriptor> getFunctions() {
+		return files.stream()
+					.map(StabsFile::getFunctions)
+					.flatMap(Set::stream);
+	}
+
+	/**
+	 * Gets a stream of all parsed class descriptors
+	 * @return the stream of class descriptors
+	 */
+	public Stream<StabsClassSymbolDescriptor> getClasses() {
+		return files.stream()
+					.map(StabsFile::getClasses)
+					.flatMap(Set::stream);
+	}
+
+	/**
+	 * Gets a stream of all parsed type descriptors
+	 * @return the stream of type descriptors
+	 */
+	public Stream<StabsTypeDescriptor> getTypes() {
+		return files.stream()
+					.flatMap(StabsFile::getTypeDescriptors);
+	}
+
+	// internal use. this is only used when the parameters and name are unknown
+	public DataType getDefaultFunction(DataType returnType) {
+		if (defaultFunctions.containsKey(returnType)) {
+			return defaultFunctions.get(returnType);
+		}
+		DataTypeManager dtm = program.getDataTypeManager();
+		FunctionDefinition def = new FunctionDefinitionDataType(
+			FUN_PATH, String.format("FunDef_%d", defaultFunctions.size()), dtm);
+		def.setReturnType(returnType);
+		DataType result = dtm.resolve(def, DataTypeConflictHandler.KEEP_HANDLER);
+		defaultFunctions.put(returnType, result);
+		return result;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsSymbolDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsSymbolDescriptor.java
new file mode 100644
index 0000000000..67164ab10e
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsSymbolDescriptor.java
@@ -0,0 +1,43 @@
+package ghidra.app.util.bin.format.stabs;
+
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.program.model.data.DataType;
+
+public interface StabsSymbolDescriptor {
+
+	/**
+	 * Gets the name of the symbol
+	 * @return the symbol's name
+	 */
+	String getName();
+
+	/**
+	 * Gets the original stab string field
+	 * @return the original stab
+	 */
+	String getStab();
+
+	/**
+	 * Gets the DataType corresponding to this symbol
+	 * @return the symbol's DataType or null if there is none
+	 */
+	DataType getDataType();
+
+	/**
+	 * Gets the file this symbol was declared in
+	 * @return the StabFile containing this symbol
+	 */
+	StabsFile getFile();
+
+	/**
+	 * Gets the symbol descriptor type
+	 * @return the type for this symbol descriptor
+	 */
+	StabsSymbolDescriptorType getSymbolDescriptorType();
+
+	/**
+	 * Gets the type information field following the symbol descriptor if any
+	 * @return the type information or null if there is none
+	 */
+	StabsTypeDescriptor getTypeInformation();
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsSymbolDescriptorType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsSymbolDescriptorType.java
new file mode 100644
index 0000000000..228624c137
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsSymbolDescriptorType.java
@@ -0,0 +1,116 @@
+package ghidra.app.util.bin.format.stabs;
+
+/**
+ * Enum constants for possible Stab Symbol Descriptor Types
+ */
+public enum StabsSymbolDescriptorType {
+	/** Variable Symbol */
+	VARIABLE,
+	/** Function Parameter Symbol */
+	PARAMETER,
+	/** Constant Symbol */
+	CONSTANT,
+	/** Exception Symbol */
+	EXCEPTION,
+	/** Function Symbol */
+	FUNCTION,
+	/** Composite: Structure, Union, Enum Symbols */
+	COMPOSITE,
+	/** C++ Class Symbol*/
+	CLASS,
+	/** Typedef Symbol */
+	TYPEDEF,
+	/** Invalid or Unknown Symbol */
+	NONE;
+
+	private static enum Groups {
+		NAME,
+		CODE
+	}
+
+	private static final String PATTERN = String.format(
+		"(?<%%s>%s)(?<%%s>[\\d\\-\\(abcCdDfFGiIJLmpPQRrSstTvVX])", StabsParser.NAME_PATTERN);
+
+	private static final StabsTokenizer<Groups> TOKENIZER =
+		new StabsTokenizer<>(PATTERN, Groups.class);
+
+	/**
+	 * Gets the appropriate StabSymbolDescriptorType based on the provided stab
+	 * @param stab the stab string
+	 * @return the appropriate StabSymbolDescriptorType
+	 */
+	public static StabsSymbolDescriptorType getSymbolType(String stab) {
+		StabsToken<Groups> token = TOKENIZER.getToken(stab);
+		StabsSymbolDescriptorType result = getSymbolType(token.getChar(Groups.CODE));
+		if (result == COMPOSITE) {
+			if (StabsClassSymbolDescriptor.isClass(stab.toString())) {
+				return CLASS;
+			}
+			if (stab.charAt(token.getLength()) == 't') {
+				char c = stab.charAt(token.getLength()+1);
+				if (c >= '0' && c <= '9') {
+					// gcc2 does this
+					return TYPEDEF;
+				}
+			}
+		}
+		return result;
+	}
+
+	/**
+	 * Gets the appropriate StabSymbolDescriptorType for the provided character
+	 * @param c the symbol descriptor character
+	 * @return the appropriate StabSymbolDescriptorType
+	 */
+	public static StabsSymbolDescriptorType getSymbolType(char c) {
+		switch(c) {
+			case 'c': // constant
+				return CONSTANT;
+			case 'C': // caught exception
+				return EXCEPTION;
+			// PARAMETERS
+			case 'p': // stack
+			case 'P': // register (GNU)
+			case 'R': // register (IBM)
+			case 'v': // passed by reference in arg list
+			case 'a': // passed by reference in register
+				return PARAMETER;
+			// FUNCTIONS
+			case 'f': // file
+			case 'F': // global
+			case 'I': // nested
+			case 'J': // nested
+			case 'm': // module
+			case 'Q': // static
+				return FUNCTION;
+			// VARIABLES
+			case '(': // stack (this is really no char '')
+			case '-': // stack
+			case '0': // 0 - 9 are stack
+			case '1':
+			case '2':
+			case '3':
+			case '4':
+			case '5':
+			case '6':
+			case '7':
+			case '8':
+			case '9':
+			case 'b': // based (fortran array allocated via malloc)
+			case 'd': // float register
+			case 'r': // register
+			case 'G': // global
+			case 's': // local
+			case 'S': // global static
+			case 'V': // local static
+				return VARIABLE;
+			case 't':
+				return TYPEDEF;
+			case 'T':
+				return COMPOSITE;
+			default:
+				// otherwise the info should be handled by an analyzer
+				return NONE;
+		}
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsToken.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsToken.java
new file mode 100644
index 0000000000..4f709d9ea4
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsToken.java
@@ -0,0 +1,77 @@
+package ghidra.app.util.bin.format.stabs;
+
+import java.util.regex.Matcher;
+
+public class StabsToken<E extends Enum<E>> {
+
+	private final Matcher matcher;
+
+	/**
+	 * Constructs a new StabsToken
+	 * @param matcher the tokens matcher
+	 */
+	public StabsToken(Matcher matcher) {
+		this.matcher = matcher;
+	}
+
+	@Override
+	public String toString() {
+		return matcher.group();
+	}
+
+	/**
+	 * Gets the matcher group for this Enum Value
+	 * @param value the group's enum value
+	 * @return the matched group
+	 * @see Matcher#group(String)
+	 */
+	public String get(E value) {
+		return matcher.group(value.name());
+	}
+
+	/**
+	 * Gets the character at the start of the matched group
+	 * @param value the group's enum value
+	 * @return the character at the start of the matched group
+	 * @see Matcher#group(String)
+	 */
+	public char getChar(E value) {
+		return matcher.group(value.name()).charAt(0);
+	}
+
+	/**
+	 * Gets the starting index of the matched group
+	 * @param value the group's enum value
+	 * @return the starting index
+	 * @see Matcher#start(String)
+	 */
+	public int start(E value) {
+		return matcher.start(value.name());
+	}
+
+	/**
+	 * Gets the ending index of the matched group
+	 * @param value the group's enum value
+	 * @return the ending index
+	 * @see Matcher#end(String)
+	 */
+	public int end(E value) {
+		return matcher.end(value.name());
+	}
+
+	/**
+	 * Gets the matcher being used for this StabToken
+	 * @return the matcher
+	 */
+	public Matcher getMatcher() {
+		return matcher;
+	}
+
+	/**
+	 * Gets the length of this token
+	 * @return the length
+	 */
+	public int getLength() {
+		return matcher.group().length();
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTokenizer.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTokenizer.java
new file mode 100644
index 0000000000..5397d377bc
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTokenizer.java
@@ -0,0 +1,82 @@
+package ghidra.app.util.bin.format.stabs;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.regex.MatchResult;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+
+// Couldn't figure out how to link to the id groupname in Pattern
+/**
+ * A factory for generating StabTokens
+ * @param <E> The enum to use for accessing the StabToken Groups.
+ * The enum names MUST conform to the Pattern group naming rules.
+ */
+public class StabsTokenizer<E extends Enum<E>> {
+
+	private final Pattern pattern;
+
+	/**
+	 * Constructs a new StabsTokenizer
+	 * @param regex the regex to use. The provided regex string is expected to have
+	 * a string conversion <code>%s</code> for each value in the enum parameter.
+	 * @param groups the enum class to use for grouping
+	 * @see java.util.Formatter Formatter
+	 */
+	public StabsTokenizer(String regex, Class<E> groups) {
+		Object[] groupNames = Arrays.stream(groups.getEnumConstants())
+									.map(E::name)
+									.toArray();
+		this.pattern = Pattern.compile(String.format(regex, groupNames));
+	}
+
+	@Override
+	public String toString() {
+		return pattern.pattern();
+	}
+
+	/**
+	 * Generates a StabToken from the provided stab string
+	 * @param stab the stab string
+	 * @return a new StabToken
+	 */
+	public StabsToken<E> getToken(String stab) {
+		final Matcher matcher = pattern.matcher(stab);
+		if (matcher.lookingAt()) {
+			return new StabsToken<>(matcher);
+		}
+		throw new IllegalStateException(stab + " doesn't match the pattern "+pattern);
+	}
+
+	/**
+	 * Generates a StabToken for all found matches in the provided stab string
+	 * @param stab the stab string
+	 * @return a new list of StabTokens
+	 */
+	public List<StabsToken<E>> getTokens(String stab) {
+		final Matcher matcher = pattern.matcher(stab);
+		return matcher.results()
+					  .map(MatchResult::group)
+					  .map(this::getToken)
+					  .collect(Collectors.toList());
+	}
+
+	/**
+	 * Checks if this StabTokenizer can tokenize the provided stab string
+	 * @param stab the stab string
+	 * @return true if it can StabToken can be produced from the stab
+	 * @see Matcher#lookingAt()
+	 */
+	public boolean canTokenize(String stab) {
+		return pattern.matcher(stab).lookingAt();
+	}
+
+	/**
+	 * Gets the pattern being used by this StabTokenizer
+	 * @return the pattern
+	 */
+	public Pattern getPattern() {
+		return pattern;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeDefSymbolDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeDefSymbolDescriptor.java
new file mode 100644
index 0000000000..024922b2d0
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeDefSymbolDescriptor.java
@@ -0,0 +1,110 @@
+package ghidra.app.util.bin.format.stabs;
+
+import java.util.function.Predicate;
+import java.util.regex.Pattern;
+
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptorFactory;
+import ghidra.program.model.data.BuiltIn;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.TypedefDataType;
+
+import static ghidra.program.model.data.DataTypeConflictHandler.REPLACE_HANDLER;
+
+/**
+ * TypeDef implementation of the StabSymbolDescriptor and StabTypeDescriptor
+ */
+public class StabsTypeDefSymbolDescriptor extends AbstractStabsSymbolDescriptor
+	implements StabsTypeDescriptor {
+
+		private static final Predicate<String> VOID_PTR_PATTERN =
+			Pattern.compile("t((\\d+)|(\\((\\d+),(\\d+)\\)))=\\1").asMatchPredicate();
+
+		private final DataType dt;
+		private final StabsTypeNumber typeNumber;
+		private final StabsTypeDescriptor type;
+
+		/**
+		 * Constructs a new StabsTypeDefSymbolDescriptor
+		 * @param stab the portion of the stab containing this descriptor
+		 * @param file the file containing this descriptor
+		 * @throws StabsParseException if the descriptor or one it relies on is invalid
+		 */
+		StabsTypeDefSymbolDescriptor(String stab, StabsFile file) throws StabsParseException {
+			super(stab, file);
+			String subStab = stab.substring(name.length()+1);
+			this.typeNumber = new StabsTypeNumber(subStab);
+			if (StabsUtils.isBuiltin(name)) {
+				this.type = null;
+				this.dt = StabsUtils.getBuiltin(name);
+			} else if (VOID_PTR_PATTERN.test(subStab)) {
+				this.type = null;
+				this.dt = dtm.getPointer(DataType.VOID);
+			} else {
+				String typeStab;
+				if (getTypeSubStab().charAt(0) == 't') {
+					typeStab = getTypeSubStab().substring(1);
+				} else {
+					typeStab = getTypeSubStab();
+				}
+				this.type = StabsTypeDescriptorFactory.getTypeDescriptor(this, typeStab);
+				if (type != null) {
+					this.dt = getTypeDefType();
+				} else {
+					this.dt = null;
+				}
+			}
+			file.addType(this, typeNumber);
+		}
+
+		private DataType getTypeDefType() {
+			switch (type.getType()) {
+				case BUILTIN:
+					return type.getDataType();
+				default:
+					if (type.getDataType().getName().equals(name)) {
+						if (type.getDataType().getCategoryPath().equals(path)) {
+							return type.getDataType();
+						}
+					}
+					DataType tmpDt = dtm.getDataType(path, name);
+					if (tmpDt instanceof BuiltIn && tmpDt.getLength() > 0) {
+						// handles ulong, uint, etc.
+						return tmpDt;
+					}
+					tmpDt = new TypedefDataType(path, name, type.getDataType());
+					return dtm.resolve(tmpDt, REPLACE_HANDLER);
+
+			}
+		}
+
+		@Override
+		public DataType getDataType() {
+			return dt;
+		}
+
+		@Override
+		public StabsSymbolDescriptorType getSymbolDescriptorType() {
+			return StabsSymbolDescriptorType.TYPEDEF;
+		}
+
+		@Override
+		public StabsSymbolDescriptor getSymbolDescriptor() {
+			return this;
+		}
+
+		@Override
+		public StabsTypeDescriptorType getType() {
+			return StabsTypeDescriptorType.TYPE_REFERENCE;
+		}
+
+		@Override
+		public StabsTypeDescriptor getTypeInformation() {
+			return this;
+		}
+
+		@Override
+		public int getLength() {
+			return type.getLength()+1;
+		}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeDescriptorType.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeDescriptorType.java
new file mode 100644
index 0000000000..d4306ef30f
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeDescriptorType.java
@@ -0,0 +1,35 @@
+package ghidra.app.util.bin.format.stabs;
+
+/**
+ * Enum constants for possible Stab Type Descriptor Types
+ */
+public enum StabsTypeDescriptorType {
+	/** Reference to a previously parsed Type Descriptor */
+	TYPE_REFERENCE,
+	/** Builtin Types int, float, etc. */
+	BUILTIN,
+	/** C++ Class Methods */
+	METHOD,
+	/** Pointers and References */
+	REFERENCE,
+	/** AIX Type Attribute */
+	TYPE_ATTRIBUTE,
+	/** Array Type */
+	ARRAY,
+	/** Cobol Picture Type */
+	COBOL,
+	/** Function Type */
+	FUNCTION,
+	/** String Type */
+	STRING,
+	/** Opaque Type */
+	OPAQUE,
+	/** Range Types*/
+	RANGE,
+	/** Miscellaneous Type */
+	MISC,
+	/** Structure, Union or Enum Type */
+	COMPOSITE,
+	/** Forward Declaration for a Structure, Union or Enum */
+	CROSS_REFERENCE;
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeNumber.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeNumber.java
new file mode 100644
index 0000000000..c7b020b512
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsTypeNumber.java
@@ -0,0 +1,102 @@
+package ghidra.app.util.bin.format.stabs;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import ghidra.util.Msg;
+
+/** Container to hold a StabTypeDescriptor's type number */
+public class StabsTypeNumber {
+
+	/** The typeNumber used when none is present */
+	public static final long NO_FILE_NUMBER = -1L;
+
+	/** The file number */
+	public final Long fileNumber;
+	/** The type number */
+	public final Long typeNumber;
+
+	/** The regex pattern used for matching a type number */
+	public static final Pattern TYPE_NUMBER_PATTERN =
+		Pattern.compile("(\\d+)|(\\((\\d+),(\\d+)\\))");
+
+	/**
+	 * Constructs a new StabsTypeNumber
+	 * @param stab the stab containing the type number
+	 */
+	public StabsTypeNumber(String stab) {
+		Matcher matcher = TYPE_NUMBER_PATTERN.matcher(stab);
+		if (matcher.find()) {
+			if (matcher.group().contains(",")) {
+				fileNumber = Long.parseLong(matcher.group(3));
+				typeNumber = Long.parseLong(matcher.group(4));
+			} else {
+				fileNumber = NO_FILE_NUMBER;
+				typeNumber = Long.parseLong(matcher.group());
+			}
+		} else {
+			Msg.error(this, "remaining stub doesn't match expected pattern.\n"+stab);
+			fileNumber = null;
+			typeNumber = null;
+		}
+	}
+
+	/**
+	 * Constructs a new StabsTypeNumber
+	 * @param file the file number to use or {@value #NO_FILE_NUMBER}
+	 * @param index the type number to use
+	 */
+	public StabsTypeNumber(long file, long index) {
+		fileNumber = file;
+		typeNumber = index;
+	}
+
+	static long getFileNumber(String stab) {
+		Matcher matcher = TYPE_NUMBER_PATTERN.matcher(stab);
+		if (matcher.matches()) {
+			if (matcher.group(1).contains(",")) {
+				return Long.parseLong(matcher.group(4));
+			}
+		}
+		return NO_FILE_NUMBER;
+	}
+
+	@Override
+	public String toString() {
+		if (fileNumber == NO_FILE_NUMBER) {
+			return typeNumber.toString();
+		}
+		return String.format("(%d,%d)", fileNumber, typeNumber);
+	}
+
+	@Override
+	public boolean equals(Object o) {
+		if (o instanceof StabsTypeNumber) {
+			final StabsTypeNumber other = (StabsTypeNumber) o;
+			return other.fileNumber == fileNumber && other.typeNumber == typeNumber;
+		}
+		return false;
+	}
+
+	/**
+	 * Checks if this StabTypeNumber has a valid file number.
+	 * @return true if a file number is present
+	 */
+	public boolean hasFileNumber() {
+		return fileNumber != NO_FILE_NUMBER;
+	}
+
+	/**
+	 * @return the fileNumber
+	 */
+	public Long getFileNumber() {
+		return fileNumber;
+	}
+
+	/**
+	 * @return the typeNumber
+	 */
+	public Long getTypeNumber() {
+		return typeNumber;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsUtils.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsUtils.java
new file mode 100644
index 0000000000..d8818602fe
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsUtils.java
@@ -0,0 +1,177 @@
+package ghidra.app.util.bin.format.stabs;
+
+import java.math.BigInteger;
+import java.util.List;
+import java.util.Map;
+
+import ghidra.app.util.bin.format.stabs.cpp.StabsMemberSymbolDescriptor;
+import ghidra.app.util.opinion.ElfLoader;
+import ghidra.app.util.opinion.MachoLoader;
+import ghidra.program.model.data.*;
+import ghidra.program.model.lang.CompilerSpec;
+import ghidra.program.model.listing.Program;
+
+public class StabsUtils {
+
+	private static final Map<String, DataType> BUILTIN_TYPES = Map.ofEntries(
+		Map.entry("int", IntegerDataType.dataType),
+		Map.entry("char", CharDataType.dataType),
+		Map.entry("void", VoidDataType.dataType),
+		Map.entry("long int", LongDataType.dataType),
+		Map.entry("unsigned int", UnsignedIntegerDataType.dataType),
+		Map.entry("long unsigned int", UnsignedLongDataType.dataType),
+		Map.entry("long long int", LongLongDataType.dataType),
+		Map.entry("long long unsigned int", UnsignedLongLongDataType.dataType),
+		Map.entry("short int", ShortDataType.dataType),
+		Map.entry("short unsigned int", UnsignedShortDataType.dataType),
+		Map.entry("signed char", SignedCharDataType.dataType),
+		Map.entry("unsigned char", UnsignedCharDataType.dataType),
+		Map.entry("float", FloatDataType.dataType),
+		Map.entry("double", DoubleDataType.dataType),
+		Map.entry("long double", LongDataType.dataType),
+		Map.entry("complex float", FloatComplexDataType.dataType),
+		Map.entry("complex double", DoubleComplexDataType.dataType),
+		Map.entry("complex long double", LongDoubleComplexDataType.dataType),
+		Map.entry("__float128", Float16DataType.dataType),
+		Map.entry("__int128 unsigned", UnsignedInteger16DataType.dataType),
+		Map.entry("__int128", Integer16DataType.dataType),
+		Map.entry("__int128_t", Integer16DataType.dataType),
+		Map.entry("__uint128_t", UnsignedInteger16DataType.dataType),
+		Map.entry("char16_t", WideChar16DataType.dataType),
+		Map.entry("char32_t", WideChar32DataType.dataType),
+		Map.entry("bool", BooleanDataType.dataType),
+		Map.entry("wchar_t", WideCharDataType.dataType),
+		Map.entry("__wchar_t", WideCharDataType.dataType)
+	);
+
+	private StabsUtils() {
+		// static utility class
+	}
+
+	/**
+	 * Checks if the program was compiled by gcc
+	 * @param program the program
+	 * @return true if copiled by gcc
+	 */
+	public static boolean isGnu(Program program) {
+		// copied from GnuDemangler#canDemangle
+		String executableFormat = program.getExecutableFormat();
+		if (isELF(executableFormat) || isMacho(executableFormat)) {
+			return true;
+		}
+
+		//check if language is GCC
+		CompilerSpec compilerSpec = program.getCompilerSpec();
+		if (compilerSpec.getCompilerSpecID().getIdAsString().toLowerCase().indexOf(
+			"windows") == -1) {
+			return true;
+		}
+		return false;
+	}
+
+	private static boolean isELF(String executableFormat) {
+		// copied from GnuDemangler
+		return executableFormat != null && executableFormat.indexOf(ElfLoader.ELF_NAME) != -1;
+	}
+
+	private static boolean isMacho(String executableFormat) {
+		// copied from GnuDemangler
+		return executableFormat != null && executableFormat.indexOf(MachoLoader.MACH_O_NAME) != -1;
+	}
+
+	/**
+	 * Gets the number of bytes required for the integer value
+	 * @param value the value to get the size of
+	 * @return the size of the value in bytes
+	 */
+	public static int getIntegerSize(long value) {
+		int i = 0;
+		do {
+			i++;
+			value >>= Byte.SIZE;
+		} while (value != 0);
+		return i;
+	}
+
+	/**
+	 * Gets the number of bytes required for the integer value
+	 * @param value the value to get the size of
+	 * @return the size of the value in bytes
+	 */
+	public static int getIntegerSize(BigInteger value) {
+		int i = 0;
+		do {
+			i++;
+			value = value.shiftRight(Byte.SIZE);
+		} while (value.compareTo(BigInteger.ZERO) != 0);
+		return i;
+	}
+
+	/**
+	 * Checks if the type name is a builtin type
+	 * @param typeName the type name
+	 * @return true if a builtin type name
+	 */
+	public static boolean isBuiltin(String typeName) {
+		return BUILTIN_TYPES.containsKey(typeName);
+	}
+
+	/**
+	 * Gets the builtin type of the type name
+	 * @param typeName the type name
+	 * @return the builtin data type
+	 */
+	public static DataType getBuiltin(String typeName) {
+		if (isBuiltin(typeName)) {
+			return BUILTIN_TYPES.get(typeName);
+		}
+		return null;
+	}
+
+	/**
+	 * Adds the members to the DataType only if the DataType is a Composite
+	 * @param dt the datatype
+	 * @param members the members to add
+	 * @throws InvalidDataTypeException if the member is determined to be a bitfield
+	 * but is not a valid bitfield datatype.
+	 */
+	public static void addCompositeMembers(DataType dt, List<StabsMemberSymbolDescriptor> members)
+		throws InvalidDataTypeException {
+			if (!(dt instanceof Composite)) {
+				return;
+			}
+			// c++ unions are classes. Must cast to Composite
+			Composite comp = (Composite) dt;
+			for (StabsMemberSymbolDescriptor member : members) {
+				String name = member.getName();
+				String modifier = member.getModifier().getDeclaration();
+				if (modifier.isEmpty()) {
+					modifier = null;
+				}
+				DataType compDt = member.getDataType();
+				int bitOffset = member.getBitPosition();
+				int bitSize = member.getBitSize();
+				if (isBitfield(bitOffset, bitSize)) {
+					if (BitFieldDataType.isValidBaseDataType(compDt)) {
+						comp.addBitField(compDt, bitSize, name, modifier);
+					}
+				} else if (comp instanceof Structure && bitOffset >= 0 && bitSize > 0) {
+					// if we know where it should be, ensure it goes there
+					// right shift by 3 to convert bit offset/size to byte offset/size
+					((Structure) comp).insertAtOffset(
+						bitOffset >> 3, compDt, bitSize >> 3, name, modifier);
+				} else if (member.isFlexibleArray()) {
+					((Structure) comp).add(new ArrayDataType(compDt, 0, -1), 0, name, modifier);
+				} else {
+					comp.add(compDt, name, modifier);
+				}
+			}
+	}
+
+	private static boolean isBitfield(int bitOffset, int bitSize) {
+		if (bitOffset < 0 || bitSize < 0) {
+			return false;
+		}
+		return (bitOffset % Byte.SIZE != 0) || (bitSize % Byte.SIZE != 0);
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsVariableSymbolDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsVariableSymbolDescriptor.java
new file mode 100644
index 0000000000..507d8971ff
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/StabsVariableSymbolDescriptor.java
@@ -0,0 +1,101 @@
+package ghidra.app.util.bin.format.stabs;
+
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptorFactory;
+import ghidra.program.model.data.DataType;
+
+/**
+ * Variable implementation of the StabSymbolDescriptor
+ */
+public final class StabsVariableSymbolDescriptor extends AbstractStabsSymbolDescriptor {
+
+	/** Potential Variable Types */
+	public enum VariableType {
+		/** Stack Variable */
+		STACK,
+		/** Global Variable */
+		GLOBAL,
+		/** Register Variable */
+		REGISTER,
+		/** Statically Allocated Block of Variables */
+		COMMON_BLOCK,
+		/** Static Variable */
+		STATIC,
+		/** Fortran Pointer Based Variable */
+		BASED,
+		/** Function Parameter */
+		PARAMETER,
+		/** Local Variable */
+		LOCAL;
+	}
+
+	private final VariableType vType;
+	private final StabsTypeDescriptor type;
+
+	/**
+	 * Constructs a new StabsVariableSymbolDescriptor
+	 * @param stab the portion of the stab containing this descriptor
+	 * @param file the file containing this descriptor
+	 * @throws StabsParseException if the descriptor or one it relies on is invalid
+	 */
+	StabsVariableSymbolDescriptor(String stab, StabsFile file) throws StabsParseException {
+		super(stab, file);
+		this.vType = doGetVariableType();
+		String typeStab;
+		if (vType == VariableType.STACK) {
+			typeStab = stab.substring(stab.indexOf(':')+1);
+		} else {
+			typeStab = stab.substring(stab.indexOf(':')+2);
+		}
+		this.type = StabsTypeDescriptorFactory.getTypeDescriptor(this, typeStab);
+	}
+
+	@Override
+	public DataType getDataType() {
+		return type.getDataType();
+	}
+
+	@Override
+	public StabsSymbolDescriptorType getSymbolDescriptorType() {
+		return StabsSymbolDescriptorType.VARIABLE;
+	}
+
+	private VariableType doGetVariableType() throws StabsParseException {
+		switch (descriptor) {
+			case '(':
+			case '-':
+			case '0':
+			case '1':
+			case '2':
+			case '3':
+			case '4':
+			case '5':
+			case '6':
+			case '7':
+			case '8':
+			case '9':
+				return VariableType.STACK;
+			case 'b':
+				return VariableType.BASED;
+			case 'd':
+			case 'r':
+				return VariableType.REGISTER;
+			case 'G':
+				return VariableType.GLOBAL;
+			case 's':
+				return VariableType.LOCAL;
+			case 'S':
+			case 'V':
+				return VariableType.STATIC;
+			default:
+				throw new StabsParseException(name, stab);
+		}
+	}
+
+	/**
+	 * @return the variable type
+	 */
+	public VariableType getVariableType() {
+		return vType;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsBaseClassDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsBaseClassDescriptor.java
new file mode 100644
index 0000000000..34f7032985
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsBaseClassDescriptor.java
@@ -0,0 +1,124 @@
+package ghidra.app.util.bin.format.stabs.cpp;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import ghidra.app.util.bin.format.stabs.StabsClassSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsToken;
+import ghidra.app.util.bin.format.stabs.StabsTokenizer;
+import ghidra.app.util.bin.format.stabs.StabsTypeNumber;
+import ghidra.app.util.bin.format.stabs.StabsClassSymbolDescriptor.Visibility;
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.program.model.data.DataType;
+
+import static ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptorFactory.getTypeDescriptor;
+
+/**
+ * Helper Class for C++ Inherited Base Classes
+ */
+public final class StabsBaseClassDescriptor {
+
+	private static final Pattern BASE_PATTERN = Pattern.compile("(?<!(operator))!(\\d+),");
+
+	private static enum Groups {
+		VIRTUAL,
+		MODIFIER,
+		OFFSET,
+		TYPE
+	}
+
+	private static final String PATTERN =
+		String.format("(?<%%s>[01])(?<%%s>[0129])(?<%%s>\\-?\\d+),(?<%%s>(%s)(=xs\\w+:)?);",
+			StabsTypeNumber.TYPE_NUMBER_PATTERN);
+
+	private static final StabsTokenizer<Groups> TOKENIZER =
+		new StabsTokenizer<>(PATTERN, Groups.class);
+
+	private final StabsToken<Groups> token;
+	private final StabsTypeDescriptor type;
+
+	/**
+	 * Gets a list of all found base classes in the provided stab
+	 * @param symbol the class descriptor
+	 * @param stab the stab
+	 * @return a list of all found base classes
+	 * @throws StabsParseException if an error occurs while parsing the stab
+	 */
+	public static List<StabsBaseClassDescriptor> getBases(StabsClassSymbolDescriptor symbol,
+		String stab) throws StabsParseException {
+			int index = getBaseStartIndex(stab);
+			if (index != -1) {
+				List<StabsToken<Groups>> tokens =
+					TOKENIZER.getTokens(stab.substring(index));
+				List<StabsBaseClassDescriptor> bases = new ArrayList<>(tokens.size());
+				for (StabsToken<Groups> token : tokens) {
+					bases.add(new StabsBaseClassDescriptor(symbol, token));
+				}
+				return Collections.unmodifiableList(bases);
+			}
+			return Collections.emptyList();
+	}
+
+	/**
+	 * Gets the starting index of the first base class in the stab string
+	 * @param stab the stab string
+	 * @return the index in the stab string or -1 if none are found
+	 */
+	public static int getBaseStartIndex(String stab) {
+		Matcher matcher = BASE_PATTERN.matcher(stab);
+		if (matcher.find()) {
+			return matcher.end();
+		}
+		return -1;
+	}
+
+	private StabsBaseClassDescriptor(StabsSymbolDescriptor symbol, StabsToken<Groups> token)
+		throws StabsParseException {
+			this.token = token;
+			String subStab = token.toString().substring(token.start(Groups.TYPE));
+			this.type = getTypeDescriptor(symbol, subStab);
+	}
+
+	/**
+	 * @return the isVirtual
+	 */
+	public boolean isVirtual() {
+		return token.get(Groups.VIRTUAL).charAt(0) == '1';
+	}
+
+	/**
+	 * @return the modifier
+	 */
+	public Visibility getModifier() {
+		return Visibility.getVisibility(token.get(Groups.MODIFIER));
+	}
+
+	/**
+	 * @return the offset
+	 */
+	public int getOffset() {
+		// divide by 8 to convert bits to bytes
+		return (int) Long.parseLong(token.get(Groups.OFFSET)) >> 3;
+	}
+
+	/**
+	 * Gets the DataType of this base class
+	 * @return the base classes data type
+	 */
+	public DataType getDataType() {
+		return type.getDataType();
+	}
+
+	/**
+	 * Gets the length of this descriptor
+	 * @return the length of this descriptor
+	 */
+	public int getLength() {
+		return token.getLength();
+	}
+}
\ No newline at end of file
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsMemberSymbolDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsMemberSymbolDescriptor.java
new file mode 100644
index 0000000000..95c7124255
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsMemberSymbolDescriptor.java
@@ -0,0 +1,161 @@
+package ghidra.app.util.bin.format.stabs.cpp;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsToken;
+import ghidra.app.util.bin.format.stabs.StabsTokenizer;
+import ghidra.app.util.bin.format.stabs.StabsTypeDescriptorType;
+import ghidra.app.util.bin.format.stabs.StabsClassSymbolDescriptor.Visibility;
+import ghidra.app.util.bin.format.stabs.types.StabsArrayTypeDescriptor;
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.app.util.bin.format.stabs.types.StabsTypeReferenceTypeDescriptor;
+import ghidra.app.util.demangler.DemangledObject;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.listing.Program;
+
+import static ghidra.app.util.demangler.DemanglerUtil.demangle;
+import static ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptorFactory.getTypeDescriptor;
+
+/**
+ * Helper Class for Composite and C++ Class Members
+ */
+public final class StabsMemberSymbolDescriptor {
+
+	private static enum Groups {
+		NAME,
+		MODIFIER,
+		STAB,
+		MANGLED,
+		BITPOS,
+		BITSIZE
+	}
+
+	private static final String PATTERN =
+		"(?<%s>[A-Za-z_]\\w*)\\s*(?=(?:(?<!:):(?!:))):(?:/(?<%s>[0129]))?(?<%s>[^,].*?)"
+		+"((?::(?<%s>.*?)|(?:,(?<%s>\\d+),(?<%s>\\d+))));+";
+	private static final StabsTokenizer<Groups> TOKENIZER =
+		new StabsTokenizer<>(PATTERN, Groups.class);
+
+	private final Program program;
+	private final StabsToken<Groups> token;
+	private final DemangledObject demangled;
+	private final StabsTypeDescriptor type;
+
+	/**
+	 * Gets a list of all found composite members in the provided stab
+	 * @param symbol the stab descriptor
+	 * @param stab the stab
+	 * @return a list of all found members
+	 * @throws StabsParseException if an error occurs while parsing the stab
+	 */
+	public static List<StabsMemberSymbolDescriptor> getMembers(StabsSymbolDescriptor symbol,
+		String stab) throws StabsParseException {
+			List<StabsToken<Groups>> tokens = TOKENIZER.getTokens(stab);
+			if (!tokens.isEmpty()) {
+				List<StabsMemberSymbolDescriptor> members = new ArrayList<>(tokens.size());
+				for (StabsToken<Groups> token : tokens) {
+					members.add(new StabsMemberSymbolDescriptor(symbol, token));
+				}
+				members = new ArrayList<>(members);
+				return Collections.unmodifiableList(members);
+			}
+			return Collections.emptyList();
+	}
+
+	private StabsMemberSymbolDescriptor(StabsSymbolDescriptor symbol, StabsToken<Groups> token)
+		throws StabsParseException {
+			this.program = symbol.getFile().getProgram();
+			this.token = token;
+			this.demangled = doGetDemangledObject();
+			this.type = getTypeDescriptor(symbol, token.get(Groups.STAB));
+	}
+
+	private DemangledObject doGetDemangledObject() {
+		if (token.get(Groups.MANGLED) != null) {
+			return demangle(program, token.get(Groups.MANGLED));
+		}
+		return null;
+	}
+
+	/**
+	 * Gets the name of this class member
+	 * @return the class members name
+	 */
+	public String getName() {
+		return token.get(Groups.NAME);
+	}
+
+	/**
+	 * Gets the DataType of this class member
+	 * @return the class member's data type
+	 */
+	public DataType getDataType() {
+		return type.getDataType().clone(program.getDataTypeManager());
+	}
+
+	/**
+	 * Gets the access modifier for this class member
+	 * @return the class member's access modifier
+	 */
+	public Visibility getModifier() {
+		return Visibility.getVisibility(token.get(Groups.MODIFIER));
+	}
+
+	/**
+	 * Gets the demangled object for the mangled portion of the stab
+	 * @return the demangled object or null if there was no mangled string
+	 */
+	public DemangledObject getDemangledObject() {
+		return demangled;
+	}
+
+	/**
+	 * Gets the bit position of this composite member
+	 * @return the bit position or -1 if not specified
+	 */
+	public int getBitPosition() {
+		if (token.get(Groups.BITPOS) != null) {
+			return Integer.parseInt(token.get(Groups.BITPOS));
+		}
+		return -1;
+	}
+
+	/**
+	 * Gets the bit size of this composite member
+	 * @return the bit size or -1 if not specified
+	 */
+	public int getBitSize() {
+		if (token.get(Groups.BITSIZE) != null) {
+			return Integer.parseInt(token.get(Groups.BITSIZE));
+		}
+		return -1;
+	}
+
+	/**
+	 * Checks if this member is a flexible array component
+	 * @return true if a flexible array component
+	 * @see StabsArrayTypeDescriptor#isTrailingArray()
+	 */
+	public boolean isFlexibleArray() {
+		StabsTypeDescriptor subType = type;
+		if (subType.getType() == StabsTypeDescriptorType.TYPE_REFERENCE) {
+			subType = ((StabsTypeReferenceTypeDescriptor) subType).getSubType();
+			if (subType.getType() == StabsTypeDescriptorType.ARRAY) {
+				return ((StabsArrayTypeDescriptor) subType).isTrailingArray();
+			}
+		}
+		return false;
+	}
+
+	/**
+	 * Gets the length of this descriptor
+	 * @return the length of this descriptor
+	 */
+	public int getLength() {
+		return token.getLength();
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsMethodSymbolDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsMethodSymbolDescriptor.java
new file mode 100644
index 0000000000..ca51a253a4
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/cpp/StabsMethodSymbolDescriptor.java
@@ -0,0 +1,312 @@
+package ghidra.app.util.bin.format.stabs.cpp;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.regex.Pattern;
+
+import ghidra.app.util.bin.format.stabs.StabsClassSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsToken;
+import ghidra.app.util.bin.format.stabs.StabsTokenizer;
+import ghidra.app.util.bin.format.stabs.StabsClassSymbolDescriptor.Visibility;
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.app.util.demangler.Demangled;
+import ghidra.app.util.demangler.DemangledDataType;
+import ghidra.app.util.demangler.DemangledFunction;
+import ghidra.app.util.demangler.DemangledObject;
+import ghidra.app.util.demangler.DemangledType;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.data.CategoryPath;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.FunctionDefinition;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.symbol.Symbol;
+import ghidra.program.model.symbol.SymbolTable;
+import ghidra.util.Msg;
+
+import static ghidra.app.util.demangler.DemanglerUtil.demangle;
+import static ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptorFactory.getTypeDescriptor;
+
+/**
+ * Helper Class for C++ Class Methods
+ */
+public final class StabsMethodSymbolDescriptor {
+
+	private static enum NestedGroups {
+		NAME,
+		GROUP
+	}
+	private static enum Groups {
+		STAB,
+		MANGLED,
+		VISIBILITY,
+		MODIFIER,
+		METHODTYPE,
+		OFFSET,
+		BASE
+	}
+
+	private static final String NESTED_PATTERN =
+		"(?<%s>[^\\s;]+?)\\s*::(?<%s>((((\\d+)|(\\((\\d+),(\\d+)\\))).+?)"
+		+"((?<=:)\\w+?);([0129])([A-D\\*\\.\\?])([\\.\\*\\?])(\\-\\d+;)?(?:(\\d+);)?)+)";
+
+	private static final String PATTERN =
+		"(?<%s>((\\d+)|(\\((\\d+),(\\d+)\\))).*?)"
+		+"(?<=:)(?<%s>\\w+?);(?<%s>[0129])(?<%s>[A-D\\*\\.\\?])(?<%s>[\\.\\*\\?])"
+		+"(?<%s>\\-\\d+;)?(?:(?<%s>\\d+);)?";
+
+	private static final StabsTokenizer<NestedGroups> NESTED_TOKENIZER =
+		new StabsTokenizer<>(NESTED_PATTERN, NestedGroups.class);
+
+	private static final StabsTokenizer<Groups> TOKENIZER =
+		new StabsTokenizer<>(PATTERN, Groups.class);
+
+	private final Program program;
+	private final StabsToken<Groups> token;
+	private final StabsTypeDescriptor type;
+	private final DemangledFunction demangled;
+
+	/**
+	 * Gets a list of all found class methods in the provided stab
+	 * @param symbol the stab descriptor
+	 * @return a list of all found methods
+	 * @throws StabsParseException if an error occurs while parsing the stab
+	 */
+	public static List<StabsMethodSymbolDescriptor> getMethods(StabsClassSymbolDescriptor symbol)
+		throws StabsParseException {
+			List<StabsToken<NestedGroups>> tokens =
+				NESTED_TOKENIZER.getTokens(symbol.getStab());
+			if (!tokens.isEmpty()) {
+				List<StabsMethodSymbolDescriptor> methods = new LinkedList<>();
+				for (StabsToken<NestedGroups> token : tokens) {
+					methods.addAll(getSubMethods(symbol, token));
+				}
+				methods = new ArrayList<>(methods);
+				return Collections.unmodifiableList(methods);
+			}
+			return Collections.emptyList();
+	}
+
+	/**
+	 * Checks if the stab contains any method descriptors
+	 * @param stab the stab string
+	 * @return true if a method descriptor is found
+	 */
+	public static boolean containsMethods(String stab) {
+		Pattern pattern = NESTED_TOKENIZER.getPattern();
+		return pattern.matcher(stab).find();
+	}
+
+	private static List<StabsMethodSymbolDescriptor> getSubMethods(StabsClassSymbolDescriptor symbol,
+		StabsToken<NestedGroups> token) throws StabsParseException {
+			List<StabsToken<Groups>> tokens =
+				TOKENIZER.getTokens(token.get(NestedGroups.GROUP));
+			List<StabsMethodSymbolDescriptor> methods = new ArrayList<>(tokens.size());
+			for (StabsToken<Groups> subToken : tokens) {
+				methods.add(new StabsMethodSymbolDescriptor(
+					symbol, subToken, token.get(NestedGroups.NAME)));
+			}
+			return methods;
+	}
+
+	private StabsMethodSymbolDescriptor(StabsClassSymbolDescriptor symbol, StabsToken<Groups> token,
+		String name) throws StabsParseException {
+			this.program = symbol.getFile().getProgram();
+			this.token = token;
+			this.demangled = doGetDemangledFunction(program, token);
+			this.type = getTypeDescriptor(symbol, token.get(Groups.STAB));
+			if (demangled != null) {
+				fixupDemangled();
+			}
+	}
+
+	private void fixupDemangled() {
+		switch (getModifier()) {
+			case CONST:
+				demangled.setTrailingConst();
+				break;
+			case CONST_VOLATILE:
+				demangled.setTrailingConst();
+			case VOLATILE:
+				demangled.setTrailingVolatile();
+			default:
+				break;
+		}
+		if (getVisibility() != Visibility.NONE) {
+			demangled.setVisibilty(getVisibility().getDeclaration());
+		}
+		demangled.setVirtual(isVirtual());
+		demangled.setStatic(isStatic());
+		if (getDataType() instanceof FunctionDefinition) {
+			DataType retType = ((FunctionDefinition) getDataType()).getReturnType();
+			Demangled ns = convertToNamespaces(retType.getCategoryPath());
+			DemangledDataType ddt = new DemangledDataType(null, null, retType.getName());
+			ddt.setNamespace(ns);
+			demangled.setReturnType(ddt);
+		}
+	}
+
+	private static Demangled convertToNamespaces(CategoryPath path) {
+		Demangled prev = null;
+		for (String s : path.asList()) {
+			Demangled current = new DemangledType(null, null, s);
+			if (prev != null) {
+				current.setNamespace(prev);
+			}
+			prev = current;
+		}
+		return prev;
+	}
+
+	/**
+	 * Gets the first demangled function found in the symbol descriptors stab.
+	 * Useful for determining the correct namespace of a C++ Class.
+	 * @param symbol the symbol descriptor
+	 * @return the first found demangled function or null if none
+	 * @throws StabsParseException if an error occurs parsing the stab
+	 */
+	public static DemangledFunction getDemangledFunction(StabsClassSymbolDescriptor symbol)
+		throws StabsParseException {
+			Program program = symbol.getFile().getProgram();
+			List<StabsToken<Groups>> tokens = TOKENIZER.getTokens(symbol.getStab());
+			if (!tokens.isEmpty()) {
+				for (StabsToken<Groups> token : tokens) {
+					DemangledFunction fun = doGetDemangledFunction(program, token);
+					if (fun != null) {
+						return fun;
+					}
+				}
+			}
+			return null;
+	}
+
+	private static DemangledFunction doGetDemangledFunction(Program program,
+		StabsToken<Groups> token) throws StabsParseException {
+			try {
+				DemangledObject result = demangle(program, token.get(Groups.MANGLED));
+				if (result instanceof DemangledFunction) {
+					return (DemangledFunction) result;
+				}
+				return null;
+			} catch (RuntimeException e) {
+				// #1457
+				Msg.error(StabsMethodSymbolDescriptor.class, e);
+				return null;
+			}
+	}
+
+	/**
+	 * Gets the DataType for this class method
+	 * @return the class method's data type
+	 */
+	public DataType getDataType() {
+		return type.getDataType();
+	}
+
+	/**
+	 * @return the demangled function
+	 */
+	public DemangledFunction getDemangledFunction() {
+		return demangled;
+	}
+
+	/**
+	 * Attempts to locate the address of the described method
+	 * @return the address of the method if found else {@link Address#NO_ADDRESS}
+	 */
+	public Address locateMethod() {
+		SymbolTable table = program.getSymbolTable();
+		List <Symbol> symbols = table.getGlobalSymbols(token.get(Groups.MANGLED));
+		if (symbols.size() == 1) {
+			return symbols.get(0).getAddress();
+		}
+		return Address.NO_ADDRESS;
+	}
+
+	/**
+	 * Gets the visibility of this method
+	 * @return the method's visibility
+	 */
+	public Visibility getVisibility() {
+		return Visibility.getVisibility(token.getChar(Groups.VISIBILITY));
+	}
+
+	/**
+	 * Gets the modifier for this method
+	 * @return the method's modifier
+	 */
+	public MethodModifier getModifier() {
+		return MethodModifier.getModifier(token.getChar(Groups.MODIFIER));
+	}
+
+	/**
+	 * Checks if this is a virtual method
+	 * @return true if this is a virtual method
+	 */
+	public boolean isVirtual() {
+		return token.getChar(Groups.METHODTYPE) == '*';
+	}
+
+	/**
+	 * Checks if this is a static method
+	 * @return true if this is a static method
+	 */
+	public boolean isStatic() {
+		return token.getChar(Groups.METHODTYPE) == '?';
+	}
+
+	/**
+	 * Gets the index of this method in the vtable
+	 * @return the vtable index or -1 if this method is not virtual
+	 */
+	public int getVtableIndex() {
+		if (isVirtual()) {
+			return Integer.parseInt(token.get(Groups.OFFSET)) & Integer.MAX_VALUE;
+		}
+		return -1;
+	}
+
+	/** Potential Method Modifiers */
+	public static enum MethodModifier {
+		NONE,
+		/** const */
+		CONST,
+		/** volatile */
+		VOLATILE,
+		/** const volatile */
+		CONST_VOLATILE;
+
+		private static MethodModifier getModifier(char c) {
+			switch (c) {
+				case 'B':
+					return CONST;
+				case 'C':
+					return VOLATILE;
+				case 'D':
+					return CONST_VOLATILE;
+				default:
+					return NONE;
+			}
+		}
+
+		/**
+		 * Gets the declaration of this visibility modifier
+		 * @return the visibility declaration or an empty string if none
+		 */
+		public String getDeclaration() {
+			switch (this) {
+				case CONST:
+					return "const";
+				case VOLATILE:
+					return "volatile";
+				case CONST_VOLATILE:
+					return "const volatile";
+				default:
+					return "";
+			}
+		}
+	}
+
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsFunctionTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsFunctionTypeDescriptor.java
new file mode 100644
index 0000000000..5afce12f2e
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsFunctionTypeDescriptor.java
@@ -0,0 +1,92 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsTypeNumber;
+import ghidra.app.util.bin.format.stabs.StabsUtils;
+import ghidra.program.model.data.CategoryPath;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.FunctionDefinition;
+import ghidra.program.model.data.FunctionDefinitionDataType;
+import ghidra.program.model.data.ParameterDefinitionImpl;
+
+import static ghidra.program.model.data.DataTypeConflictHandler.REPLACE_EMPTY_STRUCTS_OR_RENAME_AND_ADD_HANDLER;
+import static ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptorFactory.getTypeDescriptor;
+
+abstract class AbstractStabsFunctionTypeDescriptor extends AbstractStabsTypeDescriptor {
+
+	private static final CategoryPath DEFAULT_PATH = new CategoryPath("/stabs/functions");
+
+	private static final Pattern PATTERN =
+		Pattern.compile(String.format("(?:(?:f)|(?:#+))(%s)", StabsTypeNumber.TYPE_NUMBER_PATTERN));
+
+	protected AbstractStabsFunctionTypeDescriptor(StabsSymbolDescriptor symbol, String stab) {
+		super(symbol, stab);
+		if (this.path.isRoot()) {
+			this.path = DEFAULT_PATH;
+		}
+	}
+
+	/**
+	 * Gets the return type descriptor
+	 * @return the return type descriptor
+	 */
+	public abstract StabsTypeDescriptor getReturnType();
+
+	/**
+	 * Gets the parameter type descriptors
+	 * @return the list of parameter type descriptors
+	 * @throws StabsParseException if an error occurs parsing the parameters
+	 */
+	public abstract List<StabsTypeDescriptor> getParameters() throws StabsParseException;
+
+	protected final StabsTypeDescriptor doGetReturnType() throws StabsParseException {
+		Matcher matcher = PATTERN.matcher(stab);
+		if (matcher.lookingAt()) {
+			return getTypeDescriptor(symbol, stab.substring(matcher.start(1)));
+		}
+		return null;
+	}
+
+	private static ParameterDefinitionImpl convertParameter(StabsTypeDescriptor type) {
+		try {
+			return new ParameterDefinitionImpl(null, type.getDataType(), null);
+		} catch (IllegalArgumentException e) {
+			// this cannot occur. If it does then self destruct or something
+			throw new RuntimeException(e);
+		}
+	}
+
+	// necessary side affect of removing unnecessary final void parameter
+	private boolean fixupVarargs(List<StabsTypeDescriptor> parameters) {
+		if (StabsUtils.isGnu(program)) {
+			if (!parameters.isEmpty()) {
+				StabsTypeDescriptor type = parameters.get(parameters.size()-1);
+				if (!type.getDataType().isEquivalent(DataType.VOID)) {
+					return true;
+				}
+				parameters.remove(type);
+			}
+			return true;
+		}
+		return false;
+	}
+
+	protected final DataType doGetDataType() throws StabsParseException {
+		FunctionDefinition def = new FunctionDefinitionDataType(path, symbol.getName(), dtm);
+		List<StabsTypeDescriptor> parameters = new ArrayList<>(getParameters());
+		fixupVarargs(parameters);
+		ParameterDefinitionImpl[] params =
+			parameters.stream()
+					  .map(AbstractStabsFunctionTypeDescriptor::convertParameter)
+					  .toArray(ParameterDefinitionImpl[]::new);
+		def.setArguments(params);
+		def.setReturnType(getReturnType().getDataType());
+		return dtm.resolve(def, REPLACE_EMPTY_STRUCTS_OR_RENAME_AND_ADD_HANDLER);
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsTypeDescriptor.java
new file mode 100644
index 0000000000..ab13eac692
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsTypeDescriptor.java
@@ -0,0 +1,49 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import ghidra.app.util.bin.format.stabs.StabsFile;
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.program.model.data.CategoryPath;
+import ghidra.program.model.data.DataTypeManager;
+import ghidra.program.model.listing.Program;
+
+/**
+ * Abstract Base Class for StabTypeDescriptor Implementations
+ */
+abstract class AbstractStabsTypeDescriptor implements StabsTypeDescriptor {
+
+	protected final String stab;
+	protected final StabsFile file;
+	protected final Program program;
+	protected final DataTypeManager dtm;
+	protected CategoryPath path;
+	protected final StabsSymbolDescriptor symbol;
+
+	protected AbstractStabsTypeDescriptor(StabsSymbolDescriptor token, String stab) {
+		this.symbol = token;
+		this.stab = stab;
+		this.file = token.getFile();
+		this.program = file.getProgram();
+		this.dtm = program.getDataTypeManager();
+		this.path = file.getCategoryPath();
+	}
+
+	protected AbstractStabsTypeDescriptor(StabsTypeDescriptor descriptor, String stab) {
+		this(descriptor.getSymbolDescriptor(), stab);
+	}
+
+	@Override
+	public String getStab() {
+		return stab;
+	}
+
+	@Override
+	public StabsSymbolDescriptor getSymbolDescriptor() {
+		return symbol;
+	}
+
+	protected StabsParseException getError() {
+		return new StabsParseException(symbol.getName(), stab);
+	}
+
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsTypeReferenceTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsTypeReferenceTypeDescriptor.java
new file mode 100644
index 0000000000..22384b2a41
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/AbstractStabsTypeReferenceTypeDescriptor.java
@@ -0,0 +1,59 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsTypeNumber;
+
+/**
+ * Type Descriptor which is a reference to a previously parsed type descriptor
+ */
+abstract class AbstractStabsTypeReferenceTypeDescriptor extends AbstractStabsTypeDescriptor {
+
+	protected final StabsTypeNumber typeNumber;
+
+	/**
+	 * Constructs a new AbstractStabTypeReferenceTypeDescriptor
+	 * @param token the token this descriptor is located in
+	 * @param stab the portion of the stab containing this descriptor
+	 * @throws StabsParseException if this descriptor or what it references is invalid
+	 */
+	AbstractStabsTypeReferenceTypeDescriptor(StabsSymbolDescriptor token, String stab) {
+		super(token, stab);
+		this.typeNumber = new StabsTypeNumber(stab);
+	}
+
+	/**
+	 * Gets the referenced type descriptor
+	 * @return the referenced type descriptor
+	 */
+	public abstract StabsTypeDescriptor getSubType();
+
+	protected boolean isDeclaration() {
+		int index = stab.indexOf(typeNumber.toString());
+		int length = typeNumber.toString().length();
+		if (stab.length() > index+length) {
+			return stab.charAt(index+length) == '=';
+		}
+		return false;
+	}
+
+	protected StabsTypeDescriptor doGetSubType() throws StabsParseException {
+		int index = stab.indexOf(typeNumber.toString());
+		int length = typeNumber.toString().length();
+		if (isDeclaration()) {
+			String subStab = stab.substring(index+length+1);
+			file.addType(this, typeNumber);
+			return StabsTypeDescriptorFactory.getTypeDescriptor(symbol, subStab);
+		}
+		return file.getType(typeNumber);
+	}
+
+	@Override
+	public int getLength() {
+		int length = typeNumber.toString().length();
+		if (isDeclaration()) {
+			return getSubType().getLength()+length+1;
+		}
+		return length;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsArrayTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsArrayTypeDescriptor.java
new file mode 100644
index 0000000000..caf1352bc1
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsArrayTypeDescriptor.java
@@ -0,0 +1,98 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import ghidra.app.util.bin.format.stabs.*;
+import ghidra.program.model.data.ArrayDataType;
+import ghidra.program.model.data.DataType;
+
+import static ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptorFactory.getTypeDescriptor;
+
+/**
+ * Array implementation of the StabTypeDescriptor
+ */
+public final class StabsArrayTypeDescriptor extends AbstractStabsTypeDescriptor {
+
+	private static enum Groups {
+		LOWER,
+		UPPER,
+		CONTENTS
+	}
+
+	private static final String INDEX_TYPE_PATTERN = String.format(
+		"(?:(?:@s?\\d+;)?(?:r(?:%1$s));-?\\d+;\\d+;)", StabsTypeNumber.TYPE_NUMBER_PATTERN);
+	private static final String LOWER_PATTERN = "(?<%%s>\\d+)";
+	private static final String UPPER_PATTERN = "(?<%%s>-?\\d+)";
+	private static final String CONTENTS_TYPE_PATTERN = "(?<%%s>%1$s(?:=.+)?)";
+
+	private static final String PATTERN =
+		String.format(
+			"ar(?:%1$s)=?"+INDEX_TYPE_PATTERN+"?;"+LOWER_PATTERN+";"
+			+UPPER_PATTERN+";"+CONTENTS_TYPE_PATTERN,
+			StabsTypeNumber.TYPE_NUMBER_PATTERN);
+
+	private static final StabsTokenizer<Groups> TOKENIZER =
+		new StabsTokenizer<>(PATTERN, Groups.class);
+
+	private final StabsToken<Groups> token;
+	private final DataType dt;
+	private final StabsTypeDescriptor subType;
+	private boolean isTrailingArray = false;
+
+	/**
+	 * Constructs a new StabsArrayTypeDescriptor
+	 * @param symbol the symbol this descriptor is located in
+	 * @param stab the portion of the stab containing this descriptor
+	 * @throws StabsParseException if the descriptor or one it relies on is invalid
+	 */
+	StabsArrayTypeDescriptor(StabsSymbolDescriptor symbol, String stab) throws StabsParseException {
+		super(symbol, stab);
+		this.token = TOKENIZER.getToken(stab);
+		this.subType = getSubType();
+		this.dt = makeArray();
+	}
+
+	private StabsTypeDescriptor getSubType() throws StabsParseException {
+		String subStab = stab.substring(token.start(Groups.CONTENTS));
+		return getTypeDescriptor(symbol, subStab);
+	}
+
+	private DataType makeArray() throws StabsParseException {
+		DataType elementType = subType.getDataType();
+		// minimum index, maximum index, type number
+		if (Long.valueOf(token.get(Groups.LOWER)) == 0) {
+			// sanity check
+
+			// the overflow allows the case where 0xffffffff is
+			// used as the max for a trailing array
+			int size = (int) ((Long.valueOf(token.get(Groups.UPPER))+1) & 0xffffffff);
+			if (size == 0) {
+				isTrailingArray = true;
+				return elementType;
+			}
+			return new ArrayDataType(elementType, size, elementType.getLength());
+		}
+		throw new StabsParseException(symbol.getName(), stab);
+	}
+
+	@Override
+	public DataType getDataType() {
+		return dt;
+	}
+
+	@Override
+	public StabsTypeDescriptorType getType() {
+		return StabsTypeDescriptorType.ARRAY;
+	}
+
+	@Override
+	public int getLength() {
+		return (token.getLength() - token.start(Groups.CONTENTS)) + subType.getLength();
+	}
+
+	/**
+	 * Checks if this array may be a trailing array
+	 * @return true if this is a trailing array.
+	 */
+	public boolean isTrailingArray() {
+		return isTrailingArray;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsBuiltinTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsBuiltinTypeDescriptor.java
new file mode 100644
index 0000000000..a0a9177a5e
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsBuiltinTypeDescriptor.java
@@ -0,0 +1,256 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsTypeDescriptorType;
+import ghidra.app.util.bin.format.stabs.StabsTypeNumber;
+import ghidra.program.model.data.*;
+
+/**
+ * Builtin Type implementation of the StabTypeDescriptor
+ */
+public final class StabsBuiltinTypeDescriptor extends AbstractStabsTypeDescriptor {
+
+	private static final Pattern INTEGER_PATTERN = Pattern.compile("b([su])(c)?\\d+;\\d+;(\\d+);");
+	private static final Pattern NEGATIVE_PATTERN = Pattern.compile("(\\-\\d+).*");
+
+	private final int length;
+	private final BuiltinType type;
+	private final DataType dt;
+
+	/**
+	 * Constructs a new StabsBuiltinTypeDescriptor
+	 * @param symbol the token this descriptor is located in
+	 * @param stab the portion of the stab containing this descriptor
+	 * @throws StabsParseException if this descriptor is invalid
+	 */
+	StabsBuiltinTypeDescriptor(StabsSymbolDescriptor symbol, String stab) throws StabsParseException {
+		super(symbol, stab);
+		this.type = doGetBuiltinType(stab.charAt(0));
+		this.length = type.getLength(symbol, stab);
+		switch (type) {
+			case FLOAT:
+				this.dt = getFloatDataType();
+				break;
+			case INTEGRAL:
+				this.dt = getIntegerDataType();
+				break;
+			case NEGATIVE:
+				this.dt = getNegativeDataType();
+				break;
+			case WIDE_CHAR:
+				this.dt = WideCharDataType.dataType.clone(dtm);
+				break;
+			case AIX_FLOAT:
+				this.dt = getAixFloatDataType();
+				break;
+			case COMPLEX:
+				this.dt = getAixComplexDataType();
+				break;
+			default:
+				throw getError();
+		}
+	}
+
+	private DataType getNegativeDataType() throws StabsParseException {
+		Matcher matcher = NEGATIVE_PATTERN.matcher(stab);
+		if (matcher.matches()) {
+			switch (Integer.valueOf(matcher.group(1))) {
+				case -1:
+				case -15:
+				case -29:
+					return IntegerDataType.dataType.clone(dtm);
+				case -2:
+					return CharDataType.dataType.clone(dtm);
+				case -3:
+				case -28:
+					return ShortDataType.dataType.clone(dtm);
+				case -4:
+					return LongDataType.dataType.clone(dtm);
+				case -5:
+					return ByteDataType.dataType.clone(dtm);
+				case -6:
+				case -21:
+				case -27:
+					return SignedByteDataType.dataType.clone(dtm);
+				case -7:
+					return UnsignedShortDataType.dataType.clone(dtm);
+				case -8:
+				case -9:
+					return UnsignedIntegerDataType.dataType.clone(dtm);
+				case -10:
+					return UnsignedLongDataType.dataType.clone(dtm);
+				case -11:
+					return DataType.VOID;
+				case -12:
+					return FloatDataType.dataType.clone(dtm);
+				case -13:
+					return DoubleDataType.dataType.clone(dtm);
+				case -14:
+					return LongDoubleDataType.dataType.clone(dtm);
+				case -16:
+					return BooleanDataType.dataType.clone(dtm);
+				case -17:
+					return FloatComplexDataType.dataType.clone(dtm);
+				case -18:
+					return DoubleComplexDataType.dataType.clone(dtm);
+				case -19:
+					return dtm.getPointer(StringDataType.dataType);
+				case -20:
+					return CharDataType.dataType.clone(dtm);
+				case -22:
+					return WordDataType.dataType;
+				case -23:
+				case -24:
+					return DWordDataType.dataType;
+				case -25:
+					return Complex8DataType.dataType.clone(dtm);
+				case -26:
+					return Complex16DataType.dataType.clone(dtm);
+				case -30:
+					return WideCharDataType.dataType.clone(dtm);
+				case -31:
+					return LongLongDataType.dataType.clone(dtm);
+				case -32:
+					return UnsignedLongLongDataType.dataType.clone(dtm);
+				case -33:
+					return QWordDataType.dataType;
+				case -34:
+					return SignedQWordDataType.dataType;
+				default:
+					break;
+			}
+		}
+		throw getError();
+	}
+
+	private DataType getIntegerDataType() throws StabsParseException {
+		Matcher matcher = INTEGER_PATTERN.matcher(stab);
+		if (matcher.matches()) {
+			if (matcher.group(2) != null) {
+				return CharDataType.dataType.clone(dtm);
+			}
+			int size = Integer.valueOf(matcher.group(4));
+			if (size == 0) {
+				return DataType.VOID;
+			}
+			if (matcher.group(1).charAt(0) == 's') {
+				return AbstractIntegerDataType.getSignedDataType(size, dtm);
+			}
+			return AbstractIntegerDataType.getUnsignedDataType(size, dtm);
+		}
+		throw getError();
+	}
+
+	private DataType getAixFloatDataType() {
+		int index = stab.indexOf(';');
+		String def = stab.substring(index+1);
+		return AbstractFloatDataType.getFloatDataType(Integer.valueOf(def), dtm);
+	}
+
+	private DataType getAixComplexDataType() throws StabsParseException {
+		int index = stab.indexOf(';');
+		String def = stab.substring(index+1);
+		switch (Integer.valueOf(def)) {
+			case 8:
+				return Complex8DataType.dataType.clone(dtm);
+			case 16:
+				return Complex16DataType.dataType.clone(dtm);
+			case 32:
+				return Complex32DataType.dataType.clone(dtm);
+			default:
+				throw getError();
+		}
+	}
+
+	private DataType getFloatDataType() throws StabsParseException {
+		switch (stab.charAt(1)) {
+			case '1':
+				return FloatDataType.dataType.clone(dtm);
+			case '2':
+				return DoubleDataType.dataType.clone(dtm);
+			case '3':
+				return Complex8DataType.dataType.clone(dtm);
+			case '4':
+				return Complex16DataType.dataType.clone(dtm);
+			case '5':
+				return Complex32DataType.dataType.clone(dtm);
+			case '6':
+				return LongDoubleDataType.dataType.clone(dtm);
+			default:
+				throw getError();
+		}
+	}
+
+	private BuiltinType doGetBuiltinType(char c) throws StabsParseException {
+		switch (c) {
+			case 'b':
+				return BuiltinType.INTEGRAL;
+			case 'c':
+				return BuiltinType.COMPLEX;
+			case 'g':
+				return BuiltinType.AIX_FLOAT;
+			case 'R':
+				return BuiltinType.FLOAT;
+			case 'w':
+				return BuiltinType.WIDE_CHAR;
+			case '-':
+				return BuiltinType.NEGATIVE;
+			default:
+				throw getError();
+		}
+	}
+
+	@Override
+	public DataType getDataType() {
+		return dt;
+	}
+
+	@Override
+	public StabsTypeDescriptorType getType() {
+		return StabsTypeDescriptorType.BUILTIN;
+	}
+
+	@Override
+	public int getLength() {
+		return length;
+	}
+
+	/**
+	 * Gets the BuiltinType this descriptor represents
+	 * @return the BuiltinType
+	 */
+	public BuiltinType getBuiltinType() {
+		return type;
+	}
+
+	/** Potential types represented by a StabBuiltinTypeDescriptor */
+	public static enum BuiltinType {
+		FLOAT("R\\d;\\d+;"),
+		AIX_FLOAT(String.format("g%s;\\d+", StabsTypeNumber.TYPE_NUMBER_PATTERN)),
+		INTEGRAL(INTEGER_PATTERN),
+		COMPLEX(String.format("c%s\\d+", StabsTypeNumber.TYPE_NUMBER_PATTERN)),
+		NEGATIVE(NEGATIVE_PATTERN),
+		WIDE_CHAR("w");
+
+		private final Pattern pattern;
+		private BuiltinType(String pattern) {
+			this.pattern = Pattern.compile(pattern);
+		}
+
+		private BuiltinType(Pattern pattern) {
+			this.pattern = pattern;
+		}
+
+		private int getLength(StabsSymbolDescriptor symbol, String stab) throws StabsParseException {
+			Matcher matcher = pattern.matcher(stab);
+			if (matcher.lookingAt()) {
+				return matcher.group().length();
+			}
+			throw new StabsParseException(symbol.getName(), stab);
+		}
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsCompositeTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsCompositeTypeDescriptor.java
new file mode 100644
index 0000000000..0e3a3c5ad1
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsCompositeTypeDescriptor.java
@@ -0,0 +1,165 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.Optional;
+import java.util.Scanner;
+import java.util.regex.MatchResult;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+
+import ghidra.app.util.bin.format.stabs.*;
+import ghidra.app.util.bin.format.stabs.cpp.StabsMemberSymbolDescriptor;
+import ghidra.program.model.data.*;
+import ghidra.program.model.data.Enum;
+
+import static ghidra.program.model.data.DataTypeConflictHandler.REPLACE_HANDLER;
+
+/**
+ * Composite Type (Structure, Union, Enum) implementation of the StabTypeDescriptor
+ */
+public final class StabsCompositeTypeDescriptor extends AbstractStabsTypeDescriptor {
+
+	private static final Pattern ENUM_SPLITTER = Pattern.compile("([^:]*):(\\d+),?;?");
+	private static final Pattern COMPOSITE_START = Pattern.compile("=?([su]\\d+)");
+
+	private DataType dt;
+	private int anonCount = 0;
+	private final String typeStab;
+	private final List<StabsMemberSymbolDescriptor> members;
+
+	// Internal use only
+	public static StabsCompositeTypeDescriptor getNamedDescriptor(
+		StabsCompositeSymbolDescriptor token, String stab) throws StabsParseException {
+			return new StabsCompositeTypeDescriptor(token, stab);
+	}
+
+	/**
+	 * Constructs a new StabsCompositeTypeDescriptor
+	 * @param token the token this descriptor is located in
+	 * @param stab the portion of the stab containing this descriptor
+	 * @throws StabsParseException if the descriptor or one it relies on is invalid
+	 */
+	StabsCompositeTypeDescriptor(StabsSymbolDescriptor token, String stab) throws StabsParseException {
+		super(token, stab);
+		this.typeStab = stab;
+		if (token instanceof AbstractStabsSymbolDescriptor) {
+			anonCount = ((AbstractStabsSymbolDescriptor) token).getNextAnonCount();
+		}
+		this.dt = createAnonymousDt();
+		this.members = doGetMembers();
+		parseMembers();
+	}
+
+	private StabsCompositeTypeDescriptor(StabsCompositeSymbolDescriptor token, String stab)
+			throws StabsParseException {
+		super(token, token.getStab());
+		String subStab = token.getStab().substring(token.getName().length());
+		StabsTypeNumber typeNumber = new StabsTypeNumber(subStab);
+		// incase we have a reference to ourselves
+		file.addType(this, typeNumber);
+		this.typeStab = stab;
+		this.dt = token.getDataType();
+		this.members = doGetMembers();
+		parseMembers();
+	}
+
+	private void parseMembers() throws StabsParseException {
+		try {
+			StabsUtils.addCompositeMembers(dt, members);
+		} catch (InvalidDataTypeException e) {
+			throw new StabsParseException(symbol.getName(), stab, e);
+		}
+	}
+
+	private DataType createAnonymousDt() throws StabsParseException {
+		DataType initDt = null;
+		CategoryPath path = symbol.getFile().getCategoryPath();
+		String typeName;
+		switch (typeStab.charAt(0)) {
+			case 'e':
+				typeName = String.format(
+					"anon_enum_%s_%d", symbol.getName().replaceAll(" ", "_"), anonCount);
+				initDt = parseEnum(typeStab, typeName, path, dtm);
+				break;
+			case 's':
+				typeName = String.format(
+					"anon_struct_%s_%d", symbol.getName().replaceAll(" ", "_"), anonCount);
+				initDt = new StructureDataType(path, typeName, 0, dtm);
+				break;
+			case 'u':
+				typeName = String.format(
+					"anon_union_%s_%d", symbol.getName().replaceAll(" ", "_"), anonCount);
+				initDt = new UnionDataType(path, typeName, dtm);
+				break;
+			default:
+				break;
+		}
+		if (initDt != null) {
+			return dtm.resolve(initDt, REPLACE_HANDLER);
+		}
+		throw new StabsParseException(symbol.getName(), typeStab);
+	}
+
+	// internal use only
+	public static DataType parseEnum(String typeStab, String name,
+		CategoryPath path, DataTypeManager dtm) {
+			if (name.equals("")) {
+				name = String.format("anon_enum_%s", path.getName());
+			}
+			Enum mune = new EnumDataType(path, name, getEnumSize(typeStab), dtm);
+			// skip past the 'e'
+			try (Scanner scanner = new Scanner(typeStab.substring(1))) {
+				scanner.findAll(ENUM_SPLITTER).forEach(
+					(result) -> mune.add(result.group(1), Long.valueOf(result.group(2))));
+			}
+			return mune;
+	}
+
+	private static int getEnumSize(String typeStab) {
+		try (Scanner scanner = new Scanner(typeStab)) {
+			Optional<Long> max = scanner.findAll("\\d+")
+										.map(MatchResult::group)
+										.map(Long::valueOf)
+										.collect(Collectors.maxBy(Long::compare));
+			if (max.isPresent()) {
+				return StabsUtils.getIntegerSize(max.get());
+			}
+		}
+		return 1;
+	}
+
+	private String getCompositeStart() {
+		Matcher matcher = COMPOSITE_START.matcher(typeStab);
+		if (matcher.lookingAt()) {
+			return typeStab.substring(matcher.end());
+		}
+		return typeStab;
+	}
+
+	private List<StabsMemberSymbolDescriptor> doGetMembers() throws StabsParseException {
+		if (dt instanceof Composite) {
+			return StabsMemberSymbolDescriptor.getMembers(symbol, getCompositeStart());
+		}
+		return Collections.emptyList();
+	}
+
+	@Override
+	public DataType getDataType() {
+		return dt;
+	}
+
+	@Override
+	public StabsTypeDescriptorType getType() {
+		return StabsTypeDescriptorType.COMPOSITE;
+	}
+
+	@Override
+	public int getLength() {
+		int index = stab.indexOf(typeStab);
+		return index + members.stream()
+							  .mapToInt(StabsMemberSymbolDescriptor::getLength)
+							  .sum();
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsCrossReferenceTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsCrossReferenceTypeDescriptor.java
new file mode 100644
index 0000000000..3f22b35d45
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsCrossReferenceTypeDescriptor.java
@@ -0,0 +1,77 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsToken;
+import ghidra.app.util.bin.format.stabs.StabsTokenizer;
+import ghidra.app.util.bin.format.stabs.StabsTypeDescriptorType;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.EnumDataType;
+import ghidra.program.model.data.StructureDataType;
+import ghidra.program.model.data.UnionDataType;
+
+import static ghidra.program.model.data.DataTypeConflictHandler.KEEP_HANDLER;
+
+/**
+ * Cross Reference (Forward Declaration) implementation of the StabTypeDescriptor
+ */
+public final class StabsCrossReferenceTypeDescriptor extends AbstractStabsTypeDescriptor {
+
+	private static enum Groups {
+		TYPE,
+		NAME
+	}
+
+	private static final String PATTERN = "[ix](?<%s>[esu])(?<%s>.*?)(:|$)";
+	private static final StabsTokenizer<Groups> TOKENIZER =
+		new StabsTokenizer<>(PATTERN, Groups.class);
+
+	private final StabsToken<Groups> token;
+	private final DataType dt;
+
+	/**
+	 * Constructs a new StabsCrossReferenceTypeDescriptor
+	 * @param symbol the token this descriptor is located in
+	 * @param stab the portion of the stab containing this descriptor
+	 * @throws StabsParseException if this descriptor is invalid
+	 */
+	StabsCrossReferenceTypeDescriptor(StabsSymbolDescriptor symbol, String stab) throws StabsParseException {
+		super(symbol, stab);
+		this.token = TOKENIZER.getToken(stab);
+		this.dt = doGetDataType();
+	}
+
+	private DataType doGetDataType() throws StabsParseException {
+		 DataType dt;
+		switch (stab.charAt(1)) {
+			case 'e':
+				// the size will doesn't matter as it will get replaced later
+				dt = new EnumDataType(path, token.get(Groups.NAME), 1, dtm);
+				break;
+			case 's':
+				dt = new StructureDataType(path, token.get(Groups.NAME), 0, dtm);
+				break;
+			case 'u':
+				dt = new UnionDataType(path, token.get(Groups.NAME), dtm);
+				break;
+			default:
+				throw getError();
+		}
+		return dtm.resolve(dt, KEEP_HANDLER);
+	}
+
+	@Override
+	public DataType getDataType() {
+		return dt;
+	}
+
+	@Override
+	public StabsTypeDescriptorType getType() {
+		return StabsTypeDescriptorType.CROSS_REFERENCE;
+	}
+
+	@Override
+	public int getLength() {
+		return token.getLength();
+	}
+}
\ No newline at end of file
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsFunctionTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsFunctionTypeDescriptor.java
new file mode 100644
index 0000000000..6e9b5e4fc4
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsFunctionTypeDescriptor.java
@@ -0,0 +1,106 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptorType;
+import ghidra.app.util.bin.format.stabs.StabsTypeDescriptorType;
+import ghidra.app.util.bin.format.stabs.StabsUtils;
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.FunctionDefinition;
+import ghidra.program.model.data.FunctionDefinitionDataType;
+
+import static ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptorFactory.getTypeDescriptor;
+import static ghidra.program.model.data.DataTypeConflictHandler.REPLACE_HANDLER;
+
+/**
+ * Function Type implementation of the StabTypeDescriptor
+ */
+public final class StabsFunctionTypeDescriptor extends AbstractStabsFunctionTypeDescriptor {
+
+	private static final Pattern PATTERN = Pattern.compile(",(\\d+);");
+
+	private final List<StabsTypeDescriptor> parameters;
+	private final StabsTypeDescriptor returnType;
+	private final FunctionDefinition dt;
+
+	// initial size of 1
+	private int length = 1;
+
+	/**
+	 * Constructs a new StabsFunctionTypeDescriptor
+	 * @param symbol the token this descriptor is located in
+	 * @param stab the portion of the stab containing this descriptor
+	 * @throws StabsParseException if this descriptor is invalid
+	 */
+	StabsFunctionTypeDescriptor(StabsSymbolDescriptor symbol, String stab)
+		throws StabsParseException {
+			super(symbol, stab);
+			this.returnType = getTypeDescriptor(symbol, stab.substring(1));
+			length += returnType.getLength();
+			String subStab = stab.substring(length);
+			FunctionDefinition def;
+			if (symbol.getSymbolDescriptorType() == StabsSymbolDescriptorType.FUNCTION) {
+				def = new FunctionDefinitionDataType(path, symbol.getName(), dtm);
+			} else {
+				def = (FunctionDefinition) file.getDefaultFunction(returnType.getDataType());
+			}
+			this.parameters = getParameters(subStab, def);
+			this.dt = (FunctionDefinition) dtm.resolve(def, REPLACE_HANDLER);
+	}
+
+	private List<StabsTypeDescriptor> getParameters(String subStab, FunctionDefinition def)
+		throws StabsParseException {
+			Matcher matcher = PATTERN.matcher(subStab);
+			List<StabsTypeDescriptor> descriptors;
+			if (matcher.lookingAt()) {
+				length = matcher.group().length();
+				descriptors = new ArrayList<>(Integer.parseInt(matcher.group(1)));
+				for (int i = 0; i < descriptors.size(); i++) {
+					StabsTypeDescriptor type = new StabsParameterTypeDescriptor(this, subStab);
+					descriptors.add(type);
+					length += type.getLength();
+				}
+				return descriptors;
+			} else {
+				descriptors = Collections.emptyList();
+			}
+			if (StabsUtils.isGnu(program)) {
+				if (descriptors.isEmpty() || !DataType.VOID.isEquivalent(
+					descriptors.get(descriptors.size()-1).getDataType())) {
+						def.setVarArgs(true);
+					}
+			}
+			return descriptors;
+	}
+
+	@Override
+	public DataType getDataType() {
+		return dt;
+	}
+
+	@Override
+	public StabsTypeDescriptorType getType() {
+		return StabsTypeDescriptorType.FUNCTION;
+	}
+
+	@Override
+	public int getLength() {
+		return length;
+	}
+
+	@Override
+	public StabsTypeDescriptor getReturnType() {
+		return returnType;
+	}
+
+	@Override
+	public List<StabsTypeDescriptor> getParameters() throws StabsParseException {
+		return parameters;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsMethodTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsMethodTypeDescriptor.java
new file mode 100644
index 0000000000..e2d42fc874
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsMethodTypeDescriptor.java
@@ -0,0 +1,74 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsTypeDescriptorType;
+import ghidra.program.model.data.DataType;
+
+import static ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptorFactory.getTypeDescriptor;
+
+public final class StabsMethodTypeDescriptor extends AbstractStabsFunctionTypeDescriptor {
+
+	private StabsTypeDescriptor returnType;
+	private final List<StabsTypeDescriptor> parameters;
+	private final DataType dt;
+
+	StabsMethodTypeDescriptor(StabsSymbolDescriptor symbol, String stab) throws StabsParseException {
+		super(symbol, stab);
+		if (stab.charAt(1) == '#') {
+			this.returnType = doGetReturnType();
+			this.parameters = Collections.emptyList();
+		} else {
+			this.parameters = setupParameters();
+		}
+		this.dt = doGetDataType();
+	}
+
+	protected List<StabsTypeDescriptor> setupParameters() throws StabsParseException {
+		List<StabsTypeDescriptor> typeParams = new LinkedList<>();
+		String currentStab = stab;
+		do {
+			currentStab = currentStab.substring(1);
+			StabsTypeDescriptor type = getTypeDescriptor(symbol, currentStab);
+			typeParams.add(type);
+			currentStab = currentStab.substring(type.getLength());
+		} while (!currentStab.isBlank() && currentStab.charAt(0) == ',');
+		if (!typeParams.isEmpty()) {
+			// ditch the class type
+			typeParams.remove(0);
+			returnType = typeParams.remove(0);
+		}
+		return Collections.unmodifiableList(typeParams);
+	}
+
+	@Override
+	public DataType getDataType() {
+		return dt;
+	}
+
+	@Override
+	public StabsTypeDescriptorType getType() {
+		return StabsTypeDescriptorType.METHOD;
+	}
+
+	@Override
+	public int getLength() {
+		// Only found in classes. Not necessary to calculate.
+		return 0;
+	}
+
+	@Override
+	public StabsTypeDescriptor getReturnType() {
+		return returnType;
+	}
+
+	@Override
+	public List<StabsTypeDescriptor> getParameters() throws StabsParseException {
+		return parameters;
+	}
+
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsParameterTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsParameterTypeDescriptor.java
new file mode 100644
index 0000000000..a1bb14b834
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsParameterTypeDescriptor.java
@@ -0,0 +1,67 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import ghidra.app.util.bin.format.stabs.StabsToken;
+import ghidra.app.util.bin.format.stabs.StabsTokenizer;
+import ghidra.app.util.bin.format.stabs.StabsTypeDescriptorType;
+import ghidra.app.util.bin.format.stabs.StabsTypeNumber;
+import ghidra.program.model.data.DataType;
+
+import static ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptorFactory.getTypeDescriptor;
+
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+
+final class StabsParameterTypeDescriptor extends AbstractStabsTypeDescriptor {
+
+	private static enum Groups {
+		NAME,
+		TYPE
+	}
+
+	private static final String PATTERN =
+		String.format("(?<%%s>(.*?)(?=(?:(?<!:):(?!:))):)?(?<%%s>%s)",
+			StabsTypeNumber.TYPE_NUMBER_PATTERN);
+
+	private static final StabsTokenizer<Groups> TOKENIZER =
+		new StabsTokenizer<>(PATTERN, Groups.class);
+
+	private final StabsToken<Groups> token;
+	private final StabsTypeDescriptor type;
+
+	/**
+	 * Constructs a new StabsParameterTypeDescriptor
+	 * @param function the function containing this parameter
+	 * @param stab the portion of the stab containing this descriptor
+	 * @throws StabsParseException if this descriptor is invalid
+	 */
+	StabsParameterTypeDescriptor(StabsFunctionTypeDescriptor function, String stab)
+		throws StabsParseException {
+			super(function.getSymbolDescriptor(), stab);
+			this.token = TOKENIZER.getToken(stab);
+			int index = stab.indexOf(token.get(Groups.TYPE));
+			this.type = getTypeDescriptor(symbol, stab.substring(index));
+	}
+
+	@Override
+	public DataType getDataType() {
+		return type.getDataType();
+	}
+
+	@Override
+	public StabsTypeDescriptorType getType() {
+		return null;
+	}
+
+	@Override
+	public int getLength() {
+		String name = getName();
+		return name != null ? name.length()+type.getLength() : type.getLength();
+	}
+
+	/**
+	 * Gets the name of this parameter
+	 * @return the parameter's name
+	 */
+	String getName() {
+		return token.get(Groups.NAME);
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsRangeTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsRangeTypeDescriptor.java
new file mode 100644
index 0000000000..4873e6e7a0
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsRangeTypeDescriptor.java
@@ -0,0 +1,103 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import java.math.BigInteger;
+
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsToken;
+import ghidra.app.util.bin.format.stabs.StabsTokenizer;
+import ghidra.app.util.bin.format.stabs.StabsTypeDescriptorType;
+import ghidra.app.util.bin.format.stabs.StabsTypeNumber;
+import ghidra.app.util.bin.format.stabs.StabsUtils;
+import ghidra.program.model.data.AbstractIntegerDataType;
+import ghidra.program.model.data.BuiltIn;
+import ghidra.program.model.data.DataType;
+
+/**
+ * Range Type implementation of the StabTypeDescriptor
+ */
+public final class StabsRangeTypeDescriptor extends AbstractStabsTypeDescriptor {
+
+	private static enum Groups {
+		TYPE,
+		LOWER,
+		UPPER
+	}
+
+	private static final String PATTERN = String.format(
+		"r(?<%%s>%s);(?<%%s>\\-?\\d+);(?<%%s>\\d+)", StabsTypeNumber.TYPE_NUMBER_PATTERN);
+
+	private static final StabsTokenizer<Groups> TOKENIZER =
+		new StabsTokenizer<>(PATTERN, Groups.class);
+
+	private final StabsToken<Groups> token;
+	private BigInteger start;
+	private BigInteger end;
+	private final DataType dt;
+
+	/**
+	 * Constructs a new StabsRangeTypeDescriptor
+	 * @param symbol the token this descriptor is located in
+	 * @param stab the portion of the stab containing this descriptor
+	 * @throws StabsParseException if this descriptor is invalid
+	 */
+	StabsRangeTypeDescriptor(StabsSymbolDescriptor symbol, String stab) throws StabsParseException {
+		super(symbol, stab);
+		this.token = TOKENIZER.getToken(stab);
+		if (StabsUtils.isBuiltin(symbol.getName())) {
+			this.dt = StabsUtils.getBuiltin(symbol.getName()).clone(dtm);
+		} else {
+			this.start = new BigInteger(token.get(Groups.LOWER));
+			this.end = new BigInteger(token.get(Groups.UPPER));
+			this.dt = doGetDataType();
+		}
+	}
+
+	private DataType doGetDataType() {
+		int size = StabsUtils.getIntegerSize(getEnd());
+		if (start.compareTo(BigInteger.ZERO) < 0) {
+			// signed
+			return AbstractIntegerDataType.getSignedDataType(size, dtm);
+		}
+		return AbstractIntegerDataType.getUnsignedDataType(size, dtm);
+	}
+
+	@Override
+	public DataType getDataType() {
+		return dt;
+	}
+
+	@Override
+	public StabsTypeDescriptorType getType() {
+		return StabsTypeDescriptorType.RANGE;
+	}
+
+	@Override
+	public int getLength() {
+		return token.getLength();
+	}
+
+	/**
+	 * Gets the start of the range
+	 * @return the range start
+	 */
+	public BigInteger getStart() {
+		return start;
+	}
+
+	/**
+	 * Gets the end of the range
+	 * @return the range end
+	 */
+	public BigInteger getEnd() {
+		return end;
+	}
+
+	/**
+	 * Checks if this is describing a builtin datatype
+	 * @return true if this is a builtin type
+	 */
+	public boolean isBuiltin() {
+		return dt instanceof BuiltIn;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsReferenceTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsReferenceTypeDescriptor.java
new file mode 100644
index 0000000000..153e066560
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsReferenceTypeDescriptor.java
@@ -0,0 +1,82 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsTypeDescriptorType;
+import ghidra.program.model.data.DataType;
+
+/**
+ * Reference and Pointer Type implementation of the StabTypeDescriptor
+ */
+public final class StabsReferenceTypeDescriptor extends AbstractStabsTypeDescriptor {
+
+	/** Potential Reference Types */
+	public enum ReferenceType {
+		POINTER,
+		REFERENCE,
+		POINTER_TO_MEMBER
+	}
+
+	private final DataType dt;
+	private final StabsTypeDescriptor subType;
+	private final ReferenceType refType;
+
+	/**
+	 * Constructs a new StabsReferenceTypeDescriptor
+	 * @param token the token this descriptor is located in
+	 * @param stab the portion of the stab containing this descriptor
+	 * @throws StabsParseException if this descriptor or what it references is invalid
+	 */
+	StabsReferenceTypeDescriptor(StabsSymbolDescriptor token, String stab) throws StabsParseException {
+		super(token, stab);
+		this.refType = doGetRefType();
+		this.subType = doGetSubType(stab);
+		this.dt = doGetDataType();
+	}
+
+	private ReferenceType doGetRefType() throws StabsParseException {
+		switch (stab.charAt(0)) {
+			case '*':
+				return ReferenceType.POINTER;
+			case '&':
+				return ReferenceType.REFERENCE;
+			case '@':
+				return ReferenceType.POINTER_TO_MEMBER;
+			default:
+				throw new StabsParseException(symbol.getName(), stab);
+		}
+	}
+
+	private StabsTypeDescriptor doGetSubType(String stab) throws StabsParseException {
+		String def = stab.substring(1);
+		// this is recursive
+		return StabsTypeDescriptorFactory.getTypeDescriptor(symbol, def);
+	}
+
+	private DataType doGetDataType() {
+		return dtm.getPointer(subType.getDataType(), -1);
+	}
+
+	@Override
+	public DataType getDataType() {
+		return dt;
+	}
+
+	@Override
+	public StabsTypeDescriptorType getType() {
+		return StabsTypeDescriptorType.REFERENCE;
+	}
+
+	@Override
+	public int getLength() {
+		return subType.getLength()+1;
+	}
+
+	/**
+	 * Gets the reference type
+	 * @return the reference type
+	 */
+	public ReferenceType getReferenceType() {
+		return refType;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeDescriptor.java
new file mode 100644
index 0000000000..07ce9cab46
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeDescriptor.java
@@ -0,0 +1,38 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsTypeDescriptorType;
+import ghidra.program.model.data.DataType;
+
+public interface StabsTypeDescriptor {
+
+	/**
+	 * Gets the DataType being described
+	 * @return the described DataType
+	 */
+	DataType getDataType();
+
+	/**
+	 * Gets the SymbolDescriptor this descriptor is located in
+	 * @return this descriptors SymbolDescriptor
+	 */
+	StabsSymbolDescriptor getSymbolDescriptor();
+
+	/**
+	 * Gets the original stab string field
+	 * @return the original stab
+	 */
+	String getStab();
+
+	/**
+	 * Gets the type descriptor type
+	 * @return the type for this type descriptor
+	 */
+	StabsTypeDescriptorType getType();
+
+	/**
+	 * Gets the length of this descriptor
+	 * @return this descriptor's length
+	 */
+	int getLength();
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeDescriptorFactory.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeDescriptorFactory.java
new file mode 100644
index 0000000000..a8c3075def
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeDescriptorFactory.java
@@ -0,0 +1,119 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.util.Msg;
+
+public class StabsTypeDescriptorFactory {
+
+	private static final Pattern PATTERN =
+		Pattern.compile("([\\(\\d\\-#\\*&@aAbBcCdDeEfFgGikKMnNopPrRsSuvwxYz])");
+
+	private StabsTypeDescriptorFactory() {
+		// static factory
+	}
+
+	/**
+	 * Gets the appropriate StabTypeDescriptor (Internal Use Only)
+	 * @param token the token containing the descriptor
+	 * @param stab the type descriptor sub-portion of the stab
+	 * @return the type descriptor
+	 * @throws StabsParseException if the stab cannot be parsed
+	 */
+	public static StabsTypeDescriptor getTypeDescriptor(StabsSymbolDescriptor token, String stab)
+			throws StabsParseException {
+		Matcher matcher = PATTERN.matcher(stab);
+		if (matcher.lookingAt()) {
+			switch(stab.charAt(0)) {
+				case 'r': // builtin integer range
+					return new StabsRangeTypeDescriptor(token, stab);
+				case '(': // type reference
+				case '0':
+				case '1':
+				case '2':
+				case '3':
+				case '4':
+				case '5':
+				case '6':
+				case '7':
+				case '8':
+				case '9':
+					return new StabsTypeReferenceTypeDescriptor(token, stab);
+				// Pointers
+				case '@': // Pointer to Class Member (GNU)
+					// peek at next char. If not a number it's an attribute
+					char nextChar = stab.charAt(1);
+					if (nextChar > '9' || nextChar < '0') {
+						return null;
+					}
+				case '*': // Pointer
+				case '&': // Reference
+					return new StabsReferenceTypeDescriptor(token, stab);
+				// Arrays
+				case 'a': // array
+				case 'A': // open
+				case 'D': // dynamic
+				case 'E': // sub array
+				case 'P': // packed
+					return new StabsArrayTypeDescriptor(token, stab);
+				// Function
+				case '#': // method
+					return new StabsMethodTypeDescriptor(token, stab);
+				case 'f': // function
+				case 'F': // function parameter (Pascal)
+				case 'p': // procedure
+					return new StabsFunctionTypeDescriptor(token, stab);
+				// Composite (Anonymous)
+				case 'Y': // struct (IBM) warn on potential incorrect result.
+					// Limited information on this one
+					Msg.warn(StabsTypeDescriptorFactory.class,
+							 "Limited information available on IBM struct stab.\n"
+							+"Potential incorrect result");
+				case 'e': // enum
+				case 's': // struct
+				case 'u': // union
+					return new StabsCompositeTypeDescriptor(token, stab);
+				// Cross-Reference
+				/* Be careful here. These are token references
+				   to tokens which haven't been parsed yet. */
+				case 'i': // Imported (AIX)
+				case 'x': // cross-reference
+					return new StabsCrossReferenceTypeDescriptor(token, stab);
+				// Strings
+				case 'n': // string
+				case 'N': // string*
+				case 'z': // gstring ;)
+					break;
+				// Builtins
+				case '-': // builtin (AIX)
+				case 'c': // complex (AIX)
+				case 'g': // float (AIX)
+				case 'R': // float
+				case 'w': // wide char (AIX)
+					return new StabsBuiltinTypeDescriptor(token, stab);
+				// COBOL
+				/*
+				case 'C': // picture
+				case 'G': // group
+				case 'K': // file
+				*/
+				// Misc
+				case 'k': // const
+				case 'B': // volatile
+				case 'b': // space (Pascal)
+					return new StabsTypeModifierTypeDescriptor(token, stab);
+				/*
+				case 'd': // file
+				case 'M': // multiple instance
+				case 'S': // set
+				*/
+				default:
+					break;
+			}
+		}
+		throw new StabsParseException(token.getName(), stab);
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeModifierTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeModifierTypeDescriptor.java
new file mode 100644
index 0000000000..4203fc0718
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeModifierTypeDescriptor.java
@@ -0,0 +1,78 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsTypeDescriptorType;
+import ghidra.program.model.data.DataType;
+
+/**
+ * Type Descriptor which is a reference to a previously parsed type descriptor
+ */
+public final class StabsTypeModifierTypeDescriptor extends AbstractStabsTypeReferenceTypeDescriptor {
+
+	/** Potential Modifier Types */
+	public enum ModifierType {
+		/** const */
+		CONST,
+		/** volatile */
+		VOLATILE,
+		/** space (Pascal) */
+		SPACE
+	}
+
+	private final StabsTypeDescriptor subType;
+	private final ModifierType type;
+
+	/**
+	 * Constructs a new StabsTypeReferenceTypeDescriptor
+	 * @param symbol the token this descriptor is located in
+	 * @param stab the portion of the stab containing this descriptor
+	 * @throws StabsParseException if this descriptor or what it references is invalid
+	 */
+	StabsTypeModifierTypeDescriptor(StabsSymbolDescriptor symbol, String stab) throws StabsParseException {
+		super(symbol, stab);
+		this.type = doGetModifierType();
+		this.subType = doGetSubType();
+	}
+
+	private ModifierType doGetModifierType() throws StabsParseException {
+		switch (stab.charAt(0)) {
+			case 'k':
+				return ModifierType.CONST;
+			case 'B':
+				return ModifierType.VOLATILE;
+			case 'b':
+				return ModifierType.SPACE;
+			default:
+				throw new StabsParseException(symbol.getName(), stab);
+		}
+	}
+
+	@Override
+	public DataType getDataType() {
+		return subType.getDataType();
+	}
+
+	@Override
+	public StabsTypeDescriptorType getType() {
+		return StabsTypeDescriptorType.MISC;
+	}
+
+	@Override
+	public int getLength() {
+		return super.getLength()+1;
+	}
+
+	@Override
+	public StabsTypeDescriptor getSubType() {
+		return subType;
+	}
+
+	/**
+	 * Gets this descriptors modifier type
+	 * @return the modifier type
+	 */
+	public ModifierType getModifierType() {
+		return type;
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeReferenceTypeDescriptor.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeReferenceTypeDescriptor.java
new file mode 100644
index 0000000000..5216348181
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/stabs/types/StabsTypeReferenceTypeDescriptor.java
@@ -0,0 +1,47 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import java.util.function.Predicate;
+import java.util.regex.Pattern;
+
+import ghidra.app.util.bin.format.stabs.StabsParseException;
+import ghidra.app.util.bin.format.stabs.StabsSymbolDescriptor;
+import ghidra.app.util.bin.format.stabs.StabsTypeDescriptorType;
+import ghidra.app.util.bin.format.stabs.StabsTypeNumber;
+import ghidra.program.model.data.DataType;
+
+/**
+ * Type Descriptor which is a reference to a previously parsed type descriptor
+ */
+public final class StabsTypeReferenceTypeDescriptor extends AbstractStabsTypeReferenceTypeDescriptor {
+
+	private static final Predicate<String> IS_VOID = Pattern.compile(
+		String.format("(%s)=\\1", StabsTypeNumber.TYPE_NUMBER_PATTERN)).asMatchPredicate();
+
+	private final StabsTypeDescriptor subType;
+
+	/**
+	 * Constructs a new StabsTypeReferenceTypeDescriptor
+	 * @param symbol the token this descriptor is located in
+	 * @param stab the portion of the stab containing this descriptor
+	 * @throws StabsParseException if this descriptor or what it references is invalid
+	 */
+	StabsTypeReferenceTypeDescriptor(StabsSymbolDescriptor symbol, String stab) throws StabsParseException {
+		super(symbol, stab);
+		this.subType = doGetSubType();
+	}
+
+	@Override
+	public DataType getDataType() {
+		return IS_VOID.test(stab) ? DataType.VOID : subType.getDataType();
+	}
+
+	@Override
+	public StabsTypeDescriptorType getType() {
+		return StabsTypeDescriptorType.TYPE_REFERENCE;
+	}
+
+	@Override
+	public StabsTypeDescriptor getSubType() {
+		return subType;
+	}
+}
diff --git a/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/AbstractStabsTest.java b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/AbstractStabsTest.java
new file mode 100644
index 0000000000..e99c107d90
--- /dev/null
+++ b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/AbstractStabsTest.java
@@ -0,0 +1,78 @@
+package ghidra.app.util.bin.format.stabs;
+
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+import ghidra.app.plugin.core.analysis.AutoAnalysisManager;
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.app.util.opinion.ElfLoader;
+import ghidra.program.database.ProgramBuilder;
+import ghidra.program.model.data.CategoryPath;
+import ghidra.program.model.data.DataTypeManager;
+import ghidra.program.model.listing.Program;
+import ghidra.test.AbstractGhidraHeadlessIntegrationTest;
+
+import org.junit.After;
+import org.junit.Before;
+
+import generic.test.TestUtils;
+
+public abstract class AbstractStabsTest extends AbstractGhidraHeadlessIntegrationTest {
+
+	protected static final String TEST_FILE_NAME = "main.c";
+	protected static final CategoryPath TEST_PATH =
+		new CategoryPath(StabsParser.STABS_PATH, TEST_FILE_NAME);
+
+	protected Program program;
+	protected DataTypeManager dtm;
+	protected StabsParser parser;
+	private final List<String> stabs;
+	private int id;
+
+	protected AbstractStabsTest() {
+		super();
+		try {
+			this.stabs = getStabs();
+		} catch (IOException e) {
+			throw new RuntimeException(e);
+		}
+	}
+
+	protected List<String> getStabs() throws IOException {
+		return Collections.emptyList();
+	}
+
+	protected AbstractStabsTest(String[] stabs) {
+		super();
+		this.stabs = Arrays.asList(stabs);
+	}
+
+	protected Program getProgram() throws Exception {
+		return new ProgramBuilder("stabs", ProgramBuilder._X64).getProgram();
+	}
+
+	protected StabsTypeDescriptor getType(String stab) throws Exception {
+		parser.parse(List.of(stab));
+		return parser.getType(stab);
+	}
+
+	@Before
+    public void setup() throws Exception {
+		program = getProgram();
+		dtm = program.getDataTypeManager();
+		id = program.startTransaction("Stabs Test");
+		AutoAnalysisManager analysisMgr = AutoAnalysisManager.getAnalysisManager(program);
+		TestUtils.setInstanceField("isEnabled", analysisMgr, Boolean.FALSE);
+		program.setExecutableFormat(ElfLoader.ELF_NAME);
+		this.parser = new StabsParser(program);
+		parser.parse(stabs);
+	}
+
+	@After
+	public void teardown() {
+		program.endTransaction(id, true);
+	}
+
+}
diff --git a/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsCompositeTokenTest.java b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsCompositeTokenTest.java
new file mode 100644
index 0000000000..0d60a5ba7d
--- /dev/null
+++ b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsCompositeTokenTest.java
@@ -0,0 +1,88 @@
+package ghidra.app.util.bin.format.stabs;
+
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.DataTypeManager;
+import ghidra.program.model.data.Enum;
+import ghidra.program.model.data.EnumDataType;
+import ghidra.program.model.data.FloatDataType;
+import ghidra.program.model.data.IntegerDataType;
+import ghidra.program.model.data.Structure;
+import ghidra.program.model.data.StructureDataType;
+import ghidra.program.model.data.Union;
+import ghidra.program.model.data.UnionDataType;
+
+import org.junit.Test;
+
+public class StabsCompositeTokenTest extends AbstractStabsTest {
+
+	private static final String STRUCTURE_TYPE_NAME = "structure_test";
+	private static final String UNION_TYPE_NAME = "union_test";
+	private static final String ENUM_TYPE_NAME = "enum_test";
+
+	private static final String[] STABS = new String[]{
+		TEST_FILE_NAME,
+		"int:t(0,1)=r(0,1);-2147483648;2147483647;",
+		"float:t(0,14)=r(0,1);4;0;",
+		"char:t(0,2)=r(0,2);0;127;"
+	};
+
+	private static final String STRUCTURE_STAB = STRUCTURE_TYPE_NAME
+		+":T(1,1)=s20s_int:(0,1),0,32;s_float:(0,14),32,32;s_next:(1,2)=*(1,1),64,64;;";
+	private static final String UNION_STAB = UNION_TYPE_NAME
+		+":T(1,2)=u20s_int:(0,1),0,32;s_float:(0,14),32,32;s_next:(1,3)=*(1,2),64,64;;";
+	private static final String ENUM_STAB = ENUM_TYPE_NAME
+		+":T(1,3)=eZERO:0,ONE:1,TWO:2,THREE:3,;";
+
+	public StabsCompositeTokenTest() {
+		super(STABS);
+	}
+
+	@Test
+	public void parseStructureTest() throws Exception {
+		StabsTypeDescriptor type = getType(STRUCTURE_STAB);
+		assert getStructureType(dtm).isEquivalent(type.getDataType());
+	}
+
+	@Test
+	public void parseUnionTest() throws Exception {
+		StabsTypeDescriptor type = getType(UNION_STAB);
+		assert getUnionType(dtm).isEquivalent(type.getDataType());
+	}
+
+	@Test
+	public void parseEnumTest() throws Exception {
+		StabsTypeDescriptor type = getType(ENUM_STAB);
+		assert getEnumType().isEquivalent(type.getDataType());
+	}
+
+	private static DataType getStructureType(DataTypeManager dtm) {
+		Structure struct = new StructureDataType(TEST_PATH, STRUCTURE_TYPE_NAME, 0, dtm);
+		DataType ptr = dtm.getPointer(struct);
+		struct.add(IntegerDataType.dataType, "s_int", null);
+		struct.add(FloatDataType.dataType, "s_float", null);
+		struct.add(ptr, "s_next", null);
+		return struct;
+	}
+
+	private static DataType getUnionType(DataTypeManager dtm) {
+		Union union = new UnionDataType(TEST_PATH, UNION_TYPE_NAME, dtm);
+		DataType ptr = dtm.getPointer(union);
+		union.add(IntegerDataType.dataType, "s_int", null);
+		union.add(FloatDataType.dataType, "s_float", null);
+		union.add(ptr, "s_next", null);
+		return union;
+	}
+
+	private static DataType getEnumType() {
+		// If anyone has something craftier than mune rename it
+		// The size of the enum gets determined by the largest value
+		Enum mune = new EnumDataType(TEST_PATH, ENUM_TYPE_NAME, 1);
+		mune.add("ZERO", 0);
+		mune.add("ONE", 1);
+		mune.add("TWO", 2);
+		mune.add("THREE", 3);
+		return mune;
+	}
+
+}
\ No newline at end of file
diff --git a/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsFullCTest.java b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsFullCTest.java
new file mode 100644
index 0000000000..05912b82a4
--- /dev/null
+++ b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsFullCTest.java
@@ -0,0 +1,23 @@
+package ghidra.app.util.bin.format.stabs;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.junit.Test;
+
+public class StabsFullCTest extends AbstractStabsTest {
+
+	public StabsFullCTest() {
+		super();
+	}
+
+	@Override
+	protected List<String> getStabs() throws IOException {
+		return loadTextResource(StabsFullCTest.class, "full_c_stabs.txt");
+	}
+
+	@Test
+	public void parseTest() throws Exception {
+		// test complete
+	}
+}
diff --git a/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsFullCppTest.java b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsFullCppTest.java
new file mode 100644
index 0000000000..5032bdfe93
--- /dev/null
+++ b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsFullCppTest.java
@@ -0,0 +1,23 @@
+package ghidra.app.util.bin.format.stabs;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.junit.Test;
+
+public class StabsFullCppTest extends AbstractStabsTest {
+
+	public StabsFullCppTest() {
+		super();
+	}
+
+	@Override
+	protected List<String> getStabs() throws IOException {
+		return loadTextResource(StabsFullCppTest.class, "full_cpp_stabs.txt");
+	}
+
+	@Test
+	public void parseTest() throws Exception {
+		// test complete
+	}
+}
diff --git a/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsFunctionTokenTest.java b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsFunctionTokenTest.java
new file mode 100644
index 0000000000..2a4cd3af4a
--- /dev/null
+++ b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsFunctionTokenTest.java
@@ -0,0 +1,56 @@
+package ghidra.app.util.bin.format.stabs;
+
+import ghidra.program.model.data.CategoryPath;
+import ghidra.program.model.data.CharDataType;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.FunctionDefinition;
+import ghidra.program.model.data.FunctionDefinitionDataType;
+import ghidra.program.model.data.IntegerDataType;
+import ghidra.program.model.data.ParameterDefinition;
+import ghidra.program.model.data.ParameterDefinitionImpl;
+import ghidra.program.model.data.ShortDataType;
+
+import org.junit.Test;
+
+public class StabsFunctionTokenTest extends AbstractStabsTest {
+
+	private static final CategoryPath PATH = new CategoryPath(TEST_PATH, "functions");
+	private static final String TYPE_NAME = "function_test";
+	private static final String CHAR_PARAM = "char_param";
+	private static final String SHORT_PARAM = "short_param";
+	private static final String INT_PARAM = "int_param";
+
+	private static final String[] STABS = new String[]{
+		TEST_FILE_NAME,
+		"int:t(0,1)=r(0,1);-2147483648;2147483647;",
+		"char:t(0,2)=r(0,2);0;127;",
+		"short int:t(0,8)=r(0,8);-32768;32767;",
+		TYPE_NAME+":F(0,1)", // <- (0,1) is int return type
+		CHAR_PARAM+":p(0,2)",
+		SHORT_PARAM+":p(0,8)",
+		INT_PARAM+":p(0,1)"
+	};
+
+	public StabsFunctionTokenTest() {
+		super(STABS);
+	}
+
+	@Test
+	public void parseTest() throws Exception {
+		StabsSymbolDescriptor token = parser.getFunctions().iterator().next();
+		assert getDataType().isEquivalent(token.getDataType());
+	}
+
+	private static DataType getDataType() {
+		FunctionDefinition def =
+			new FunctionDefinitionDataType(PATH, TYPE_NAME);
+		ParameterDefinition[] params = new ParameterDefinition[]{
+			new ParameterDefinitionImpl(CHAR_PARAM, CharDataType.dataType, null),
+			new ParameterDefinitionImpl(SHORT_PARAM, ShortDataType.dataType, null),
+			new ParameterDefinitionImpl(INT_PARAM, IntegerDataType.dataType, null),
+		};
+		def.setReturnType(IntegerDataType.dataType);
+		def.setArguments(params);
+		return def;
+	}
+}
diff --git a/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsTypeDefTokenTest.java b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsTypeDefTokenTest.java
new file mode 100644
index 0000000000..14ac5e881b
--- /dev/null
+++ b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/StabsTypeDefTokenTest.java
@@ -0,0 +1,33 @@
+package ghidra.app.util.bin.format.stabs;
+
+import ghidra.app.util.bin.format.stabs.types.StabsTypeDescriptor;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.IntegerDataType;
+import ghidra.program.model.data.TypedefDataType;
+
+import org.junit.Test;
+
+public class StabsTypeDefTokenTest extends AbstractStabsTest {
+
+	private static final String TYPE_NAME = "typedef_test";
+
+	private static final String[] STABS = new String[]{
+		TEST_FILE_NAME,
+		"int:t(0,1)=r(0,1);-2147483648;2147483647;",
+		TYPE_NAME+":t(1,1)=(0,1)"
+	};
+
+	public StabsTypeDefTokenTest() {
+		super(STABS);
+	}
+
+	@Test
+	public void parseTest() throws Exception {
+		StabsTypeDescriptor type = parser.getType(1,1);
+		assert type.getDataType().isEquivalent(getDataType());
+	}
+
+	private static DataType getDataType() {
+		return new TypedefDataType(TEST_PATH, TYPE_NAME, IntegerDataType.dataType);
+	}
+}
diff --git a/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/types/StabArrayTypeDescriptorTest.java b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/types/StabArrayTypeDescriptorTest.java
new file mode 100644
index 0000000000..0857d53915
--- /dev/null
+++ b/Ghidra/Features/Base/src/test/java/ghidra/app/util/bin/format/stabs/types/StabArrayTypeDescriptorTest.java
@@ -0,0 +1,37 @@
+package ghidra.app.util.bin.format.stabs.types;
+
+import ghidra.app.util.bin.format.stabs.AbstractStabsTest;
+import ghidra.program.model.data.ArrayDataType;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.IntegerDataType;
+import ghidra.program.model.data.TypedefDataType;
+
+import org.junit.Test;
+
+public class StabArrayTypeDescriptorTest extends AbstractStabsTest {
+
+	private static final String TYPE_NAME = "array_test";
+
+	private static final String[] STABS = new String[]{
+		"main.c",
+		"int:t(0,1)=r(0,1);-2147483648;2147483647;",
+		TYPE_NAME+":t(1,1)=ar(0,1);0;15;(0,1)"
+	};
+
+	public StabArrayTypeDescriptorTest() {
+		super(STABS);
+	}
+
+	@Test
+	public void parseTest() throws Exception {
+		StabsTypeDescriptor type = parser.getType(1,1);
+		assert getDataType().isEquivalent(type.getDataType());
+	}
+
+	private static DataType getDataType() {
+		DataType dt = new ArrayDataType(
+			IntegerDataType.dataType, 16, IntegerDataType.dataType.getLength());
+		return new TypedefDataType(TEST_PATH, TYPE_NAME, dt);
+	}
+
+}
diff --git a/Ghidra/Features/Base/src/test/resources/ghidra/app/util/bin/format/stabs/full_c_stabs.txt b/Ghidra/Features/Base/src/test/resources/ghidra/app/util/bin/format/stabs/full_c_stabs.txt
new file mode 100644
index 0000000000..cbd5dea576
--- /dev/null
+++ b/Ghidra/Features/Base/src/test/resources/ghidra/app/util/bin/format/stabs/full_c_stabs.txt
@@ -0,0 +1,119 @@
+main.c
+gcc2_compiled.
+int:t(0,1)=r(0,1);-2147483648;2147483647;
+char:t(0,2)=r(0,2);0;127;
+long int:t(0,3)=@s64;r(0,3);01000000000000000000000;00777777777777777777777;
+unsigned int:t(0,4)=r(0,4);0;037777777777;
+long unsigned int:t(0,5)=@s64;r(0,5);0;01777777777777777777777;
+__int128:t(0,6)=@s128;r(0,6);02000000000000000000000000000000000000000000;01777777777777777777777777777777777777777777;
+__int128 unsigned:t(0,7)=@s128;r(0,7);0;03777777777777777777777777777777777777777777;
+long long int:t(0,8)=@s64;r(0,8);01000000000000000000000;00777777777777777777777;
+long long unsigned int:t(0,9)=@s64;r(0,9);0;01777777777777777777777;
+short int:t(0,10)=@s16;r(0,10);-32768;32767;
+short unsigned int:t(0,11)=@s16;r(0,11);0;65535;
+signed char:t(0,12)=@s8;r(0,12);-128;127;
+unsigned char:t(0,13)=@s8;r(0,13);0;255;
+float:t(0,14)=r(0,1);4;0;
+double:t(0,15)=r(0,1);8;0;
+long double:t(0,16)=r(0,1);16;0;
+_Float32:t(0,17)=r(0,1);4;0;
+_Float64:t(0,18)=r(0,1);8;0;
+_Float128:t(0,19)=r(0,1);16;0;
+_Float32x:t(0,20)=r(0,1);8;0;
+_Float64x:t(0,21)=r(0,1);16;0;
+_Decimal32:t(0,22)=r(0,1);4;0;
+_Decimal64:t(0,23)=r(0,1);8;0;
+_Decimal128:t(0,24)=r(0,1);16;0;
+void:t(0,25)=(0,25)
+/usr/include/stdio.h
+/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h
+size_t:t(2,1)=(0,5)
+/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h
+__gnuc_va_list:t(3,1)=(3,2)=(3,3)=ar(3,4)=@s64;r(3,4);0;01777777777777777777777;;0;0;(3,5)=xs__va_list_tag:
+/usr/include/x86_64-linux-gnu/bits/types.h
+__u_char:t(4,1)=(0,13)
+__u_short:t(4,2)=(0,11)
+__u_int:t(4,3)=(0,4)
+__u_long:t(4,4)=(0,5)
+__int8_t:t(4,5)=(0,12)
+__uint8_t:t(4,6)=(0,13)
+__int16_t:t(4,7)=(0,10)
+__uint16_t:t(4,8)=(0,11)
+__int32_t:t(4,9)=(0,1)
+__uint32_t:t(4,10)=(0,4)
+__int64_t:t(4,11)=(0,3)
+__uint64_t:t(4,12)=(0,5)
+__int_least8_t:t(4,13)=(4,5)
+__uint_least8_t:t(4,14)=(4,6)
+__int_least16_t:t(4,15)=(4,7)
+__uint_least16_t:t(4,16)=(4,8)
+__int_least32_t:t(4,17)=(4,9)
+__uint_least32_t:t(4,18)=(4,10)
+__int_least64_t:t(4,19)=(4,11)
+__uint_least64_t:t(4,20)=(4,12)
+__quad_t:t(4,21)=(0,3)
+__u_quad_t:t(4,22)=(0,5)
+__intmax_t:t(4,23)=(0,3)
+__uintmax_t:t(4,24)=(0,5)
+__dev_t:t(4,25)=(0,5)
+__uid_t:t(4,26)=(0,4)
+__gid_t:t(4,27)=(0,4)
+__ino_t:t(4,28)=(0,5)
+__ino64_t:t(4,29)=(0,5)
+__mode_t:t(4,30)=(0,4)
+__nlink_t:t(4,31)=(0,5)
+__off_t:t(4,32)=(0,3)
+__off64_t:t(4,33)=(0,3)
+__pid_t:t(4,34)=(0,1)
+__fsid_t:t(4,35)=(4,36)=s8__val:(4,37)=ar(3,4);0;00000000000000000000001;(0,1),0,64;;
+__clock_t:t(4,38)=(0,3)
+__rlim_t:t(4,39)=(0,5)
+__rlim64_t:t(4,40)=(0,5)
+__id_t:t(4,41)=(0,4)
+__time_t:t(4,42)=(0,3)
+__useconds_t:t(4,43)=(0,4)
+__suseconds_t:t(4,44)=(0,3)
+__daddr_t:t(4,45)=(0,1)
+__key_t:t(4,46)=(0,1)
+__clockid_t:t(4,47)=(0,1)
+__timer_t:t(4,48)=(4,49)=*(0,25)
+__blksize_t:t(4,50)=(0,3)
+__blkcnt_t:t(4,51)=(0,3)
+__blkcnt64_t:t(4,52)=(0,3)
+__fsblkcnt_t:t(4,53)=(0,5)
+__fsblkcnt64_t:t(4,54)=(0,5)
+__fsfilcnt_t:t(4,55)=(0,5)
+__fsfilcnt64_t:t(4,56)=(0,5)
+__fsword_t:t(4,57)=(0,3)
+__ssize_t:t(4,58)=(0,3)
+__syscall_slong_t:t(4,59)=(0,3)
+__syscall_ulong_t:t(4,60)=(0,5)
+__loff_t:t(4,61)=(4,33)
+__caddr_t:t(4,62)=(4,63)=*(0,2)
+__intptr_t:t(4,64)=(0,3)
+__socklen_t:t(4,65)=(0,4)
+__sig_atomic_t:t(4,66)=(0,1)
+/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h
+/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h
+__mbstate_t:t(6,1)=(6,2)=s8__count:(0,1),0,32;__value:(6,3)=u4__wch:(0,4),0,32;__wchb:(6,4)=ar(3,4);0;00000000000000000000003;(0,2),0,32;;,32,32;;
+_G_fpos_t:T(5,1)=s16__pos:(4,32),0,64;__state:(6,1),64,64;;
+__fpos_t:t(5,2)=(5,1)
+/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h
+_G_fpos64_t:T(7,1)=s16__pos:(4,33),0,64;__state:(6,1),64,64;;
+__fpos64_t:t(7,2)=(7,1)
+/usr/include/x86_64-linux-gnu/bits/types/__FILE.h
+__FILE:t(8,1)=(8,2)=xs_IO_FILE:
+/usr/include/x86_64-linux-gnu/bits/types/FILE.h
+FILE:t(9,1)=(8,2)
+/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h
+_IO_lock_t:t(10,1)=(0,25)
+_IO_FILE:T(8,2)=s216_flags:(0,1),0,32;_IO_read_ptr:(4,63),64,64;_IO_read_end:(4,63),128,64;_IO_read_base:(4,63),192,64;_IO_write_base:(4,63),256,64;_IO_write_ptr:(4,63),320,64;_IO_write_end:(4,63),384,64;_IO_buf_base:(4,63),448,64;_IO_buf_end:(4,63),512,64;_IO_save_base:(4,63),576,64;_IO_backup_base:(4,63),640,64;_IO_save_end:(4,63),704,64;_markers:(10,2)=*(10,3)=xs_IO_marker:,768,64;_chain:(10,4)=*(8,2),832,64;_fileno:(0,1),896,32;_flags2:(0,1),928,32;_old_offset:(4,32),960,64;_cur_column:(0,11),1024,16;_vtable_offset:(0,12),1040,8;_shortbuf:(10,5)=ar(3,4);0;0;(0,2),1048,8;_lock:(10,6)=*(10,1),1088,64;_offset:(4,33),1152,64;_codecvt:(10,7)=*(10,8)=xs_IO_codecvt:,1216,64;_wide_data:(10,9)=*(10,10)=xs_IO_wide_data:,1280,64;_freeres_list:(10,4),1344,64;_freeres_buf:(4,49),1408,64;__pad5:(2,1),1472,64;_mode:(0,1),1536,32;_unused2:(10,11)=ar(3,4);0;00000000000000000000023;(0,2),1568,160;;
+va_list:t(1,1)=(3,1)
+off_t:t(1,2)=(4,32)
+ssize_t:t(1,3)=(4,58)
+fpos_t:t(1,4)=(5,2)
+Numbers:T(0,26)=eZERO:0,ONE:1,TWO:2,THREE:3,;
+s_tag:T(0,27)=s24s_int:(0,1),0,32;s_float:(0,14),32,32;s_char_vec:(0,28)=ar(3,4);0;00000000000000000000007;(0,2),64,64;s_next:(0,29)=*(0,27),128,64;;
+s_typedef:t(0,30)=(0,27)
+vector:t(0,31)=(0,32)=ar(3,4);0;00000000000000000000003;(0,14)
+matrix:t(0,33)=(0,34)=ar(3,4);0;00000000000000000000003;(0,32)
\ No newline at end of file
diff --git a/Ghidra/Features/Base/src/test/resources/ghidra/app/util/bin/format/stabs/full_cpp_stabs.txt b/Ghidra/Features/Base/src/test/resources/ghidra/app/util/bin/format/stabs/full_cpp_stabs.txt
new file mode 100644
index 0000000000..e712626fbb
--- /dev/null
+++ b/Ghidra/Features/Base/src/test/resources/ghidra/app/util/bin/format/stabs/full_cpp_stabs.txt
@@ -0,0 +1,1336 @@
+gcc2_compiled.
+__float128:t(0,1)=r(0,0);16;0;
+long double:t(0,2)=r(0,0);16;0;
+__builtin_sysv_va_list:t(0,3)=(0,4)=ar(0,5)=@s64;r(0,5);0;01777777777777777777777;;0;0;(0,6)=xs__va_list_tag:
+__builtin_ms_va_list:t(0,7)=*(0,8)=r(0,8);0;127;
+__builtin_va_list:t(0,9)=(0,10)=ar(0,5);0;0;(0,6)
+complex long double:t(0,11)=R3;32;0;
+complex double:t(0,12)=R3;16;0;
+complex float:t(0,13)=R3;8;0;
+complex int:t(0,14)=s8real:(0,15)=r(0,15);-2147483648;2147483647;,0,32;imag:(0,15),32,32;;
+__int128 unsigned:t(0,16)=@s128;r(0,16);0;03777777777777777777777777777777777777777777;
+long unsigned int:t(0,17)=@s64;r(0,17);0;01777777777777777777777;
+unsigned int:t(0,18)=r(0,18);0;037777777777;
+short unsigned int:t(0,19)=@s16;r(0,19);0;65535;
+unsigned char:t(0,20)=@s8;r(0,20);0;255;
+__int128:t(0,21)=@s128;r(0,21);02000000000000000000000000000000000000000000;01777777777777777777777777777777777777777777;
+long int:t(0,22)=@s64;r(0,22);01000000000000000000000;00777777777777777777777;
+int:t(0,15)
+short int:t(0,23)=@s16;r(0,23);-32768;32767;
+signed char:t(0,24)=@s8;r(0,24);-128;127;
+char:t(0,8)
+signed:t(0,15)
+unsigned long:t(0,17)
+long long int:t(0,25)=@s64;r(0,25);01000000000000000000000;00777777777777777777777;
+long long unsigned int:t(0,26)=@s64;r(0,26);0;01777777777777777777777;
+long long unsigned:t(0,26)
+unsigned short:t(0,19)
+float:t(0,27)=r(0,15);4;0;
+double:t(0,28)=r(0,15);8;0;
+void:t(0,29)=(0,29)
+wchar_t:t(0,30)=r(0,30);-2147483648;2147483647;
+char16_t:t(0,31)=@s16;r(0,31);0;65535;
+char32_t:t(0,32)=r(0,32);0;037777777777;
+bool:t(0,33)=@s8;-16;
+__vtbl_ptr_type:t(0,34)=*(0,35)=f(0,15)
+decltype(nullptr):t(0,36)=(0,36)
+size_t:t(0,37)=(0,17)
+ptrdiff_t:t(0,38)=(0,22)
+nullptr_t:t(0,39)=(0,36)
+string:t(0,40)=(0,41)=xsbasic_string:
+wstring:t(0,42)=(0,43)=xsbasic_string:
+u16string:t(0,44)=(0,45)=xsbasic_string:
+u32string:t(0,46)=(0,47)=xsbasic_string:
+__cfloat128:t(0,48)=(0,49)=R3;32;0;
+_Float128:t(0,50)=(0,1)
+_Float32:t(0,51)=(0,27)
+_Float64:t(0,52)=(0,28)
+_Float32x:t(0,53)=(0,28)
+_Float64x:t(0,54)=(0,2)
+size_t:t(0,55)=(0,17)
+__gnuc_va_list:t(0,56)=(0,9)
+wint_t:t(0,57)=(0,18)
+._0::._1:Tt(0,58)=u4__wch:(0,18),0,32;__wchb:(0,59)=ar(0,5);0;00000000000000000000003;(0,8),0,32;;
+._0:Tt(0,60)=s8__count:(0,15),0,32;__value:(0,58),32,32;;
+__mbstate_t:t(0,60)
+mbstate_t:t(0,61)=(0,60)
+__FILE:t(0,62)=(0,63)=xs_IO_FILE:
+FILE:t(0,64)=(0,63)
+__locale_struct:Tt(0,65)=s232__locales:(0,66)=ar(0,5);0;00000000000000000000014;(0,67)=*(0,68)=xs__locale_data:,0,832;__ctype_b:(0,69)=*(0,70)=k(0,19),832,64;__ctype_tolower:(0,71)=*(0,72)=k(0,15),896,64;__ctype_toupper:(0,71),960,64;__names:(0,73)=ar(0,5);0;00000000000000000000014;(0,74)=*(0,75)=k(0,8),1024,832;;
+__locale_t:t(0,76)=(0,77)=*(0,65)
+locale_t:t(0,78)=(0,76)
+streamoff:t(0,79)=(0,22)
+streamsize:t(0,80)=(0,38)
+streampos:t(0,81)=(0,82)=xsfpos:
+wstreampos:t(0,83)=(0,82)
+u16streampos:t(0,84)=(0,82)
+u32streampos:t(0,85)=(0,82)
+ios:t(0,86)=(0,87)=xsbasic_ios:
+streambuf:t(0,88)=(0,89)=xsbasic_streambuf:
+istream:t(0,90)=(0,91)=xsbasic_istream:
+ostream:t(0,92)=(0,93)=xsbasic_ostream:
+iostream:t(0,94)=(0,95)=xsbasic_iostream:
+stringbuf:t(0,96)=(0,97)=xsbasic_stringbuf:
+istringstream:t(0,98)=(0,99)=xsbasic_istringstream:
+ostringstream:t(0,100)=(0,101)=xsbasic_ostringstream:
+stringstream:t(0,102)=(0,103)=xsbasic_stringstream:
+filebuf:t(0,104)=(0,105)=xsbasic_filebuf:
+ifstream:t(0,106)=(0,107)=xsbasic_ifstream:
+ofstream:t(0,108)=(0,109)=xsbasic_ofstream:
+fstream:t(0,110)=(0,111)=xsbasic_fstream:
+wios:t(0,112)=(0,113)=xsbasic_ios:
+wstreambuf:t(0,114)=(0,115)=xsbasic_streambuf:
+wistream:t(0,116)=(0,117)=xsbasic_istream:
+wostream:t(0,118)=(0,119)=xsbasic_ostream:
+wiostream:t(0,120)=(0,121)=xsbasic_iostream:
+wstringbuf:t(0,122)=(0,123)=xsbasic_stringbuf:
+wistringstream:t(0,124)=(0,125)=xsbasic_istringstream:
+wostringstream:t(0,126)=(0,127)=xsbasic_ostringstream:
+wstringstream:t(0,128)=(0,129)=xsbasic_stringstream:
+wfilebuf:t(0,130)=(0,131)=xsbasic_filebuf:
+wifstream:t(0,132)=(0,133)=xsbasic_ifstream:
+wofstream:t(0,134)=(0,135)=xsbasic_ofstream:
+wfstream:t(0,136)=(0,137)=xsbasic_fstream:
+terminate_handler:t(0,138)=(0,139)=*(0,140)=f(0,29)
+unexpected_handler:t(0,141)=(0,139)
+ptrdiff_t:t(0,142)=(0,22)
+._2:Tt(0,143)=s32__max_align_ll:(0,25),0,64;__max_align_ld:(0,2),128,128;;
+max_align_t:t(0,143)
+nullptr_t:t(0,144)=(0,36)
+nothrow_t:Tt(0,145)=s1__ct_base ::(0,146)=#(0,145),(0,29),(0,147)=*(0,145),(0,29);:_ZNSt9nothrow_tC2Ev;2A.;__ct_comp ::(0,146):_ZNSt9nothrow_tC1Ev;2A.;;
+new_handler:t(0,148)=(0,139)
+exception_ptr:Tt(0,149)=s8_M_exception_object:/0(0,150)=*(0,29),0,64;__ct_base ::(0,151)=#(0,149),(0,29),(0,152)=*(0,149),(0,150),(0,29);:_ZNSt15__exception_ptr13exception_ptrC2EPv;0A.;__ct_comp ::(0,151):_ZNSt15__exception_ptr13exception_ptrC1EPv;0A.;_M_addref::(0,153)=#(0,149),(0,29),(0,152),(0,29);:_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv;0A.;_M_release::(0,153):_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv;0A.;_M_get::(0,154)=#(0,149),(0,150),(0,155)=*(0,156)=k(0,149),(0,29);:_ZNKSt15__exception_ptr13exception_ptr6_M_getEv;0B.;__ct_base ::(0,153):_ZNSt15__exception_ptr13exception_ptrC2Ev;2A.;__ct_comp ::(0,153):_ZNSt15__exception_ptr13exception_ptrC1Ev;2A.;__ct_base ::(0,157)=#(0,149),(0,29),(0,152),(0,158)=&(0,156),(0,29);:_ZNSt15__exception_ptr13exception_ptrC2ERKS0_;2A.;__ct_comp ::(0,157):_ZNSt15__exception_ptr13exception_ptrC1ERKS0_;2A.;__ct_base ::(0,159)=#(0,149),(0,29),(0,152),(0,39),(0,29);:_ZNSt15__exception_ptr13exception_ptrC2EDn;2A.;__ct_comp ::(0,159):_ZNSt15__exception_ptr13exception_ptrC1EDn;2A.;__ct_base ::(0,160)=#(0,149),(0,29),(0,152),(0,161)=&(0,149),(0,29);:_ZNSt15__exception_ptr13exception_ptrC2EOS0_;2A.;__ct_comp ::(0,160):_ZNSt15__exception_ptr13exception_ptrC1EOS0_;2A.;operator=::(0,162)=#(0,149),(0,163)=&(0,149),(0,152),(0,158),(0,29);:_ZNSt15__exception_ptr13exception_ptraSERKS0_;2A.(0,164)=#(0,149),(0,163),(0,152),(0,161),(0,29);:_ZNSt15__exception_ptr13exception_ptraSEOS0_;2A.;__dt_base ::(0,153):_ZNSt15__exception_ptr13exception_ptrD2Ev;2A.;__dt_comp ::(0,153):_ZNSt15__exception_ptr13exception_ptrD1Ev;2A.;swap::(0,165)=#(0,149),(0,29),(0,152),(0,163),(0,29);:_ZNSt15__exception_ptr13exception_ptr4swapERS0_;2A.;__conv_op ::(0,166)=#(0,149),(0,33),(0,155),(0,29);:_ZNKSt15__exception_ptr13exception_ptrcvbEv;2B.;__cxa_exception_type::(0,167)=#(0,149),(0,168)=*(0,169)=k(0,170)=xstype_info:,(0,155),(0,29);:_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv;2B.;;
+true_type:t(0,171)=(0,172)=xsintegral_constant:
+false_type:t(0,173)=(0,174)=xsintegral_constant:
+integral_constant:Tt(0,174)=s1value:/2(0,175)=k(0,33):_ZNSt17integral_constantIbLb0EE5valueE;__conv_op ::(0,176)=#(0,174),(0,177)=(0,33),(0,178)=*(0,179)=k(0,174),(0,29);:_ZNKSt17integral_constantIbLb0EEcvbEv;2B.;operator()::(0,176):_ZNKSt17integral_constantIbLb0EEclEv;2B.;;
+__or_:Tt(0,180)=s1!1,020,(0,174);;
+integral_constant:Tt(0,172)=s1value:/2(0,175):_ZNSt17integral_constantIbLb1EE5valueE;__conv_op ::(0,181)=#(0,172),(0,182)=(0,33),(0,183)=*(0,184)=k(0,172),(0,29);:_ZNKSt17integral_constantIbLb1EEcvbEv;2B.;operator()::(0,181):_ZNKSt17integral_constantIbLb1EEclEv;2B.;;
+__and_:Tt(0,185)=s1!1,020,(0,172);;
+__failure_type:Tt(0,186)=s1;
+__is_void_helper:Tt(0,187)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,188)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,189)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,190)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,191)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,192)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,193)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,194)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,195)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,196)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,197)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,198)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,199)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,200)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,201)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,202)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,203)=s1!1,020,(0,172);;
+__is_integral_helper:Tt(0,204)=s1!1,020,(0,172);;
+__is_floating_point_helper:Tt(0,205)=s1!1,020,(0,172);;
+__is_floating_point_helper:Tt(0,206)=s1!1,020,(0,172);;
+__is_floating_point_helper:Tt(0,207)=s1!1,020,(0,172);;
+__is_floating_point_helper:Tt(0,208)=s1!1,020,(0,172);;
+__is_null_pointer_helper:Tt(0,209)=s1!1,020,(0,172);;
+__do_is_destructible_impl:Tt(0,210)=s1;
+__do_is_nt_destructible_impl:Tt(0,211)=s1;
+__do_is_implicitly_default_constructible_impl:Tt(0,212)=s1__test::(0,213)=f(0,173):_ZNSt45__do_is_implicitly_default_constructible_impl6__testEz;2A?;;
+integral_constant:Tt(0,214)=s1value:/2(0,215)=k(0,17):_ZNSt17integral_constantImLm0EE5valueE;__conv_op ::(0,216)=#(0,214),(0,217)=(0,17),(0,218)=*(0,219)=k(0,214),(0,29);:_ZNKSt17integral_constantImLm0EEcvmEv;2B.;operator()::(0,216):_ZNKSt17integral_constantImLm0EEclEv;2B.;;
+__make_unsigned:Tt(0,220)=s1;
+__make_unsigned:Tt(0,221)=s1;
+__make_unsigned:Tt(0,222)=s1;
+__make_unsigned:Tt(0,223)=s1;
+__make_unsigned:Tt(0,224)=s1;
+__make_unsigned:Tt(0,225)=s1;
+__make_unsigned:Tt(0,226)=s1;
+__make_unsigned_selector_base:Tt(0,227)=s1;
+__make_unsigned_selector_base::_List:Tt(0,228)=s1;
+__make_unsigned_selector_base::_List:Tt(0,229)=s1!1,020,(0,228);__size:/2(0,230)=k(0,37):_ZNSt29__make_unsigned_selector_base5_ListIJyEE6__sizeE;;
+__make_unsigned_selector_base::_List:Tt(0,231)=s1!1,020,(0,229);__size:/2(0,230):_ZNSt29__make_unsigned_selector_base5_ListIJmyEE6__sizeE;;
+__make_unsigned_selector_base::_List:Tt(0,232)=s1!1,020,(0,231);__size:/2(0,230):_ZNSt29__make_unsigned_selector_base5_ListIJjmyEE6__sizeE;;
+__make_unsigned_selector_base::_List:Tt(0,233)=s1!1,020,(0,232);__size:/2(0,230):_ZNSt29__make_unsigned_selector_base5_ListIJtjmyEE6__sizeE;;
+__make_unsigned_selector_base::_List:Tt(0,234)=s1!1,020,(0,233);__size:/2(0,230):_ZNSt29__make_unsigned_selector_base5_ListIJhtjmyEE6__sizeE;;
+__make_unsigned_selector_base::__select:Tt(0,235)=s1;
+__make_unsigned_selector_base::__select:Tt(0,236)=s1!1,020,(0,235);;
+__make_unsigned_selector_base::__select:Tt(0,237)=s1!1,020,(0,236);;
+is_const:Tt(0,238)=s1!1,020,(0,174);;
+is_volatile:Tt(0,239)=s1!1,020,(0,174);;
+__cv_selector:Tt(0,240)=s1;
+__match_cv_qualifiers:Tt(0,241)=s1;
+__make_unsigned_selector:Tt(0,242)=s1!1,000,(0,227);;
+__make_unsigned::__type:t(0,243)=(0,244)=(0,245)=(0,246)=(0,18)
+__make_unsigned:Tt(0,247)=s1;
+__make_unsigned_selector_base::__select:Tt(0,248)=s1;
+__make_unsigned_selector_base::__select:Tt(0,249)=s1!1,020,(0,248);;
+is_const:Tt(0,250)=s1!1,020,(0,174);;
+is_volatile:Tt(0,251)=s1!1,020,(0,174);;
+__cv_selector:Tt(0,252)=s1;
+__match_cv_qualifiers:Tt(0,253)=s1;
+__make_unsigned_selector:Tt(0,254)=s1!1,000,(0,227);;
+__make_unsigned::__type:t(0,255)=(0,256)=(0,257)=(0,258)=(0,19)
+__make_unsigned:Tt(0,259)=s1;
+is_const:Tt(0,260)=s1!1,020,(0,174);;
+is_volatile:Tt(0,261)=s1!1,020,(0,174);;
+__match_cv_qualifiers:Tt(0,262)=s1;
+__make_unsigned_selector:Tt(0,263)=s1!1,000,(0,227);;
+__make_unsigned::__type:t(0,264)=(0,265)=(0,266)=(0,246)
+__make_unsigned:Tt(0,267)=s1;
+__make_signed:Tt(0,268)=s1;
+__make_signed:Tt(0,269)=s1;
+__make_signed:Tt(0,270)=s1;
+__make_signed:Tt(0,271)=s1;
+__make_signed:Tt(0,272)=s1;
+__make_signed:Tt(0,273)=s1;
+__make_signed:Tt(0,274)=s1;
+remove_volatile:Tt(0,275)=s1;
+remove_const:Tt(0,276)=s1;
+remove_cv:Tt(0,277)=s1;
+is_integral:Tt(0,278)=s1!1,020,(0,172);;
+is_enum:Tt(0,279)=s1!1,020,(0,174);;
+__make_unsigned_selector:Tt(0,280)=s1;
+remove_volatile:Tt(0,281)=s1;
+remove_const:Tt(0,282)=s1;
+remove_cv:Tt(0,283)=s1;
+is_integral:Tt(0,284)=s1!1,020,(0,172);;
+is_enum:Tt(0,285)=s1!1,020,(0,174);;
+is_const:Tt(0,286)=s1!1,020,(0,174);;
+is_volatile:Tt(0,287)=s1!1,020,(0,174);;
+__cv_selector:Tt(0,288)=s1;
+__match_cv_qualifiers:Tt(0,289)=s1;
+__make_signed_selector:Tt(0,290)=s1;
+__make_signed_selector:Tt(0,291)=s1;
+__make_signed::__type:t(0,292)=(0,293)=(0,294)=(0,295)=(0,296)=(0,15)
+__make_signed:Tt(0,297)=s1;
+remove_volatile:Tt(0,298)=s1;
+remove_const:Tt(0,299)=s1;
+remove_cv:Tt(0,300)=s1;
+is_integral:Tt(0,301)=s1!1,020,(0,172);;
+is_enum:Tt(0,302)=s1!1,020,(0,174);;
+__make_unsigned_selector:Tt(0,303)=s1;
+remove_volatile:Tt(0,304)=s1;
+remove_const:Tt(0,305)=s1;
+remove_cv:Tt(0,306)=s1;
+is_integral:Tt(0,307)=s1!1,020,(0,172);;
+is_enum:Tt(0,308)=s1!1,020,(0,174);;
+is_const:Tt(0,309)=s1!1,020,(0,174);;
+is_volatile:Tt(0,310)=s1!1,020,(0,174);;
+__cv_selector:Tt(0,311)=s1;
+__match_cv_qualifiers:Tt(0,312)=s1;
+__make_signed_selector:Tt(0,313)=s1;
+__make_signed_selector:Tt(0,314)=s1;
+__make_signed::__type:t(0,315)=(0,316)=(0,317)=(0,318)=(0,319)=(0,23)
+__make_signed:Tt(0,320)=s1;
+remove_volatile:Tt(0,321)=s1;
+remove_const:Tt(0,322)=s1;
+remove_cv:Tt(0,323)=s1;
+is_integral:Tt(0,324)=s1!1,020,(0,172);;
+is_enum:Tt(0,325)=s1!1,020,(0,174);;
+__make_unsigned_selector:Tt(0,326)=s1;
+__make_signed_selector:Tt(0,327)=s1;
+__make_signed::__type:t(0,328)=(0,329)=(0,294)
+__make_signed:Tt(0,330)=s1;
+__do_common_type_impl:Tt(0,331)=s1;
+__do_member_type_wrapper:Tt(0,332)=s1;
+common_type:Tt(0,333)=s1;
+__invoke_memfun_ref:Tt(0,334)=s1;
+__invoke_memfun_deref:Tt(0,335)=s1;
+__invoke_memobj_ref:Tt(0,336)=s1;
+__invoke_memobj_deref:Tt(0,337)=s1;
+__invoke_other:Tt(0,338)=s1;
+__result_of_memfun_ref_impl:Tt(0,339)=s1;
+__result_of_memfun_deref_impl:Tt(0,340)=s1;
+__result_of_memobj_ref_impl:Tt(0,341)=s1;
+__result_of_memobj_deref_impl:Tt(0,342)=s1;
+__result_of_other_impl:Tt(0,343)=s1;
+__do_is_swappable_impl:Tt(0,344)=s1;
+__do_is_nothrow_swappable_impl:Tt(0,345)=s1;
+__do_is_swappable_with_impl:Tt(0,346)=s1;
+__do_is_nothrow_swappable_with_impl:Tt(0,347)=s1;
+remove_volatile:Tt(0,348)=s1;
+remove_const:Tt(0,349)=s1;
+remove_cv:Tt(0,350)=s1;
+is_void:Tt(0,351)=s1!1,020,(0,172);;
+__nonesuch:Tt(0,352)=s1__ct_base ::(0,353)=#(0,352),(0,29),(0,354)=*(0,352),(0,29);:_ZNSt10__nonesuchC2Ev;2A.;__ct_comp ::(0,353):_ZNSt10__nonesuchC1Ev;2A.;__dt_base ::(0,355)=#(0,352),(0,29),(0,354),(0,29);:_ZNSt10__nonesuchD2Ev;2A.;__dt_comp ::(0,355):_ZNSt10__nonesuchD1Ev;2A.;__ct_base ::(0,356)=#(0,352),(0,29),(0,354),(0,357)=&(0,358)=k(0,352),(0,29);:_ZNSt10__nonesuchC2ERKS_;2A.;__ct_comp ::(0,356):_ZNSt10__nonesuchC1ERKS_;2A.;operator=::(0,356):_ZNSt10__nonesuchaSERKS_;2A.;;
+__true_type:Tt(0,359)=s1;
+__false_type:Tt(0,360)=s1;
+__truth_type:Tt(0,361)=s1;
+__is_void::._9:t(0,362)=e__value:1,;
+__is_void:Tt(0,363)=s1;
+__is_integer::._11:t(0,364)=e__value:1,;
+__is_integer:Tt(0,365)=s1;
+__is_integer::._12:t(0,366)=e__value:1,;
+__is_integer:Tt(0,367)=s1;
+__is_integer::._13:t(0,368)=e__value:1,;
+__is_integer:Tt(0,369)=s1;
+__is_integer::._14:t(0,370)=e__value:1,;
+__is_integer:Tt(0,371)=s1;
+__is_integer::._15:t(0,372)=e__value:1,;
+__is_integer:Tt(0,373)=s1;
+__is_integer::._16:t(0,374)=e__value:1,;
+__is_integer:Tt(0,375)=s1;
+__is_integer::._17:t(0,376)=e__value:1,;
+__is_integer:Tt(0,377)=s1;
+__is_integer::._18:t(0,378)=e__value:1,;
+__is_integer:Tt(0,379)=s1;
+__is_integer::._19:t(0,380)=e__value:1,;
+__is_integer:Tt(0,381)=s1;
+__is_integer::._20:t(0,382)=e__value:1,;
+__is_integer:Tt(0,383)=s1;
+__is_integer::._21:t(0,384)=e__value:1,;
+__is_integer:Tt(0,385)=s1;
+__is_integer::._22:t(0,386)=e__value:1,;
+__is_integer:Tt(0,387)=s1;
+__is_integer::._23:t(0,388)=e__value:1,;
+__is_integer:Tt(0,389)=s1;
+__is_integer::._24:t(0,390)=e__value:1,;
+__is_integer:Tt(0,391)=s1;
+__is_integer::._25:t(0,392)=e__value:1,;
+__is_integer:Tt(0,393)=s1;
+__is_integer::._26:t(0,394)=e__value:1,;
+__is_integer:Tt(0,395)=s1;
+__is_integer::._27:t(0,396)=e__value:1,;
+__is_integer:Tt(0,397)=s1;
+__is_floating::._29:t(0,398)=e__value:1,;
+__is_floating:Tt(0,399)=s1;
+__is_floating::._30:t(0,400)=e__value:1,;
+__is_floating:Tt(0,401)=s1;
+__is_floating::._31:t(0,402)=e__value:1,;
+__is_floating:Tt(0,403)=s1;
+__is_char::._35:t(0,404)=e__value:1,;
+__is_char:Tt(0,405)=s1;
+__is_char::._36:t(0,406)=e__value:1,;
+__is_char:Tt(0,407)=s1;
+__is_byte::._38:t(0,408)=e__value:1,;
+__is_byte:Tt(0,409)=s1;
+__is_byte::._39:t(0,410)=e__value:1,;
+__is_byte:Tt(0,411)=s1;
+__is_byte::._40:t(0,412)=e__value:1,;
+__is_byte:Tt(0,413)=s1;
+__add_unsigned:Tt(0,414)=s1;
+__add_unsigned:Tt(0,415)=s1;
+__add_unsigned:Tt(0,416)=s1;
+__add_unsigned:Tt(0,417)=s1;
+__add_unsigned:Tt(0,418)=s1;
+__add_unsigned:Tt(0,419)=s1;
+__remove_unsigned:Tt(0,420)=s1;
+__remove_unsigned:Tt(0,421)=s1;
+__remove_unsigned:Tt(0,422)=s1;
+__remove_unsigned:Tt(0,423)=s1;
+__remove_unsigned:Tt(0,424)=s1;
+__remove_unsigned:Tt(0,425)=s1;
+__is_integer::._10:t(0,426)=e__value:0,;
+__is_integer:Tt(0,427)=s1;
+__promote:Tt(0,428)=s1;
+__is_integer::._10:t(0,429)=e__value:0,;
+__is_integer:Tt(0,430)=s1;
+__promote:Tt(0,431)=s1;
+__is_integer::._10:t(0,432)=e__value:0,;
+__is_integer:Tt(0,433)=s1;
+__promote:Tt(0,434)=s1;
+piecewise_construct_t:Tt(0,435)=s1__ct_base ::(0,436)=#(0,435),(0,29),(0,437)=*(0,435),(0,29);:_ZNSt21piecewise_construct_tC2Ev;2A.;__ct_comp ::(0,436):_ZNSt21piecewise_construct_tC1Ev;2A.;;
+__nonesuch_no_braces:Tt(0,438)=s1!1,020,(0,352);__ct_base ::(0,439)=#(0,438),(0,29),(0,440)=*(0,438),(0,357),(0,29);:_ZNSt20__nonesuch_no_bracesC2ERKSt10__nonesuch;2A.;__ct_comp ::(0,439):_ZNSt20__nonesuch_no_bracesC1ERKSt10__nonesuch;2A.;;
+input_iterator_tag:Tt(0,441)=s1;
+output_iterator_tag:Tt(0,442)=s1;
+forward_iterator_tag:Tt(0,443)=s1!1,020,(0,441);;
+bidirectional_iterator_tag:Tt(0,444)=s1!1,020,(0,443);;
+random_access_iterator_tag:Tt(0,445)=s1!1,020,(0,444);;
+iterator:Tt(0,446)=s1;
+_Iter_less_iter:Tt(0,447)=s1;
+_Iter_less_val:Tt(0,448)=s1__ct_base ::(0,449)=#(0,448),(0,29),(0,450)=*(0,448),(0,29);:_ZN9__gnu_cxx5__ops14_Iter_less_valC2Ev;2A.;__ct_comp ::(0,449):_ZN9__gnu_cxx5__ops14_Iter_less_valC1Ev;2A.;__ct_base ::(0,451)=#(0,448),(0,29),(0,450),(0,447),(0,29);:_ZN9__gnu_cxx5__ops14_Iter_less_valC2ENS0_15_Iter_less_iterE;2A.;__ct_comp ::(0,451):_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE;2A.;;
+_Val_less_iter:Tt(0,452)=s1__ct_base ::(0,453)=#(0,452),(0,29),(0,454)=*(0,452),(0,29);:_ZN9__gnu_cxx5__ops14_Val_less_iterC2Ev;2A.;__ct_comp ::(0,453):_ZN9__gnu_cxx5__ops14_Val_less_iterC1Ev;2A.;__ct_base ::(0,455)=#(0,452),(0,29),(0,454),(0,447),(0,29);:_ZN9__gnu_cxx5__ops14_Val_less_iterC2ENS0_15_Iter_less_iterE;2A.;__ct_comp ::(0,455):_ZN9__gnu_cxx5__ops14_Val_less_iterC1ENS0_15_Iter_less_iterE;2A.;;
+_Iter_equal_to_iter:Tt(0,456)=s1;
+_Iter_equal_to_val:Tt(0,457)=s1;
+__copy_move:Tt(0,458)=s1;
+__copy_move:Tt(0,459)=s1;
+__copy_move_backward:Tt(0,460)=s1;
+__copy_move_backward:Tt(0,461)=s1;
+__equal:Tt(0,462)=s1;
+__lc_rai:Tt(0,463)=s1;
+__lexicographical_compare:Tt(0,464)=s1;
+char_traits:Tt(0,465)=s1assign::(0,466)=f(0,29):_ZNSt11char_traitsIcE6assignERcRKc;2A?;eq::(0,467)=f(0,33):_ZNSt11char_traitsIcE2eqERKcS2_;2A?;lt::(0,467):_ZNSt11char_traitsIcE2ltERKcS2_;2A?;compare::(0,468)=f(0,15):_ZNSt11char_traitsIcE7compareEPKcS2_m;2A?;length::(0,469)=f(0,37):_ZNSt11char_traitsIcE6lengthEPKc;2A?;find::(0,470)=f(0,471)=*(0,472)=k(0,473)=(0,8):_ZNSt11char_traitsIcE4findEPKcmRS1_;2A?;move::(0,474)=f(0,475)=*(0,473):_ZNSt11char_traitsIcE4moveEPcPKcm;2A?;copy::(0,474):_ZNSt11char_traitsIcE4copyEPcPKcm;2A?;assign::(0,476)=f(0,475):_ZNSt11char_traitsIcE6assignEPcmc;2A?;to_char_type::(0,477)=f(0,473):_ZNSt11char_traitsIcE12to_char_typeERKi;2A?;to_int_type::(0,478)=f(0,479)=(0,15):_ZNSt11char_traitsIcE11to_int_typeERKc;2A?;eq_int_type::(0,480)=f(0,33):_ZNSt11char_traitsIcE11eq_int_typeERKiS2_;2A?;eof::(0,481)=f(0,479):_ZNSt11char_traitsIcE3eofEv;2A?;not_eof::(0,482)=f(0,479):_ZNSt11char_traitsIcE7not_eofERKi;2A?;;
+char_traits:Tt(0,483)=s1assign::(0,484)=f(0,29):_ZNSt11char_traitsIwE6assignERwRKw;2A?;eq::(0,485)=f(0,33):_ZNSt11char_traitsIwE2eqERKwS2_;2A?;lt::(0,485):_ZNSt11char_traitsIwE2ltERKwS2_;2A?;compare::(0,486)=f(0,15):_ZNSt11char_traitsIwE7compareEPKwS2_m;2A?;length::(0,487)=f(0,37):_ZNSt11char_traitsIwE6lengthEPKw;2A?;find::(0,488)=f(0,489)=*(0,490)=k(0,491)=(0,30):_ZNSt11char_traitsIwE4findEPKwmRS1_;2A?;move::(0,492)=f(0,493)=*(0,491):_ZNSt11char_traitsIwE4moveEPwPKwm;2A?;copy::(0,492):_ZNSt11char_traitsIwE4copyEPwPKwm;2A?;assign::(0,494)=f(0,493):_ZNSt11char_traitsIwE6assignEPwmw;2A?;to_char_type::(0,495)=f(0,491):_ZNSt11char_traitsIwE12to_char_typeERKj;2A?;to_int_type::(0,496)=f(0,497)=(0,57):_ZNSt11char_traitsIwE11to_int_typeERKw;2A?;eq_int_type::(0,498)=f(0,33):_ZNSt11char_traitsIwE11eq_int_typeERKjS2_;2A?;eof::(0,499)=f(0,497):_ZNSt11char_traitsIwE3eofEv;2A?;not_eof::(0,500)=f(0,497):_ZNSt11char_traitsIwE7not_eofERKj;2A?;;
+__u_char:t(0,501)=(0,20)
+__u_short:t(0,502)=(0,19)
+__u_int:t(0,503)=(0,18)
+__u_long:t(0,504)=(0,17)
+__int8_t:t(0,505)=(0,24)
+__uint8_t:t(0,506)=(0,20)
+__int16_t:t(0,507)=(0,23)
+__uint16_t:t(0,508)=(0,19)
+__int32_t:t(0,509)=(0,15)
+__uint32_t:t(0,510)=(0,18)
+__int64_t:t(0,511)=(0,22)
+__uint64_t:t(0,512)=(0,17)
+__int_least8_t:t(0,513)=(0,505)
+__uint_least8_t:t(0,514)=(0,506)
+__int_least16_t:t(0,515)=(0,507)
+__uint_least16_t:t(0,516)=(0,508)
+__int_least32_t:t(0,517)=(0,509)
+__uint_least32_t:t(0,518)=(0,510)
+__int_least64_t:t(0,519)=(0,511)
+__uint_least64_t:t(0,520)=(0,512)
+__quad_t:t(0,521)=(0,22)
+__u_quad_t:t(0,522)=(0,17)
+__intmax_t:t(0,523)=(0,22)
+__uintmax_t:t(0,524)=(0,17)
+__dev_t:t(0,525)=(0,17)
+__uid_t:t(0,526)=(0,18)
+__gid_t:t(0,527)=(0,18)
+__ino_t:t(0,528)=(0,17)
+__ino64_t:t(0,529)=(0,17)
+__mode_t:t(0,530)=(0,18)
+__nlink_t:t(0,531)=(0,17)
+__off_t:t(0,532)=(0,22)
+__off64_t:t(0,533)=(0,22)
+__pid_t:t(0,534)=(0,15)
+._43:Tt(0,535)=s8__val:(0,536)=ar(0,5);0;00000000000000000000001;(0,15),0,64;;
+__fsid_t:t(0,535)
+__clock_t:t(0,537)=(0,22)
+__rlim_t:t(0,538)=(0,17)
+__rlim64_t:t(0,539)=(0,17)
+__id_t:t(0,540)=(0,18)
+__time_t:t(0,541)=(0,22)
+__useconds_t:t(0,542)=(0,18)
+__suseconds_t:t(0,543)=(0,22)
+__daddr_t:t(0,544)=(0,15)
+__key_t:t(0,545)=(0,15)
+__clockid_t:t(0,546)=(0,15)
+__timer_t:t(0,547)=(0,150)
+__blksize_t:t(0,548)=(0,22)
+__blkcnt_t:t(0,549)=(0,22)
+__blkcnt64_t:t(0,550)=(0,22)
+__fsblkcnt_t:t(0,551)=(0,17)
+__fsblkcnt64_t:t(0,552)=(0,17)
+__fsfilcnt_t:t(0,553)=(0,17)
+__fsfilcnt64_t:t(0,554)=(0,17)
+__fsword_t:t(0,555)=(0,22)
+__ssize_t:t(0,556)=(0,22)
+__syscall_slong_t:t(0,557)=(0,22)
+__syscall_ulong_t:t(0,558)=(0,17)
+__loff_t:t(0,559)=(0,533)
+__caddr_t:t(0,560)=(0,561)=*(0,8)
+__intptr_t:t(0,562)=(0,22)
+__socklen_t:t(0,563)=(0,18)
+__sig_atomic_t:t(0,564)=(0,15)
+int8_t:t(0,565)=(0,505)
+int16_t:t(0,566)=(0,507)
+int32_t:t(0,567)=(0,509)
+int64_t:t(0,568)=(0,511)
+uint8_t:t(0,569)=(0,506)
+uint16_t:t(0,570)=(0,508)
+uint32_t:t(0,571)=(0,510)
+uint64_t:t(0,572)=(0,512)
+int_least8_t:t(0,573)=(0,513)
+int_least16_t:t(0,574)=(0,515)
+int_least32_t:t(0,575)=(0,517)
+int_least64_t:t(0,576)=(0,519)
+uint_least8_t:t(0,577)=(0,514)
+uint_least16_t:t(0,578)=(0,516)
+uint_least32_t:t(0,579)=(0,518)
+uint_least64_t:t(0,580)=(0,520)
+int_fast8_t:t(0,581)=(0,24)
+int_fast16_t:t(0,582)=(0,22)
+int_fast32_t:t(0,583)=(0,22)
+int_fast64_t:t(0,584)=(0,22)
+uint_fast8_t:t(0,585)=(0,20)
+uint_fast16_t:t(0,586)=(0,17)
+uint_fast32_t:t(0,587)=(0,17)
+uint_fast64_t:t(0,588)=(0,17)
+intptr_t:t(0,589)=(0,22)
+uintptr_t:t(0,590)=(0,17)
+intmax_t:t(0,591)=(0,523)
+uintmax_t:t(0,592)=(0,524)
+char_traits:Tt(0,593)=s1assign::(0,594)=f(0,29):_ZNSt11char_traitsIDsE6assignERDsRKDs;2A?;eq::(0,595)=f(0,33):_ZNSt11char_traitsIDsE2eqERKDsS2_;2A?;lt::(0,595):_ZNSt11char_traitsIDsE2ltERKDsS2_;2A?;compare::(0,596)=f(0,15):_ZNSt11char_traitsIDsE7compareEPKDsS2_m;2A?;length::(0,597)=f(0,37):_ZNSt11char_traitsIDsE6lengthEPKDs;2A?;find::(0,598)=f(0,599)=*(0,600)=k(0,601)=(0,31):_ZNSt11char_traitsIDsE4findEPKDsmRS1_;2A?;move::(0,602)=f(0,603)=*(0,601):_ZNSt11char_traitsIDsE4moveEPDsPKDsm;2A?;copy::(0,602):_ZNSt11char_traitsIDsE4copyEPDsPKDsm;2A?;assign::(0,604)=f(0,603):_ZNSt11char_traitsIDsE6assignEPDsmDs;2A?;to_char_type::(0,605)=f(0,601):_ZNSt11char_traitsIDsE12to_char_typeERKt;2A?;to_int_type::(0,606)=f(0,607)=(0,578):_ZNSt11char_traitsIDsE11to_int_typeERKDs;2A?;eq_int_type::(0,608)=f(0,33):_ZNSt11char_traitsIDsE11eq_int_typeERKtS2_;2A?;eof::(0,609)=f(0,607):_ZNSt11char_traitsIDsE3eofEv;2A?;not_eof::(0,610)=f(0,607):_ZNSt11char_traitsIDsE7not_eofERKt;2A?;;
+char_traits:Tt(0,611)=s1assign::(0,612)=f(0,29):_ZNSt11char_traitsIDiE6assignERDiRKDi;2A?;eq::(0,613)=f(0,33):_ZNSt11char_traitsIDiE2eqERKDiS2_;2A?;lt::(0,613):_ZNSt11char_traitsIDiE2ltERKDiS2_;2A?;compare::(0,614)=f(0,15):_ZNSt11char_traitsIDiE7compareEPKDiS2_m;2A?;length::(0,615)=f(0,37):_ZNSt11char_traitsIDiE6lengthEPKDi;2A?;find::(0,616)=f(0,617)=*(0,618)=k(0,619)=(0,32):_ZNSt11char_traitsIDiE4findEPKDimRS1_;2A?;move::(0,620)=f(0,621)=*(0,619):_ZNSt11char_traitsIDiE4moveEPDiPKDim;2A?;copy::(0,620):_ZNSt11char_traitsIDiE4copyEPDiPKDim;2A?;assign::(0,622)=f(0,621):_ZNSt11char_traitsIDiE6assignEPDimDi;2A?;to_char_type::(0,623)=f(0,619):_ZNSt11char_traitsIDiE12to_char_typeERKj;2A?;to_int_type::(0,624)=f(0,625)=(0,579):_ZNSt11char_traitsIDiE11to_int_typeERKDi;2A?;eq_int_type::(0,626)=f(0,33):_ZNSt11char_traitsIDiE11eq_int_typeERKjS2_;2A?;eof::(0,627)=f(0,625):_ZNSt11char_traitsIDiE3eofEv;2A?;not_eof::(0,628)=f(0,625):_ZNSt11char_traitsIDiE7not_eofERKj;2A?;;
+lconv:Tt(0,629)=s96decimal_point:(0,561),0,64;thousands_sep:(0,561),64,64;grouping:(0,561),128,64;int_curr_symbol:(0,561),192,64;currency_symbol:(0,561),256,64;mon_decimal_point:(0,561),320,64;mon_thousands_sep:(0,561),384,64;mon_grouping:(0,561),448,64;positive_sign:(0,561),512,64;negative_sign:(0,561),576,64;int_frac_digits:(0,8),640,8;frac_digits:(0,8),648,8;p_cs_precedes:(0,8),656,8;p_sep_by_space:(0,8),664,8;n_cs_precedes:(0,8),672,8;n_sep_by_space:(0,8),680,8;p_sign_posn:(0,8),688,8;n_sign_posn:(0,8),696,8;int_p_cs_precedes:(0,8),704,8;int_p_sep_by_space:(0,8),712,8;int_n_cs_precedes:(0,8),720,8;int_n_sep_by_space:(0,8),728,8;int_p_sign_posn:(0,8),736,8;int_n_sign_posn:(0,8),744,8;;
+__c_locale:t(0,630)=(0,76)
+._44:t(0,631)=e_ISupper:256,_ISlower:512,_ISalpha:1024,_ISdigit:2048,_ISxdigit:4096,_ISspace:8192,_ISprint:16384,_ISgraph:32768,_ISblank:1,_IScntrl:2,_ISpunct:4,_ISalnum:8,;
+time_t:t(0,632)=(0,541)
+timespec:Tt(0,633)=s16tv_sec:(0,541),0,64;tv_nsec:(0,557),64,64;;
+pid_t:t(0,634)=(0,534)
+sched_param:Tt(0,635)=s4sched_priority:(0,15),0,32;;
+__cpu_mask:t(0,636)=(0,17)
+._45:Tt(0,637)=s128__bits:(0,638)=ar(0,5);0;00000000000000000000017;(0,636),0,1024;;
+cpu_set_t:t(0,637)
+timeval:Tt(0,639)=s16tv_sec:(0,541),0,64;tv_usec:(0,543),64,64;;
+timex:Tt(0,640)=s208modes:(0,18),0,32;offset:(0,557),64,64;freq:(0,557),128,64;maxerror:(0,557),192,64;esterror:(0,557),256,64;status:(0,15),320,32;constant:(0,557),384,64;precision:(0,557),448,64;tolerance:(0,557),512,64;time:(0,639),576,128;tick:(0,557),704,64;ppsfreq:(0,557),768,64;jitter:(0,557),832,64;shift:(0,15),896,32;stabil:(0,557),960,64;jitcnt:(0,557),1024,64;calcnt:(0,557),1088,64;errcnt:(0,557),1152,64;stbcnt:(0,557),1216,64;tai:(0,15),1280,32;:(0,15),1312,32;:(0,15),1344,32;:(0,15),1376,32;:(0,15),1408,32;:(0,15),1440,32;:(0,15),1472,32;:(0,15),1504,32;:(0,15),1536,32;:(0,15),1568,32;:(0,15),1600,32;:(0,15),1632,32;;
+clock_t:t(0,641)=(0,537)
+tm:Tt(0,642)=s56tm_sec:(0,15),0,32;tm_min:(0,15),32,32;tm_hour:(0,15),64,32;tm_mday:(0,15),96,32;tm_mon:(0,15),128,32;tm_year:(0,15),160,32;tm_wday:(0,15),192,32;tm_yday:(0,15),224,32;tm_isdst:(0,15),256,32;tm_gmtoff:(0,22),320,64;tm_zone:(0,74),384,64;;
+clockid_t:t(0,643)=(0,546)
+timer_t:t(0,644)=(0,547)
+itimerspec:Tt(0,645)=s32it_interval:(0,633),0,128;it_value:(0,633),128,128;;
+__pthread_rwlock_arch_t:Tt(0,646)=s56__readers:(0,18),0,32;__writers:(0,18),32,32;__wrphase_futex:(0,18),64,32;__writers_futex:(0,18),96,32;__pad3:(0,18),128,32;__pad4:(0,18),160,32;__cur_writer:(0,15),192,32;__shared:(0,15),224,32;__rwelision:(0,24),256,8;__pad1:(0,647)=ar(0,5);0;00000000000000000000006;(0,20),264,56;__pad2:(0,17),320,64;__flags:(0,18),384,32;;
+__pthread_internal_list:Tt(0,648)=s16__prev:(0,649)=*(0,648),0,64;__next:(0,649),64,64;;
+__pthread_list_t:t(0,650)=(0,648)
+__pthread_mutex_s:Tt(0,651)=s40__lock:(0,15),0,32;__count:(0,18),32,32;__owner:(0,15),64,32;__nusers:(0,18),96,32;__kind:(0,15),128,32;__spins:(0,23),160,16;__elision:(0,23),176,16;__list:(0,650),192,128;;
+._47:Tt(0,652)=s8__low:(0,18),0,32;__high:(0,18),32,32;;
+__pthread_cond_s::._46:Tt(0,653)=u8__wseq:(0,26),0,64;__wseq32:(0,652),0,64;;
+._49:Tt(0,654)=s8__low:(0,18),0,32;__high:(0,18),32,32;;
+__pthread_cond_s::._48:Tt(0,655)=u8__g1_start:(0,26),0,64;__g1_start32:(0,654),0,64;;
+__pthread_cond_s:Tt(0,656)=s48:(0,653),0,64;:(0,655),64,64;__g_refs:(0,657)=ar(0,5);0;00000000000000000000001;(0,18),128,64;__g_size:(0,657),192,64;__g1_orig_size:(0,18),256,32;__wrefs:(0,18),288,32;__g_signals:(0,657),320,64;;
+pthread_t:t(0,658)=(0,17)
+._50:Tt(0,659)=u4__size:(0,59),0,32;__align:(0,15),0,32;;
+pthread_mutexattr_t:t(0,659)
+._51:Tt(0,660)=u4__size:(0,59),0,32;__align:(0,15),0,32;;
+pthread_condattr_t:t(0,660)
+pthread_key_t:t(0,661)=(0,18)
+pthread_once_t:t(0,662)=(0,15)
+pthread_attr_t:Tt(0,663)=u56__size:(0,664)=ar(0,5);0;00000000000000000000067;(0,8),0,448;__align:(0,22),0,64;;
+pthread_attr_t:t(0,665)=(0,663)
+._52:Tt(0,666)=u40__data:(0,651),0,320;__size:(0,667)=ar(0,5);0;00000000000000000000047;(0,8),0,320;__align:(0,22),0,64;;
+pthread_mutex_t:t(0,666)
+._53:Tt(0,668)=u48__data:(0,656),0,384;__size:(0,669)=ar(0,5);0;00000000000000000000057;(0,8),0,384;__align:(0,25),0,64;;
+pthread_cond_t:t(0,668)
+._54:Tt(0,670)=u56__data:(0,646),0,448;__size:(0,664),0,448;__align:(0,22),0,64;;
+pthread_rwlock_t:t(0,670)
+._55:Tt(0,671)=u8__size:(0,672)=ar(0,5);0;00000000000000000000007;(0,8),0,64;__align:(0,22),0,64;;
+pthread_rwlockattr_t:t(0,671)
+pthread_spinlock_t:t(0,673)=(0,674)=B(0,15)
+._56:Tt(0,675)=u32__size:(0,676)=ar(0,5);0;00000000000000000000037;(0,8),0,256;__align:(0,22),0,64;;
+pthread_barrier_t:t(0,675)
+._57:Tt(0,677)=u4__size:(0,59),0,32;__align:(0,15),0,32;;
+pthread_barrierattr_t:t(0,677)
+__jmp_buf:t(0,678)=(0,679)=ar(0,5);0;00000000000000000000007;(0,22)
+._58:t(0,680)=ePTHREAD_CREATE_JOINABLE:0,PTHREAD_CREATE_DETACHED:1,;
+._59:t(0,681)=ePTHREAD_MUTEX_TIMED_NP:0,PTHREAD_MUTEX_RECURSIVE_NP:1,PTHREAD_MUTEX_ERRORCHECK_NP:2,PTHREAD_MUTEX_ADAPTIVE_NP:3,PTHREAD_MUTEX_NORMAL:0,PTHREAD_MUTEX_RECURSIVE:1,PTHREAD_MUTEX_ERRORCHECK:2,PTHREAD_MUTEX_DEFAULT:0,PTHREAD_MUTEX_FAST_NP:0,;
+._60:t(0,682)=ePTHREAD_MUTEX_STALLED:0,PTHREAD_MUTEX_STALLED_NP:0,PTHREAD_MUTEX_ROBUST:1,PTHREAD_MUTEX_ROBUST_NP:1,;
+._61:t(0,683)=ePTHREAD_PRIO_NONE:0,PTHREAD_PRIO_INHERIT:1,PTHREAD_PRIO_PROTECT:2,;
+._62:t(0,684)=ePTHREAD_RWLOCK_PREFER_READER_NP:0,PTHREAD_RWLOCK_PREFER_WRITER_NP:1,PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP:2,PTHREAD_RWLOCK_DEFAULT_NP:0,;
+._63:t(0,685)=ePTHREAD_INHERIT_SCHED:0,PTHREAD_EXPLICIT_SCHED:1,;
+._64:t(0,686)=ePTHREAD_SCOPE_SYSTEM:0,PTHREAD_SCOPE_PROCESS:1,;
+._65:t(0,687)=ePTHREAD_PROCESS_PRIVATE:0,PTHREAD_PROCESS_SHARED:1,;
+_pthread_cleanup_buffer:Tt(0,688)=s32__routine:(0,689)=*(0,690)=f(0,29),0,64;__arg:(0,150),64,64;__canceltype:(0,15),128,32;__prev:(0,691)=*(0,688),192,64;;
+._66:t(0,692)=ePTHREAD_CANCEL_ENABLE:0,PTHREAD_CANCEL_DISABLE:1,;
+._67:t(0,693)=ePTHREAD_CANCEL_DEFERRED:0,PTHREAD_CANCEL_ASYNCHRONOUS:1,;
+._68::._69:Tt(0,694)=s72__cancel_jmp_buf:(0,678),0,512;__mask_was_saved:(0,15),512,32;;
+._68:Tt(0,695)=s104__cancel_jmp_buf:(0,696)=ar(0,5);0;0;(0,694),0,576;__pad:(0,697)=ar(0,5);0;00000000000000000000003;(0,150),576,256;;
+__pthread_unwind_buf_t:t(0,695)
+__pthread_cleanup_frame:Tt(0,698)=s24__cancel_routine:(0,689),0,64;__cancel_arg:(0,150),64,64;__do_it:(0,15),128,32;__cancel_type:(0,15),160,32;;
+__pthread_cleanup_class:Tt(0,699)=s24__cancel_routine:/0(0,689),0,64;__cancel_arg:/0(0,150),64,64;__do_it:/0(0,15),128,32;__cancel_type:/0(0,15),160,32;__ct_base ::(0,700)=#(0,699),(0,29),(0,701)=*(0,699),(0,689),(0,150),(0,29);:_ZN23__pthread_cleanup_classC2EPFvPvES0_;2A.;__ct_comp ::(0,700):_ZN23__pthread_cleanup_classC1EPFvPvES0_;2A.;__dt_base ::(0,702)=#(0,699),(0,29),(0,701),(0,29);:_ZN23__pthread_cleanup_classD2Ev;2A.;__dt_comp ::(0,702):_ZN23__pthread_cleanup_classD1Ev;2A.;__setdoit::(0,703)=#(0,699),(0,29),(0,701),(0,15),(0,29);:_ZN23__pthread_cleanup_class9__setdoitEi;2A.;__defer::(0,704)=#(0,699),(0,29),(0,701),(0,29);:_ZN23__pthread_cleanup_class7__deferEv;2A.;__restore::(0,705)=#(0,699),(0,29),(0,706)=*(0,707)=k(0,699),(0,29);:_ZNK23__pthread_cleanup_class9__restoreEv;2B.;;
+__gthread_t:t(0,708)=(0,658)
+__gthread_key_t:t(0,709)=(0,661)
+__gthread_once_t:t(0,710)=(0,662)
+__gthread_mutex_t:t(0,711)=(0,666)
+__gthread_recursive_mutex_t:t(0,712)=(0,666)
+__gthread_cond_t:t(0,713)=(0,668)
+__gthread_time_t:t(0,714)=(0,633)
+_Atomic_word:t(0,715)=(0,15)
+allocator:Tt(0,716)=s1;
+new_allocator:Tt(0,717)=s1__ct_base ::(0,718)=#(0,717),(0,29),(0,719)=*(0,717),(0,29);:_ZN9__gnu_cxx13new_allocatorIcEC2Ev;2A.;__ct_comp ::(0,718):_ZN9__gnu_cxx13new_allocatorIcEC1Ev;2A.;__ct_base ::(0,720)=#(0,717),(0,29),(0,719),(0,721)=&(0,722)=k(0,717),(0,29);:_ZN9__gnu_cxx13new_allocatorIcEC2ERKS1_;2A.;__ct_comp ::(0,720):_ZN9__gnu_cxx13new_allocatorIcEC1ERKS1_;2A.;__dt_base ::(0,718):_ZN9__gnu_cxx13new_allocatorIcED2Ev;2A.;__dt_comp ::(0,718):_ZN9__gnu_cxx13new_allocatorIcED1Ev;2A.;address::(0,723)=#(0,717),(0,724)=(0,561),(0,725)=*(0,722),(0,726)=(0,727)=&(0,8),(0,29);:_ZNK9__gnu_cxx13new_allocatorIcE7addressERc;2B.(0,728)=#(0,717),(0,729)=(0,74),(0,725),(0,730)=(0,731)=&(0,75),(0,29);:_ZNK9__gnu_cxx13new_allocatorIcE7addressERKc;2B.;allocate::(0,732)=#(0,717),(0,724),(0,719),(0,733)=(0,37),(0,734)=*(0,735)=k(0,29),(0,29);:_ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv;2A.;deallocate::(0,736)=#(0,717),(0,29),(0,719),(0,724),(0,733),(0,29);:_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcm;2A.;max_size::(0,737)=#(0,717),(0,733),(0,725),(0,29);:_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv;2B.;;
+allocator:Tt(0,738)=s1!1,020,(0,717);__ct_base ::(0,739)=#(0,738),(0,29),(0,740)=*(0,738),(0,29);:_ZNSaIcEC2Ev;2A.;__ct_comp ::(0,739):_ZNSaIcEC1Ev;2A.;__ct_base ::(0,741)=#(0,738),(0,29),(0,740),(0,742)=&(0,743)=k(0,738),(0,29);:_ZNSaIcEC2ERKS_;2A.;__ct_comp ::(0,741):_ZNSaIcEC1ERKS_;2A.;operator=::(0,744)=#(0,738),(0,745)=&(0,738),(0,740),(0,742),(0,29);:_ZNSaIcEaSERKS_;2A.;__dt_base ::(0,739):_ZNSaIcED2Ev;2A.;__dt_comp ::(0,739):_ZNSaIcED1Ev;2A.;;
+new_allocator:Tt(0,746)=s1__ct_base ::(0,747)=#(0,746),(0,29),(0,748)=*(0,746),(0,29);:_ZN9__gnu_cxx13new_allocatorIwEC2Ev;2A.;__ct_comp ::(0,747):_ZN9__gnu_cxx13new_allocatorIwEC1Ev;2A.;__ct_base ::(0,749)=#(0,746),(0,29),(0,748),(0,750)=&(0,751)=k(0,746),(0,29);:_ZN9__gnu_cxx13new_allocatorIwEC2ERKS1_;2A.;__ct_comp ::(0,749):_ZN9__gnu_cxx13new_allocatorIwEC1ERKS1_;2A.;__dt_base ::(0,747):_ZN9__gnu_cxx13new_allocatorIwED2Ev;2A.;__dt_comp ::(0,747):_ZN9__gnu_cxx13new_allocatorIwED1Ev;2A.;address::(0,752)=#(0,746),(0,753)=(0,754)=*(0,30),(0,755)=*(0,751),(0,756)=(0,757)=&(0,30),(0,29);:_ZNK9__gnu_cxx13new_allocatorIwE7addressERw;2B.(0,758)=#(0,746),(0,759)=(0,760)=*(0,761)=k(0,30),(0,755),(0,762)=(0,763)=&(0,761),(0,29);:_ZNK9__gnu_cxx13new_allocatorIwE7addressERKw;2B.;allocate::(0,764)=#(0,746),(0,753),(0,748),(0,765)=(0,37),(0,734),(0,29);:_ZN9__gnu_cxx13new_allocatorIwE8allocateEmPKv;2A.;deallocate::(0,766)=#(0,746),(0,29),(0,748),(0,753),(0,765),(0,29);:_ZN9__gnu_cxx13new_allocatorIwE10deallocateEPwm;2A.;max_size::(0,767)=#(0,746),(0,765),(0,755),(0,29);:_ZNK9__gnu_cxx13new_allocatorIwE8max_sizeEv;2B.;;
+allocator:Tt(0,768)=s1!1,020,(0,746);__ct_base ::(0,769)=#(0,768),(0,29),(0,770)=*(0,768),(0,29);:_ZNSaIwEC2Ev;2A.;__ct_comp ::(0,769):_ZNSaIwEC1Ev;2A.;__ct_base ::(0,771)=#(0,768),(0,29),(0,770),(0,772)=&(0,773)=k(0,768),(0,29);:_ZNSaIwEC2ERKS_;2A.;__ct_comp ::(0,771):_ZNSaIwEC1ERKS_;2A.;operator=::(0,774)=#(0,768),(0,775)=&(0,768),(0,770),(0,772),(0,29);:_ZNSaIwEaSERKS_;2A.;__dt_base ::(0,769):_ZNSaIwED2Ev;2A.;__dt_comp ::(0,769):_ZNSaIwED1Ev;2A.;;
+plus:Tt(0,776)=s1;
+minus:Tt(0,777)=s1;
+multiplies:Tt(0,778)=s1;
+divides:Tt(0,779)=s1;
+modulus:Tt(0,780)=s1;
+negate:Tt(0,781)=s1;
+equal_to:Tt(0,782)=s1;
+not_equal_to:Tt(0,783)=s1;
+greater:Tt(0,784)=s1;
+binary_function:Tt(0,785)=s1;
+greater:Tt(0,786)=s1!1,020,(0,785);operator()::(0,787)=#(0,786),(0,33),(0,788)=*(0,789)=k(0,786),(0,790)=*(0,791)=k(0,792)=B(0,29),(0,790),(0,29);:_ZNKSt7greaterIPVKvEclES1_S1_;2B.;;
+less:Tt(0,793)=s1;
+less:Tt(0,794)=s1!1,020,(0,785);operator()::(0,795)=#(0,794),(0,33),(0,796)=*(0,797)=k(0,794),(0,790),(0,790),(0,29);:_ZNKSt4lessIPVKvEclES1_S1_;2B.;;
+greater_equal:Tt(0,798)=s1;
+greater_equal:Tt(0,799)=s1!1,020,(0,785);operator()::(0,800)=#(0,799),(0,33),(0,801)=*(0,802)=k(0,799),(0,790),(0,790),(0,29);:_ZNKSt13greater_equalIPVKvEclES1_S1_;2B.;;
+less_equal:Tt(0,803)=s1;
+less_equal:Tt(0,804)=s1!1,020,(0,785);operator()::(0,805)=#(0,804),(0,33),(0,806)=*(0,807)=k(0,804),(0,790),(0,790),(0,29);:_ZNKSt10less_equalIPVKvEclES1_S1_;2B.;;
+logical_and:Tt(0,808)=s1;
+logical_or:Tt(0,809)=s1;
+logical_not:Tt(0,810)=s1;
+bit_and:Tt(0,811)=s1;
+bit_or:Tt(0,812)=s1;
+bit_xor:Tt(0,813)=s1;
+bit_not:Tt(0,814)=s1;
+__allocator_traits_base:Tt(0,815)=s1;
+__conditional_type:Tt(0,816)=s1;
+__numeric_traits_integer:Tt(0,817)=s1__min:/2(0,72):_ZN9__gnu_cxx24__numeric_traits_integerIiE5__minE;__max:/2(0,72):_ZN9__gnu_cxx24__numeric_traits_integerIiE5__maxE;__is_signed:/2(0,175):_ZN9__gnu_cxx24__numeric_traits_integerIiE11__is_signedE;__digits:/2(0,72):_ZN9__gnu_cxx24__numeric_traits_integerIiE8__digitsE;;
+__numeric_traits:Tt(0,818)=s1!1,020,(0,817);;
+._72:t(0,819)=eP_ALL:0,P_PID:1,P_PGID:2,;
+idtype_t:t(0,819)
+._73:Tt(0,820)=s8quot:(0,15),0,32;rem:(0,15),32,32;;
+div_t:t(0,820)
+._74:Tt(0,821)=s16quot:(0,22),0,64;rem:(0,22),64,64;;
+ldiv_t:t(0,821)
+._75:Tt(0,822)=s16quot:(0,25),0,64;rem:(0,25),64,64;;
+lldiv_t:t(0,822)
+u_char:t(0,823)=(0,501)
+u_short:t(0,824)=(0,502)
+u_int:t(0,825)=(0,503)
+u_long:t(0,826)=(0,504)
+quad_t:t(0,827)=(0,521)
+u_quad_t:t(0,828)=(0,522)
+fsid_t:t(0,829)=(0,535)
+loff_t:t(0,830)=(0,559)
+ino_t:t(0,831)=(0,528)
+ino64_t:t(0,832)=(0,529)
+dev_t:t(0,833)=(0,525)
+gid_t:t(0,834)=(0,527)
+mode_t:t(0,835)=(0,530)
+nlink_t:t(0,836)=(0,531)
+uid_t:t(0,837)=(0,526)
+off_t:t(0,838)=(0,532)
+off64_t:t(0,839)=(0,533)
+id_t:t(0,840)=(0,540)
+ssize_t:t(0,841)=(0,556)
+daddr_t:t(0,842)=(0,544)
+caddr_t:t(0,843)=(0,560)
+key_t:t(0,844)=(0,545)
+useconds_t:t(0,845)=(0,542)
+suseconds_t:t(0,846)=(0,543)
+ulong:t(0,847)=(0,17)
+ushort:t(0,848)=(0,19)
+uint:t(0,849)=(0,18)
+u_int8_t:t(0,850)=(0,506)
+u_int16_t:t(0,851)=(0,508)
+u_int32_t:t(0,852)=(0,510)
+u_int64_t:t(0,853)=(0,512)
+register_t:t(0,854)=(0,22)
+._76:Tt(0,855)=s128__val:(0,856)=ar(0,5);0;00000000000000000000017;(0,17),0,1024;;
+__sigset_t:t(0,855)
+sigset_t:t(0,857)=(0,855)
+__fd_mask:t(0,858)=(0,22)
+._77:Tt(0,859)=s128fds_bits:(0,860)=ar(0,5);0;00000000000000000000017;(0,858),0,1024;;
+fd_set:t(0,859)
+fd_mask:t(0,861)=(0,858)
+blksize_t:t(0,862)=(0,548)
+blkcnt_t:t(0,863)=(0,549)
+fsblkcnt_t:t(0,864)=(0,551)
+fsfilcnt_t:t(0,865)=(0,553)
+blkcnt64_t:t(0,866)=(0,550)
+fsblkcnt64_t:t(0,867)=(0,552)
+fsfilcnt64_t:t(0,868)=(0,554)
+random_data:Tt(0,869)=s48fptr:(0,870)=*(0,567),0,64;rptr:(0,870),64,64;state:(0,870),128,64;rand_type:(0,15),192,32;rand_deg:(0,15),224,32;rand_sep:(0,15),256,32;end_ptr:(0,870),320,64;;
+drand48_data:Tt(0,871)=s24__x:(0,872)=ar(0,5);0;00000000000000000000002;(0,19),0,48;__old_x:(0,872),48,48;__c:(0,19),96,16;__init:(0,19),112,16;__a:(0,26),128,64;;
+__compar_fn_t:t(0,873)=(0,874)=*(0,875)=f(0,15)
+comparison_fn_t:t(0,876)=(0,873)
+__compar_d_fn_t:t(0,877)=(0,878)=*(0,879)=f(0,15)
+_G_fpos_t:Tt(0,880)=s16__pos:(0,532),0,64;__state:(0,60),64,64;;
+__fpos_t:t(0,881)=(0,880)
+_G_fpos64_t:Tt(0,882)=s16__pos:(0,533),0,64;__state:(0,60),64,64;;
+__fpos64_t:t(0,883)=(0,882)
+_IO_lock_t:t(0,884)=(0,29)
+_IO_FILE:Tt(0,63)=s216_flags:(0,15),0,32;_IO_read_ptr:(0,561),64,64;_IO_read_end:(0,561),128,64;_IO_read_base:(0,561),192,64;_IO_write_base:(0,561),256,64;_IO_write_ptr:(0,561),320,64;_IO_write_end:(0,561),384,64;_IO_buf_base:(0,561),448,64;_IO_buf_end:(0,561),512,64;_IO_save_base:(0,561),576,64;_IO_backup_base:(0,561),640,64;_IO_save_end:(0,561),704,64;_markers:(0,885)=*(0,886)=xs_IO_marker:,768,64;_chain:(0,887)=*(0,63),832,64;_fileno:(0,15),896,32;_flags2:(0,15),928,32;_old_offset:(0,532),960,64;_cur_column:(0,19),1024,16;_vtable_offset:(0,24),1040,8;_shortbuf:(0,888)=ar(0,5);0;0;(0,8),1048,8;_lock:(0,889)=*(0,884),1088,64;_offset:(0,533),1152,64;_codecvt:(0,890)=*(0,891)=xs_IO_codecvt:,1216,64;_wide_data:(0,892)=*(0,893)=xs_IO_wide_data:,1280,64;_freeres_list:(0,887),1344,64;_freeres_buf:(0,150),1408,64;__pad5:(0,55),1472,64;_mode:(0,15),1536,32;_unused2:(0,894)=ar(0,5);0;00000000000000000000023;(0,8),1568,160;;
+cookie_read_function_t:t(0,895)=(0,896)=f(0,556)
+cookie_write_function_t:t(0,897)=(0,898)=f(0,556)
+cookie_seek_function_t:t(0,899)=(0,900)=f(0,15)
+cookie_close_function_t:t(0,901)=(0,902)=f(0,15)
+_IO_cookie_io_functions_t:Tt(0,903)=s32read:(0,904)=*(0,895),0,64;write:(0,905)=*(0,897),64,64;seek:(0,906)=*(0,899),128,64;close:(0,907)=*(0,901),192,64;;
+cookie_io_functions_t:t(0,908)=(0,903)
+va_list:t(0,909)=(0,56)
+fpos_t:t(0,910)=(0,881)
+fpos64_t:t(0,911)=(0,883)
+error_t:t(0,912)=(0,15)
+allocator_traits:Tt(0,913)=s1allocate::(0,914)=f(0,915)=(0,561):_ZNSt16allocator_traitsISaIcEE8allocateERS0_m;2A?(0,916)=f(0,915):_ZNSt16allocator_traitsISaIcEE8allocateERS0_mPKv;2A?;deallocate::(0,917)=f(0,29):_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcm;2A?;max_size::(0,918)=f(0,919)=(0,37):_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_;2A?;select_on_container_copy_construction::(0,920)=f(0,921)=(0,738):_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_;2A?;;
+__alloc_traits:Tt(0,922)=s1!1,020,(0,913);_S_select_on_copy::(0,923)=f(0,738):_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_;2A?;_S_on_swap::(0,924)=f(0,29):_ZN9__gnu_cxx14__alloc_traitsISaIcEcE10_S_on_swapERS1_S3_;2A?;_S_propagate_on_copy_assign::(0,925)=f(0,33):_ZN9__gnu_cxx14__alloc_traitsISaIcEcE27_S_propagate_on_copy_assignEv;2A?;_S_propagate_on_move_assign::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIcEcE27_S_propagate_on_move_assignEv;2A?;_S_propagate_on_swap::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIcEcE20_S_propagate_on_swapEv;2A?;_S_always_equal::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIcEcE15_S_always_equalEv;2A?;_S_nothrow_move::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIcEcE15_S_nothrow_moveEv;2A?;;
+__alloc_traits::rebind:Tt(0,926)=s1;
+basic_string::_Alloc_hider:Tt(0,927)=s8!1,020,(0,738);_M_p:(0,928)=(0,929)=(0,915),0,64;__ct_base ::(0,930)=#(0,927),(0,29),(0,931)=*(0,927),(0,928),(0,742),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC2EPcRKS3_;2A.;__ct_comp ::(0,930):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_;2A.;__ct_base ::(0,932)=#(0,927),(0,29),(0,931),(0,928),(0,933)=&(0,738),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC2EPcOS3_;2A.;__ct_comp ::(0,932):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_;2A.;;
+basic_string::._70:t(0,934)=e_S_local_capacity:15,;
+basic_string::._71:Tt(0,935)=u16_M_local_buf:(0,936)=ar(0,5);0;00000000000000000000017;(0,8),0,128;_M_allocated_capacity:(0,937)=(0,938)=(0,919),0,64;;
+basic_string:Tt(0,41)=s32npos:/2(0,939)=k(0,937):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4nposE;_M_dataplus:/0(0,927),0,64;_M_string_length:/0(0,937),64,64;:/0(0,935),128,128;_M_data::(0,940)=#(0,41),(0,29),(0,941)=*(0,41),(0,928),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc;0A.;_M_length::(0,942)=#(0,41),(0,29),(0,941),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEm;0A.;_M_data::(0,943)=#(0,41),(0,928),(0,944)=*(0,945)=k(0,41),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv;0B.;_M_local_data::(0,946)=#(0,41),(0,928),(0,941),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv;0A.(0,947)=#(0,41),(0,948)=(0,949)=(0,950)=(0,74),(0,944),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv;0B.;_M_capacity::(0,942):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm;0A.;_M_set_length::(0,942):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm;0A.;_M_is_local::(0,951)=#(0,41),(0,33),(0,944),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv;0B.;_M_create::(0,952)=#(0,41),(0,928),(0,941),(0,953)=&(0,937),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm;0A.;_M_dispose::(0,954)=#(0,41),(0,29),(0,941),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv;0A.;_M_destroy::(0,955)=#(0,41),(0,29),(0,941),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEm;0A.;_M_construct_aux_2::(0,956)=#(0,41),(0,29),(0,941),(0,937),(0,8),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE18_M_construct_aux_2Emc;0A.;_M_construct::(0,956):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc;0A.;_M_get_allocator::(0,957)=#(0,41),(0,958)=&(0,959)=(0,960)=(0,961)=(0,962)=(0,738),(0,941),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv;0A.(0,963)=#(0,41),(0,964)=&(0,965)=k(0,959),(0,944),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv;0B.;_M_check::(0,966)=#(0,41),(0,937),(0,944),(0,937),(0,74),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc;0B.;_M_check_length::(0,967)=#(0,41),(0,29),(0,944),(0,937),(0,937),(0,74),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEmmPKc;0B.;_M_limit::(0,968)=#(0,41),(0,937),(0,944),(0,937),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEmm;0B.;_M_disjunct::(0,969)=#(0,41),(0,33),(0,944),(0,74),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc;0B.;_S_copy::(0,970)=f(0,29):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcm;0A?;_S_move::(0,970):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcm;0A?;_S_assign::(0,971)=f(0,29):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcmc;0A?;_S_copy_chars::(0,972)=f(0,29):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS5_S4_EES8_;0A?(0,973)=f(0,29):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcS4_EESA_;0A?(0,974)=f(0,29):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_;0A?(0,975)=f(0,29):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_;0A?;_S_compare::(0,976)=f(0,15):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEmm;0A?;_M_assign::(0,977)=#(0,41),(0,29),(0,941),(0,978)=&(0,945),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_;0A.;_M_mutate::(0,979)=#(0,41),(0,29),(0,941),(0,937),(0,937),(0,74),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm;0A.;_M_erase::(0,980)=#(0,41),(0,29),(0,941),(0,937),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEmm;0A.;__ct_base ::(0,981)=#(0,41),(0,29),(0,941),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2Ev;2A.;__ct_comp ::(0,981):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev;2A.;__ct_base ::(0,982)=#(0,41),(0,29),(0,941),(0,742),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS3_;2A.;__ct_comp ::(0,982):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_;2A.;__ct_base ::(0,977):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_;2A.;__ct_comp ::(0,977):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_;2A.;__ct_base ::(0,983)=#(0,41),(0,29),(0,941),(0,978),(0,937),(0,742),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_mRKS3_;2A.;__ct_comp ::(0,983):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_mRKS3_;2A.;__ct_base ::(0,984)=#(0,41),(0,29),(0,941),(0,978),(0,937),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_mm;2A.;__ct_comp ::(0,984):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_mm;2A.;__ct_base ::(0,985)=#(0,41),(0,29),(0,941),(0,978),(0,937),(0,937),(0,742),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_mmRKS3_;2A.;__ct_comp ::(0,985):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_mmRKS3_;2A.;__ct_base ::(0,986)=#(0,41),(0,29),(0,941),(0,74),(0,937),(0,742),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_;2A.;__ct_comp ::(0,986):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcmRKS3_;2A.;__ct_base ::(0,987)=#(0,41),(0,29),(0,941),(0,74),(0,742),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_;2A.;__ct_comp ::(0,987):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_;2A.;__ct_base ::(0,988)=#(0,41),(0,29),(0,941),(0,937),(0,8),(0,742),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EmcRKS3_;2A.;__ct_comp ::(0,988):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EmcRKS3_;2A.;__ct_base ::(0,989)=#(0,41),(0,29),(0,941),(0,990)=&(0,41),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EOS4_;2A.;__ct_comp ::(0,989):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_;2A.;__ct_base ::(0,991)=#(0,41),(0,29),(0,941),(0,992)=xsinitializer_list:,(0,742),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ESt16initializer_listIcERKS3_;2A.;__ct_comp ::(0,991):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ESt16initializer_listIcERKS3_;2A.;__ct_base ::(0,993)=#(0,41),(0,29),(0,941),(0,978),(0,742),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_RKS3_;2A.;__ct_comp ::(0,993):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_RKS3_;2A.;__ct_base ::(0,994)=#(0,41),(0,29),(0,941),(0,990),(0,742),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EOS4_RKS3_;2A.;__ct_comp ::(0,994):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_RKS3_;2A.;__dt_base ::(0,995)=#(0,41),(0,29),(0,941),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev;2A.;__dt_comp ::(0,995):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev;2A.;operator=::(0,996)=#(0,41),(0,997)=&(0,41),(0,941),(0,978),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_;2A.(0,998)=#(0,41),(0,997),(0,941),(0,74),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc;2A.(0,999)=#(0,41),(0,997),(0,941),(0,8),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEc;2A.(0,1000)=#(0,41),(0,997),(0,941),(0,990),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_;2A.(0,1001)=#(0,41),(0,997),(0,941),(0,992),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSESt16initializer_listIcE;2A.;begin::(0,1002)=#(0,41),(0,1003)=(0,1004)=xs__normal_iterator:,(0,941),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv;2A.(0,1005)=#(0,41),(0,1006)=(0,1007)=xs__normal_iterator:,(0,944),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv;2B.;end::(0,1002):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv;2A.(0,1005):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv;2B.;rbegin::(0,1008)=#(0,41),(0,1009)=(0,1010)=xsreverse_iterator:,(0,941),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv;2A.(0,1011)=#(0,41),(0,1012)=(0,1013)=xsreverse_iterator:,(0,944),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv;2B.;rend::(0,1008):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4rendEv;2A.(0,1011):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4rendEv;2B.;cbegin::(0,1005):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6cbeginEv;2B.;cend::(0,1005):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4cendEv;2B.;crbegin::(0,1011):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7crbeginEv;2B.;crend::(0,1011):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5crendEv;2B.;size::(0,1014)=#(0,41),(0,937),(0,944),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv;2B.;length::(0,1014):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv;2B.;max_size::(0,1014):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv;2B.;resize::(0,956):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc;2A.(0,942):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEm;2A.;shrink_to_fit::(0,1015)=#(0,41),(0,29),(0,941),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13shrink_to_fitEv;2A.;capacity::(0,1014):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv;2B.;reserve::(0,1016)=#(0,41),(0,29),(0,941),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm;2A.;clear::(0,1015):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv;2A.;empty::(0,1017)=#(0,41),(0,33),(0,944),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv;2B.;operator[]::(0,1018)=#(0,41),(0,1019)=(0,1020)=(0,1021)=&(0,1022)=k(0,1023)=(0,1024)=(0,8),(0,944),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm;2B.(0,1025)=#(0,41),(0,1026)=(0,1027)=(0,1028)=&(0,1023),(0,941),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm;2A.;at::(0,1029)=#(0,41),(0,1019),(0,944),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEm;2B.(0,1025):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE2atEm;2A.;front::(0,1030)=#(0,41),(0,1026),(0,941),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5frontEv;2A.(0,1031)=#(0,41),(0,1019),(0,944),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5frontEv;2B.;back::(0,1030):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv;2A.(0,1031):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv;2B.;operator+=::(0,996):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_;2A.(0,998):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc;2A.(0,999):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc;2A.(0,1001):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLESt16initializer_listIcE;2A.;append::(0,996):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_;2A.(0,1032)=#(0,41),(0,997),(0,941),(0,978),(0,937),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_mm;2A.(0,1033)=#(0,41),(0,997),(0,941),(0,74),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm;2A.(0,998):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc;2A.(0,1034)=#(0,41),(0,997),(0,941),(0,937),(0,8),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEmc;2A.(0,1001):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendESt16initializer_listIcE;2A.;push_back::(0,1035)=#(0,41),(0,29),(0,941),(0,8),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc;2A.;assign::(0,996):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_;2A.(0,1000):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEOS4_;2A.(0,1036)=#(0,41),(0,997),(0,941),(0,978),(0,937),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_mm;2A.(0,1033):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcm;2A.(0,998):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc;2A.(0,1034):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEmc;2A.(0,1001):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignESt16initializer_listIcE;2A.;insert::(0,1037)=#(0,41),(0,1003),(0,941),(0,1006),(0,937),(0,8),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEN9__gnu_cxx17__normal_iteratorIPKcS4_EEmc;2A.(0,1038)=#(0,41),(0,1003),(0,941),(0,1006),(0,992),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEN9__gnu_cxx17__normal_iteratorIPKcS4_EESt16initializer_listIcE;2A.(0,1039)=#(0,41),(0,997),(0,941),(0,937),(0,978),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmRKS4_;2A.(0,1040)=#(0,41),(0,997),(0,941),(0,937),(0,978),(0,937),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmRKS4_mm;2A.(0,1041)=#(0,41),(0,997),(0,941),(0,937),(0,74),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKcm;2A.(0,1042)=#(0,41),(0,997),(0,941),(0,937),(0,74),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc;2A.(0,1043)=#(0,41),(0,997),(0,941),(0,937),(0,937),(0,8),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmmc;2A.(0,1044)=#(0,41),(0,1003),(0,941),(0,1045)=(0,1006),(0,8),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEN9__gnu_cxx17__normal_iteratorIPKcS4_EEc;2A.;erase::(0,1046)=#(0,41),(0,997),(0,941),(0,937),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEmm;2A.(0,1047)=#(0,41),(0,1003),(0,941),(0,1045),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EE;2A.(0,1048)=#(0,41),(0,1003),(0,941),(0,1045),(0,1045),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_;2A.;pop_back::(0,1015):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv;2A.;replace::(0,1049)=#(0,41),(0,997),(0,941),(0,937),(0,937),(0,978),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmRKS4_;2A.(0,1050)=#(0,41),(0,997),(0,941),(0,937),(0,937),(0,978),(0,937),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmRKS4_mm;2A.(0,1051)=#(0,41),(0,997),(0,941),(0,937),(0,937),(0,74),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKcm;2A.(0,1052)=#(0,41),(0,997),(0,941),(0,937),(0,937),(0,74),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmPKc;2A.(0,1053)=#(0,41),(0,997),(0,941),(0,937),(0,937),(0,937),(0,8),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmmc;2A.(0,1054)=#(0,41),(0,997),(0,941),(0,1045),(0,1045),(0,978),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_RKS4_;2A.(0,1055)=#(0,41),(0,997),(0,941),(0,1045),(0,1045),(0,74),(0,937),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_S8_m;2A.(0,1056)=#(0,41),(0,997),(0,941),(0,1045),(0,1045),(0,74),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_S8_;2A.(0,1057)=#(0,41),(0,997),(0,941),(0,1045),(0,1045),(0,937),(0,8),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_mc;2A.(0,1058)=#(0,41),(0,997),(0,941),(0,1045),(0,1045),(0,561),(0,561),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_PcSA_;2A.(0,1059)=#(0,41),(0,997),(0,941),(0,1045),(0,1045),(0,74),(0,74),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_S8_S8_;2A.(0,1060)=#(0,41),(0,997),(0,941),(0,1045),(0,1045),(0,1003),(0,1003),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_NS6_IPcS4_EESB_;2A.(0,1061)=#(0,41),(0,997),(0,941),(0,1045),(0,1045),(0,1006),(0,1006),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_S9_S9_;2A.(0,1062)=#(0,41),(0,997),(0,941),(0,1006),(0,1006),(0,992),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEN9__gnu_cxx17__normal_iteratorIPKcS4_EES9_St16initializer_listIcE;2A.;_M_replace_aux::(0,1053):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc;0A.;_M_replace::(0,1051):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm;0A.;_M_append::(0,1033):_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm;0A.;copy::(0,1063)=#(0,41),(0,937),(0,944),(0,561),(0,937),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4copyEPcmm;2B.;swap::(0,1064)=#(0,41),(0,29),(0,941),(0,997),(0,29);:_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_;2A.;c_str::(0,1065)=#(0,41),(0,74),(0,944),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv;2B.;data::(0,1065):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv;2B.;get_allocator::(0,1066)=#(0,41),(0,959),(0,944),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv;2B.;find::(0,1067)=#(0,41),(0,937),(0,944),(0,74),(0,937),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcmm;2B.(0,1068)=#(0,41),(0,937),(0,944),(0,978),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_m;2B.(0,1069)=#(0,41),(0,937),(0,944),(0,74),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcm;2B.(0,1070)=#(0,41),(0,937),(0,944),(0,8),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm;2B.;rfind::(0,1071)=#(0,41),(0,937),(0,944),(0,978),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindERKS4_m;2B.(0,1067):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEPKcmm;2B.(0,1072)=#(0,41),(0,937),(0,944),(0,74),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEPKcm;2B.(0,1073)=#(0,41),(0,937),(0,944),(0,8),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEcm;2B.;find_first_of::(0,1074)=#(0,41),(0,937),(0,944),(0,978),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofERKS4_m;2B.(0,1067):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEPKcmm;2B.(0,1075)=#(0,41),(0,937),(0,944),(0,74),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEPKcm;2B.(0,1076)=#(0,41),(0,937),(0,944),(0,8),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEcm;2B.;find_last_of::(0,1077)=#(0,41),(0,937),(0,944),(0,978),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofERKS4_m;2B.(0,1067):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcmm;2B.(0,1078)=#(0,41),(0,937),(0,944),(0,74),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcm;2B.(0,1079)=#(0,41),(0,937),(0,944),(0,8),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEcm;2B.;find_first_not_of::(0,1080)=#(0,41),(0,937),(0,944),(0,978),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofERKS4_m;2B.(0,1067):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEPKcmm;2B.(0,1081)=#(0,41),(0,937),(0,944),(0,74),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEPKcm;2B.(0,1082)=#(0,41),(0,937),(0,944),(0,8),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEcm;2B.;find_last_not_of::(0,1083)=#(0,41),(0,937),(0,944),(0,978),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofERKS4_m;2B.(0,1067):_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEPKcmm;2B.(0,1084)=#(0,41),(0,937),(0,944),(0,74),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEPKcm;2B.(0,1085)=#(0,41),(0,937),(0,944),(0,8),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEcm;2B.;substr::(0,1086)=#(0,41),(0,41),(0,944),(0,937),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm;2B.;compare::(0,1087)=#(0,41),(0,15),(0,944),(0,978),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_;2B.(0,1088)=#(0,41),(0,15),(0,944),(0,937),(0,937),(0,978),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEmmRKS4_;2B.(0,1089)=#(0,41),(0,15),(0,944),(0,937),(0,937),(0,978),(0,937),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEmmRKS4_mm;2B.(0,1090)=#(0,41),(0,15),(0,944),(0,74),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc;2B.(0,1091)=#(0,41),(0,15),(0,944),(0,937),(0,937),(0,74),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEmmPKc;2B.(0,1092)=#(0,41),(0,15),(0,944),(0,937),(0,937),(0,74),(0,937),(0,29);:_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEmmPKcm;2B.;;
+initializer_list:Tt(0,992)=s16_M_array:/0(0,1093)=(0,74),0,64;_M_len:/0(0,1094)=(0,37),64,64;__ct_base ::(0,1095)=#(0,992),(0,29),(0,1096)=*(0,992),(0,1097)=(0,74),(0,1094),(0,29);:_ZNSt16initializer_listIcEC2EPKcm;0A.;__ct_comp ::(0,1095):_ZNSt16initializer_listIcEC1EPKcm;0A.;__ct_base ::(0,1098)=#(0,992),(0,29),(0,1096),(0,29);:_ZNSt16initializer_listIcEC2Ev;2A.;__ct_comp ::(0,1098):_ZNSt16initializer_listIcEC1Ev;2A.;size::(0,1099)=#(0,992),(0,1094),(0,1100)=*(0,1101)=k(0,992),(0,29);:_ZNKSt16initializer_listIcE4sizeEv;2B.;begin::(0,1102)=#(0,992),(0,1097),(0,1100),(0,29);:_ZNKSt16initializer_listIcE5beginEv;2B.;end::(0,1102):_ZNKSt16initializer_listIcE3endEv;2B.;;
+__conditional_type:Tt(0,1103)=s1;
+__numeric_traits_floating:Tt(0,1104)=s1__max_digits10:/2(0,72):_ZN9__gnu_cxx25__numeric_traits_floatingIfE14__max_digits10E;__is_signed:/2(0,175):_ZN9__gnu_cxx25__numeric_traits_floatingIfE11__is_signedE;__digits10:/2(0,72):_ZN9__gnu_cxx25__numeric_traits_floatingIfE10__digits10E;__max_exponent10:/2(0,72):_ZN9__gnu_cxx25__numeric_traits_floatingIfE16__max_exponent10E;;
+__numeric_traits:Tt(0,1105)=s1!1,020,(0,1104);;
+__are_same::._7:t(0,1106)=e__value:1,;
+__are_same:Tt(0,1107)=s1;
+__are_same::._6:t(0,1108)=e__value:0,;
+__are_same:Tt(0,1109)=s1;
+__conditional_type:Tt(0,1110)=s1;
+__numeric_traits_floating:Tt(0,1111)=s1__max_digits10:/2(0,72):_ZN9__gnu_cxx25__numeric_traits_floatingIdE14__max_digits10E;__is_signed:/2(0,175):_ZN9__gnu_cxx25__numeric_traits_floatingIdE11__is_signedE;__digits10:/2(0,72):_ZN9__gnu_cxx25__numeric_traits_floatingIdE10__digits10E;__max_exponent10:/2(0,72):_ZN9__gnu_cxx25__numeric_traits_floatingIdE16__max_exponent10E;;
+__numeric_traits:Tt(0,1112)=s1!1,020,(0,1111);;
+__are_same::._6:t(0,1113)=e__value:0,;
+__are_same:Tt(0,1114)=s1;
+__are_same::._7:t(0,1115)=e__value:1,;
+__are_same:Tt(0,1116)=s1;
+__conditional_type:Tt(0,1117)=s1;
+__numeric_traits_floating:Tt(0,1118)=s1__max_digits10:/2(0,72):_ZN9__gnu_cxx25__numeric_traits_floatingIeE14__max_digits10E;__is_signed:/2(0,175):_ZN9__gnu_cxx25__numeric_traits_floatingIeE11__is_signedE;__digits10:/2(0,72):_ZN9__gnu_cxx25__numeric_traits_floatingIeE10__digits10E;__max_exponent10:/2(0,72):_ZN9__gnu_cxx25__numeric_traits_floatingIeE16__max_exponent10E;;
+__numeric_traits:Tt(0,1119)=s1!1,020,(0,1118);;
+__are_same::._6:t(0,1120)=e__value:0,;
+__are_same:Tt(0,1121)=s1;
+__are_same::._6:t(0,1122)=e__value:0,;
+__are_same:Tt(0,1123)=s1;
+allocator_traits:Tt(0,1124)=s1allocate::(0,1125)=f(0,1126)=(0,754):_ZNSt16allocator_traitsISaIwEE8allocateERS0_m;2A?(0,1127)=f(0,1126):_ZNSt16allocator_traitsISaIwEE8allocateERS0_mPKv;2A?;deallocate::(0,1128)=f(0,29):_ZNSt16allocator_traitsISaIwEE10deallocateERS0_Pwm;2A?;max_size::(0,1129)=f(0,1130)=(0,37):_ZNSt16allocator_traitsISaIwEE8max_sizeERKS0_;2A?;select_on_container_copy_construction::(0,1131)=f(0,1132)=(0,768):_ZNSt16allocator_traitsISaIwEE37select_on_container_copy_constructionERKS0_;2A?;;
+__alloc_traits:Tt(0,1133)=s1!1,020,(0,1124);_S_select_on_copy::(0,1134)=f(0,768):_ZN9__gnu_cxx14__alloc_traitsISaIwEwE17_S_select_on_copyERKS1_;2A?;_S_on_swap::(0,1135)=f(0,29):_ZN9__gnu_cxx14__alloc_traitsISaIwEwE10_S_on_swapERS1_S3_;2A?;_S_propagate_on_copy_assign::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIwEwE27_S_propagate_on_copy_assignEv;2A?;_S_propagate_on_move_assign::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIwEwE27_S_propagate_on_move_assignEv;2A?;_S_propagate_on_swap::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIwEwE20_S_propagate_on_swapEv;2A?;_S_always_equal::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIwEwE15_S_always_equalEv;2A?;_S_nothrow_move::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIwEwE15_S_nothrow_moveEv;2A?;;
+__alloc_traits::rebind:Tt(0,1136)=s1;
+basic_string::_Alloc_hider:Tt(0,1137)=s8!1,020,(0,768);_M_p:(0,1138)=(0,1139)=(0,1126),0,64;__ct_base ::(0,1140)=#(0,1137),(0,29),(0,1141)=*(0,1137),(0,1138),(0,772),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12_Alloc_hiderC2EPwRKS3_;2A.;__ct_comp ::(0,1140):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12_Alloc_hiderC1EPwRKS3_;2A.;__ct_base ::(0,1142)=#(0,1137),(0,29),(0,1141),(0,1138),(0,1143)=&(0,768),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12_Alloc_hiderC2EPwOS3_;2A.;__ct_comp ::(0,1142):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12_Alloc_hiderC1EPwOS3_;2A.;;
+basic_string::._70:t(0,1144)=e_S_local_capacity:3,;
+basic_string::._71:Tt(0,1145)=u16_M_local_buf:(0,1146)=ar(0,5);0;00000000000000000000003;(0,30),0,128;_M_allocated_capacity:(0,1147)=(0,1148)=(0,1130),0,64;;
+basic_string:Tt(0,43)=s32npos:/2(0,1149)=k(0,1147):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4nposE;_M_dataplus:/0(0,1137),0,64;_M_string_length:/0(0,1147),64,64;:/0(0,1145),128,128;_M_data::(0,1150)=#(0,43),(0,29),(0,1151)=*(0,43),(0,1138),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7_M_dataEPw;0A.;_M_length::(0,1152)=#(0,43),(0,29),(0,1151),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE9_M_lengthEm;0A.;_M_data::(0,1153)=#(0,43),(0,1138),(0,1154)=*(0,1155)=k(0,43),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7_M_dataEv;0B.;_M_local_data::(0,1156)=#(0,43),(0,1138),(0,1151),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE13_M_local_dataEv;0A.(0,1157)=#(0,43),(0,1158)=(0,1159)=(0,1160)=(0,760),(0,1154),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE13_M_local_dataEv;0B.;_M_capacity::(0,1152):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE11_M_capacityEm;0A.;_M_set_length::(0,1152):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE13_M_set_lengthEm;0A.;_M_is_local::(0,1161)=#(0,43),(0,33),(0,1154),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE11_M_is_localEv;0B.;_M_create::(0,1162)=#(0,43),(0,1138),(0,1151),(0,1163)=&(0,1147),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE9_M_createERmm;0A.;_M_dispose::(0,1164)=#(0,43),(0,29),(0,1151),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE10_M_disposeEv;0A.;_M_destroy::(0,1165)=#(0,43),(0,29),(0,1151),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE10_M_destroyEm;0A.;_M_construct_aux_2::(0,1166)=#(0,43),(0,29),(0,1151),(0,1147),(0,30),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE18_M_construct_aux_2Emw;0A.;_M_construct::(0,1166):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12_M_constructEmw;0A.;_M_get_allocator::(0,1167)=#(0,43),(0,1168)=&(0,1169)=(0,1170)=(0,1171)=(0,1172)=(0,768),(0,1151),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE16_M_get_allocatorEv;0A.(0,1173)=#(0,43),(0,1174)=&(0,1175)=k(0,1169),(0,1154),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE16_M_get_allocatorEv;0B.;_M_check::(0,1176)=#(0,43),(0,1147),(0,1154),(0,1147),(0,74),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE8_M_checkEmPKc;0B.;_M_check_length::(0,1177)=#(0,43),(0,29),(0,1154),(0,1147),(0,1147),(0,74),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE15_M_check_lengthEmmPKc;0B.;_M_limit::(0,1178)=#(0,43),(0,1147),(0,1154),(0,1147),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE8_M_limitEmm;0B.;_M_disjunct::(0,1179)=#(0,43),(0,33),(0,1154),(0,760),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE11_M_disjunctEPKw;0B.;_S_copy::(0,1180)=f(0,29):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7_S_copyEPwPKwm;0A?;_S_move::(0,1180):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7_S_moveEPwPKwm;0A?;_S_assign::(0,1181)=f(0,29):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE9_S_assignEPwmw;0A?;_S_copy_chars::(0,1182)=f(0,29):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE13_S_copy_charsEPwN9__gnu_cxx17__normal_iteratorIS5_S4_EES8_;0A?(0,1183)=f(0,29):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE13_S_copy_charsEPwN9__gnu_cxx17__normal_iteratorIPKwS4_EESA_;0A?(0,1184)=f(0,29):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE13_S_copy_charsEPwS5_S5_;0A?(0,1185)=f(0,29):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE13_S_copy_charsEPwPKwS7_;0A?;_S_compare::(0,1186)=f(0,15):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE10_S_compareEmm;0A?;_M_assign::(0,1187)=#(0,43),(0,29),(0,1151),(0,1188)=&(0,1155),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE9_M_assignERKS4_;0A.;_M_mutate::(0,1189)=#(0,43),(0,29),(0,1151),(0,1147),(0,1147),(0,760),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE9_M_mutateEmmPKwm;0A.;_M_erase::(0,1190)=#(0,43),(0,29),(0,1151),(0,1147),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE8_M_eraseEmm;0A.;__ct_base ::(0,1191)=#(0,43),(0,29),(0,1151),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2Ev;2A.;__ct_comp ::(0,1191):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC1Ev;2A.;__ct_base ::(0,1192)=#(0,43),(0,29),(0,1151),(0,772),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2ERKS3_;2A.;__ct_comp ::(0,1192):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC1ERKS3_;2A.;__ct_base ::(0,1187):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2ERKS4_;2A.;__ct_comp ::(0,1187):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC1ERKS4_;2A.;__ct_base ::(0,1193)=#(0,43),(0,29),(0,1151),(0,1188),(0,1147),(0,772),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2ERKS4_mRKS3_;2A.;__ct_comp ::(0,1193):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC1ERKS4_mRKS3_;2A.;__ct_base ::(0,1194)=#(0,43),(0,29),(0,1151),(0,1188),(0,1147),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2ERKS4_mm;2A.;__ct_comp ::(0,1194):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC1ERKS4_mm;2A.;__ct_base ::(0,1195)=#(0,43),(0,29),(0,1151),(0,1188),(0,1147),(0,1147),(0,772),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2ERKS4_mmRKS3_;2A.;__ct_comp ::(0,1195):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC1ERKS4_mmRKS3_;2A.;__ct_base ::(0,1196)=#(0,43),(0,29),(0,1151),(0,760),(0,1147),(0,772),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2EPKwmRKS3_;2A.;__ct_comp ::(0,1196):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC1EPKwmRKS3_;2A.;__ct_base ::(0,1197)=#(0,43),(0,29),(0,1151),(0,760),(0,772),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2EPKwRKS3_;2A.;__ct_comp ::(0,1197):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC1EPKwRKS3_;2A.;__ct_base ::(0,1198)=#(0,43),(0,29),(0,1151),(0,1147),(0,30),(0,772),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2EmwRKS3_;2A.;__ct_comp ::(0,1198):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC1EmwRKS3_;2A.;__ct_base ::(0,1199)=#(0,43),(0,29),(0,1151),(0,1200)=&(0,43),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2EOS4_;2A.;__ct_comp ::(0,1199):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC1EOS4_;2A.;__ct_base ::(0,1201)=#(0,43),(0,29),(0,1151),(0,1202)=xsinitializer_list:,(0,772),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2ESt16initializer_listIwERKS3_;2A.;__ct_comp ::(0,1201):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC1ESt16initializer_listIwERKS3_;2A.;__ct_base ::(0,1203)=#(0,43),(0,29),(0,1151),(0,1188),(0,772),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2ERKS4_RKS3_;2A.;__ct_comp ::(0,1203):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC1ERKS4_RKS3_;2A.;__ct_base ::(0,1204)=#(0,43),(0,29),(0,1151),(0,1200),(0,772),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2EOS4_RKS3_;2A.;__ct_comp ::(0,1204):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC1EOS4_RKS3_;2A.;__dt_base ::(0,1205)=#(0,43),(0,29),(0,1151),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEED2Ev;2A.;__dt_comp ::(0,1205):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEED1Ev;2A.;operator=::(0,1206)=#(0,43),(0,1207)=&(0,43),(0,1151),(0,1188),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEaSERKS4_;2A.(0,1208)=#(0,43),(0,1207),(0,1151),(0,760),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEaSEPKw;2A.(0,1209)=#(0,43),(0,1207),(0,1151),(0,30),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEaSEw;2A.(0,1210)=#(0,43),(0,1207),(0,1151),(0,1200),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEaSEOS4_;2A.(0,1211)=#(0,43),(0,1207),(0,1151),(0,1202),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEaSESt16initializer_listIwE;2A.;begin::(0,1212)=#(0,43),(0,1213)=(0,1214)=xs__normal_iterator:,(0,1151),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5beginEv;2A.(0,1215)=#(0,43),(0,1216)=(0,1217)=xs__normal_iterator:,(0,1154),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5beginEv;2B.;end::(0,1212):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE3endEv;2A.(0,1215):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE3endEv;2B.;rbegin::(0,1218)=#(0,43),(0,1219)=(0,1220)=xsreverse_iterator:,(0,1151),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6rbeginEv;2A.(0,1221)=#(0,43),(0,1222)=(0,1223)=xsreverse_iterator:,(0,1154),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6rbeginEv;2B.;rend::(0,1218):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4rendEv;2A.(0,1221):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4rendEv;2B.;cbegin::(0,1215):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6cbeginEv;2B.;cend::(0,1215):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4cendEv;2B.;crbegin::(0,1221):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7crbeginEv;2B.;crend::(0,1221):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5crendEv;2B.;size::(0,1224)=#(0,43),(0,1147),(0,1154),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4sizeEv;2B.;length::(0,1224):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6lengthEv;2B.;max_size::(0,1224):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE8max_sizeEv;2B.;resize::(0,1166):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6resizeEmw;2A.(0,1152):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6resizeEm;2A.;shrink_to_fit::(0,1225)=#(0,43),(0,29),(0,1151),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE13shrink_to_fitEv;2A.;capacity::(0,1224):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE8capacityEv;2B.;reserve::(0,1226)=#(0,43),(0,29),(0,1151),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7reserveEm;2A.;clear::(0,1225):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5clearEv;2A.;empty::(0,1227)=#(0,43),(0,33),(0,1154),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5emptyEv;2B.;operator[]::(0,1228)=#(0,43),(0,1229)=(0,1230)=(0,1231)=&(0,1232)=k(0,1233)=(0,1234)=(0,30),(0,1154),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEixEm;2B.(0,1235)=#(0,43),(0,1236)=(0,1237)=(0,1238)=&(0,1233),(0,1151),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEixEm;2A.;at::(0,1239)=#(0,43),(0,1229),(0,1154),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE2atEm;2B.(0,1235):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE2atEm;2A.;front::(0,1240)=#(0,43),(0,1236),(0,1151),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5frontEv;2A.(0,1241)=#(0,43),(0,1229),(0,1154),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5frontEv;2B.;back::(0,1240):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4backEv;2A.(0,1241):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4backEv;2B.;operator+=::(0,1206):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEpLERKS4_;2A.(0,1208):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEpLEPKw;2A.(0,1209):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEpLEw;2A.(0,1211):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEpLESt16initializer_listIwE;2A.;append::(0,1206):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6appendERKS4_;2A.(0,1242)=#(0,43),(0,1207),(0,1151),(0,1188),(0,1147),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6appendERKS4_mm;2A.(0,1243)=#(0,43),(0,1207),(0,1151),(0,760),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6appendEPKwm;2A.(0,1208):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6appendEPKw;2A.(0,1244)=#(0,43),(0,1207),(0,1151),(0,1147),(0,30),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6appendEmw;2A.(0,1211):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6appendESt16initializer_listIwE;2A.;push_back::(0,1245)=#(0,43),(0,29),(0,1151),(0,30),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE9push_backEw;2A.;assign::(0,1206):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6assignERKS4_;2A.(0,1210):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6assignEOS4_;2A.(0,1246)=#(0,43),(0,1207),(0,1151),(0,1188),(0,1147),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6assignERKS4_mm;2A.(0,1243):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6assignEPKwm;2A.(0,1208):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6assignEPKw;2A.(0,1244):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6assignEmw;2A.(0,1211):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6assignESt16initializer_listIwE;2A.;insert::(0,1247)=#(0,43),(0,1213),(0,1151),(0,1216),(0,1147),(0,30),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6insertEN9__gnu_cxx17__normal_iteratorIPKwS4_EEmw;2A.(0,1248)=#(0,43),(0,1213),(0,1151),(0,1216),(0,1202),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6insertEN9__gnu_cxx17__normal_iteratorIPKwS4_EESt16initializer_listIwE;2A.(0,1249)=#(0,43),(0,1207),(0,1151),(0,1147),(0,1188),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6insertEmRKS4_;2A.(0,1250)=#(0,43),(0,1207),(0,1151),(0,1147),(0,1188),(0,1147),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6insertEmRKS4_mm;2A.(0,1251)=#(0,43),(0,1207),(0,1151),(0,1147),(0,760),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6insertEmPKwm;2A.(0,1252)=#(0,43),(0,1207),(0,1151),(0,1147),(0,760),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6insertEmPKw;2A.(0,1253)=#(0,43),(0,1207),(0,1151),(0,1147),(0,1147),(0,30),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6insertEmmw;2A.(0,1254)=#(0,43),(0,1213),(0,1151),(0,1255)=(0,1216),(0,30),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6insertEN9__gnu_cxx17__normal_iteratorIPKwS4_EEw;2A.;erase::(0,1256)=#(0,43),(0,1207),(0,1151),(0,1147),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5eraseEmm;2A.(0,1257)=#(0,43),(0,1213),(0,1151),(0,1255),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5eraseEN9__gnu_cxx17__normal_iteratorIPKwS4_EE;2A.(0,1258)=#(0,43),(0,1213),(0,1151),(0,1255),(0,1255),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5eraseEN9__gnu_cxx17__normal_iteratorIPKwS4_EES9_;2A.;pop_back::(0,1225):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE8pop_backEv;2A.;replace::(0,1259)=#(0,43),(0,1207),(0,1151),(0,1147),(0,1147),(0,1188),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEmmRKS4_;2A.(0,1260)=#(0,43),(0,1207),(0,1151),(0,1147),(0,1147),(0,1188),(0,1147),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEmmRKS4_mm;2A.(0,1261)=#(0,43),(0,1207),(0,1151),(0,1147),(0,1147),(0,760),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEmmPKwm;2A.(0,1262)=#(0,43),(0,1207),(0,1151),(0,1147),(0,1147),(0,760),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEmmPKw;2A.(0,1263)=#(0,43),(0,1207),(0,1151),(0,1147),(0,1147),(0,1147),(0,30),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEmmmw;2A.(0,1264)=#(0,43),(0,1207),(0,1151),(0,1255),(0,1255),(0,1188),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEN9__gnu_cxx17__normal_iteratorIPKwS4_EES9_RKS4_;2A.(0,1265)=#(0,43),(0,1207),(0,1151),(0,1255),(0,1255),(0,760),(0,1147),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEN9__gnu_cxx17__normal_iteratorIPKwS4_EES9_S8_m;2A.(0,1266)=#(0,43),(0,1207),(0,1151),(0,1255),(0,1255),(0,760),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEN9__gnu_cxx17__normal_iteratorIPKwS4_EES9_S8_;2A.(0,1267)=#(0,43),(0,1207),(0,1151),(0,1255),(0,1255),(0,1147),(0,30),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEN9__gnu_cxx17__normal_iteratorIPKwS4_EES9_mw;2A.(0,1268)=#(0,43),(0,1207),(0,1151),(0,1255),(0,1255),(0,754),(0,754),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEN9__gnu_cxx17__normal_iteratorIPKwS4_EES9_PwSA_;2A.(0,1269)=#(0,43),(0,1207),(0,1151),(0,1255),(0,1255),(0,760),(0,760),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEN9__gnu_cxx17__normal_iteratorIPKwS4_EES9_S8_S8_;2A.(0,1270)=#(0,43),(0,1207),(0,1151),(0,1255),(0,1255),(0,1213),(0,1213),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEN9__gnu_cxx17__normal_iteratorIPKwS4_EES9_NS6_IPwS4_EESB_;2A.(0,1271)=#(0,43),(0,1207),(0,1151),(0,1255),(0,1255),(0,1216),(0,1216),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEN9__gnu_cxx17__normal_iteratorIPKwS4_EES9_S9_S9_;2A.(0,1272)=#(0,43),(0,1207),(0,1151),(0,1216),(0,1216),(0,1202),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7replaceEN9__gnu_cxx17__normal_iteratorIPKwS4_EES9_St16initializer_listIwE;2A.;_M_replace_aux::(0,1263):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE14_M_replace_auxEmmmw;0A.;_M_replace::(0,1261):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE10_M_replaceEmmPKwm;0A.;_M_append::(0,1243):_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE9_M_appendEPKwm;0A.;copy::(0,1273)=#(0,43),(0,1147),(0,1154),(0,754),(0,1147),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4copyEPwmm;2B.;swap::(0,1274)=#(0,43),(0,29),(0,1151),(0,1207),(0,29);:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4swapERS4_;2A.;c_str::(0,1275)=#(0,43),(0,760),(0,1154),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5c_strEv;2B.;data::(0,1275):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4dataEv;2B.;get_allocator::(0,1276)=#(0,43),(0,1169),(0,1154),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE13get_allocatorEv;2B.;find::(0,1277)=#(0,43),(0,1147),(0,1154),(0,760),(0,1147),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4findEPKwmm;2B.(0,1278)=#(0,43),(0,1147),(0,1154),(0,1188),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4findERKS4_m;2B.(0,1279)=#(0,43),(0,1147),(0,1154),(0,760),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4findEPKwm;2B.(0,1280)=#(0,43),(0,1147),(0,1154),(0,30),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE4findEwm;2B.;rfind::(0,1281)=#(0,43),(0,1147),(0,1154),(0,1188),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5rfindERKS4_m;2B.(0,1277):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5rfindEPKwmm;2B.(0,1282)=#(0,43),(0,1147),(0,1154),(0,760),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5rfindEPKwm;2B.(0,1283)=#(0,43),(0,1147),(0,1154),(0,30),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE5rfindEwm;2B.;find_first_of::(0,1284)=#(0,43),(0,1147),(0,1154),(0,1188),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE13find_first_ofERKS4_m;2B.(0,1277):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE13find_first_ofEPKwmm;2B.(0,1285)=#(0,43),(0,1147),(0,1154),(0,760),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE13find_first_ofEPKwm;2B.(0,1286)=#(0,43),(0,1147),(0,1154),(0,30),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE13find_first_ofEwm;2B.;find_last_of::(0,1287)=#(0,43),(0,1147),(0,1154),(0,1188),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12find_last_ofERKS4_m;2B.(0,1277):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12find_last_ofEPKwmm;2B.(0,1288)=#(0,43),(0,1147),(0,1154),(0,760),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12find_last_ofEPKwm;2B.(0,1289)=#(0,43),(0,1147),(0,1154),(0,30),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12find_last_ofEwm;2B.;find_first_not_of::(0,1290)=#(0,43),(0,1147),(0,1154),(0,1188),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE17find_first_not_ofERKS4_m;2B.(0,1277):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE17find_first_not_ofEPKwmm;2B.(0,1291)=#(0,43),(0,1147),(0,1154),(0,760),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE17find_first_not_ofEPKwm;2B.(0,1292)=#(0,43),(0,1147),(0,1154),(0,30),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE17find_first_not_ofEwm;2B.;find_last_not_of::(0,1293)=#(0,43),(0,1147),(0,1154),(0,1188),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE16find_last_not_ofERKS4_m;2B.(0,1277):_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE16find_last_not_ofEPKwmm;2B.(0,1294)=#(0,43),(0,1147),(0,1154),(0,760),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE16find_last_not_ofEPKwm;2B.(0,1295)=#(0,43),(0,1147),(0,1154),(0,30),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE16find_last_not_ofEwm;2B.;substr::(0,1296)=#(0,43),(0,43),(0,1154),(0,1147),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE6substrEmm;2B.;compare::(0,1297)=#(0,43),(0,15),(0,1154),(0,1188),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7compareERKS4_;2B.(0,1298)=#(0,43),(0,15),(0,1154),(0,1147),(0,1147),(0,1188),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7compareEmmRKS4_;2B.(0,1299)=#(0,43),(0,15),(0,1154),(0,1147),(0,1147),(0,1188),(0,1147),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7compareEmmRKS4_mm;2B.(0,1300)=#(0,43),(0,15),(0,1154),(0,760),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7compareEPKw;2B.(0,1301)=#(0,43),(0,15),(0,1154),(0,1147),(0,1147),(0,760),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7compareEmmPKw;2B.(0,1302)=#(0,43),(0,15),(0,1154),(0,1147),(0,1147),(0,760),(0,1147),(0,29);:_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7compareEmmPKwm;2B.;;
+initializer_list:Tt(0,1202)=s16_M_array:/0(0,1303)=(0,760),0,64;_M_len:/0(0,1304)=(0,37),64,64;__ct_base ::(0,1305)=#(0,1202),(0,29),(0,1306)=*(0,1202),(0,1307)=(0,760),(0,1304),(0,29);:_ZNSt16initializer_listIwEC2EPKwm;0A.;__ct_comp ::(0,1305):_ZNSt16initializer_listIwEC1EPKwm;0A.;__ct_base ::(0,1308)=#(0,1202),(0,29),(0,1306),(0,29);:_ZNSt16initializer_listIwEC2Ev;2A.;__ct_comp ::(0,1308):_ZNSt16initializer_listIwEC1Ev;2A.;size::(0,1309)=#(0,1202),(0,1304),(0,1310)=*(0,1311)=k(0,1202),(0,29);:_ZNKSt16initializer_listIwE4sizeEv;2B.;begin::(0,1312)=#(0,1202),(0,1307),(0,1310),(0,29);:_ZNKSt16initializer_listIwE5beginEv;2B.;end::(0,1312):_ZNKSt16initializer_listIwE3endEv;2B.;;
+__hash_base:Tt(0,1313)=s1;
+hash:Tt(0,1314)=s1!1,020,(0,1313);operator()::(0,1315)=#(0,1314),(0,37),(0,1316)=*(0,1317)=k(0,1314),(0,33),(0,29);:_ZNKSt4hashIbEclEb;2B.;;
+__hash_base:Tt(0,1318)=s1;
+hash:Tt(0,1319)=s1!1,020,(0,1318);operator()::(0,1320)=#(0,1319),(0,37),(0,1321)=*(0,1322)=k(0,1319),(0,8),(0,29);:_ZNKSt4hashIcEclEc;2B.;;
+__hash_base:Tt(0,1323)=s1;
+hash:Tt(0,1324)=s1!1,020,(0,1323);operator()::(0,1325)=#(0,1324),(0,37),(0,1326)=*(0,1327)=k(0,1324),(0,24),(0,29);:_ZNKSt4hashIaEclEa;2B.;;
+__hash_base:Tt(0,1328)=s1;
+hash:Tt(0,1329)=s1!1,020,(0,1328);operator()::(0,1330)=#(0,1329),(0,37),(0,1331)=*(0,1332)=k(0,1329),(0,20),(0,29);:_ZNKSt4hashIhEclEh;2B.;;
+__hash_base:Tt(0,1333)=s1;
+hash:Tt(0,1334)=s1!1,020,(0,1333);operator()::(0,1335)=#(0,1334),(0,37),(0,1336)=*(0,1337)=k(0,1334),(0,30),(0,29);:_ZNKSt4hashIwEclEw;2B.;;
+__hash_base:Tt(0,1338)=s1;
+hash:Tt(0,1339)=s1!1,020,(0,1338);operator()::(0,1340)=#(0,1339),(0,37),(0,1341)=*(0,1342)=k(0,1339),(0,31),(0,29);:_ZNKSt4hashIDsEclEDs;2B.;;
+__hash_base:Tt(0,1343)=s1;
+hash:Tt(0,1344)=s1!1,020,(0,1343);operator()::(0,1345)=#(0,1344),(0,37),(0,1346)=*(0,1347)=k(0,1344),(0,32),(0,29);:_ZNKSt4hashIDiEclEDi;2B.;;
+__hash_base:Tt(0,1348)=s1;
+hash:Tt(0,1349)=s1!1,020,(0,1348);operator()::(0,1350)=#(0,1349),(0,37),(0,1351)=*(0,1352)=k(0,1349),(0,23),(0,29);:_ZNKSt4hashIsEclEs;2B.;;
+__hash_base:Tt(0,1353)=s1;
+hash:Tt(0,1354)=s1!1,020,(0,1353);operator()::(0,1355)=#(0,1354),(0,37),(0,1356)=*(0,1357)=k(0,1354),(0,15),(0,29);:_ZNKSt4hashIiEclEi;2B.;;
+__hash_base:Tt(0,1358)=s1;
+hash:Tt(0,1359)=s1!1,020,(0,1358);operator()::(0,1360)=#(0,1359),(0,37),(0,1361)=*(0,1362)=k(0,1359),(0,22),(0,29);:_ZNKSt4hashIlEclEl;2B.;;
+__hash_base:Tt(0,1363)=s1;
+hash:Tt(0,1364)=s1!1,020,(0,1363);operator()::(0,1365)=#(0,1364),(0,37),(0,1366)=*(0,1367)=k(0,1364),(0,25),(0,29);:_ZNKSt4hashIxEclEx;2B.;;
+__hash_base:Tt(0,1368)=s1;
+hash:Tt(0,1369)=s1!1,020,(0,1368);operator()::(0,1370)=#(0,1369),(0,37),(0,1371)=*(0,1372)=k(0,1369),(0,19),(0,29);:_ZNKSt4hashItEclEt;2B.;;
+__hash_base:Tt(0,1373)=s1;
+hash:Tt(0,1374)=s1!1,020,(0,1373);operator()::(0,1375)=#(0,1374),(0,37),(0,1376)=*(0,1377)=k(0,1374),(0,18),(0,29);:_ZNKSt4hashIjEclEj;2B.;;
+__hash_base:Tt(0,1378)=s1;
+hash:Tt(0,1379)=s1!1,020,(0,1378);operator()::(0,1380)=#(0,1379),(0,37),(0,1381)=*(0,1382)=k(0,1379),(0,17),(0,29);:_ZNKSt4hashImEclEm;2B.;;
+__hash_base:Tt(0,1383)=s1;
+hash:Tt(0,1384)=s1!1,020,(0,1383);operator()::(0,1385)=#(0,1384),(0,37),(0,1386)=*(0,1387)=k(0,1384),(0,26),(0,29);:_ZNKSt4hashIyEclEy;2B.;;
+__hash_base:Tt(0,1388)=s1;
+hash:Tt(0,1389)=s1!1,020,(0,1388);operator()::(0,1390)=#(0,1389),(0,37),(0,1391)=*(0,1392)=k(0,1389),(0,21),(0,29);:_ZNKSt4hashInEclEn;2B.;;
+__hash_base:Tt(0,1393)=s1;
+hash:Tt(0,1394)=s1!1,020,(0,1393);operator()::(0,1395)=#(0,1394),(0,37),(0,1396)=*(0,1397)=k(0,1394),(0,16),(0,29);:_ZNKSt4hashIoEclEo;2B.;;
+_Hash_impl:Tt(0,1398)=s1hash::(0,1399)=f(0,37):_ZNSt10_Hash_impl4hashEPKvmm;2A?;;
+_Fnv_hash_impl:Tt(0,1400)=s1hash::(0,1401)=f(0,37):_ZNSt14_Fnv_hash_impl4hashEPKvmm;2A?;;
+__hash_base:Tt(0,1402)=s1;
+hash:Tt(0,1403)=s1!1,020,(0,1402);operator()::(0,1404)=#(0,1403),(0,37),(0,1405)=*(0,1406)=k(0,1403),(0,27),(0,29);:_ZNKSt4hashIfEclEf;2B.;;
+__hash_base:Tt(0,1407)=s1;
+hash:Tt(0,1408)=s1!1,020,(0,1407);operator()::(0,1409)=#(0,1408),(0,37),(0,1410)=*(0,1411)=k(0,1408),(0,28),(0,29);:_ZNKSt4hashIdEclEd;2B.;;
+__hash_base:Tt(0,1412)=s1;
+hash:Tt(0,1413)=s1!1,020,(0,1412);operator()::(0,1414)=#(0,1413),(0,37),(0,1415)=*(0,1416)=k(0,1413),(0,2),(0,29);:_ZNKSt4hashIeEclEe;2B.;;
+__is_fast_hash:Tt(0,1417)=s1!1,020,(0,174);;
+__hash_base:Tt(0,1418)=s1;
+hash:Tt(0,1419)=s1!1,020,(0,1418);operator()::(0,1420)=#(0,1419),(0,37),(0,1421)=*(0,1422)=k(0,1419),(0,1423)=&(0,1424)=k(0,40),(0,29);:_ZNKSt4hashINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_;2B.;;
+__is_fast_hash:Tt(0,1425)=s1!1,020,(0,174);;
+__hash_base:Tt(0,1426)=s1;
+hash:Tt(0,1427)=s1!1,020,(0,1426);operator()::(0,1428)=#(0,1427),(0,37),(0,1429)=*(0,1430)=k(0,1427),(0,1431)=&(0,1432)=k(0,42),(0,29);:_ZNKSt4hashINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEclERKS5_;2B.;;
+__is_fast_hash:Tt(0,1433)=s1!1,020,(0,174);;
+__hash_base:Tt(0,1434)=s1;
+hash:Tt(0,1435)=s1!1,020,(0,1434);operator()::(0,1436)=#(0,1435),(0,37),(0,1437)=*(0,1438)=k(0,1435),(0,1439)=&(0,1440)=k(0,44),(0,29);:_ZNKSt4hashINSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEclERKS5_;2B.;;
+new_allocator:Tt(0,1441)=s1__ct_base ::(0,1442)=#(0,1441),(0,29),(0,1443)=*(0,1441),(0,29);:_ZN9__gnu_cxx13new_allocatorIDsEC2Ev;2A.;__ct_comp ::(0,1442):_ZN9__gnu_cxx13new_allocatorIDsEC1Ev;2A.;__ct_base ::(0,1444)=#(0,1441),(0,29),(0,1443),(0,1445)=&(0,1446)=k(0,1441),(0,29);:_ZN9__gnu_cxx13new_allocatorIDsEC2ERKS1_;2A.;__ct_comp ::(0,1444):_ZN9__gnu_cxx13new_allocatorIDsEC1ERKS1_;2A.;__dt_base ::(0,1442):_ZN9__gnu_cxx13new_allocatorIDsED2Ev;2A.;__dt_comp ::(0,1442):_ZN9__gnu_cxx13new_allocatorIDsED1Ev;2A.;address::(0,1447)=#(0,1441),(0,1448)=(0,1449)=*(0,31),(0,1450)=*(0,1446),(0,1451)=(0,1452)=&(0,31),(0,29);:_ZNK9__gnu_cxx13new_allocatorIDsE7addressERDs;2B.(0,1453)=#(0,1441),(0,1454)=(0,1455)=*(0,1456)=k(0,31),(0,1450),(0,1457)=(0,1458)=&(0,1456),(0,29);:_ZNK9__gnu_cxx13new_allocatorIDsE7addressERKDs;2B.;allocate::(0,1459)=#(0,1441),(0,1448),(0,1443),(0,1460)=(0,37),(0,734),(0,29);:_ZN9__gnu_cxx13new_allocatorIDsE8allocateEmPKv;2A.;deallocate::(0,1461)=#(0,1441),(0,29),(0,1443),(0,1448),(0,1460),(0,29);:_ZN9__gnu_cxx13new_allocatorIDsE10deallocateEPDsm;2A.;max_size::(0,1462)=#(0,1441),(0,1460),(0,1450),(0,29);:_ZNK9__gnu_cxx13new_allocatorIDsE8max_sizeEv;2B.;;
+allocator:Tt(0,1463)=s1!1,020,(0,1441);__ct_base ::(0,1464)=#(0,1463),(0,29),(0,1465)=*(0,1463),(0,29);:_ZNSaIDsEC2Ev;2A.;__ct_comp ::(0,1464):_ZNSaIDsEC1Ev;2A.;__ct_base ::(0,1466)=#(0,1463),(0,29),(0,1465),(0,1467)=&(0,1468)=k(0,1463),(0,29);:_ZNSaIDsEC2ERKS_;2A.;__ct_comp ::(0,1466):_ZNSaIDsEC1ERKS_;2A.;operator=::(0,1469)=#(0,1463),(0,1470)=&(0,1463),(0,1465),(0,1467),(0,29);:_ZNSaIDsEaSERKS_;2A.;__dt_base ::(0,1464):_ZNSaIDsED2Ev;2A.;__dt_comp ::(0,1464):_ZNSaIDsED1Ev;2A.;;
+allocator_traits:Tt(0,1471)=s1allocate::(0,1472)=f(0,1473)=(0,1449):_ZNSt16allocator_traitsISaIDsEE8allocateERS0_m;2A?(0,1474)=f(0,1473):_ZNSt16allocator_traitsISaIDsEE8allocateERS0_mPKv;2A?;deallocate::(0,1475)=f(0,29):_ZNSt16allocator_traitsISaIDsEE10deallocateERS0_PDsm;2A?;max_size::(0,1476)=f(0,1477)=(0,37):_ZNSt16allocator_traitsISaIDsEE8max_sizeERKS0_;2A?;select_on_container_copy_construction::(0,1478)=f(0,1479)=(0,1463):_ZNSt16allocator_traitsISaIDsEE37select_on_container_copy_constructionERKS0_;2A?;;
+__alloc_traits:Tt(0,1480)=s1!1,020,(0,1471);_S_select_on_copy::(0,1481)=f(0,1463):_ZN9__gnu_cxx14__alloc_traitsISaIDsEDsE17_S_select_on_copyERKS1_;2A?;_S_on_swap::(0,1482)=f(0,29):_ZN9__gnu_cxx14__alloc_traitsISaIDsEDsE10_S_on_swapERS1_S3_;2A?;_S_propagate_on_copy_assign::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIDsEDsE27_S_propagate_on_copy_assignEv;2A?;_S_propagate_on_move_assign::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIDsEDsE27_S_propagate_on_move_assignEv;2A?;_S_propagate_on_swap::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIDsEDsE20_S_propagate_on_swapEv;2A?;_S_always_equal::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIDsEDsE15_S_always_equalEv;2A?;_S_nothrow_move::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIDsEDsE15_S_nothrow_moveEv;2A?;;
+__alloc_traits::rebind:Tt(0,1483)=s1;
+basic_string::_Alloc_hider:Tt(0,1484)=s8!1,020,(0,1463);_M_p:(0,1485)=(0,1486)=(0,1473),0,64;__ct_base ::(0,1487)=#(0,1484),(0,29),(0,1488)=*(0,1484),(0,1485),(0,1467),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE12_Alloc_hiderC2EPDsRKS3_;2A.;__ct_comp ::(0,1487):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE12_Alloc_hiderC1EPDsRKS3_;2A.;__ct_base ::(0,1489)=#(0,1484),(0,29),(0,1488),(0,1485),(0,1490)=&(0,1463),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE12_Alloc_hiderC2EPDsOS3_;2A.;__ct_comp ::(0,1489):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE12_Alloc_hiderC1EPDsOS3_;2A.;;
+basic_string::._70:t(0,1491)=e_S_local_capacity:7,;
+basic_string::._71:Tt(0,1492)=u16_M_local_buf:(0,1493)=ar(0,5);0;00000000000000000000007;(0,31),0,128;_M_allocated_capacity:(0,1494)=(0,1495)=(0,1477),0,64;;
+basic_string:Tt(0,45)=s32npos:/2(0,1496)=k(0,1494):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4nposE;_M_dataplus:/0(0,1484),0,64;_M_string_length:/0(0,1494),64,64;:/0(0,1492),128,128;_M_data::(0,1497)=#(0,45),(0,29),(0,1498)=*(0,45),(0,1485),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7_M_dataEPDs;0A.;_M_length::(0,1499)=#(0,45),(0,29),(0,1498),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE9_M_lengthEm;0A.;_M_data::(0,1500)=#(0,45),(0,1485),(0,1501)=*(0,1502)=k(0,45),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7_M_dataEv;0B.;_M_local_data::(0,1503)=#(0,45),(0,1485),(0,1498),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE13_M_local_dataEv;0A.(0,1504)=#(0,45),(0,1505)=(0,1506)=(0,1507)=(0,1455),(0,1501),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE13_M_local_dataEv;0B.;_M_capacity::(0,1499):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE11_M_capacityEm;0A.;_M_set_length::(0,1499):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE13_M_set_lengthEm;0A.;_M_is_local::(0,1508)=#(0,45),(0,33),(0,1501),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE11_M_is_localEv;0B.;_M_create::(0,1509)=#(0,45),(0,1485),(0,1498),(0,1510)=&(0,1494),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE9_M_createERmm;0A.;_M_dispose::(0,1511)=#(0,45),(0,29),(0,1498),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE10_M_disposeEv;0A.;_M_destroy::(0,1512)=#(0,45),(0,29),(0,1498),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE10_M_destroyEm;0A.;_M_construct_aux_2::(0,1513)=#(0,45),(0,29),(0,1498),(0,1494),(0,31),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE18_M_construct_aux_2EmDs;0A.;_M_construct::(0,1513):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE12_M_constructEmDs;0A.;_M_get_allocator::(0,1514)=#(0,45),(0,1515)=&(0,1516)=(0,1517)=(0,1518)=(0,1519)=(0,1463),(0,1498),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE16_M_get_allocatorEv;0A.(0,1520)=#(0,45),(0,1521)=&(0,1522)=k(0,1516),(0,1501),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE16_M_get_allocatorEv;0B.;_M_check::(0,1523)=#(0,45),(0,1494),(0,1501),(0,1494),(0,74),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE8_M_checkEmPKc;0B.;_M_check_length::(0,1524)=#(0,45),(0,29),(0,1501),(0,1494),(0,1494),(0,74),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE15_M_check_lengthEmmPKc;0B.;_M_limit::(0,1525)=#(0,45),(0,1494),(0,1501),(0,1494),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE8_M_limitEmm;0B.;_M_disjunct::(0,1526)=#(0,45),(0,33),(0,1501),(0,1455),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE11_M_disjunctEPKDs;0B.;_S_copy::(0,1527)=f(0,29):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7_S_copyEPDsPKDsm;0A?;_S_move::(0,1527):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7_S_moveEPDsPKDsm;0A?;_S_assign::(0,1528)=f(0,29):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE9_S_assignEPDsmDs;0A?;_S_copy_chars::(0,1529)=f(0,29):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE13_S_copy_charsEPDsN9__gnu_cxx17__normal_iteratorIS5_S4_EES8_;0A?(0,1530)=f(0,29):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE13_S_copy_charsEPDsN9__gnu_cxx17__normal_iteratorIPKDsS4_EESA_;0A?(0,1531)=f(0,29):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE13_S_copy_charsEPDsS5_S5_;0A?(0,1532)=f(0,29):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE13_S_copy_charsEPDsPKDsS7_;0A?;_S_compare::(0,1533)=f(0,15):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE10_S_compareEmm;0A?;_M_assign::(0,1534)=#(0,45),(0,29),(0,1498),(0,1535)=&(0,1502),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE9_M_assignERKS4_;0A.;_M_mutate::(0,1536)=#(0,45),(0,29),(0,1498),(0,1494),(0,1494),(0,1455),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE9_M_mutateEmmPKDsm;0A.;_M_erase::(0,1537)=#(0,45),(0,29),(0,1498),(0,1494),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE8_M_eraseEmm;0A.;__ct_base ::(0,1538)=#(0,45),(0,29),(0,1498),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC2Ev;2A.;__ct_comp ::(0,1538):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC1Ev;2A.;__ct_base ::(0,1539)=#(0,45),(0,29),(0,1498),(0,1467),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC2ERKS3_;2A.;__ct_comp ::(0,1539):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC1ERKS3_;2A.;__ct_base ::(0,1534):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC2ERKS4_;2A.;__ct_comp ::(0,1534):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC1ERKS4_;2A.;__ct_base ::(0,1540)=#(0,45),(0,29),(0,1498),(0,1535),(0,1494),(0,1467),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC2ERKS4_mRKS3_;2A.;__ct_comp ::(0,1540):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC1ERKS4_mRKS3_;2A.;__ct_base ::(0,1541)=#(0,45),(0,29),(0,1498),(0,1535),(0,1494),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC2ERKS4_mm;2A.;__ct_comp ::(0,1541):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC1ERKS4_mm;2A.;__ct_base ::(0,1542)=#(0,45),(0,29),(0,1498),(0,1535),(0,1494),(0,1494),(0,1467),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC2ERKS4_mmRKS3_;2A.;__ct_comp ::(0,1542):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC1ERKS4_mmRKS3_;2A.;__ct_base ::(0,1543)=#(0,45),(0,29),(0,1498),(0,1455),(0,1494),(0,1467),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC2EPKDsmRKS3_;2A.;__ct_comp ::(0,1543):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC1EPKDsmRKS3_;2A.;__ct_base ::(0,1544)=#(0,45),(0,29),(0,1498),(0,1455),(0,1467),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC2EPKDsRKS3_;2A.;__ct_comp ::(0,1544):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC1EPKDsRKS3_;2A.;__ct_base ::(0,1545)=#(0,45),(0,29),(0,1498),(0,1494),(0,31),(0,1467),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC2EmDsRKS3_;2A.;__ct_comp ::(0,1545):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC1EmDsRKS3_;2A.;__ct_base ::(0,1546)=#(0,45),(0,29),(0,1498),(0,1547)=&(0,45),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC2EOS4_;2A.;__ct_comp ::(0,1546):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC1EOS4_;2A.;__ct_base ::(0,1548)=#(0,45),(0,29),(0,1498),(0,1549)=xsinitializer_list:,(0,1467),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC2ESt16initializer_listIDsERKS3_;2A.;__ct_comp ::(0,1548):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC1ESt16initializer_listIDsERKS3_;2A.;__ct_base ::(0,1550)=#(0,45),(0,29),(0,1498),(0,1535),(0,1467),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC2ERKS4_RKS3_;2A.;__ct_comp ::(0,1550):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC1ERKS4_RKS3_;2A.;__ct_base ::(0,1551)=#(0,45),(0,29),(0,1498),(0,1547),(0,1467),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC2EOS4_RKS3_;2A.;__ct_comp ::(0,1551):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEC1EOS4_RKS3_;2A.;__dt_base ::(0,1552)=#(0,45),(0,29),(0,1498),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEED2Ev;2A.;__dt_comp ::(0,1552):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEED1Ev;2A.;operator=::(0,1553)=#(0,45),(0,1554)=&(0,45),(0,1498),(0,1535),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEaSERKS4_;2A.(0,1555)=#(0,45),(0,1554),(0,1498),(0,1455),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEaSEPKDs;2A.(0,1556)=#(0,45),(0,1554),(0,1498),(0,31),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEaSEDs;2A.(0,1557)=#(0,45),(0,1554),(0,1498),(0,1547),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEaSEOS4_;2A.(0,1558)=#(0,45),(0,1554),(0,1498),(0,1549),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEaSESt16initializer_listIDsE;2A.;begin::(0,1559)=#(0,45),(0,1560)=(0,1561)=xs__normal_iterator:,(0,1498),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5beginEv;2A.(0,1562)=#(0,45),(0,1563)=(0,1564)=xs__normal_iterator:,(0,1501),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5beginEv;2B.;end::(0,1559):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE3endEv;2A.(0,1562):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE3endEv;2B.;rbegin::(0,1565)=#(0,45),(0,1566)=(0,1567)=xsreverse_iterator:,(0,1498),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6rbeginEv;2A.(0,1568)=#(0,45),(0,1569)=(0,1570)=xsreverse_iterator:,(0,1501),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6rbeginEv;2B.;rend::(0,1565):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4rendEv;2A.(0,1568):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4rendEv;2B.;cbegin::(0,1562):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6cbeginEv;2B.;cend::(0,1562):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4cendEv;2B.;crbegin::(0,1568):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7crbeginEv;2B.;crend::(0,1568):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5crendEv;2B.;size::(0,1571)=#(0,45),(0,1494),(0,1501),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4sizeEv;2B.;length::(0,1571):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6lengthEv;2B.;max_size::(0,1571):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE8max_sizeEv;2B.;resize::(0,1513):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6resizeEmDs;2A.(0,1499):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6resizeEm;2A.;shrink_to_fit::(0,1572)=#(0,45),(0,29),(0,1498),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE13shrink_to_fitEv;2A.;capacity::(0,1571):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE8capacityEv;2B.;reserve::(0,1573)=#(0,45),(0,29),(0,1498),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7reserveEm;2A.;clear::(0,1572):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5clearEv;2A.;empty::(0,1574)=#(0,45),(0,33),(0,1501),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5emptyEv;2B.;operator[]::(0,1575)=#(0,45),(0,1576)=(0,1577)=(0,1578)=&(0,1579)=k(0,1580)=(0,1581)=(0,31),(0,1501),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEixEm;2B.(0,1582)=#(0,45),(0,1583)=(0,1584)=(0,1585)=&(0,1580),(0,1498),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEixEm;2A.;at::(0,1586)=#(0,45),(0,1576),(0,1501),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE2atEm;2B.(0,1582):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE2atEm;2A.;front::(0,1587)=#(0,45),(0,1583),(0,1498),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5frontEv;2A.(0,1588)=#(0,45),(0,1576),(0,1501),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5frontEv;2B.;back::(0,1587):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4backEv;2A.(0,1588):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4backEv;2B.;operator+=::(0,1553):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEpLERKS4_;2A.(0,1555):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEpLEPKDs;2A.(0,1556):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEpLEDs;2A.(0,1558):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEpLESt16initializer_listIDsE;2A.;append::(0,1553):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6appendERKS4_;2A.(0,1589)=#(0,45),(0,1554),(0,1498),(0,1535),(0,1494),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6appendERKS4_mm;2A.(0,1590)=#(0,45),(0,1554),(0,1498),(0,1455),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6appendEPKDsm;2A.(0,1555):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6appendEPKDs;2A.(0,1591)=#(0,45),(0,1554),(0,1498),(0,1494),(0,31),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6appendEmDs;2A.(0,1558):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6appendESt16initializer_listIDsE;2A.;push_back::(0,1592)=#(0,45),(0,29),(0,1498),(0,31),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE9push_backEDs;2A.;assign::(0,1553):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6assignERKS4_;2A.(0,1557):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6assignEOS4_;2A.(0,1593)=#(0,45),(0,1554),(0,1498),(0,1535),(0,1494),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6assignERKS4_mm;2A.(0,1590):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6assignEPKDsm;2A.(0,1555):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6assignEPKDs;2A.(0,1591):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6assignEmDs;2A.(0,1558):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6assignESt16initializer_listIDsE;2A.;insert::(0,1594)=#(0,45),(0,1560),(0,1498),(0,1563),(0,1494),(0,31),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6insertEN9__gnu_cxx17__normal_iteratorIPKDsS4_EEmDs;2A.(0,1595)=#(0,45),(0,1560),(0,1498),(0,1563),(0,1549),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6insertEN9__gnu_cxx17__normal_iteratorIPKDsS4_EESt16initializer_listIDsE;2A.(0,1596)=#(0,45),(0,1554),(0,1498),(0,1494),(0,1535),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6insertEmRKS4_;2A.(0,1597)=#(0,45),(0,1554),(0,1498),(0,1494),(0,1535),(0,1494),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6insertEmRKS4_mm;2A.(0,1598)=#(0,45),(0,1554),(0,1498),(0,1494),(0,1455),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6insertEmPKDsm;2A.(0,1599)=#(0,45),(0,1554),(0,1498),(0,1494),(0,1455),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6insertEmPKDs;2A.(0,1600)=#(0,45),(0,1554),(0,1498),(0,1494),(0,1494),(0,31),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6insertEmmDs;2A.(0,1601)=#(0,45),(0,1560),(0,1498),(0,1602)=(0,1563),(0,31),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6insertEN9__gnu_cxx17__normal_iteratorIPKDsS4_EEDs;2A.;erase::(0,1603)=#(0,45),(0,1554),(0,1498),(0,1494),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5eraseEmm;2A.(0,1604)=#(0,45),(0,1560),(0,1498),(0,1602),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5eraseEN9__gnu_cxx17__normal_iteratorIPKDsS4_EE;2A.(0,1605)=#(0,45),(0,1560),(0,1498),(0,1602),(0,1602),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5eraseEN9__gnu_cxx17__normal_iteratorIPKDsS4_EES9_;2A.;pop_back::(0,1572):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE8pop_backEv;2A.;replace::(0,1606)=#(0,45),(0,1554),(0,1498),(0,1494),(0,1494),(0,1535),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEmmRKS4_;2A.(0,1607)=#(0,45),(0,1554),(0,1498),(0,1494),(0,1494),(0,1535),(0,1494),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEmmRKS4_mm;2A.(0,1608)=#(0,45),(0,1554),(0,1498),(0,1494),(0,1494),(0,1455),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEmmPKDsm;2A.(0,1609)=#(0,45),(0,1554),(0,1498),(0,1494),(0,1494),(0,1455),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEmmPKDs;2A.(0,1610)=#(0,45),(0,1554),(0,1498),(0,1494),(0,1494),(0,1494),(0,31),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEmmmDs;2A.(0,1611)=#(0,45),(0,1554),(0,1498),(0,1602),(0,1602),(0,1535),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDsS4_EES9_RKS4_;2A.(0,1612)=#(0,45),(0,1554),(0,1498),(0,1602),(0,1602),(0,1455),(0,1494),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDsS4_EES9_S8_m;2A.(0,1613)=#(0,45),(0,1554),(0,1498),(0,1602),(0,1602),(0,1455),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDsS4_EES9_S8_;2A.(0,1614)=#(0,45),(0,1554),(0,1498),(0,1602),(0,1602),(0,1494),(0,31),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDsS4_EES9_mDs;2A.(0,1615)=#(0,45),(0,1554),(0,1498),(0,1602),(0,1602),(0,1449),(0,1449),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDsS4_EES9_PDsSA_;2A.(0,1616)=#(0,45),(0,1554),(0,1498),(0,1602),(0,1602),(0,1455),(0,1455),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDsS4_EES9_S8_S8_;2A.(0,1617)=#(0,45),(0,1554),(0,1498),(0,1602),(0,1602),(0,1560),(0,1560),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDsS4_EES9_NS6_IPDsS4_EESB_;2A.(0,1618)=#(0,45),(0,1554),(0,1498),(0,1602),(0,1602),(0,1563),(0,1563),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDsS4_EES9_S9_S9_;2A.(0,1619)=#(0,45),(0,1554),(0,1498),(0,1563),(0,1563),(0,1549),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDsS4_EES9_St16initializer_listIDsE;2A.;_M_replace_aux::(0,1610):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE14_M_replace_auxEmmmDs;0A.;_M_replace::(0,1608):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE10_M_replaceEmmPKDsm;0A.;_M_append::(0,1590):_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE9_M_appendEPKDsm;0A.;copy::(0,1620)=#(0,45),(0,1494),(0,1501),(0,1449),(0,1494),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4copyEPDsmm;2B.;swap::(0,1621)=#(0,45),(0,29),(0,1498),(0,1554),(0,29);:_ZNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4swapERS4_;2A.;c_str::(0,1622)=#(0,45),(0,1455),(0,1501),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5c_strEv;2B.;data::(0,1622):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4dataEv;2B.;get_allocator::(0,1623)=#(0,45),(0,1516),(0,1501),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE13get_allocatorEv;2B.;find::(0,1624)=#(0,45),(0,1494),(0,1501),(0,1455),(0,1494),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4findEPKDsmm;2B.(0,1625)=#(0,45),(0,1494),(0,1501),(0,1535),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4findERKS4_m;2B.(0,1626)=#(0,45),(0,1494),(0,1501),(0,1455),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4findEPKDsm;2B.(0,1627)=#(0,45),(0,1494),(0,1501),(0,31),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE4findEDsm;2B.;rfind::(0,1628)=#(0,45),(0,1494),(0,1501),(0,1535),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5rfindERKS4_m;2B.(0,1624):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5rfindEPKDsmm;2B.(0,1629)=#(0,45),(0,1494),(0,1501),(0,1455),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5rfindEPKDsm;2B.(0,1630)=#(0,45),(0,1494),(0,1501),(0,31),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE5rfindEDsm;2B.;find_first_of::(0,1631)=#(0,45),(0,1494),(0,1501),(0,1535),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE13find_first_ofERKS4_m;2B.(0,1624):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE13find_first_ofEPKDsmm;2B.(0,1632)=#(0,45),(0,1494),(0,1501),(0,1455),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE13find_first_ofEPKDsm;2B.(0,1633)=#(0,45),(0,1494),(0,1501),(0,31),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE13find_first_ofEDsm;2B.;find_last_of::(0,1634)=#(0,45),(0,1494),(0,1501),(0,1535),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE12find_last_ofERKS4_m;2B.(0,1624):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE12find_last_ofEPKDsmm;2B.(0,1635)=#(0,45),(0,1494),(0,1501),(0,1455),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE12find_last_ofEPKDsm;2B.(0,1636)=#(0,45),(0,1494),(0,1501),(0,31),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE12find_last_ofEDsm;2B.;find_first_not_of::(0,1637)=#(0,45),(0,1494),(0,1501),(0,1535),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE17find_first_not_ofERKS4_m;2B.(0,1624):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE17find_first_not_ofEPKDsmm;2B.(0,1638)=#(0,45),(0,1494),(0,1501),(0,1455),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE17find_first_not_ofEPKDsm;2B.(0,1639)=#(0,45),(0,1494),(0,1501),(0,31),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE17find_first_not_ofEDsm;2B.;find_last_not_of::(0,1640)=#(0,45),(0,1494),(0,1501),(0,1535),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE16find_last_not_ofERKS4_m;2B.(0,1624):_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE16find_last_not_ofEPKDsmm;2B.(0,1641)=#(0,45),(0,1494),(0,1501),(0,1455),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE16find_last_not_ofEPKDsm;2B.(0,1642)=#(0,45),(0,1494),(0,1501),(0,31),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE16find_last_not_ofEDsm;2B.;substr::(0,1643)=#(0,45),(0,45),(0,1501),(0,1494),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE6substrEmm;2B.;compare::(0,1644)=#(0,45),(0,15),(0,1501),(0,1535),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7compareERKS4_;2B.(0,1645)=#(0,45),(0,15),(0,1501),(0,1494),(0,1494),(0,1535),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7compareEmmRKS4_;2B.(0,1646)=#(0,45),(0,15),(0,1501),(0,1494),(0,1494),(0,1535),(0,1494),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7compareEmmRKS4_mm;2B.(0,1647)=#(0,45),(0,15),(0,1501),(0,1455),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7compareEPKDs;2B.(0,1648)=#(0,45),(0,15),(0,1501),(0,1494),(0,1494),(0,1455),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7compareEmmPKDs;2B.(0,1649)=#(0,45),(0,15),(0,1501),(0,1494),(0,1494),(0,1455),(0,1494),(0,29);:_ZNKSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEE7compareEmmPKDsm;2B.;;
+__is_fast_hash:Tt(0,1650)=s1!1,020,(0,174);;
+__hash_base:Tt(0,1651)=s1;
+hash:Tt(0,1652)=s1!1,020,(0,1651);operator()::(0,1653)=#(0,1652),(0,37),(0,1654)=*(0,1655)=k(0,1652),(0,1656)=&(0,1657)=k(0,46),(0,29);:_ZNKSt4hashINSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEclERKS5_;2B.;;
+new_allocator:Tt(0,1658)=s1__ct_base ::(0,1659)=#(0,1658),(0,29),(0,1660)=*(0,1658),(0,29);:_ZN9__gnu_cxx13new_allocatorIDiEC2Ev;2A.;__ct_comp ::(0,1659):_ZN9__gnu_cxx13new_allocatorIDiEC1Ev;2A.;__ct_base ::(0,1661)=#(0,1658),(0,29),(0,1660),(0,1662)=&(0,1663)=k(0,1658),(0,29);:_ZN9__gnu_cxx13new_allocatorIDiEC2ERKS1_;2A.;__ct_comp ::(0,1661):_ZN9__gnu_cxx13new_allocatorIDiEC1ERKS1_;2A.;__dt_base ::(0,1659):_ZN9__gnu_cxx13new_allocatorIDiED2Ev;2A.;__dt_comp ::(0,1659):_ZN9__gnu_cxx13new_allocatorIDiED1Ev;2A.;address::(0,1664)=#(0,1658),(0,1665)=(0,1666)=*(0,32),(0,1667)=*(0,1663),(0,1668)=(0,1669)=&(0,32),(0,29);:_ZNK9__gnu_cxx13new_allocatorIDiE7addressERDi;2B.(0,1670)=#(0,1658),(0,1671)=(0,1672)=*(0,1673)=k(0,32),(0,1667),(0,1674)=(0,1675)=&(0,1673),(0,29);:_ZNK9__gnu_cxx13new_allocatorIDiE7addressERKDi;2B.;allocate::(0,1676)=#(0,1658),(0,1665),(0,1660),(0,1677)=(0,37),(0,734),(0,29);:_ZN9__gnu_cxx13new_allocatorIDiE8allocateEmPKv;2A.;deallocate::(0,1678)=#(0,1658),(0,29),(0,1660),(0,1665),(0,1677),(0,29);:_ZN9__gnu_cxx13new_allocatorIDiE10deallocateEPDim;2A.;max_size::(0,1679)=#(0,1658),(0,1677),(0,1667),(0,29);:_ZNK9__gnu_cxx13new_allocatorIDiE8max_sizeEv;2B.;;
+allocator:Tt(0,1680)=s1!1,020,(0,1658);__ct_base ::(0,1681)=#(0,1680),(0,29),(0,1682)=*(0,1680),(0,29);:_ZNSaIDiEC2Ev;2A.;__ct_comp ::(0,1681):_ZNSaIDiEC1Ev;2A.;__ct_base ::(0,1683)=#(0,1680),(0,29),(0,1682),(0,1684)=&(0,1685)=k(0,1680),(0,29);:_ZNSaIDiEC2ERKS_;2A.;__ct_comp ::(0,1683):_ZNSaIDiEC1ERKS_;2A.;operator=::(0,1686)=#(0,1680),(0,1687)=&(0,1680),(0,1682),(0,1684),(0,29);:_ZNSaIDiEaSERKS_;2A.;__dt_base ::(0,1681):_ZNSaIDiED2Ev;2A.;__dt_comp ::(0,1681):_ZNSaIDiED1Ev;2A.;;
+allocator_traits:Tt(0,1688)=s1allocate::(0,1689)=f(0,1690)=(0,1666):_ZNSt16allocator_traitsISaIDiEE8allocateERS0_m;2A?(0,1691)=f(0,1690):_ZNSt16allocator_traitsISaIDiEE8allocateERS0_mPKv;2A?;deallocate::(0,1692)=f(0,29):_ZNSt16allocator_traitsISaIDiEE10deallocateERS0_PDim;2A?;max_size::(0,1693)=f(0,1694)=(0,37):_ZNSt16allocator_traitsISaIDiEE8max_sizeERKS0_;2A?;select_on_container_copy_construction::(0,1695)=f(0,1696)=(0,1680):_ZNSt16allocator_traitsISaIDiEE37select_on_container_copy_constructionERKS0_;2A?;;
+__alloc_traits:Tt(0,1697)=s1!1,020,(0,1688);_S_select_on_copy::(0,1698)=f(0,1680):_ZN9__gnu_cxx14__alloc_traitsISaIDiEDiE17_S_select_on_copyERKS1_;2A?;_S_on_swap::(0,1699)=f(0,29):_ZN9__gnu_cxx14__alloc_traitsISaIDiEDiE10_S_on_swapERS1_S3_;2A?;_S_propagate_on_copy_assign::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIDiEDiE27_S_propagate_on_copy_assignEv;2A?;_S_propagate_on_move_assign::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIDiEDiE27_S_propagate_on_move_assignEv;2A?;_S_propagate_on_swap::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIDiEDiE20_S_propagate_on_swapEv;2A?;_S_always_equal::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIDiEDiE15_S_always_equalEv;2A?;_S_nothrow_move::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIDiEDiE15_S_nothrow_moveEv;2A?;;
+__alloc_traits::rebind:Tt(0,1700)=s1;
+basic_string::_Alloc_hider:Tt(0,1701)=s8!1,020,(0,1680);_M_p:(0,1702)=(0,1703)=(0,1690),0,64;__ct_base ::(0,1704)=#(0,1701),(0,29),(0,1705)=*(0,1701),(0,1702),(0,1684),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE12_Alloc_hiderC2EPDiRKS3_;2A.;__ct_comp ::(0,1704):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE12_Alloc_hiderC1EPDiRKS3_;2A.;__ct_base ::(0,1706)=#(0,1701),(0,29),(0,1705),(0,1702),(0,1707)=&(0,1680),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE12_Alloc_hiderC2EPDiOS3_;2A.;__ct_comp ::(0,1706):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE12_Alloc_hiderC1EPDiOS3_;2A.;;
+basic_string::._70:t(0,1708)=e_S_local_capacity:3,;
+basic_string::._71:Tt(0,1709)=u16_M_local_buf:(0,1710)=ar(0,5);0;00000000000000000000003;(0,32),0,128;_M_allocated_capacity:(0,1711)=(0,1712)=(0,1694),0,64;;
+basic_string:Tt(0,47)=s32npos:/2(0,1713)=k(0,1711):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4nposE;_M_dataplus:/0(0,1701),0,64;_M_string_length:/0(0,1711),64,64;:/0(0,1709),128,128;_M_data::(0,1714)=#(0,47),(0,29),(0,1715)=*(0,47),(0,1702),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7_M_dataEPDi;0A.;_M_length::(0,1716)=#(0,47),(0,29),(0,1715),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE9_M_lengthEm;0A.;_M_data::(0,1717)=#(0,47),(0,1702),(0,1718)=*(0,1719)=k(0,47),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7_M_dataEv;0B.;_M_local_data::(0,1720)=#(0,47),(0,1702),(0,1715),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE13_M_local_dataEv;0A.(0,1721)=#(0,47),(0,1722)=(0,1723)=(0,1724)=(0,1672),(0,1718),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE13_M_local_dataEv;0B.;_M_capacity::(0,1716):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE11_M_capacityEm;0A.;_M_set_length::(0,1716):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE13_M_set_lengthEm;0A.;_M_is_local::(0,1725)=#(0,47),(0,33),(0,1718),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE11_M_is_localEv;0B.;_M_create::(0,1726)=#(0,47),(0,1702),(0,1715),(0,1727)=&(0,1711),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE9_M_createERmm;0A.;_M_dispose::(0,1728)=#(0,47),(0,29),(0,1715),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE10_M_disposeEv;0A.;_M_destroy::(0,1729)=#(0,47),(0,29),(0,1715),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE10_M_destroyEm;0A.;_M_construct_aux_2::(0,1730)=#(0,47),(0,29),(0,1715),(0,1711),(0,32),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE18_M_construct_aux_2EmDi;0A.;_M_construct::(0,1730):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE12_M_constructEmDi;0A.;_M_get_allocator::(0,1731)=#(0,47),(0,1732)=&(0,1733)=(0,1734)=(0,1735)=(0,1736)=(0,1680),(0,1715),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE16_M_get_allocatorEv;0A.(0,1737)=#(0,47),(0,1738)=&(0,1739)=k(0,1733),(0,1718),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE16_M_get_allocatorEv;0B.;_M_check::(0,1740)=#(0,47),(0,1711),(0,1718),(0,1711),(0,74),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE8_M_checkEmPKc;0B.;_M_check_length::(0,1741)=#(0,47),(0,29),(0,1718),(0,1711),(0,1711),(0,74),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE15_M_check_lengthEmmPKc;0B.;_M_limit::(0,1742)=#(0,47),(0,1711),(0,1718),(0,1711),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE8_M_limitEmm;0B.;_M_disjunct::(0,1743)=#(0,47),(0,33),(0,1718),(0,1672),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE11_M_disjunctEPKDi;0B.;_S_copy::(0,1744)=f(0,29):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7_S_copyEPDiPKDim;0A?;_S_move::(0,1744):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7_S_moveEPDiPKDim;0A?;_S_assign::(0,1745)=f(0,29):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE9_S_assignEPDimDi;0A?;_S_copy_chars::(0,1746)=f(0,29):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE13_S_copy_charsEPDiN9__gnu_cxx17__normal_iteratorIS5_S4_EES8_;0A?(0,1747)=f(0,29):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE13_S_copy_charsEPDiN9__gnu_cxx17__normal_iteratorIPKDiS4_EESA_;0A?(0,1748)=f(0,29):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE13_S_copy_charsEPDiS5_S5_;0A?(0,1749)=f(0,29):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE13_S_copy_charsEPDiPKDiS7_;0A?;_S_compare::(0,1750)=f(0,15):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE10_S_compareEmm;0A?;_M_assign::(0,1751)=#(0,47),(0,29),(0,1715),(0,1752)=&(0,1719),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE9_M_assignERKS4_;0A.;_M_mutate::(0,1753)=#(0,47),(0,29),(0,1715),(0,1711),(0,1711),(0,1672),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE9_M_mutateEmmPKDim;0A.;_M_erase::(0,1754)=#(0,47),(0,29),(0,1715),(0,1711),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE8_M_eraseEmm;0A.;__ct_base ::(0,1755)=#(0,47),(0,29),(0,1715),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC2Ev;2A.;__ct_comp ::(0,1755):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC1Ev;2A.;__ct_base ::(0,1756)=#(0,47),(0,29),(0,1715),(0,1684),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC2ERKS3_;2A.;__ct_comp ::(0,1756):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC1ERKS3_;2A.;__ct_base ::(0,1751):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC2ERKS4_;2A.;__ct_comp ::(0,1751):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC1ERKS4_;2A.;__ct_base ::(0,1757)=#(0,47),(0,29),(0,1715),(0,1752),(0,1711),(0,1684),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC2ERKS4_mRKS3_;2A.;__ct_comp ::(0,1757):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC1ERKS4_mRKS3_;2A.;__ct_base ::(0,1758)=#(0,47),(0,29),(0,1715),(0,1752),(0,1711),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC2ERKS4_mm;2A.;__ct_comp ::(0,1758):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC1ERKS4_mm;2A.;__ct_base ::(0,1759)=#(0,47),(0,29),(0,1715),(0,1752),(0,1711),(0,1711),(0,1684),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC2ERKS4_mmRKS3_;2A.;__ct_comp ::(0,1759):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC1ERKS4_mmRKS3_;2A.;__ct_base ::(0,1760)=#(0,47),(0,29),(0,1715),(0,1672),(0,1711),(0,1684),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC2EPKDimRKS3_;2A.;__ct_comp ::(0,1760):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC1EPKDimRKS3_;2A.;__ct_base ::(0,1761)=#(0,47),(0,29),(0,1715),(0,1672),(0,1684),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC2EPKDiRKS3_;2A.;__ct_comp ::(0,1761):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC1EPKDiRKS3_;2A.;__ct_base ::(0,1762)=#(0,47),(0,29),(0,1715),(0,1711),(0,32),(0,1684),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC2EmDiRKS3_;2A.;__ct_comp ::(0,1762):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC1EmDiRKS3_;2A.;__ct_base ::(0,1763)=#(0,47),(0,29),(0,1715),(0,1764)=&(0,47),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC2EOS4_;2A.;__ct_comp ::(0,1763):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC1EOS4_;2A.;__ct_base ::(0,1765)=#(0,47),(0,29),(0,1715),(0,1766)=xsinitializer_list:,(0,1684),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC2ESt16initializer_listIDiERKS3_;2A.;__ct_comp ::(0,1765):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC1ESt16initializer_listIDiERKS3_;2A.;__ct_base ::(0,1767)=#(0,47),(0,29),(0,1715),(0,1752),(0,1684),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC2ERKS4_RKS3_;2A.;__ct_comp ::(0,1767):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC1ERKS4_RKS3_;2A.;__ct_base ::(0,1768)=#(0,47),(0,29),(0,1715),(0,1764),(0,1684),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC2EOS4_RKS3_;2A.;__ct_comp ::(0,1768):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEC1EOS4_RKS3_;2A.;__dt_base ::(0,1769)=#(0,47),(0,29),(0,1715),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEED2Ev;2A.;__dt_comp ::(0,1769):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEED1Ev;2A.;operator=::(0,1770)=#(0,47),(0,1771)=&(0,47),(0,1715),(0,1752),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEaSERKS4_;2A.(0,1772)=#(0,47),(0,1771),(0,1715),(0,1672),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEaSEPKDi;2A.(0,1773)=#(0,47),(0,1771),(0,1715),(0,32),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEaSEDi;2A.(0,1774)=#(0,47),(0,1771),(0,1715),(0,1764),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEaSEOS4_;2A.(0,1775)=#(0,47),(0,1771),(0,1715),(0,1766),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEaSESt16initializer_listIDiE;2A.;begin::(0,1776)=#(0,47),(0,1777)=(0,1778)=xs__normal_iterator:,(0,1715),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5beginEv;2A.(0,1779)=#(0,47),(0,1780)=(0,1781)=xs__normal_iterator:,(0,1718),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5beginEv;2B.;end::(0,1776):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE3endEv;2A.(0,1779):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE3endEv;2B.;rbegin::(0,1782)=#(0,47),(0,1783)=(0,1784)=xsreverse_iterator:,(0,1715),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6rbeginEv;2A.(0,1785)=#(0,47),(0,1786)=(0,1787)=xsreverse_iterator:,(0,1718),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6rbeginEv;2B.;rend::(0,1782):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4rendEv;2A.(0,1785):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4rendEv;2B.;cbegin::(0,1779):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6cbeginEv;2B.;cend::(0,1779):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4cendEv;2B.;crbegin::(0,1785):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7crbeginEv;2B.;crend::(0,1785):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5crendEv;2B.;size::(0,1788)=#(0,47),(0,1711),(0,1718),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4sizeEv;2B.;length::(0,1788):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6lengthEv;2B.;max_size::(0,1788):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE8max_sizeEv;2B.;resize::(0,1730):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6resizeEmDi;2A.(0,1716):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6resizeEm;2A.;shrink_to_fit::(0,1789)=#(0,47),(0,29),(0,1715),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE13shrink_to_fitEv;2A.;capacity::(0,1788):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE8capacityEv;2B.;reserve::(0,1790)=#(0,47),(0,29),(0,1715),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7reserveEm;2A.;clear::(0,1789):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5clearEv;2A.;empty::(0,1791)=#(0,47),(0,33),(0,1718),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5emptyEv;2B.;operator[]::(0,1792)=#(0,47),(0,1793)=(0,1794)=(0,1795)=&(0,1796)=k(0,1797)=(0,1798)=(0,32),(0,1718),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEixEm;2B.(0,1799)=#(0,47),(0,1800)=(0,1801)=(0,1802)=&(0,1797),(0,1715),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEixEm;2A.;at::(0,1803)=#(0,47),(0,1793),(0,1718),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE2atEm;2B.(0,1799):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE2atEm;2A.;front::(0,1804)=#(0,47),(0,1800),(0,1715),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5frontEv;2A.(0,1805)=#(0,47),(0,1793),(0,1718),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5frontEv;2B.;back::(0,1804):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4backEv;2A.(0,1805):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4backEv;2B.;operator+=::(0,1770):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEpLERKS4_;2A.(0,1772):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEpLEPKDi;2A.(0,1773):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEpLEDi;2A.(0,1775):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEpLESt16initializer_listIDiE;2A.;append::(0,1770):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6appendERKS4_;2A.(0,1806)=#(0,47),(0,1771),(0,1715),(0,1752),(0,1711),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6appendERKS4_mm;2A.(0,1807)=#(0,47),(0,1771),(0,1715),(0,1672),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6appendEPKDim;2A.(0,1772):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6appendEPKDi;2A.(0,1808)=#(0,47),(0,1771),(0,1715),(0,1711),(0,32),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6appendEmDi;2A.(0,1775):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6appendESt16initializer_listIDiE;2A.;push_back::(0,1809)=#(0,47),(0,29),(0,1715),(0,32),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE9push_backEDi;2A.;assign::(0,1770):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6assignERKS4_;2A.(0,1774):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6assignEOS4_;2A.(0,1810)=#(0,47),(0,1771),(0,1715),(0,1752),(0,1711),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6assignERKS4_mm;2A.(0,1807):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6assignEPKDim;2A.(0,1772):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6assignEPKDi;2A.(0,1808):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6assignEmDi;2A.(0,1775):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6assignESt16initializer_listIDiE;2A.;insert::(0,1811)=#(0,47),(0,1777),(0,1715),(0,1780),(0,1711),(0,32),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6insertEN9__gnu_cxx17__normal_iteratorIPKDiS4_EEmDi;2A.(0,1812)=#(0,47),(0,1777),(0,1715),(0,1780),(0,1766),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6insertEN9__gnu_cxx17__normal_iteratorIPKDiS4_EESt16initializer_listIDiE;2A.(0,1813)=#(0,47),(0,1771),(0,1715),(0,1711),(0,1752),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6insertEmRKS4_;2A.(0,1814)=#(0,47),(0,1771),(0,1715),(0,1711),(0,1752),(0,1711),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6insertEmRKS4_mm;2A.(0,1815)=#(0,47),(0,1771),(0,1715),(0,1711),(0,1672),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6insertEmPKDim;2A.(0,1816)=#(0,47),(0,1771),(0,1715),(0,1711),(0,1672),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6insertEmPKDi;2A.(0,1817)=#(0,47),(0,1771),(0,1715),(0,1711),(0,1711),(0,32),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6insertEmmDi;2A.(0,1818)=#(0,47),(0,1777),(0,1715),(0,1819)=(0,1780),(0,32),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6insertEN9__gnu_cxx17__normal_iteratorIPKDiS4_EEDi;2A.;erase::(0,1820)=#(0,47),(0,1771),(0,1715),(0,1711),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5eraseEmm;2A.(0,1821)=#(0,47),(0,1777),(0,1715),(0,1819),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5eraseEN9__gnu_cxx17__normal_iteratorIPKDiS4_EE;2A.(0,1822)=#(0,47),(0,1777),(0,1715),(0,1819),(0,1819),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5eraseEN9__gnu_cxx17__normal_iteratorIPKDiS4_EES9_;2A.;pop_back::(0,1789):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE8pop_backEv;2A.;replace::(0,1823)=#(0,47),(0,1771),(0,1715),(0,1711),(0,1711),(0,1752),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEmmRKS4_;2A.(0,1824)=#(0,47),(0,1771),(0,1715),(0,1711),(0,1711),(0,1752),(0,1711),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEmmRKS4_mm;2A.(0,1825)=#(0,47),(0,1771),(0,1715),(0,1711),(0,1711),(0,1672),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEmmPKDim;2A.(0,1826)=#(0,47),(0,1771),(0,1715),(0,1711),(0,1711),(0,1672),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEmmPKDi;2A.(0,1827)=#(0,47),(0,1771),(0,1715),(0,1711),(0,1711),(0,1711),(0,32),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEmmmDi;2A.(0,1828)=#(0,47),(0,1771),(0,1715),(0,1819),(0,1819),(0,1752),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDiS4_EES9_RKS4_;2A.(0,1829)=#(0,47),(0,1771),(0,1715),(0,1819),(0,1819),(0,1672),(0,1711),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDiS4_EES9_S8_m;2A.(0,1830)=#(0,47),(0,1771),(0,1715),(0,1819),(0,1819),(0,1672),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDiS4_EES9_S8_;2A.(0,1831)=#(0,47),(0,1771),(0,1715),(0,1819),(0,1819),(0,1711),(0,32),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDiS4_EES9_mDi;2A.(0,1832)=#(0,47),(0,1771),(0,1715),(0,1819),(0,1819),(0,1666),(0,1666),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDiS4_EES9_PDiSA_;2A.(0,1833)=#(0,47),(0,1771),(0,1715),(0,1819),(0,1819),(0,1672),(0,1672),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDiS4_EES9_S8_S8_;2A.(0,1834)=#(0,47),(0,1771),(0,1715),(0,1819),(0,1819),(0,1777),(0,1777),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDiS4_EES9_NS6_IPDiS4_EESB_;2A.(0,1835)=#(0,47),(0,1771),(0,1715),(0,1819),(0,1819),(0,1780),(0,1780),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDiS4_EES9_S9_S9_;2A.(0,1836)=#(0,47),(0,1771),(0,1715),(0,1780),(0,1780),(0,1766),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7replaceEN9__gnu_cxx17__normal_iteratorIPKDiS4_EES9_St16initializer_listIDiE;2A.;_M_replace_aux::(0,1827):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE14_M_replace_auxEmmmDi;0A.;_M_replace::(0,1825):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE10_M_replaceEmmPKDim;0A.;_M_append::(0,1807):_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE9_M_appendEPKDim;0A.;copy::(0,1837)=#(0,47),(0,1711),(0,1718),(0,1666),(0,1711),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4copyEPDimm;2B.;swap::(0,1838)=#(0,47),(0,29),(0,1715),(0,1771),(0,29);:_ZNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4swapERS4_;2A.;c_str::(0,1839)=#(0,47),(0,1672),(0,1718),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5c_strEv;2B.;data::(0,1839):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4dataEv;2B.;get_allocator::(0,1840)=#(0,47),(0,1733),(0,1718),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE13get_allocatorEv;2B.;find::(0,1841)=#(0,47),(0,1711),(0,1718),(0,1672),(0,1711),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4findEPKDimm;2B.(0,1842)=#(0,47),(0,1711),(0,1718),(0,1752),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4findERKS4_m;2B.(0,1843)=#(0,47),(0,1711),(0,1718),(0,1672),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4findEPKDim;2B.(0,1844)=#(0,47),(0,1711),(0,1718),(0,32),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE4findEDim;2B.;rfind::(0,1845)=#(0,47),(0,1711),(0,1718),(0,1752),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5rfindERKS4_m;2B.(0,1841):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5rfindEPKDimm;2B.(0,1846)=#(0,47),(0,1711),(0,1718),(0,1672),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5rfindEPKDim;2B.(0,1847)=#(0,47),(0,1711),(0,1718),(0,32),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE5rfindEDim;2B.;find_first_of::(0,1848)=#(0,47),(0,1711),(0,1718),(0,1752),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE13find_first_ofERKS4_m;2B.(0,1841):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE13find_first_ofEPKDimm;2B.(0,1849)=#(0,47),(0,1711),(0,1718),(0,1672),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE13find_first_ofEPKDim;2B.(0,1850)=#(0,47),(0,1711),(0,1718),(0,32),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE13find_first_ofEDim;2B.;find_last_of::(0,1851)=#(0,47),(0,1711),(0,1718),(0,1752),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE12find_last_ofERKS4_m;2B.(0,1841):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE12find_last_ofEPKDimm;2B.(0,1852)=#(0,47),(0,1711),(0,1718),(0,1672),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE12find_last_ofEPKDim;2B.(0,1853)=#(0,47),(0,1711),(0,1718),(0,32),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE12find_last_ofEDim;2B.;find_first_not_of::(0,1854)=#(0,47),(0,1711),(0,1718),(0,1752),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE17find_first_not_ofERKS4_m;2B.(0,1841):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE17find_first_not_ofEPKDimm;2B.(0,1855)=#(0,47),(0,1711),(0,1718),(0,1672),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE17find_first_not_ofEPKDim;2B.(0,1856)=#(0,47),(0,1711),(0,1718),(0,32),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE17find_first_not_ofEDim;2B.;find_last_not_of::(0,1857)=#(0,47),(0,1711),(0,1718),(0,1752),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE16find_last_not_ofERKS4_m;2B.(0,1841):_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE16find_last_not_ofEPKDimm;2B.(0,1858)=#(0,47),(0,1711),(0,1718),(0,1672),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE16find_last_not_ofEPKDim;2B.(0,1859)=#(0,47),(0,1711),(0,1718),(0,32),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE16find_last_not_ofEDim;2B.;substr::(0,1860)=#(0,47),(0,47),(0,1718),(0,1711),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE6substrEmm;2B.;compare::(0,1861)=#(0,47),(0,15),(0,1718),(0,1752),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7compareERKS4_;2B.(0,1862)=#(0,47),(0,15),(0,1718),(0,1711),(0,1711),(0,1752),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7compareEmmRKS4_;2B.(0,1863)=#(0,47),(0,15),(0,1718),(0,1711),(0,1711),(0,1752),(0,1711),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7compareEmmRKS4_mm;2B.(0,1864)=#(0,47),(0,15),(0,1718),(0,1672),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7compareEPKDi;2B.(0,1865)=#(0,47),(0,15),(0,1718),(0,1711),(0,1711),(0,1672),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7compareEmmPKDi;2B.(0,1866)=#(0,47),(0,15),(0,1718),(0,1711),(0,1711),(0,1672),(0,1711),(0,29);:_ZNKSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEE7compareEmmPKDim;2B.;;
+__is_fast_hash:Tt(0,1867)=s1!1,020,(0,174);;
+initializer_list:Tt(0,1549)=s16_M_array:/0(0,1868)=(0,1455),0,64;_M_len:/0(0,1869)=(0,37),64,64;__ct_base ::(0,1870)=#(0,1549),(0,29),(0,1871)=*(0,1549),(0,1872)=(0,1455),(0,1869),(0,29);:_ZNSt16initializer_listIDsEC2EPKDsm;0A.;__ct_comp ::(0,1870):_ZNSt16initializer_listIDsEC1EPKDsm;0A.;__ct_base ::(0,1873)=#(0,1549),(0,29),(0,1871),(0,29);:_ZNSt16initializer_listIDsEC2Ev;2A.;__ct_comp ::(0,1873):_ZNSt16initializer_listIDsEC1Ev;2A.;size::(0,1874)=#(0,1549),(0,1869),(0,1875)=*(0,1876)=k(0,1549),(0,29);:_ZNKSt16initializer_listIDsE4sizeEv;2B.;begin::(0,1877)=#(0,1549),(0,1872),(0,1875),(0,29);:_ZNKSt16initializer_listIDsE5beginEv;2B.;end::(0,1877):_ZNKSt16initializer_listIDsE3endEv;2B.;;
+initializer_list:Tt(0,1766)=s16_M_array:/0(0,1878)=(0,1672),0,64;_M_len:/0(0,1879)=(0,37),64,64;__ct_base ::(0,1880)=#(0,1766),(0,29),(0,1881)=*(0,1766),(0,1882)=(0,1672),(0,1879),(0,29);:_ZNSt16initializer_listIDiEC2EPKDim;0A.;__ct_comp ::(0,1880):_ZNSt16initializer_listIDiEC1EPKDim;0A.;__ct_base ::(0,1883)=#(0,1766),(0,29),(0,1881),(0,29);:_ZNSt16initializer_listIDiEC2Ev;2A.;__ct_comp ::(0,1883):_ZNSt16initializer_listIDiEC1Ev;2A.;size::(0,1884)=#(0,1766),(0,1879),(0,1885)=*(0,1886)=k(0,1766),(0,29);:_ZNKSt16initializer_listIDiE4sizeEv;2B.;begin::(0,1887)=#(0,1766),(0,1882),(0,1885),(0,29);:_ZNKSt16initializer_listIDiE5beginEv;2B.;end::(0,1887):_ZNKSt16initializer_listIDiE3endEv;2B.;;
+locale::._78:t(0,1888)=e_S_categories_size:12,;
+locale:Tt(0,1889)=s8none:/2(0,1890)=k(0,1891)=(0,15):_ZNSt6locale4noneE;ctype:/2(0,1890):_ZNSt6locale5ctypeE;numeric:/2(0,1890):_ZNSt6locale7numericE;collate:/2(0,1890):_ZNSt6locale7collateE;time:/2(0,1890):_ZNSt6locale4timeE;monetary:/2(0,1890):_ZNSt6locale8monetaryE;messages:/2(0,1890):_ZNSt6locale8messagesE;all:/2(0,1890):_ZNSt6locale3allE;_M_impl:/0(0,1892)=*(0,1893)=xs_Impl:,0,64;_S_classic:/0(0,1892):_ZNSt6locale10_S_classicE;_S_global:/0(0,1892):_ZNSt6locale9_S_globalE;_S_categories:/0(0,1894)=k(0,1895)=*(0,1896)=k(0,74):_ZNSt6locale13_S_categoriesE;_S_once:/0(0,710):_ZNSt6locale7_S_onceE;_S_twinned_facets:/0(0,1897)=ar(0,15);0;-1;(0,1898)=k(0,1899)=*(0,1900)=k(0,1901)=xsid::_ZNSt6locale17_S_twinned_facetsE;__ct_base ::(0,1902)=#(0,1889),(0,29),(0,1903)=*(0,1889),(0,29);:_ZNSt6localeC2Ev;2A.;__ct_comp ::(0,1902):_ZNSt6localeC1Ev;2A.;__ct_base ::(0,1904)=#(0,1889),(0,29),(0,1903),(0,1905)=&(0,1906)=k(0,1889),(0,29);:_ZNSt6localeC2ERKS_;2A.;__ct_comp ::(0,1904):_ZNSt6localeC1ERKS_;2A.;__ct_base ::(0,1907)=#(0,1889),(0,29),(0,1903),(0,74),(0,29);:_ZNSt6localeC2EPKc;2A.;__ct_comp ::(0,1907):_ZNSt6localeC1EPKc;2A.;__ct_base ::(0,1908)=#(0,1889),(0,29),(0,1903),(0,1905),(0,74),(0,1891),(0,29);:_ZNSt6localeC2ERKS_PKci;2A.;__ct_comp ::(0,1908):_ZNSt6localeC1ERKS_PKci;2A.;__ct_base ::(0,1909)=#(0,1889),(0,29),(0,1903),(0,1423),(0,29);:_ZNSt6localeC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;2A.;__ct_comp ::(0,1909):_ZNSt6localeC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;2A.;__ct_base ::(0,1910)=#(0,1889),(0,29),(0,1903),(0,1905),(0,1423),(0,1891),(0,29);:_ZNSt6localeC2ERKS_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi;2A.;__ct_comp ::(0,1910):_ZNSt6localeC1ERKS_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi;2A.;__ct_base ::(0,1911)=#(0,1889),(0,29),(0,1903),(0,1905),(0,1905),(0,1891),(0,29);:_ZNSt6localeC2ERKS_S1_i;2A.;__ct_comp ::(0,1911):_ZNSt6localeC1ERKS_S1_i;2A.;__dt_base ::(0,1902):_ZNSt6localeD2Ev;2A.;__dt_comp ::(0,1902):_ZNSt6localeD1Ev;2A.;operator=::(0,1912)=#(0,1889),(0,1905),(0,1903),(0,1905),(0,29);:_ZNSt6localeaSERKS_;2A.;name::(0,1913)=#(0,1889),(0,40),(0,1914)=*(0,1906),(0,29);:_ZNKSt6locale4nameB5cxx11Ev;2B.;operator==::(0,1915)=#(0,1889),(0,33),(0,1914),(0,1905),(0,29);:_ZNKSt6localeeqERKS_;2B.;operator!=::(0,1915):_ZNKSt6localeneERKS_;2B.;global::(0,1916)=f(0,1889):_ZNSt6locale6globalERKS_;2A?;classic::(0,1917)=f(0,1905):_ZNSt6locale7classicEv;2A?;__ct_base ::(0,1918)=#(0,1889),(0,29),(0,1903),(0,1892),(0,29);:_ZNSt6localeC2EPNS_5_ImplE;0A.;__ct_comp ::(0,1918):_ZNSt6localeC1EPNS_5_ImplE;0A.;_S_initialize::(0,140):_ZNSt6locale13_S_initializeEv;0A?;_S_initialize_once::(0,1919)=f(0,29):_ZNSt6locale18_S_initialize_onceEv;0A?;_S_normalize_category::(0,1920)=f(0,1891):_ZNSt6locale21_S_normalize_categoryEi;0A?;_M_coalesce::(0,1911):_ZNSt6locale11_M_coalesceERKS_S1_i;0A.;;
+locale::id:Tt(0,1901)=s8_M_index:/0(0,37),0,64;_S_refcount:/0(0,715):_ZNSt6locale2id11_S_refcountE;operator=::(0,1921)=#(0,1901),(0,29),(0,1922)=*(0,1901),(0,1923)=&(0,1900),(0,29);:_ZNSt6locale2idaSERKS0_;0A.;__ct_base ::(0,1921):_ZNSt6locale2idC2ERKS0_;0A.;__ct_comp ::(0,1921):_ZNSt6locale2idC1ERKS0_;0A.;__ct_base ::(0,1924)=#(0,1901),(0,29),(0,1922),(0,29);:_ZNSt6locale2idC2Ev;2A.;__ct_comp ::(0,1924):_ZNSt6locale2idC1Ev;2A.;_M_id::(0,1925)=#(0,1901),(0,37),(0,1899),(0,29);:_ZNKSt6locale2id5_M_idEv;2B.;;
+locale::_Impl:Tt(0,1893)=s40_M_refcount:/0(0,715),0,32;_M_facets:/0(0,1926)=*(0,1927)=*(0,1928)=k(0,1929)=xsfacet:,64,64;_M_facets_size:/0(0,37),128,64;_M_caches:/0(0,1926),192,64;_M_names:/0(0,1930)=*(0,561),256,64;_S_id_ctype:/0(0,1897):_ZNSt6locale5_Impl11_S_id_ctypeE;_S_id_numeric:/0(0,1897):_ZNSt6locale5_Impl13_S_id_numericE;_S_id_collate:/0(0,1897):_ZNSt6locale5_Impl13_S_id_collateE;_S_id_time:/0(0,1897):_ZNSt6locale5_Impl10_S_id_timeE;_S_id_monetary:/0(0,1897):_ZNSt6locale5_Impl14_S_id_monetaryE;_S_id_messages:/0(0,1897):_ZNSt6locale5_Impl14_S_id_messagesE;_S_facet_categories:/0(0,1931)=ar(0,15);0;-1;(0,1932)=k(0,1933)=*(0,1898):_ZNSt6locale5_Impl19_S_facet_categoriesE;_M_add_reference::(0,1934)=#(0,1893),(0,29),(0,1892),(0,29);:_ZNSt6locale5_Impl16_M_add_referenceEv;0A.;_M_remove_reference::(0,1934):_ZNSt6locale5_Impl19_M_remove_referenceEv;0A.;__ct_base ::(0,1935)=#(0,1893),(0,29),(0,1892),(0,1936)=&(0,1937)=k(0,1893),(0,37),(0,29);:_ZNSt6locale5_ImplC2ERKS0_m;0A.;__ct_comp ::(0,1935):_ZNSt6locale5_ImplC1ERKS0_m;0A.;__ct_base ::(0,1938)=#(0,1893),(0,29),(0,1892),(0,74),(0,37),(0,29);:_ZNSt6locale5_ImplC2EPKcm;0A.;__ct_comp ::(0,1938):_ZNSt6locale5_ImplC1EPKcm;0A.;__ct_base ::(0,1939)=#(0,1893),(0,29),(0,1892),(0,37),(0,29);:_ZNSt6locale5_ImplC2Em;0A.;__ct_comp ::(0,1939):_ZNSt6locale5_ImplC1Em;0A.;__dt_base ::(0,1934):_ZNSt6locale5_ImplD2Ev;0A.;__dt_comp ::(0,1934):_ZNSt6locale5_ImplD1Ev;0A.;__ct_base ::(0,1940)=#(0,1893),(0,29),(0,1892),(0,1936),(0,29);:_ZNSt6locale5_ImplC2ERKS0_;0A.;__ct_comp ::(0,1940):_ZNSt6locale5_ImplC1ERKS0_;0A.;operator=::(0,1940):_ZNSt6locale5_ImplaSERKS0_;0A.;_M_check_same_name::(0,1941)=#(0,1893),(0,33),(0,1892),(0,29);:_ZNSt6locale5_Impl18_M_check_same_nameEv;0A.;_M_replace_categories::(0,1942)=#(0,1893),(0,29),(0,1892),(0,1943)=*(0,1937),(0,1891),(0,29);:_ZNSt6locale5_Impl21_M_replace_categoriesEPKS0_i;0A.;_M_replace_category::(0,1944)=#(0,1893),(0,29),(0,1892),(0,1943),(0,1933),(0,29);:_ZNSt6locale5_Impl19_M_replace_categoryEPKS0_PKPKNS_2idE;0A.;_M_replace_facet::(0,1945)=#(0,1893),(0,29),(0,1892),(0,1943),(0,1899),(0,29);:_ZNSt6locale5_Impl16_M_replace_facetEPKS0_PKNS_2idE;0A.;_M_install_facet::(0,1946)=#(0,1893),(0,29),(0,1892),(0,1899),(0,1927),(0,29);:_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE;0A.;_M_install_cache::(0,1947)=#(0,1893),(0,29),(0,1892),(0,1927),(0,37),(0,29);:_ZNSt6locale5_Impl16_M_install_cacheEPKNS_5facetEm;0A.;_M_init_extra::(0,1948)=#(0,1893),(0,29),(0,1892),(0,1949)=*(0,1950)=*(0,1929),(0,29);:_ZNSt6locale5_Impl13_M_init_extraEPPNS_5facetE;0A.(0,1951)=#(0,1893),(0,29),(0,1892),(0,150),(0,150),(0,74),(0,74),(0,29);:_ZNSt6locale5_Impl13_M_init_extraEPvS1_PKcS3_;0A.;;
+__conditional_type:Tt(0,1952)=s1;
+__numeric_traits_integer:Tt(0,1953)=s1__min:/2(0,215):_ZN9__gnu_cxx24__numeric_traits_integerImE5__minE;__max:/2(0,215):_ZN9__gnu_cxx24__numeric_traits_integerImE5__maxE;__is_signed:/2(0,175):_ZN9__gnu_cxx24__numeric_traits_integerImE11__is_signedE;__digits:/2(0,72):_ZN9__gnu_cxx24__numeric_traits_integerImE8__digitsE;;
+__numeric_traits:Tt(0,1954)=s1!1,020,(0,1953);;
+errc:t(0,1955)=eaddress_family_not_supported:97,address_in_use:98,address_not_available:99,already_connected:106,argument_list_too_long:7,argument_out_of_domain:33,bad_address:14,bad_file_descriptor:9,bad_message:74,broken_pipe:32,connection_aborted:103,connection_already_in_progress:114,connection_refused:111,connection_reset:104,cross_device_link:18,destination_address_required:89,device_or_resource_busy:16,directory_not_empty:39,executable_format_error:8,file_exists:17,file_too_large:27,filename_too_long:36,function_not_supported:38,host_unreachable:113,identifier_removed:43,illegal_byte_sequence:84,inappropriate_io_control_operation:25,interrupted:4,invalid_argument:22,invalid_seek:29,io_error:5,is_a_directory:21,message_size:90,network_down:100,network_reset:102,network_unreachable:101,no_buffer_space:105,no_child_process:10,no_link:67,no_lock_available:37,no_message_available:61,no_message:42,no_protocol_option:92,no_space_on_device:28,no_stream_resources:63,no_such_device_or_address:6,no_such_device:19,no_such_file_or_directory:2,no_such_process:3,not_a_directory:20,not_a_socket:88,not_a_stream:60,not_connected:107,not_enough_memory:12,not_supported:95,operation_canceled:125,operation_in_progress:115,operation_not_permitted:1,operation_not_supported:95,operation_would_block:11,owner_dead:130,permission_denied:13,protocol_error:71,protocol_not_supported:93,read_only_file_system:30,resource_deadlock_would_occur:35,resource_unavailable_try_again:11,result_out_of_range:34,state_not_recoverable:131,stream_timeout:62,text_file_busy:26,timed_out:110,too_many_files_open_in_system:23,too_many_files_open:24,too_many_links:31,too_many_symbolic_link_levels:40,value_too_large:75,wrong_protocol_type:91,;
+__cow_string::._79:Tt(0,1956)=u8_M_p:(0,74),0,64;_M_bytes:(0,672),0,64;;
+__cow_string:Tt(0,1957)=s8:(0,1956),0,64;__ct_base ::(0,1958)=#(0,1957),(0,29),(0,1959)=*(0,1957),(0,29);:_ZNSt12__cow_stringC2Ev;2A.;__ct_comp ::(0,1958):_ZNSt12__cow_stringC1Ev;2A.;__ct_base ::(0,1960)=#(0,1957),(0,29),(0,1959),(0,1423),(0,29);:_ZNSt12__cow_stringC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;2A.;__ct_comp ::(0,1960):_ZNSt12__cow_stringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;2A.;__ct_base ::(0,1961)=#(0,1957),(0,29),(0,1959),(0,74),(0,37),(0,29);:_ZNSt12__cow_stringC2EPKcm;2A.;__ct_comp ::(0,1961):_ZNSt12__cow_stringC1EPKcm;2A.;__ct_base ::(0,1962)=#(0,1957),(0,29),(0,1959),(0,1963)=&(0,1964)=k(0,1957),(0,29);:_ZNSt12__cow_stringC2ERKS_;2A.;__ct_comp ::(0,1962):_ZNSt12__cow_stringC1ERKS_;2A.;operator=::(0,1965)=#(0,1957),(0,1966)=&(0,1957),(0,1959),(0,1963),(0,29);:_ZNSt12__cow_stringaSERKS_;2A.;__dt_base ::(0,1967)=#(0,1957),(0,29),(0,1959),(0,29);:_ZNSt12__cow_stringD2Ev;2A.;__dt_comp ::(0,1967):_ZNSt12__cow_stringD1Ev;2A.;__ct_base ::(0,1968)=#(0,1957),(0,29),(0,1959),(0,1969)=&(0,1957),(0,29);:_ZNSt12__cow_stringC2EOS_;2A.;__ct_comp ::(0,1968):_ZNSt12__cow_stringC1EOS_;2A.;operator=::(0,1970)=#(0,1957),(0,1966),(0,1959),(0,1969),(0,29);:_ZNSt12__cow_stringaSEOS_;2A.;;
+__sso_string:t(0,1971)=(0,41)
+is_error_condition_enum:Tt(0,1972)=s1!1,020,(0,172);;
+binary_function:Tt(0,1973)=s1;
+less:Tt(0,1974)=s1!1,020,(0,1973);operator()::(0,1975)=#(0,1974),(0,33),(0,1976)=*(0,1977)=k(0,1974),(0,1978)=*(0,1979)=k(0,1980)=xserror_category:,(0,1978),(0,29);:_ZNKSt4lessIPKNSt3_V214error_categoryEEclES3_S3_;2B.;;
+error_code:Tt(0,1981)=s16_M_value:/0(0,15),0,32;_M_cat:/0(0,1978),64,64;__ct_base ::(0,1982)=#(0,1981),(0,29),(0,1983)=*(0,1981),(0,29);:_ZNSt10error_codeC2Ev;2A.;__ct_comp ::(0,1982):_ZNSt10error_codeC1Ev;2A.;__ct_base ::(0,1984)=#(0,1981),(0,29),(0,1983),(0,15),(0,1985)=&(0,1979),(0,29);:_ZNSt10error_codeC2EiRKNSt3_V214error_categoryE;2A.;__ct_comp ::(0,1984):_ZNSt10error_codeC1EiRKNSt3_V214error_categoryE;2A.;assign::(0,1984):_ZNSt10error_code6assignEiRKNSt3_V214error_categoryE;2A.;clear::(0,1982):_ZNSt10error_code5clearEv;2A.;value::(0,1986)=#(0,1981),(0,15),(0,1987)=*(0,1988)=k(0,1981),(0,29);:_ZNKSt10error_code5valueEv;2B.;category::(0,1989)=#(0,1981),(0,1985),(0,1987),(0,29);:_ZNKSt10error_code8categoryEv;2B.;default_error_condition::(0,1990)=#(0,1981),(0,1991)=xserror_condition:,(0,1987),(0,29);:_ZNKSt10error_code23default_error_conditionEv;2B.;message::(0,1992)=#(0,1981),(0,40),(0,1987),(0,29);:_ZNKSt10error_code7messageB5cxx11Ev;2B.;__conv_op ::(0,1993)=#(0,1981),(0,33),(0,1987),(0,29);:_ZNKSt10error_codecvbEv;2B.;;
+is_error_code_enum:Tt(0,1994)=s1!1,020,(0,174);;
+enable_if:Tt(0,1995)=s1;
+error_condition:Tt(0,1991)=s16_M_value:/0(0,15),0,32;_M_cat:/0(0,1978),64,64;__ct_base ::(0,1996)=#(0,1991),(0,29),(0,1997)=*(0,1991),(0,29);:_ZNSt15error_conditionC2Ev;2A.;__ct_comp ::(0,1996):_ZNSt15error_conditionC1Ev;2A.;__ct_base ::(0,1998)=#(0,1991),(0,29),(0,1997),(0,15),(0,1985),(0,29);:_ZNSt15error_conditionC2EiRKNSt3_V214error_categoryE;2A.;__ct_comp ::(0,1998):_ZNSt15error_conditionC1EiRKNSt3_V214error_categoryE;2A.;assign::(0,1998):_ZNSt15error_condition6assignEiRKNSt3_V214error_categoryE;2A.;clear::(0,1996):_ZNSt15error_condition5clearEv;2A.;value::(0,1999)=#(0,1991),(0,15),(0,2000)=*(0,2001)=k(0,1991),(0,29);:_ZNKSt15error_condition5valueEv;2B.;category::(0,2002)=#(0,1991),(0,1985),(0,2000),(0,29);:_ZNKSt15error_condition8categoryEv;2B.;message::(0,2003)=#(0,1991),(0,40),(0,2000),(0,29);:_ZNKSt15error_condition7messageB5cxx11Ev;2B.;__conv_op ::(0,2004)=#(0,1991),(0,33),(0,2000),(0,29);:_ZNKSt15error_conditioncvbEv;2B.;;
+is_error_condition_enum:Tt(0,2005)=s1!1,020,(0,174);;
+is_error_code_enum:Tt(0,2006)=s1!1,020,(0,174);;
+is_error_condition_enum:Tt(0,2007)=s1!1,020,(0,174);;
+is_error_code_enum:Tt(0,2008)=s1!1,020,(0,174);;
+is_error_code_enum:Tt(0,2009)=s1!1,020,(0,174);;
+enable_if:Tt(0,2010)=s1;
+__hash_base:Tt(0,2011)=s1;
+hash:Tt(0,2012)=s1!1,020,(0,2011);operator()::(0,2013)=#(0,2012),(0,37),(0,2014)=*(0,2015)=k(0,2012),(0,2016)=&(0,1988),(0,29);:_ZNKSt4hashISt10error_codeEclERKS0_;2B.;;
+_Ios_Fmtflags:t(0,2017)=e_S_boolalpha:1,_S_dec:2,_S_fixed:4,_S_hex:8,_S_internal:16,_S_left:32,_S_oct:64,_S_right:128,_S_scientific:256,_S_showbase:512,_S_showpoint:1024,_S_showpos:2048,_S_skipws:4096,_S_unitbuf:8192,_S_uppercase:16384,_S_adjustfield:176,_S_basefield:74,_S_floatfield:260,_S_ios_fmtflags_end:65536,_S_ios_fmtflags_max:2147483647,_S_ios_fmtflags_min:-2147483648,;
+_Ios_Openmode:t(0,2018)=e_S_app:1,_S_ate:2,_S_bin:4,_S_in:8,_S_out:16,_S_trunc:32,_S_ios_openmode_end:65536,_S_ios_openmode_max:2147483647,_S_ios_openmode_min:-2147483648,;
+_Ios_Iostate:t(0,2019)=e_S_goodbit:0,_S_badbit:1,_S_eofbit:2,_S_failbit:4,_S_ios_iostate_end:65536,_S_ios_iostate_max:2147483647,_S_ios_iostate_min:-2147483648,;
+_Ios_Seekdir:t(0,2020)=e_S_beg:0,_S_cur:1,_S_end:2,_S_ios_seekdir_end:65536,;
+io_errc:t(0,2021)=estream:1,;
+is_error_code_enum:Tt(0,2022)=s1!1,020,(0,172);;
+ios_base::event:t(0,2023)=eerase_event:0,imbue_event:1,copyfmt_event:2,;
+ios_base::_Callback_list:Tt(0,2024)=s24_M_next:(0,2025)=*(0,2024),0,64;_M_fn:(0,2026)=(0,2027)=*(0,2028)=f(0,29),64,64;_M_index:(0,15),128,32;_M_refcount:(0,715),160,32;__ct_base ::(0,2029)=#(0,2024),(0,29),(0,2025),(0,2026),(0,15),(0,2025),(0,29);:_ZNSt8ios_base14_Callback_listC2EPFvNS_5eventERS_iEiPS0_;2A.;__ct_comp ::(0,2029):_ZNSt8ios_base14_Callback_listC1EPFvNS_5eventERS_iEiPS0_;2A.;_M_add_reference::(0,2030)=#(0,2024),(0,29),(0,2025),(0,29);:_ZNSt8ios_base14_Callback_list16_M_add_referenceEv;2A.;_M_remove_reference::(0,2031)=#(0,2024),(0,15),(0,2025),(0,29);:_ZNSt8ios_base14_Callback_list19_M_remove_referenceEv;2A.;;
+ios_base::_Words:Tt(0,2032)=s16_M_pword:(0,150),0,64;_M_iword:(0,22),64,64;__ct_base ::(0,2033)=#(0,2032),(0,29),(0,2034)=*(0,2032),(0,29);:_ZNSt8ios_base6_WordsC2Ev;2A.;__ct_comp ::(0,2033):_ZNSt8ios_base6_WordsC1Ev;2A.;;
+ios_base::._80:t(0,2035)=e_S_local_word_size:8,;
+ios_base::Init:Tt(0,2036)=s1_S_refcount:/0(0,715):_ZNSt8ios_base4Init11_S_refcountE;_S_synced_with_stdio:/0(0,33):_ZNSt8ios_base4Init20_S_synced_with_stdioE;__ct_base ::(0,2037)=#(0,2036),(0,29),(0,2038)=*(0,2036),(0,29);:_ZNSt8ios_base4InitC2Ev;2A.;__ct_comp ::(0,2037):_ZNSt8ios_base4InitC1Ev;2A.;__dt_base ::(0,2039)=#(0,2036),(0,29),(0,2038),(0,29);:_ZNSt8ios_base4InitD2Ev;2A.;__dt_comp ::(0,2039):_ZNSt8ios_base4InitD1Ev;2A.;__ct_base ::(0,2040)=#(0,2036),(0,29),(0,2038),(0,2041)=&(0,2042)=k(0,2036),(0,29);:_ZNSt8ios_base4InitC2ERKS0_;2A.;__ct_comp ::(0,2040):_ZNSt8ios_base4InitC1ERKS0_;2A.;operator=::(0,2043)=#(0,2036),(0,2044)=&(0,2036),(0,2038),(0,2041),(0,29);:_ZNSt8ios_base4InitaSERKS0_;2A.;;
+enable_if:Tt(0,2045)=s1;
+remove_reference:Tt(0,2046)=s1;
+remove_volatile:Tt(0,2047)=s1;
+remove_const:Tt(0,2048)=s1;
+remove_cv:Tt(0,2049)=s1;
+__is_tuple_like_impl:Tt(0,2050)=s1!1,020,(0,174);;
+__is_tuple_like:Tt(0,2051)=s1!1,020,(0,174);;
+__not_:Tt(0,2052)=s1!1,020,(0,172);;
+conditional:Tt(0,2053)=s1;
+is_function:Tt(0,2054)=s1!1,020,(0,174);;
+conditional:Tt(0,2055)=s1;
+is_lvalue_reference:Tt(0,2056)=s1!1,020,(0,174);;
+conditional:Tt(0,2057)=s1;
+is_rvalue_reference:Tt(0,2058)=s1!1,020,(0,174);;
+__or_:Tt(0,2059)=s1!1,020,(0,2058);;
+is_reference:Tt(0,2060)=s1!1,020,(0,174);;
+conditional:Tt(0,2061)=s1;
+__is_void_helper:Tt(0,2062)=s1!1,020,(0,174);;
+is_void:Tt(0,2063)=s1!1,020,(0,174);;
+__or_:Tt(0,2064)=s1!1,020,(0,2063);;
+__or_:Tt(0,2065)=s1!1,020,(0,2064);;
+__not_:Tt(0,2066)=s1!1,020,(0,172);;
+is_object:Tt(0,2067)=s1!1,020,(0,172);;
+conditional:Tt(0,2068)=s1;
+__or_:Tt(0,2069)=s1!1,020,(0,2067);;
+__is_referenceable:Tt(0,2070)=s1!1,020,(0,172);;
+is_constructible:Tt(0,2071)=s1!1,020,(0,172);;
+__is_move_constructible_impl:Tt(0,2072)=s1!1,020,(0,2071);;
+is_move_constructible:Tt(0,2073)=s1!1,020,(0,2072);;
+conditional:Tt(0,2074)=s1;
+is_assignable:Tt(0,2075)=s1!1,020,(0,172);;
+__is_move_assignable_impl:Tt(0,2076)=s1!1,020,(0,2075);;
+is_move_assignable:Tt(0,2077)=s1!1,020,(0,2076);;
+__and_:Tt(0,2078)=s1!1,020,(0,2077);;
+__and_:Tt(0,2079)=s1!1,020,(0,2078);;
+wctype_t:t(0,2080)=(0,17)
+._81:t(0,2081)=e__ISwupper:0,__ISwlower:1,__ISwalpha:2,__ISwdigit:3,__ISwxdigit:4,__ISwspace:5,__ISwprint:6,__ISwgraph:7,__ISwblank:8,__ISwcntrl:9,__ISwpunct:10,__ISwalnum:11,_ISwupper:16777216,_ISwlower:33554432,_ISwalpha:67108864,_ISwdigit:134217728,_ISwxdigit:268435456,_ISwspace:536870912,_ISwprint:1073741824,_ISwgraph:-2147483648,_ISwblank:65536,_ISwcntrl:131072,_ISwpunct:262144,_ISwalnum:524288,;
+wctrans_t:t(0,2082)=(0,2083)=*(0,2084)=k(0,509)
+ctype_base:Tt(0,2085)=s1upper:/2(0,2086)=k(0,2087)=(0,19):_ZNSt10ctype_base5upperE;lower:/2(0,2086):_ZNSt10ctype_base5lowerE;alpha:/2(0,2086):_ZNSt10ctype_base5alphaE;digit:/2(0,2086):_ZNSt10ctype_base5digitE;xdigit:/2(0,2086):_ZNSt10ctype_base6xdigitE;space:/2(0,2086):_ZNSt10ctype_base5spaceE;print:/2(0,2086):_ZNSt10ctype_base5printE;graph:/2(0,2086):_ZNSt10ctype_base5graphE;cntrl:/2(0,2086):_ZNSt10ctype_base5cntrlE;punct:/2(0,2086):_ZNSt10ctype_base5punctE;alnum:/2(0,2086):_ZNSt10ctype_base5alnumE;blank:/2(0,2086):_ZNSt10ctype_base5blankE;;
+__num_base::._82:t(0,2088)=e_S_ominus:0,_S_oplus:1,_S_ox:2,_S_oX:3,_S_odigits:4,_S_odigits_end:20,_S_oudigits:20,_S_oudigits_end:36,_S_oe:18,_S_oE:34,_S_oend:36,;
+__num_base::._83:t(0,2089)=e_S_iminus:0,_S_iplus:1,_S_ix:2,_S_iX:3,_S_izero:4,_S_ie:18,_S_iE:24,_S_iend:26,;
+__num_base:Tt(0,2090)=s1_S_atoms_out:/2(0,74):_ZNSt10__num_base12_S_atoms_outE;_S_atoms_in:/2(0,74):_ZNSt10__num_base11_S_atoms_inE;_S_format_float::(0,2091)=f(0,29):_ZNSt10__num_base15_S_format_floatERKSt8ios_basePcc;2A?;;
+__conditional_type:Tt(0,2092)=s1;
+__numeric_traits_integer:Tt(0,2093)=s1__min:/2(0,75):_ZN9__gnu_cxx24__numeric_traits_integerIcE5__minE;__max:/2(0,75):_ZN9__gnu_cxx24__numeric_traits_integerIcE5__maxE;__is_signed:/2(0,175):_ZN9__gnu_cxx24__numeric_traits_integerIcE11__is_signedE;__digits:/2(0,72):_ZN9__gnu_cxx24__numeric_traits_integerIcE8__digitsE;;
+__numeric_traits:Tt(0,2094)=s1!1,020,(0,2093);;
+is_error_condition_enum:Tt(0,2095)=s1!1,020,(0,174);;
+is_error_code_enum:Tt(0,2096)=s1!1,020,(0,174);;
+__conditional_type:Tt(0,2097)=s1;
+remove_reference:Tt(0,2098)=s1;
+remove_volatile:Tt(0,2099)=s1;
+remove_const:Tt(0,2100)=s1;
+remove_cv:Tt(0,2101)=s1;
+__is_tuple_like_impl:Tt(0,2102)=s1!1,020,(0,174);;
+__is_tuple_like:Tt(0,2103)=s1!1,020,(0,174);;
+__not_:Tt(0,2104)=s1!1,020,(0,172);;
+conditional:Tt(0,2105)=s1;
+is_function:Tt(0,2106)=s1!1,020,(0,174);;
+conditional:Tt(0,2107)=s1;
+is_lvalue_reference:Tt(0,2108)=s1!1,020,(0,174);;
+conditional:Tt(0,2109)=s1;
+is_rvalue_reference:Tt(0,2110)=s1!1,020,(0,174);;
+__or_:Tt(0,2111)=s1!1,020,(0,2110);;
+is_reference:Tt(0,2112)=s1!1,020,(0,174);;
+conditional:Tt(0,2113)=s1;
+__is_void_helper:Tt(0,2114)=s1!1,020,(0,174);;
+is_void:Tt(0,2115)=s1!1,020,(0,174);;
+__or_:Tt(0,2116)=s1!1,020,(0,2115);;
+__or_:Tt(0,2117)=s1!1,020,(0,2116);;
+__not_:Tt(0,2118)=s1!1,020,(0,172);;
+is_object:Tt(0,2119)=s1!1,020,(0,172);;
+conditional:Tt(0,2120)=s1;
+__or_:Tt(0,2121)=s1!1,020,(0,2119);;
+__is_referenceable:Tt(0,2122)=s1!1,020,(0,172);;
+is_constructible:Tt(0,2123)=s1!1,020,(0,172);;
+__is_move_constructible_impl:Tt(0,2124)=s1!1,020,(0,2123);;
+is_move_constructible:Tt(0,2125)=s1!1,020,(0,2124);;
+conditional:Tt(0,2126)=s1;
+is_assignable:Tt(0,2127)=s1!1,020,(0,172);;
+__is_move_assignable_impl:Tt(0,2128)=s1!1,020,(0,2127);;
+is_move_assignable:Tt(0,2129)=s1!1,020,(0,2128);;
+__and_:Tt(0,2130)=s1!1,020,(0,2129);;
+__and_:Tt(0,2131)=s1!1,020,(0,2130);;
+basic_ostream::sentry:Tt(0,2132)=s16_M_ok:/0(0,33),0,8;_M_os:/0(0,2133)=&(0,93),64,64;__ct_base ::(0,2134)=#(0,2132),(0,29),(0,2135)=*(0,2132),(0,2133),(0,29);:_ZNSo6sentryC2ERSo;2A.;__ct_comp ::(0,2134):_ZNSo6sentryC1ERSo;2A.;__dt_base ::(0,2136)=#(0,2132),(0,29),(0,2135),(0,29);:_ZNSo6sentryD2Ev;2A.;__dt_comp ::(0,2136):_ZNSo6sentryD1Ev;2A.;__conv_op ::(0,2137)=#(0,2132),(0,33),(0,2138)=*(0,2139)=k(0,2132),(0,29);:_ZNKSo6sentrycvbEv;2B.;;
+basic_ostream::sentry:Tt(0,2140)=s16_M_ok:/0(0,33),0,8;_M_os:/0(0,2141)=&(0,119),64,64;__ct_base ::(0,2142)=#(0,2140),(0,29),(0,2143)=*(0,2140),(0,2141),(0,29);:_ZNSt13basic_ostreamIwSt11char_traitsIwEE6sentryC2ERS2_;2A.;__ct_comp ::(0,2142):_ZNSt13basic_ostreamIwSt11char_traitsIwEE6sentryC1ERS2_;2A.;__dt_base ::(0,2144)=#(0,2140),(0,29),(0,2143),(0,29);:_ZNSt13basic_ostreamIwSt11char_traitsIwEE6sentryD2Ev;2A.;__dt_comp ::(0,2144):_ZNSt13basic_ostreamIwSt11char_traitsIwEE6sentryD1Ev;2A.;__conv_op ::(0,2145)=#(0,2140),(0,33),(0,2146)=*(0,2147)=k(0,2140),(0,29);:_ZNKSt13basic_ostreamIwSt11char_traitsIwEE6sentrycvbEv;2B.;;
+remove_reference:Tt(0,2148)=s1;
+remove_volatile:Tt(0,2149)=s1;
+remove_const:Tt(0,2150)=s1;
+remove_cv:Tt(0,2151)=s1;
+__is_tuple_like_impl:Tt(0,2152)=s1!1,020,(0,174);;
+__is_tuple_like:Tt(0,2153)=s1!1,020,(0,174);;
+__not_:Tt(0,2154)=s1!1,020,(0,172);;
+conditional:Tt(0,2155)=s1;
+is_function:Tt(0,2156)=s1!1,020,(0,174);;
+conditional:Tt(0,2157)=s1;
+is_lvalue_reference:Tt(0,2158)=s1!1,020,(0,174);;
+conditional:Tt(0,2159)=s1;
+is_rvalue_reference:Tt(0,2160)=s1!1,020,(0,174);;
+__or_:Tt(0,2161)=s1!1,020,(0,2160);;
+is_reference:Tt(0,2162)=s1!1,020,(0,174);;
+conditional:Tt(0,2163)=s1;
+__is_void_helper:Tt(0,2164)=s1!1,020,(0,174);;
+is_void:Tt(0,2165)=s1!1,020,(0,174);;
+__or_:Tt(0,2166)=s1!1,020,(0,2165);;
+__or_:Tt(0,2167)=s1!1,020,(0,2166);;
+__not_:Tt(0,2168)=s1!1,020,(0,172);;
+is_object:Tt(0,2169)=s1!1,020,(0,172);;
+conditional:Tt(0,2170)=s1;
+__or_:Tt(0,2171)=s1!1,020,(0,2169);;
+__is_referenceable:Tt(0,2172)=s1!1,020,(0,172);;
+is_constructible:Tt(0,2173)=s1!1,020,(0,172);;
+__is_move_constructible_impl:Tt(0,2174)=s1!1,020,(0,2173);;
+is_move_constructible:Tt(0,2175)=s1!1,020,(0,2174);;
+conditional:Tt(0,2176)=s1;
+is_assignable:Tt(0,2177)=s1!1,020,(0,172);;
+__is_move_assignable_impl:Tt(0,2178)=s1!1,020,(0,2177);;
+is_move_assignable:Tt(0,2179)=s1!1,020,(0,2178);;
+__and_:Tt(0,2180)=s1!1,020,(0,2179);;
+__and_:Tt(0,2181)=s1!1,020,(0,2180);;
+is_error_condition_enum:Tt(0,2182)=s1!1,020,(0,174);;
+is_error_code_enum:Tt(0,2183)=s1!1,020,(0,174);;
+__conditional_type:Tt(0,2184)=s1;
+__numeric_traits_integer:Tt(0,2185)=s1__min:/2(0,2186)=k(0,23):_ZN9__gnu_cxx24__numeric_traits_integerIsE5__minE;__max:/2(0,2186):_ZN9__gnu_cxx24__numeric_traits_integerIsE5__maxE;__is_signed:/2(0,175):_ZN9__gnu_cxx24__numeric_traits_integerIsE11__is_signedE;__digits:/2(0,72):_ZN9__gnu_cxx24__numeric_traits_integerIsE8__digitsE;;
+__numeric_traits:Tt(0,2187)=s1!1,020,(0,2185);;
+__conditional_type:Tt(0,2188)=s1;
+__numeric_traits_integer:Tt(0,2189)=s1__min:/2(0,2190)=k(0,22):_ZN9__gnu_cxx24__numeric_traits_integerIlE5__minE;__max:/2(0,2190):_ZN9__gnu_cxx24__numeric_traits_integerIlE5__maxE;__is_signed:/2(0,175):_ZN9__gnu_cxx24__numeric_traits_integerIlE11__is_signedE;__digits:/2(0,72):_ZN9__gnu_cxx24__numeric_traits_integerIlE8__digitsE;;
+__numeric_traits:Tt(0,2191)=s1!1,020,(0,2189);;
+basic_istream::sentry:Tt(0,2192)=s1_M_ok:/0(0,33),0,8;__ct_base ::(0,2193)=#(0,2192),(0,29),(0,2194)=*(0,2192),(0,2195)=&(0,91),(0,33),(0,29);:_ZNSi6sentryC2ERSib;2A.;__ct_comp ::(0,2193):_ZNSi6sentryC1ERSib;2A.;__conv_op ::(0,2196)=#(0,2192),(0,33),(0,2197)=*(0,2198)=k(0,2192),(0,29);:_ZNKSi6sentrycvbEv;2B.;;
+remove_reference:Tt(0,2199)=s1;
+__is_convertible_to_basic_istream_impl:Tt(0,2200)=s1;
+__is_convertible_to_basic_istream:Tt(0,2201)=s1!1,020,(0,2200);value:/2(0,175):_ZNSt33__is_convertible_to_basic_istreamIRSiE5valueE;;
+is_lvalue_reference:Tt(0,2202)=s1!1,020,(0,172);;
+__not_:Tt(0,2203)=s1!1,020,(0,174);;
+conditional:Tt(0,2204)=s1;
+__and_:Tt(0,2205)=s1!1,020,(0,2203);;
+enable_if:Tt(0,2206)=s1;
+conditional:Tt(0,2207)=s1;
+__and_:Tt(0,2208)=s1!1,020,(0,2203);;
+conditional:Tt(0,2209)=s1;
+__and_:Tt(0,2210)=s1!1,020,(0,2203);;
+basic_istream::sentry:Tt(0,2211)=s1_M_ok:/0(0,33),0,8;__ct_base ::(0,2212)=#(0,2211),(0,29),(0,2213)=*(0,2211),(0,2214)=&(0,117),(0,33),(0,29);:_ZNSt13basic_istreamIwSt11char_traitsIwEE6sentryC2ERS2_b;2A.;__ct_comp ::(0,2212):_ZNSt13basic_istreamIwSt11char_traitsIwEE6sentryC1ERS2_b;2A.;__conv_op ::(0,2215)=#(0,2211),(0,33),(0,2216)=*(0,2217)=k(0,2211),(0,29);:_ZNKSt13basic_istreamIwSt11char_traitsIwEE6sentrycvbEv;2B.;;
+remove_reference:Tt(0,2218)=s1;
+__is_convertible_to_basic_istream_impl:Tt(0,2219)=s1;
+__is_convertible_to_basic_istream:Tt(0,2220)=s1!1,020,(0,2219);value:/2(0,175):_ZNSt33__is_convertible_to_basic_istreamIRSt13basic_istreamIwSt11char_traitsIwEEE5valueE;;
+is_lvalue_reference:Tt(0,2221)=s1!1,020,(0,172);;
+__not_:Tt(0,2222)=s1!1,020,(0,174);;
+conditional:Tt(0,2223)=s1;
+__and_:Tt(0,2224)=s1!1,020,(0,2222);;
+enable_if:Tt(0,2225)=s1;
+_Destroy_aux:Tt(0,2226)=s1;
+_Destroy_n_aux:Tt(0,2227)=s1;
+__uninitialized_copy:Tt(0,2228)=s1;
+__uninitialized_fill:Tt(0,2229)=s1;
+__uninitialized_fill_n:Tt(0,2230)=s1;
+__uninitialized_default_1:Tt(0,2231)=s1;
+__uninitialized_default_n_1:Tt(0,2232)=s1;
+__uninitialized_default_novalue_1:Tt(0,2233)=s1;
+__uninitialized_default_novalue_n_1:Tt(0,2234)=s1;
+_Bit_type:t(0,2235)=(0,17)
+._84:t(0,2236)=e_S_word_bit:64,;
+_Bit_reference:Tt(0,2237)=s16_M_p:(0,2238)=*(0,2235),0,64;_M_mask:(0,2235),64,64;__ct_base ::(0,2239)=#(0,2237),(0,29),(0,2240)=*(0,2237),(0,2238),(0,2235),(0,29);:_ZNSt14_Bit_referenceC2EPmm;2A.;__ct_comp ::(0,2239):_ZNSt14_Bit_referenceC1EPmm;2A.;__ct_base ::(0,2241)=#(0,2237),(0,29),(0,2240),(0,29);:_ZNSt14_Bit_referenceC2Ev;2A.;__ct_comp ::(0,2241):_ZNSt14_Bit_referenceC1Ev;2A.;__ct_base ::(0,2242)=#(0,2237),(0,29),(0,2240),(0,2243)=&(0,2244)=k(0,2237),(0,29);:_ZNSt14_Bit_referenceC2ERKS_;2A.;__ct_comp ::(0,2242):_ZNSt14_Bit_referenceC1ERKS_;2A.;__conv_op ::(0,2245)=#(0,2237),(0,33),(0,2246)=*(0,2244),(0,29);:_ZNKSt14_Bit_referencecvbEv;2B.;operator=::(0,2247)=#(0,2237),(0,2248)=&(0,2237),(0,2240),(0,33),(0,29);:_ZNSt14_Bit_referenceaSEb;2A.(0,2249)=#(0,2237),(0,2248),(0,2240),(0,2243),(0,29);:_ZNSt14_Bit_referenceaSERKS_;2A.;operator==::(0,2250)=#(0,2237),(0,33),(0,2246),(0,2243),(0,29);:_ZNKSt14_Bit_referenceeqERKS_;2B.;operator<::(0,2250):_ZNKSt14_Bit_referenceltERKS_;2B.;flip::(0,2241):_ZNSt14_Bit_reference4flipEv;2A.;;
+iterator:Tt(0,2251)=s1;
+_Bit_iterator_base:Tt(0,2252)=s16!1,020,(0,2251);_M_p:(0,2238),0,64;_M_offset:(0,18),64,32;__ct_base ::(0,2253)=#(0,2252),(0,29),(0,2254)=*(0,2252),(0,2238),(0,18),(0,29);:_ZNSt18_Bit_iterator_baseC2EPmj;2A.;__ct_comp ::(0,2253):_ZNSt18_Bit_iterator_baseC1EPmj;2A.;_M_bump_up::(0,2255)=#(0,2252),(0,29),(0,2254),(0,29);:_ZNSt18_Bit_iterator_base10_M_bump_upEv;2A.;_M_bump_down::(0,2255):_ZNSt18_Bit_iterator_base12_M_bump_downEv;2A.;_M_incr::(0,2256)=#(0,2252),(0,29),(0,2254),(0,38),(0,29);:_ZNSt18_Bit_iterator_base7_M_incrEl;2A.;operator==::(0,2257)=#(0,2252),(0,33),(0,2258)=*(0,2259)=k(0,2252),(0,2260)=&(0,2259),(0,29);:_ZNKSt18_Bit_iterator_baseeqERKS_;2B.;operator<::(0,2257):_ZNKSt18_Bit_iterator_baseltERKS_;2B.;operator!=::(0,2257):_ZNKSt18_Bit_iterator_baseneERKS_;2B.;operator>::(0,2257):_ZNKSt18_Bit_iterator_basegtERKS_;2B.;operator<=::(0,2257):_ZNKSt18_Bit_iterator_baseleERKS_;2B.;operator>=::(0,2257):_ZNKSt18_Bit_iterator_basegeERKS_;2B.;;
+is_error_condition_enum:Tt(0,2261)=s1!1,020,(0,174);;
+is_error_code_enum:Tt(0,2262)=s1!1,020,(0,174);;
+_Bit_iterator:Tt(0,2263)=s16!1,020,(0,2252);__ct_base ::(0,2264)=#(0,2263),(0,29),(0,2265)=*(0,2263),(0,29);:_ZNSt13_Bit_iteratorC2Ev;2A.;__ct_comp ::(0,2264):_ZNSt13_Bit_iteratorC1Ev;2A.;__ct_base ::(0,2266)=#(0,2263),(0,29),(0,2265),(0,2238),(0,18),(0,29);:_ZNSt13_Bit_iteratorC2EPmj;2A.;__ct_comp ::(0,2266):_ZNSt13_Bit_iteratorC1EPmj;2A.;_M_const_cast::(0,2267)=#(0,2263),(0,2268)=(0,2263),(0,2269)=*(0,2270)=k(0,2263),(0,29);:_ZNKSt13_Bit_iterator13_M_const_castEv;2B.;operator*::(0,2271)=#(0,2263),(0,2272)=(0,2237),(0,2269),(0,29);:_ZNKSt13_Bit_iteratordeEv;2B.;operator++::(0,2273)=#(0,2263),(0,2274)=&(0,2268),(0,2265),(0,29);:_ZNSt13_Bit_iteratorppEv;2A.(0,2275)=#(0,2263),(0,2268),(0,2265),(0,15),(0,29);:_ZNSt13_Bit_iteratorppEi;2A.;operator--::(0,2273):_ZNSt13_Bit_iteratormmEv;2A.(0,2275):_ZNSt13_Bit_iteratormmEi;2A.;operator+=::(0,2276)=#(0,2263),(0,2274),(0,2265),(0,2277)=(0,22),(0,29);:_ZNSt13_Bit_iteratorpLEl;2A.;operator-=::(0,2276):_ZNSt13_Bit_iteratormIEl;2A.;operator+::(0,2278)=#(0,2263),(0,2268),(0,2269),(0,2277),(0,29);:_ZNKSt13_Bit_iteratorplEl;2B.;operator-::(0,2278):_ZNKSt13_Bit_iteratormiEl;2B.;operator[]::(0,2279)=#(0,2263),(0,2272),(0,2269),(0,2277),(0,29);:_ZNKSt13_Bit_iteratorixEl;2B.;;
+_Bit_const_iterator:Tt(0,2280)=s16!1,020,(0,2252);__ct_base ::(0,2281)=#(0,2280),(0,29),(0,2282)=*(0,2280),(0,29);:_ZNSt19_Bit_const_iteratorC2Ev;2A.;__ct_comp ::(0,2281):_ZNSt19_Bit_const_iteratorC1Ev;2A.;__ct_base ::(0,2283)=#(0,2280),(0,29),(0,2282),(0,2238),(0,18),(0,29);:_ZNSt19_Bit_const_iteratorC2EPmj;2A.;__ct_comp ::(0,2283):_ZNSt19_Bit_const_iteratorC1EPmj;2A.;__ct_base ::(0,2284)=#(0,2280),(0,29),(0,2282),(0,2285)=&(0,2270),(0,29);:_ZNSt19_Bit_const_iteratorC2ERKSt13_Bit_iterator;2A.;__ct_comp ::(0,2284):_ZNSt19_Bit_const_iteratorC1ERKSt13_Bit_iterator;2A.;_M_const_cast::(0,2286)=#(0,2280),(0,2263),(0,2287)=*(0,2288)=k(0,2280),(0,29);:_ZNKSt19_Bit_const_iterator13_M_const_castEv;2B.;operator*::(0,2289)=#(0,2280),(0,2290)=(0,33),(0,2287),(0,29);:_ZNKSt19_Bit_const_iteratordeEv;2B.;operator++::(0,2291)=#(0,2280),(0,2292)=&(0,2293)=(0,2280),(0,2282),(0,29);:_ZNSt19_Bit_const_iteratorppEv;2A.(0,2294)=#(0,2280),(0,2293),(0,2282),(0,15),(0,29);:_ZNSt19_Bit_const_iteratorppEi;2A.;operator--::(0,2291):_ZNSt19_Bit_const_iteratormmEv;2A.(0,2294):_ZNSt19_Bit_const_iteratormmEi;2A.;operator+=::(0,2295)=#(0,2280),(0,2292),(0,2282),(0,2277),(0,29);:_ZNSt19_Bit_const_iteratorpLEl;2A.;operator-=::(0,2295):_ZNSt19_Bit_const_iteratormIEl;2A.;operator+::(0,2296)=#(0,2280),(0,2293),(0,2287),(0,2277),(0,29);:_ZNKSt19_Bit_const_iteratorplEl;2B.;operator-::(0,2296):_ZNKSt19_Bit_const_iteratormiEl;2B.;operator[]::(0,2297)=#(0,2280),(0,2290),(0,2287),(0,2277),(0,29);:_ZNKSt19_Bit_const_iteratorixEl;2B.;;
+initializer_list:Tt(0,2298)=s16_M_array:/0(0,2299)=(0,2300)=*(0,175),0,64;_M_len:/0(0,2301)=(0,37),64,64;__ct_base ::(0,2302)=#(0,2298),(0,29),(0,2303)=*(0,2298),(0,2304)=(0,2300),(0,2301),(0,29);:_ZNSt16initializer_listIbEC2EPKbm;0A.;__ct_comp ::(0,2302):_ZNSt16initializer_listIbEC1EPKbm;0A.;__ct_base ::(0,2305)=#(0,2298),(0,29),(0,2303),(0,29);:_ZNSt16initializer_listIbEC2Ev;2A.;__ct_comp ::(0,2305):_ZNSt16initializer_listIbEC1Ev;2A.;size::(0,2306)=#(0,2298),(0,2301),(0,2307)=*(0,2308)=k(0,2298),(0,29);:_ZNKSt16initializer_listIbE4sizeEv;2B.;begin::(0,2309)=#(0,2298),(0,2304),(0,2307),(0,29);:_ZNKSt16initializer_listIbE5beginEv;2B.;end::(0,2309):_ZNKSt16initializer_listIbE3endEv;2B.;;
+__iterator_traits:Tt(0,2310)=s1;
+iterator_traits:Tt(0,2311)=s1!1,020,(0,2310);;
+iterator:Tt(0,2312)=s1;
+reverse_iterator:Tt(0,2313)=s16!1,020,(0,2312);current:/1(0,2263),0,128;__ct_base ::(0,2314)=#(0,2313),(0,29),(0,2315)=*(0,2313),(0,29);:_ZNSt16reverse_iteratorISt13_Bit_iteratorEC2Ev;2A.;__ct_comp ::(0,2314):_ZNSt16reverse_iteratorISt13_Bit_iteratorEC1Ev;2A.;__ct_base ::(0,2316)=#(0,2313),(0,29),(0,2315),(0,2317)=(0,2263),(0,29);:_ZNSt16reverse_iteratorISt13_Bit_iteratorEC2ES0_;2A.;__ct_comp ::(0,2316):_ZNSt16reverse_iteratorISt13_Bit_iteratorEC1ES0_;2A.;__ct_base ::(0,2318)=#(0,2313),(0,29),(0,2315),(0,2319)=&(0,2320)=k(0,2313),(0,29);:_ZNSt16reverse_iteratorISt13_Bit_iteratorEC2ERKS1_;2A.;__ct_comp ::(0,2318):_ZNSt16reverse_iteratorISt13_Bit_iteratorEC1ERKS1_;2A.;operator=::(0,2321)=#(0,2313),(0,2322)=&(0,2313),(0,2315),(0,2319),(0,29);:_ZNSt16reverse_iteratorISt13_Bit_iteratorEaSERKS1_;2A.;base::(0,2323)=#(0,2313),(0,2317),(0,2324)=*(0,2320),(0,29);:_ZNKSt16reverse_iteratorISt13_Bit_iteratorE4baseEv;2B.;operator*::(0,2325)=#(0,2313),(0,2326)=(0,2327)=(0,2272),(0,2324),(0,29);:_ZNKSt16reverse_iteratorISt13_Bit_iteratorEdeEv;2B.;operator->::(0,2328)=#(0,2313),(0,2329)=(0,2330)=(0,2331)=(0,2240),(0,2324),(0,29);:_ZNKSt16reverse_iteratorISt13_Bit_iteratorEptEv;2B.;operator++::(0,2332)=#(0,2313),(0,2322),(0,2315),(0,29);:_ZNSt16reverse_iteratorISt13_Bit_iteratorEppEv;2A.(0,2333)=#(0,2313),(0,2313),(0,2315),(0,15),(0,29);:_ZNSt16reverse_iteratorISt13_Bit_iteratorEppEi;2A.;operator--::(0,2332):_ZNSt16reverse_iteratorISt13_Bit_iteratorEmmEv;2A.(0,2333):_ZNSt16reverse_iteratorISt13_Bit_iteratorEmmEi;2A.;operator+::(0,2334)=#(0,2313),(0,2313),(0,2324),(0,2335)=(0,2336)=(0,2277),(0,29);:_ZNKSt16reverse_iteratorISt13_Bit_iteratorEplEl;2B.;operator+=::(0,2337)=#(0,2313),(0,2322),(0,2315),(0,2335),(0,29);:_ZNSt16reverse_iteratorISt13_Bit_iteratorEpLEl;2A.;operator-::(0,2334):_ZNKSt16reverse_iteratorISt13_Bit_iteratorEmiEl;2B.;operator-=::(0,2337):_ZNSt16reverse_iteratorISt13_Bit_iteratorEmIEl;2A.;operator[]::(0,2338)=#(0,2313),(0,2326),(0,2324),(0,2335),(0,29);:_ZNKSt16reverse_iteratorISt13_Bit_iteratorEixEl;2B.;;
+__iterator_traits:Tt(0,2339)=s1;
+iterator_traits:Tt(0,2340)=s1!1,020,(0,2339);;
+iterator:Tt(0,2341)=s1;
+reverse_iterator:Tt(0,2342)=s16!1,020,(0,2341);current:/1(0,2280),0,128;__ct_base ::(0,2343)=#(0,2342),(0,29),(0,2344)=*(0,2342),(0,29);:_ZNSt16reverse_iteratorISt19_Bit_const_iteratorEC2Ev;2A.;__ct_comp ::(0,2343):_ZNSt16reverse_iteratorISt19_Bit_const_iteratorEC1Ev;2A.;__ct_base ::(0,2345)=#(0,2342),(0,29),(0,2344),(0,2346)=(0,2280),(0,29);:_ZNSt16reverse_iteratorISt19_Bit_const_iteratorEC2ES0_;2A.;__ct_comp ::(0,2345):_ZNSt16reverse_iteratorISt19_Bit_const_iteratorEC1ES0_;2A.;__ct_base ::(0,2347)=#(0,2342),(0,29),(0,2344),(0,2348)=&(0,2349)=k(0,2342),(0,29);:_ZNSt16reverse_iteratorISt19_Bit_const_iteratorEC2ERKS1_;2A.;__ct_comp ::(0,2347):_ZNSt16reverse_iteratorISt19_Bit_const_iteratorEC1ERKS1_;2A.;operator=::(0,2350)=#(0,2342),(0,2351)=&(0,2342),(0,2344),(0,2348),(0,29);:_ZNSt16reverse_iteratorISt19_Bit_const_iteratorEaSERKS1_;2A.;base::(0,2352)=#(0,2342),(0,2346),(0,2353)=*(0,2349),(0,29);:_ZNKSt16reverse_iteratorISt19_Bit_const_iteratorE4baseEv;2B.;operator*::(0,2354)=#(0,2342),(0,2355)=(0,2356)=(0,2357)=(0,33),(0,2353),(0,29);:_ZNKSt16reverse_iteratorISt19_Bit_const_iteratorEdeEv;2B.;operator->::(0,2358)=#(0,2342),(0,2359)=(0,2360)=(0,2361)=(0,2300),(0,2353),(0,29);:_ZNKSt16reverse_iteratorISt19_Bit_const_iteratorEptEv;2B.;operator++::(0,2362)=#(0,2342),(0,2351),(0,2344),(0,29);:_ZNSt16reverse_iteratorISt19_Bit_const_iteratorEppEv;2A.(0,2363)=#(0,2342),(0,2342),(0,2344),(0,15),(0,29);:_ZNSt16reverse_iteratorISt19_Bit_const_iteratorEppEi;2A.;operator--::(0,2362):_ZNSt16reverse_iteratorISt19_Bit_const_iteratorEmmEv;2A.(0,2363):_ZNSt16reverse_iteratorISt19_Bit_const_iteratorEmmEi;2A.;operator+::(0,2364)=#(0,2342),(0,2342),(0,2353),(0,2365)=(0,2366)=(0,2277),(0,29);:_ZNKSt16reverse_iteratorISt19_Bit_const_iteratorEplEl;2B.;operator+=::(0,2367)=#(0,2342),(0,2351),(0,2344),(0,2365),(0,29);:_ZNSt16reverse_iteratorISt19_Bit_const_iteratorEpLEl;2A.;operator-::(0,2364):_ZNKSt16reverse_iteratorISt19_Bit_const_iteratorEmiEl;2B.;operator-=::(0,2367):_ZNSt16reverse_iteratorISt19_Bit_const_iteratorEmIEl;2A.;operator[]::(0,2368)=#(0,2342),(0,2355),(0,2353),(0,2365),(0,29);:_ZNKSt16reverse_iteratorISt19_Bit_const_iteratorEixEl;2B.;;
+is_error_condition_enum:Tt(0,2369)=s1!1,020,(0,174);;
+is_error_code_enum:Tt(0,2370)=s1!1,020,(0,174);;
+remove_reference:Tt(0,2371)=s1;
+__is_convertible_to_basic_ostream_impl:Tt(0,2372)=s1;
+__is_convertible_to_basic_ostream:Tt(0,2373)=s1!1,020,(0,2372);value:/2(0,175):_ZNSt33__is_convertible_to_basic_ostreamIRSoE5valueE;;
+is_lvalue_reference:Tt(0,2374)=s1!1,020,(0,172);;
+__not_:Tt(0,2375)=s1!1,020,(0,174);;
+conditional:Tt(0,2376)=s1;
+__and_:Tt(0,2377)=s1!1,020,(0,2375);;
+enable_if:Tt(0,2378)=s1;
+is_error_code_enum:Tt(0,2379)=s1!1,020,(0,174);;
+conditional:Tt(0,2380)=s1;
+__and_:Tt(0,2381)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2382)=s1!1,020,(0,174);;
+conditional:Tt(0,2383)=s1;
+__and_:Tt(0,2384)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2385)=s1!1,020,(0,174);;
+conditional:Tt(0,2386)=s1;
+__and_:Tt(0,2387)=s1!1,020,(0,2375);;
+conditional:Tt(0,2388)=s1;
+__and_:Tt(0,2389)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2390)=s1!1,020,(0,174);;
+conditional:Tt(0,2391)=s1;
+__and_:Tt(0,2392)=s1!1,020,(0,2375);;
+conditional:Tt(0,2393)=s1;
+__and_:Tt(0,2394)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2395)=s1!1,020,(0,174);;
+conditional:Tt(0,2396)=s1;
+__and_:Tt(0,2397)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2398)=s1!1,020,(0,174);;
+conditional:Tt(0,2399)=s1;
+__and_:Tt(0,2400)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2401)=s1!1,020,(0,174);;
+conditional:Tt(0,2402)=s1;
+__and_:Tt(0,2403)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2404)=s1!1,020,(0,174);;
+conditional:Tt(0,2405)=s1;
+__and_:Tt(0,2406)=s1!1,020,(0,2375);;
+conditional:Tt(0,2407)=s1;
+__and_:Tt(0,2408)=s1!1,020,(0,2375);;
+conditional:Tt(0,2409)=s1;
+__and_:Tt(0,2410)=s1!1,020,(0,2375);;
+conditional:Tt(0,2411)=s1;
+__and_:Tt(0,2412)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2413)=s1!1,020,(0,174);;
+conditional:Tt(0,2414)=s1;
+__and_:Tt(0,2415)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2416)=s1!1,020,(0,174);;
+conditional:Tt(0,2417)=s1;
+__and_:Tt(0,2418)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2419)=s1!1,020,(0,174);;
+conditional:Tt(0,2420)=s1;
+__and_:Tt(0,2421)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2422)=s1!1,020,(0,174);;
+conditional:Tt(0,2423)=s1;
+__and_:Tt(0,2424)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2425)=s1!1,020,(0,174);;
+conditional:Tt(0,2426)=s1;
+__and_:Tt(0,2427)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2428)=s1!1,020,(0,174);;
+conditional:Tt(0,2429)=s1;
+__and_:Tt(0,2430)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2431)=s1!1,020,(0,174);;
+conditional:Tt(0,2432)=s1;
+__and_:Tt(0,2433)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2434)=s1!1,020,(0,174);;
+conditional:Tt(0,2435)=s1;
+__and_:Tt(0,2436)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2437)=s1!1,020,(0,174);;
+conditional:Tt(0,2438)=s1;
+__and_:Tt(0,2439)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2440)=s1!1,020,(0,174);;
+conditional:Tt(0,2441)=s1;
+__and_:Tt(0,2442)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2443)=s1!1,020,(0,174);;
+conditional:Tt(0,2444)=s1;
+__and_:Tt(0,2445)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2446)=s1!1,020,(0,174);;
+conditional:Tt(0,2447)=s1;
+__and_:Tt(0,2448)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2449)=s1!1,020,(0,174);;
+conditional:Tt(0,2450)=s1;
+__and_:Tt(0,2451)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2452)=s1!1,020,(0,174);;
+conditional:Tt(0,2453)=s1;
+__and_:Tt(0,2454)=s1!1,020,(0,2375);;
+conditional:Tt(0,2455)=s1;
+__and_:Tt(0,2456)=s1!1,020,(0,2375);;
+conditional:Tt(0,2457)=s1;
+__and_:Tt(0,2458)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2459)=s1!1,020,(0,174);;
+conditional:Tt(0,2460)=s1;
+__and_:Tt(0,2461)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2462)=s1!1,020,(0,174);;
+conditional:Tt(0,2463)=s1;
+__and_:Tt(0,2464)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2465)=s1!1,020,(0,174);;
+NUMBER:t(0,2466)=eZERO:0,ONE:1,TWO:2,THREE:3,;
+conditional:Tt(0,2467)=s1;
+__and_:Tt(0,2468)=s1!1,020,(0,2375);;
+A:Tt(0,2469)=s4a_data:(0,15),0,32;__ct_base ::(0,2470)=#(0,2469),(0,29),(0,2471)=*(0,2469),(0,29);:_ZN18NoVirtualFunctions1AC2Ev;2A.;__ct_comp ::(0,2470):_ZN18NoVirtualFunctions1AC1Ev;2A.;__ct_base ::(0,2472)=#(0,2469),(0,29),(0,2471),(0,15),(0,29);:_ZN18NoVirtualFunctions1AC2Ei;2A.;__ct_comp ::(0,2472):_ZN18NoVirtualFunctions1AC1Ei;2A.;__dt_base ::(0,2473)=#(0,2469),(0,29),(0,2471),(0,29);:_ZN18NoVirtualFunctions1AD2Ev;2A.;__dt_comp ::(0,2473):_ZN18NoVirtualFunctions1AD1Ev;2A.;getData::(0,2474)=#(0,2469),(0,15),(0,2471),(0,29);:_ZN18NoVirtualFunctions1A7getDataEv;2A.;setData::(0,2472):_ZN18NoVirtualFunctions1A7setDataEi;2A.;offset_of::(0,2475)=#(0,2469),(0,142),(0,2471),(0,2476)=&(0,15),(0,29);:_ZN18NoVirtualFunctions1A9offset_ofERi;2A.;;
+conditional:Tt(0,2477)=s1;
+__and_:Tt(0,2478)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2479)=s1!1,020,(0,174);;
+conditional:Tt(0,2480)=s1;
+__and_:Tt(0,2481)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2482)=s1!1,020,(0,174);;
+conditional:Tt(0,2483)=s1;
+__and_:Tt(0,2484)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2485)=s1!1,020,(0,174);;
+conditional:Tt(0,2486)=s1;
+__and_:Tt(0,2487)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2488)=s1!1,020,(0,174);;
+A:Tt(0,2489)=s1__ct_base ::(0,2490)=#(0,2489),(0,29),(0,2491)=*(0,2489),(0,29);:_ZN9NoMembers1AC2Ev;2A.;__ct_comp ::(0,2490):_ZN9NoMembers1AC1Ev;2A.;__dt_base ::(0,2492)=#(0,2489),(0,29),(0,2491),(0,29);:_ZN9NoMembers1AD2Ev;2A.;__dt_comp ::(0,2492):_ZN9NoMembers1AD1Ev;2A.;offset_of::(0,2493)=#(0,2489),(0,142),(0,2491),(0,2476),(0,29);:_ZN9NoMembers1A9offset_ofERi;2A.;;
+B:Tt(0,2494)=s1__ct_base ::(0,2495)=#(0,2494),(0,29),(0,2496)=*(0,2494),(0,29);:_ZN9NoMembers1BC2Ev;2A.;__ct_comp ::(0,2495):_ZN9NoMembers1BC1Ev;2A.;__dt_base ::(0,2497)=#(0,2494),(0,29),(0,2496),(0,29);:_ZN9NoMembers1BD2Ev;2A.;__dt_comp ::(0,2497):_ZN9NoMembers1BD1Ev;2A.;offset_of::(0,2498)=#(0,2494),(0,142),(0,2496),(0,2476),(0,29);:_ZN9NoMembers1B9offset_ofERi;2A.;;
+C:Tt(0,2499)=s1!2,020,(0,2489);020,(0,2494);__ct_base ::(0,2500)=#(0,2499),(0,29),(0,2501)=*(0,2499),(0,29);:_ZN9NoMembers1CC2Ev;2A.;__ct_comp ::(0,2500):_ZN9NoMembers1CC1Ev;2A.;__dt_base ::(0,2502)=#(0,2499),(0,29),(0,2501),(0,29);:_ZN9NoMembers1CD2Ev;2A.;__dt_comp ::(0,2502):_ZN9NoMembers1CD1Ev;2A.;offset_of::(0,2503)=#(0,2499),(0,142),(0,2501),(0,2476),(0,29);:_ZN9NoMembers1C9offset_ofERi;2A.;;
+conditional:Tt(0,2504)=s1;
+__and_:Tt(0,2505)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2506)=s1!1,020,(0,174);;
+conditional:Tt(0,2507)=s1;
+__and_:Tt(0,2508)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2509)=s1!1,020,(0,174);;
+conditional:Tt(0,2510)=s1;
+__and_:Tt(0,2511)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2512)=s1!1,020,(0,174);;
+conditional:Tt(0,2513)=s1;
+__and_:Tt(0,2514)=s1!1,020,(0,2375);;
+is_error_code_enum:Tt(0,2515)=s1!1,020,(0,174);;
+new_allocator:Tt(0,2516)=s1__ct_base ::(0,2517)=#(0,2516),(0,29),(0,2518)=*(0,2516),(0,29);:_ZN9__gnu_cxx13new_allocatorIPKcEC2Ev;2A.;__ct_comp ::(0,2517):_ZN9__gnu_cxx13new_allocatorIPKcEC1Ev;2A.;__ct_base ::(0,2519)=#(0,2516),(0,29),(0,2518),(0,2520)=&(0,2521)=k(0,2516),(0,29);:_ZN9__gnu_cxx13new_allocatorIPKcEC2ERKS3_;2A.;__ct_comp ::(0,2519):_ZN9__gnu_cxx13new_allocatorIPKcEC1ERKS3_;2A.;__dt_base ::(0,2517):_ZN9__gnu_cxx13new_allocatorIPKcED2Ev;2A.;__dt_comp ::(0,2517):_ZN9__gnu_cxx13new_allocatorIPKcED1Ev;2A.;address::(0,2522)=#(0,2516),(0,2523)=(0,2524)=*(0,74),(0,2525)=*(0,2521),(0,2526)=(0,2527)=&(0,74),(0,29);:_ZNK9__gnu_cxx13new_allocatorIPKcE7addressERS2_;2B.(0,2528)=#(0,2516),(0,2529)=(0,1895),(0,2525),(0,2530)=(0,2531)=&(0,1896),(0,29);:_ZNK9__gnu_cxx13new_allocatorIPKcE7addressERKS2_;2B.;allocate::(0,2532)=#(0,2516),(0,2523),(0,2518),(0,2533)=(0,37),(0,734),(0,29);:_ZN9__gnu_cxx13new_allocatorIPKcE8allocateEmPKv;2A.;deallocate::(0,2534)=#(0,2516),(0,29),(0,2518),(0,2523),(0,2533),(0,29);:_ZN9__gnu_cxx13new_allocatorIPKcE10deallocateEPS2_m;2A.;max_size::(0,2535)=#(0,2516),(0,2533),(0,2525),(0,29);:_ZNK9__gnu_cxx13new_allocatorIPKcE8max_sizeEv;2B.;;
+allocator:Tt(0,2536)=s1!1,020,(0,2516);__ct_base ::(0,2537)=#(0,2536),(0,29),(0,2538)=*(0,2536),(0,29);:_ZNSaIPKcEC2Ev;2A.;__ct_comp ::(0,2537):_ZNSaIPKcEC1Ev;2A.;__ct_base ::(0,2539)=#(0,2536),(0,29),(0,2538),(0,2540)=&(0,2541)=k(0,2536),(0,29);:_ZNSaIPKcEC2ERKS1_;2A.;__ct_comp ::(0,2539):_ZNSaIPKcEC1ERKS1_;2A.;operator=::(0,2542)=#(0,2536),(0,2543)=&(0,2536),(0,2538),(0,2540),(0,29);:_ZNSaIPKcEaSERKS1_;2A.;__dt_base ::(0,2537):_ZNSaIPKcED2Ev;2A.;__dt_comp ::(0,2537):_ZNSaIPKcED1Ev;2A.;;
+allocator_traits:Tt(0,2544)=s1allocate::(0,2545)=f(0,2546)=(0,2524):_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_m;2A?(0,2547)=f(0,2546):_ZNSt16allocator_traitsISaIPKcEE8allocateERS2_mPKv;2A?;deallocate::(0,2548)=f(0,29):_ZNSt16allocator_traitsISaIPKcEE10deallocateERS2_PS1_m;2A?;max_size::(0,2549)=f(0,2550)=(0,37):_ZNSt16allocator_traitsISaIPKcEE8max_sizeERKS2_;2A?;select_on_container_copy_construction::(0,2551)=f(0,2552)=(0,2536):_ZNSt16allocator_traitsISaIPKcEE37select_on_container_copy_constructionERKS2_;2A?;;
+__alloc_traits:Tt(0,2553)=s1!1,020,(0,2544);_S_select_on_copy::(0,2554)=f(0,2536):_ZN9__gnu_cxx14__alloc_traitsISaIPKcES2_E17_S_select_on_copyERKS3_;2A?;_S_on_swap::(0,2555)=f(0,29):_ZN9__gnu_cxx14__alloc_traitsISaIPKcES2_E10_S_on_swapERS3_S5_;2A?;_S_propagate_on_copy_assign::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIPKcES2_E27_S_propagate_on_copy_assignEv;2A?;_S_propagate_on_move_assign::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIPKcES2_E27_S_propagate_on_move_assignEv;2A?;_S_propagate_on_swap::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIPKcES2_E20_S_propagate_on_swapEv;2A?;_S_always_equal::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIPKcES2_E15_S_always_equalEv;2A?;_S_nothrow_move::(0,925):_ZN9__gnu_cxx14__alloc_traitsISaIPKcES2_E15_S_nothrow_moveEv;2A?;;
+__alloc_traits::rebind:Tt(0,2556)=s1;
+_Vector_base::_Vector_impl_data:Tt(0,2557)=s24_M_start:(0,2558)=(0,2559)=(0,2546),0,64;_M_finish:(0,2558),64,64;_M_end_of_storage:(0,2558),128,64;__ct_base ::(0,2560)=#(0,2557),(0,29),(0,2561)=*(0,2557),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC2Ev;2A.;__ct_comp ::(0,2560):_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC1Ev;2A.;__ct_base ::(0,2562)=#(0,2557),(0,29),(0,2561),(0,2563)=&(0,2557),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC2EOS4_;2A.;__ct_comp ::(0,2562):_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_dataC1EOS4_;2A.;_M_copy_data::(0,2564)=#(0,2557),(0,29),(0,2561),(0,2565)=&(0,2566)=k(0,2557),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_;2A.;_M_swap_data::(0,2567)=#(0,2557),(0,29),(0,2561),(0,2568)=&(0,2557),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_;2A.;;
+_Vector_base::_Vector_impl:Tt(0,2569)=s24!2,020,(0,2536);020,(0,2557);__ct_base ::(0,2570)=#(0,2569),(0,29),(0,2571)=*(0,2569),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC2Ev;2A.;__ct_comp ::(0,2570):_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1Ev;2A.;__ct_base ::(0,2572)=#(0,2569),(0,29),(0,2571),(0,2573)=&(0,2574)=k(0,2575)=(0,2576)=(0,2577)=(0,2536),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC2ERKS2_;2A.;__ct_comp ::(0,2572):_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1ERKS2_;2A.;__ct_base ::(0,2578)=#(0,2569),(0,29),(0,2571),(0,2579)=&(0,2569),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC2EOS4_;2A.;__ct_comp ::(0,2578):_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1EOS4_;2A.;__ct_base ::(0,2580)=#(0,2569),(0,29),(0,2571),(0,2581)=&(0,2575),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC2EOS2_;2A.;__ct_comp ::(0,2580):_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1EOS2_;2A.;__ct_base ::(0,2582)=#(0,2569),(0,29),(0,2571),(0,2581),(0,2579),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC2EOS2_OS4_;2A.;__ct_comp ::(0,2582):_ZNSt12_Vector_baseIPKcSaIS1_EE12_Vector_implC1EOS2_OS4_;2A.;;
+_Vector_base:Tt(0,2583)=s24_M_impl:(0,2569),0,192;_M_get_Tp_allocator::(0,2584)=#(0,2583),(0,2585)=&(0,2575),(0,2586)=*(0,2583),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv;2A.(0,2587)=#(0,2583),(0,2573),(0,2588)=*(0,2589)=k(0,2583),(0,29);:_ZNKSt12_Vector_baseIPKcSaIS1_EE19_M_get_Tp_allocatorEv;2B.;get_allocator::(0,2590)=#(0,2583),(0,2591)=(0,2536),(0,2588),(0,29);:_ZNKSt12_Vector_baseIPKcSaIS1_EE13get_allocatorEv;2B.;__ct_base ::(0,2592)=#(0,2583),(0,29),(0,2586),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EEC2Ev;2A.;__ct_comp ::(0,2592):_ZNSt12_Vector_baseIPKcSaIS1_EEC1Ev;2A.;__ct_base ::(0,2593)=#(0,2583),(0,29),(0,2586),(0,2594)=&(0,2595)=k(0,2591),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EEC2ERKS2_;2A.;__ct_comp ::(0,2593):_ZNSt12_Vector_baseIPKcSaIS1_EEC1ERKS2_;2A.;__ct_base ::(0,2596)=#(0,2583),(0,29),(0,2586),(0,37),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EEC2Em;2A.;__ct_comp ::(0,2596):_ZNSt12_Vector_baseIPKcSaIS1_EEC1Em;2A.;__ct_base ::(0,2597)=#(0,2583),(0,29),(0,2586),(0,37),(0,2594),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EEC2EmRKS2_;2A.;__ct_comp ::(0,2597):_ZNSt12_Vector_baseIPKcSaIS1_EEC1EmRKS2_;2A.;__ct_base ::(0,2598)=#(0,2583),(0,29),(0,2586),(0,2599)=&(0,2583),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EEC2EOS3_;2A.;__ct_comp ::(0,2598):_ZNSt12_Vector_baseIPKcSaIS1_EEC1EOS3_;2A.;__ct_base ::(0,2600)=#(0,2583),(0,29),(0,2586),(0,2581),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EEC2EOS2_;2A.;__ct_comp ::(0,2600):_ZNSt12_Vector_baseIPKcSaIS1_EEC1EOS2_;2A.;__ct_base ::(0,2601)=#(0,2583),(0,29),(0,2586),(0,2599),(0,2594),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EEC2EOS3_RKS2_;2A.;__ct_comp ::(0,2601):_ZNSt12_Vector_baseIPKcSaIS1_EEC1EOS3_RKS2_;2A.;__ct_base ::(0,2602)=#(0,2583),(0,29),(0,2586),(0,2594),(0,2599),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EEC2ERKS2_OS3_;2A.;__ct_comp ::(0,2602):_ZNSt12_Vector_baseIPKcSaIS1_EEC1ERKS2_OS3_;2A.;__dt_base ::(0,2603)=#(0,2583),(0,29),(0,2586),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EED2Ev;2A.;__dt_comp ::(0,2603):_ZNSt12_Vector_baseIPKcSaIS1_EED1Ev;2A.;_M_allocate::(0,2604)=#(0,2583),(0,2558),(0,2586),(0,37),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EE11_M_allocateEm;2A.;_M_deallocate::(0,2605)=#(0,2583),(0,29),(0,2586),(0,2558),(0,37),(0,29);:_ZNSt12_Vector_baseIPKcSaIS1_EE13_M_deallocateEPS1_m;2A.;_M_create_storage::(0,2596):_ZNSt12_Vector_baseIPKcSaIS1_EE17_M_create_storageEm;1A.;;
+remove_volatile:Tt(0,2606)=s1;
+remove_const:Tt(0,2607)=s1;
+remove_cv:Tt(0,2608)=s1;
+is_same:Tt(0,2609)=s1!1,020,(0,172);;
+vector:Tt(0,2610)=s24!1,010,(0,2583);_S_nothrow_relocate::(0,2611)=f(0,33):_ZNSt6vectorIPKcSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE;0A?(0,2612)=f(0,33):_ZNSt6vectorIPKcSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb0EE;0A?;_S_use_relocate::(0,925):_ZNSt6vectorIPKcSaIS1_EE15_S_use_relocateEv;0A?;_S_do_relocate::(0,2613)=f(0,2614)=(0,2558):_ZNSt6vectorIPKcSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE;0A?(0,2615)=f(0,2614):_ZNSt6vectorIPKcSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb0EE;0A?;_S_relocate::(0,2616)=f(0,2614):_ZNSt6vectorIPKcSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_;0A?;__ct_base ::(0,2617)=#(0,2610),(0,29),(0,2618)=*(0,2610),(0,29);:_ZNSt6vectorIPKcSaIS1_EEC2Ev;2A.;__ct_comp ::(0,2617):_ZNSt6vectorIPKcSaIS1_EEC1Ev;2A.;__ct_base ::(0,2619)=#(0,2610),(0,29),(0,2618),(0,2620)=&(0,2621)=k(0,2622)=(0,2536),(0,29);:_ZNSt6vectorIPKcSaIS1_EEC2ERKS2_;2A.;__ct_comp ::(0,2619):_ZNSt6vectorIPKcSaIS1_EEC1ERKS2_;2A.;__ct_base ::(0,2623)=#(0,2610),(0,29),(0,2618),(0,2624)=(0,37),(0,2620),(0,29);:_ZNSt6vectorIPKcSaIS1_EEC2EmRKS2_;2A.;__ct_comp ::(0,2623):_ZNSt6vectorIPKcSaIS1_EEC1EmRKS2_;2A.;__ct_base ::(0,2625)=#(0,2610),(0,29),(0,2618),(0,2624),(0,2626)=&(0,2627)=k(0,2628)=(0,74),(0,2620),(0,29);:_ZNSt6vectorIPKcSaIS1_EEC2EmRKS1_RKS2_;2A.;__ct_comp ::(0,2625):_ZNSt6vectorIPKcSaIS1_EEC1EmRKS1_RKS2_;2A.;__ct_base ::(0,2629)=#(0,2610),(0,29),(0,2618),(0,2630)=&(0,2631)=k(0,2610),(0,29);:_ZNSt6vectorIPKcSaIS1_EEC2ERKS3_;2A.;__ct_comp ::(0,2629):_ZNSt6vectorIPKcSaIS1_EEC1ERKS3_;2A.;__ct_base ::(0,2632)=#(0,2610),(0,29),(0,2618),(0,2633)=&(0,2610),(0,29);:_ZNSt6vectorIPKcSaIS1_EEC2EOS3_;2A.;__ct_comp ::(0,2632):_ZNSt6vectorIPKcSaIS1_EEC1EOS3_;2A.;__ct_base ::(0,2634)=#(0,2610),(0,29),(0,2618),(0,2630),(0,2620),(0,29);:_ZNSt6vectorIPKcSaIS1_EEC2ERKS3_RKS2_;2A.;__ct_comp ::(0,2634):_ZNSt6vectorIPKcSaIS1_EEC1ERKS3_RKS2_;2A.;__ct_base ::(0,2635)=#(0,2610),(0,29),(0,2618),(0,2633),(0,2620),(0,171),(0,29);:_ZNSt6vectorIPKcSaIS1_EEC2EOS3_RKS2_St17integral_constantIbLb1EE;0A.;__ct_comp ::(0,2635):_ZNSt6vectorIPKcSaIS1_EEC1EOS3_RKS2_St17integral_constantIbLb1EE;0A.;__ct_base ::(0,2636)=#(0,2610),(0,29),(0,2618),(0,2633),(0,2620),(0,173),(0,29);:_ZNSt6vectorIPKcSaIS1_EEC2EOS3_RKS2_St17integral_constantIbLb0EE;0A.;__ct_comp ::(0,2636):_ZNSt6vectorIPKcSaIS1_EEC1EOS3_RKS2_St17integral_constantIbLb0EE;0A.;__ct_base ::(0,2637)=#(0,2610),(0,29),(0,2618),(0,2633),(0,2620),(0,29);:_ZNSt6vectorIPKcSaIS1_EEC2EOS3_RKS2_;2A.;__ct_comp ::(0,2637):_ZNSt6vectorIPKcSaIS1_EEC1EOS3_RKS2_;2A.;__ct_base ::(0,2638)=#(0,2610),(0,29),(0,2618),(0,2639)=xsinitializer_list:,(0,2620),(0,29);:_ZNSt6vectorIPKcSaIS1_EEC2ESt16initializer_listIS1_ERKS2_;2A.;__ct_comp ::(0,2638):_ZNSt6vectorIPKcSaIS1_EEC1ESt16initializer_listIS1_ERKS2_;2A.;__dt_base ::(0,2640)=#(0,2610),(0,29),(0,2618),(0,29);:_ZNSt6vectorIPKcSaIS1_EED2Ev;2A.;__dt_comp ::(0,2640):_ZNSt6vectorIPKcSaIS1_EED1Ev;2A.;operator=::(0,2641)=#(0,2610),(0,2642)=&(0,2610),(0,2618),(0,2630),(0,29);:_ZNSt6vectorIPKcSaIS1_EEaSERKS3_;2A.(0,2643)=#(0,2610),(0,2642),(0,2618),(0,2633),(0,29);:_ZNSt6vectorIPKcSaIS1_EEaSEOS3_;2A.(0,2644)=#(0,2610),(0,2642),(0,2618),(0,2639),(0,29);:_ZNSt6vectorIPKcSaIS1_EEaSESt16initializer_listIS1_E;2A.;assign::(0,2645)=#(0,2610),(0,29),(0,2618),(0,2624),(0,2626),(0,29);:_ZNSt6vectorIPKcSaIS1_EE6assignEmRKS1_;2A.(0,2646)=#(0,2610),(0,29),(0,2618),(0,2639),(0,29);:_ZNSt6vectorIPKcSaIS1_EE6assignESt16initializer_listIS1_E;2A.;begin::(0,2647)=#(0,2610),(0,2648)=(0,2649)=xs__normal_iterator:,(0,2618),(0,29);:_ZNSt6vectorIPKcSaIS1_EE5beginEv;2A.(0,2650)=#(0,2610),(0,2651)=(0,2652)=xs__normal_iterator:,(0,2653)=*(0,2631),(0,29);:_ZNKSt6vectorIPKcSaIS1_EE5beginEv;2B.;end::(0,2647):_ZNSt6vectorIPKcSaIS1_EE3endEv;2A.(0,2650):_ZNKSt6vectorIPKcSaIS1_EE3endEv;2B.;rbegin::(0,2654)=#(0,2610),(0,2655)=(0,2656)=xsreverse_iterator:,(0,2618),(0,29);:_ZNSt6vectorIPKcSaIS1_EE6rbeginEv;2A.(0,2657)=#(0,2610),(0,2658)=(0,2659)=xsreverse_iterator:,(0,2653),(0,29);:_ZNKSt6vectorIPKcSaIS1_EE6rbeginEv;2B.;rend::(0,2654):_ZNSt6vectorIPKcSaIS1_EE4rendEv;2A.(0,2657):_ZNKSt6vectorIPKcSaIS1_EE4rendEv;2B.;cbegin::(0,2650):_ZNKSt6vectorIPKcSaIS1_EE6cbeginEv;2B.;cend::(0,2650):_ZNKSt6vectorIPKcSaIS1_EE4cendEv;2B.;crbegin::(0,2657):_ZNKSt6vectorIPKcSaIS1_EE7crbeginEv;2B.;crend::(0,2657):_ZNKSt6vectorIPKcSaIS1_EE5crendEv;2B.;size::(0,2660)=#(0,2610),(0,2624),(0,2653),(0,29);:_ZNKSt6vectorIPKcSaIS1_EE4sizeEv;2B.;max_size::(0,2660):_ZNKSt6vectorIPKcSaIS1_EE8max_sizeEv;2B.;resize::(0,2661)=#(0,2610),(0,29),(0,2618),(0,2624),(0,29);:_ZNSt6vectorIPKcSaIS1_EE6resizeEm;2A.(0,2645):_ZNSt6vectorIPKcSaIS1_EE6resizeEmRKS1_;2A.;shrink_to_fit::(0,2662)=#(0,2610),(0,29),(0,2618),(0,29);:_ZNSt6vectorIPKcSaIS1_EE13shrink_to_fitEv;2A.;capacity::(0,2660):_ZNKSt6vectorIPKcSaIS1_EE8capacityEv;2B.;empty::(0,2663)=#(0,2610),(0,33),(0,2653),(0,29);:_ZNKSt6vectorIPKcSaIS1_EE5emptyEv;2B.;reserve::(0,2661):_ZNSt6vectorIPKcSaIS1_EE7reserveEm;2A.;operator[]::(0,2664)=#(0,2610),(0,2665)=(0,2666)=(0,2667)=&(0,2668)=(0,2669)=(0,74),(0,2618),(0,2624),(0,29);:_ZNSt6vectorIPKcSaIS1_EEixEm;2A.(0,2670)=#(0,2610),(0,2671)=(0,2672)=(0,2673)=&(0,2674)=k(0,2668),(0,2653),(0,2624),(0,29);:_ZNKSt6vectorIPKcSaIS1_EEixEm;2B.;_M_range_check::(0,2675)=#(0,2610),(0,29),(0,2653),(0,2624),(0,29);:_ZNKSt6vectorIPKcSaIS1_EE14_M_range_checkEm;1B.;at::(0,2676)=#(0,2610),(0,2665),(0,2618),(0,2624),(0,29);:_ZNSt6vectorIPKcSaIS1_EE2atEm;2A.(0,2677)=#(0,2610),(0,2671),(0,2653),(0,2624),(0,29);:_ZNKSt6vectorIPKcSaIS1_EE2atEm;2B.;front::(0,2678)=#(0,2610),(0,2665),(0,2618),(0,29);:_ZNSt6vectorIPKcSaIS1_EE5frontEv;2A.(0,2679)=#(0,2610),(0,2671),(0,2653),(0,29);:_ZNKSt6vectorIPKcSaIS1_EE5frontEv;2B.;back::(0,2678):_ZNSt6vectorIPKcSaIS1_EE4backEv;2A.(0,2679):_ZNKSt6vectorIPKcSaIS1_EE4backEv;2B.;data::(0,2680)=#(0,2610),(0,2524),(0,2618),(0,29);:_ZNSt6vectorIPKcSaIS1_EE4dataEv;2A.(0,2681)=#(0,2610),(0,1895),(0,2653),(0,29);:_ZNKSt6vectorIPKcSaIS1_EE4dataEv;2B.;push_back::(0,2682)=#(0,2610),(0,29),(0,2618),(0,2626),(0,29);:_ZNSt6vectorIPKcSaIS1_EE9push_backERKS1_;2A.(0,2683)=#(0,2610),(0,29),(0,2618),(0,2684)=&(0,2628),(0,29);:_ZNSt6vectorIPKcSaIS1_EE9push_backEOS1_;2A.;pop_back::(0,2640):_ZNSt6vectorIPKcSaIS1_EE8pop_backEv;2A.;insert::(0,2685)=#(0,2610),(0,2648),(0,2618),(0,2651),(0,2626),(0,29);:_ZNSt6vectorIPKcSaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EERS6_;2A.(0,2686)=#(0,2610),(0,2648),(0,2618),(0,2651),(0,2684),(0,29);:_ZNSt6vectorIPKcSaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEOS1_;2A.(0,2687)=#(0,2610),(0,2648),(0,2618),(0,2651),(0,2639),(0,29);:_ZNSt6vectorIPKcSaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EESt16initializer_listIS1_E;2A.(0,2688)=#(0,2610),(0,2648),(0,2618),(0,2651),(0,2624),(0,2626),(0,29);:_ZNSt6vectorIPKcSaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEmRS6_;2A.;erase::(0,2689)=#(0,2610),(0,2648),(0,2618),(0,2651),(0,29);:_ZNSt6vectorIPKcSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE;2A.(0,2690)=#(0,2610),(0,2648),(0,2618),(0,2651),(0,2651),(0,29);:_ZNSt6vectorIPKcSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EES8_;2A.;swap::(0,2691)=#(0,2610),(0,29),(0,2618),(0,2642),(0,29);:_ZNSt6vectorIPKcSaIS1_EE4swapERS3_;2A.;clear::(0,2640):_ZNSt6vectorIPKcSaIS1_EE5clearEv;2A.;_M_fill_initialize::(0,2645):_ZNSt6vectorIPKcSaIS1_EE18_M_fill_initializeEmRKS1_;1A.;_M_default_initialize::(0,2661):_ZNSt6vectorIPKcSaIS1_EE21_M_default_initializeEm;1A.;_M_fill_assign::(0,2692)=#(0,2610),(0,29),(0,2618),(0,37),(0,2626),(0,29);:_ZNSt6vectorIPKcSaIS1_EE14_M_fill_assignEmRKS1_;1A.;_M_fill_insert::(0,2693)=#(0,2610),(0,29),(0,2618),(0,2648),(0,2624),(0,2626),(0,29);:_ZNSt6vectorIPKcSaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEmRKS1_;1A.;_M_default_append::(0,2661):_ZNSt6vectorIPKcSaIS1_EE17_M_default_appendEm;1A.;_M_shrink_to_fit::(0,2694)=#(0,2610),(0,33),(0,2618),(0,29);:_ZNSt6vectorIPKcSaIS1_EE16_M_shrink_to_fitEv;1A.;_M_insert_rval::(0,2695)=#(0,2610),(0,2648),(0,2618),(0,2651),(0,2684),(0,29);:_ZNSt6vectorIPKcSaIS1_EE14_M_insert_rvalEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEOS1_;1A.;_M_emplace_aux::(0,2686):_ZNSt6vectorIPKcSaIS1_EE14_M_emplace_auxEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEOS1_;1A.;_M_check_len::(0,2696)=#(0,2610),(0,2624),(0,2653),(0,2624),(0,74),(0,29);:_ZNKSt6vectorIPKcSaIS1_EE12_M_check_lenEmS1_;1B.;_S_check_init_len::(0,2697)=f(0,2624):_ZNSt6vectorIPKcSaIS1_EE17_S_check_init_lenEmRKS2_;1A?;_S_max_size::(0,2698)=f(0,2624):_ZNSt6vectorIPKcSaIS1_EE11_S_max_sizeERKS2_;1A?;_M_erase_at_end::(0,2699)=#(0,2610),(0,29),(0,2618),(0,2614),(0,29);:_ZNSt6vectorIPKcSaIS1_EE15_M_erase_at_endEPS1_;1A.;_M_erase::(0,2700)=#(0,2610),(0,2648),(0,2618),(0,2648),(0,29);:_ZNSt6vectorIPKcSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE;1A.(0,2701)=#(0,2610),(0,2648),(0,2618),(0,2648),(0,2648),(0,29);:_ZNSt6vectorIPKcSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_;1A.;_M_move_assign::(0,2702)=#(0,2610),(0,29),(0,2618),(0,2633),(0,171),(0,29);:_ZNSt6vectorIPKcSaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE;0A.(0,2703)=#(0,2610),(0,29),(0,2618),(0,2633),(0,173),(0,29);:_ZNSt6vectorIPKcSaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb0EE;0A.;;
+initializer_list:Tt(0,2639)=s16_M_array:/0(0,2704)=(0,1895),0,64;_M_len:/0(0,2705)=(0,37),64,64;__ct_base ::(0,2706)=#(0,2639),(0,29),(0,2707)=*(0,2639),(0,2708)=(0,1895),(0,2705),(0,29);:_ZNSt16initializer_listIPKcEC2EPKS1_m;0A.;__ct_comp ::(0,2706):_ZNSt16initializer_listIPKcEC1EPKS1_m;0A.;__ct_base ::(0,2709)=#(0,2639),(0,29),(0,2707),(0,29);:_ZNSt16initializer_listIPKcEC2Ev;2A.;__ct_comp ::(0,2709):_ZNSt16initializer_listIPKcEC1Ev;2A.;size::(0,2710)=#(0,2639),(0,2705),(0,2711)=*(0,2712)=k(0,2639),(0,29);:_ZNKSt16initializer_listIPKcE4sizeEv;2B.;begin::(0,2713)=#(0,2639),(0,2708),(0,2711),(0,29);:_ZNKSt16initializer_listIPKcE5beginEv;2B.;end::(0,2713):_ZNKSt16initializer_listIPKcE3endEv;2B.;;
+_Save_errno:Tt(0,2714)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2715)=#(0,2714),(0,29),(0,2716)=*(0,2714),(0,29);:_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2715):_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2717)=#(0,2714),(0,29),(0,2716),(0,29);:_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2717):_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2718)=s1_S_chk::(0,2719)=f(0,33):_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb0EE;2A?(0,2720)=f(0,33):_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE;2A?;;
+is_same:Tt(0,2721)=s1!1,020,(0,172);;
+_Save_errno:Tt(0,2722)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2723)=#(0,2722),(0,29),(0,2724)=*(0,2722),(0,29);:_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2723):_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2725)=#(0,2722),(0,29),(0,2724),(0,29);:_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2725):_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2726)=s1_S_chk::(0,2719):_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb0EE;2A?(0,2720):_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE;2A?;;
+is_same:Tt(0,2727)=s1!1,020,(0,174);;
+_Save_errno:Tt(0,2728)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2729)=#(0,2728),(0,29),(0,2730)=*(0,2728),(0,29);:_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2729):_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2731)=#(0,2728),(0,29),(0,2730),(0,29);:_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2731):_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2732)=s1_S_chk::(0,2733)=f(0,33):_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE;2A?(0,2734)=f(0,33):_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb1EE;2A?;;
+is_same:Tt(0,2735)=s1!1,020,(0,174);;
+_Save_errno:Tt(0,2736)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2737)=#(0,2736),(0,29),(0,2738)=*(0,2736),(0,29);:_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2737):_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2739)=#(0,2736),(0,29),(0,2738),(0,29);:_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2739):_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2740)=s1_S_chk::(0,2741)=f(0,33):_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkExSt17integral_constantIbLb0EE;2A?(0,2742)=f(0,33):_ZZN9__gnu_cxx6__stoaIxxcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkExSt17integral_constantIbLb1EE;2A?;;
+is_same:Tt(0,2743)=s1!1,020,(0,174);;
+_Save_errno:Tt(0,2744)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2745)=#(0,2744),(0,29),(0,2746)=*(0,2744),(0,29);:_ZZN9__gnu_cxx6__stoaIyycJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2745):_ZZN9__gnu_cxx6__stoaIyycJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2747)=#(0,2744),(0,29),(0,2746),(0,29);:_ZZN9__gnu_cxx6__stoaIyycJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2747):_ZZN9__gnu_cxx6__stoaIyycJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2748)=s1_S_chk::(0,2749)=f(0,33):_ZZN9__gnu_cxx6__stoaIyycJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEySt17integral_constantIbLb0EE;2A?(0,2750)=f(0,33):_ZZN9__gnu_cxx6__stoaIyycJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEySt17integral_constantIbLb1EE;2A?;;
+is_same:Tt(0,2751)=s1!1,020,(0,174);;
+_Save_errno:Tt(0,2752)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2753)=#(0,2752),(0,29),(0,2754)=*(0,2752),(0,29);:_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2753):_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2755)=#(0,2752),(0,29),(0,2754),(0,29);:_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2755):_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2756)=s1_S_chk::(0,2757)=f(0,33):_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE;2A?(0,2758)=f(0,33):_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb1EE;2A?;;
+is_same:Tt(0,2759)=s1!1,020,(0,174);;
+_Save_errno:Tt(0,2760)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2761)=#(0,2760),(0,29),(0,2762)=*(0,2760),(0,29);:_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2761):_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2763)=#(0,2760),(0,29),(0,2762),(0,29);:_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2763):_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2764)=s1_S_chk::(0,2765)=f(0,33):_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEdSt17integral_constantIbLb0EE;2A?(0,2766)=f(0,33):_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEdSt17integral_constantIbLb1EE;2A?;;
+is_same:Tt(0,2767)=s1!1,020,(0,174);;
+_Save_errno:Tt(0,2768)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2769)=#(0,2768),(0,29),(0,2770)=*(0,2768),(0,29);:_ZZN9__gnu_cxx6__stoaIeecJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2769):_ZZN9__gnu_cxx6__stoaIeecJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2771)=#(0,2768),(0,29),(0,2770),(0,29);:_ZZN9__gnu_cxx6__stoaIeecJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2771):_ZZN9__gnu_cxx6__stoaIeecJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2772)=s1_S_chk::(0,2773)=f(0,33):_ZZN9__gnu_cxx6__stoaIeecJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEeSt17integral_constantIbLb0EE;2A?(0,2774)=f(0,33):_ZZN9__gnu_cxx6__stoaIeecJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEeSt17integral_constantIbLb1EE;2A?;;
+is_same:Tt(0,2775)=s1!1,020,(0,174);;
+iterator_traits:Tt(0,2776)=s1;
+remove_volatile:Tt(0,2777)=s1;
+remove_const:Tt(0,2778)=s1;
+remove_cv:Tt(0,2779)=s1;
+__is_void_helper:Tt(0,2780)=s1!1,020,(0,174);;
+is_void:Tt(0,2781)=s1!1,020,(0,174);;
+conditional:Tt(0,2782)=s1;
+is_function:Tt(0,2783)=s1!1,020,(0,174);;
+conditional:Tt(0,2784)=s1;
+is_array:Tt(0,2785)=s1!1,020,(0,174);;
+__or_:Tt(0,2786)=s1!1,020,(0,2785);;
+__or_:Tt(0,2787)=s1!1,020,(0,2786);;
+__is_convertible_helper:Tt(0,2788)=s1;
+is_convertible:Tt(0,2789)=s1!1,020,(0,172);;
+remove_reference:Tt(0,2790)=s1;
+_Save_errno:Tt(0,2791)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2792)=#(0,2791),(0,29),(0,2793)=*(0,2791),(0,29);:_ZZN9__gnu_cxx6__stoaIliwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2792):_ZZN9__gnu_cxx6__stoaIliwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2794)=#(0,2791),(0,29),(0,2793),(0,29);:_ZZN9__gnu_cxx6__stoaIliwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2794):_ZZN9__gnu_cxx6__stoaIliwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2795)=s1_S_chk::(0,2719):_ZZN9__gnu_cxx6__stoaIliwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb0EE;2A?(0,2720):_ZZN9__gnu_cxx6__stoaIliwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE;2A?;;
+_Save_errno:Tt(0,2796)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2797)=#(0,2796),(0,29),(0,2798)=*(0,2796),(0,29);:_ZZN9__gnu_cxx6__stoaIllwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2797):_ZZN9__gnu_cxx6__stoaIllwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2799)=#(0,2796),(0,29),(0,2798),(0,29);:_ZZN9__gnu_cxx6__stoaIllwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2799):_ZZN9__gnu_cxx6__stoaIllwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2800)=s1_S_chk::(0,2719):_ZZN9__gnu_cxx6__stoaIllwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb0EE;2A?(0,2720):_ZZN9__gnu_cxx6__stoaIllwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE;2A?;;
+_Save_errno:Tt(0,2801)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2802)=#(0,2801),(0,29),(0,2803)=*(0,2801),(0,29);:_ZZN9__gnu_cxx6__stoaImmwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2802):_ZZN9__gnu_cxx6__stoaImmwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2804)=#(0,2801),(0,29),(0,2803),(0,29);:_ZZN9__gnu_cxx6__stoaImmwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2804):_ZZN9__gnu_cxx6__stoaImmwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2805)=s1_S_chk::(0,2733):_ZZN9__gnu_cxx6__stoaImmwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE;2A?(0,2734):_ZZN9__gnu_cxx6__stoaImmwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb1EE;2A?;;
+_Save_errno:Tt(0,2806)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2807)=#(0,2806),(0,29),(0,2808)=*(0,2806),(0,29);:_ZZN9__gnu_cxx6__stoaIxxwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2807):_ZZN9__gnu_cxx6__stoaIxxwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2809)=#(0,2806),(0,29),(0,2808),(0,29);:_ZZN9__gnu_cxx6__stoaIxxwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2809):_ZZN9__gnu_cxx6__stoaIxxwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2810)=s1_S_chk::(0,2741):_ZZN9__gnu_cxx6__stoaIxxwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkExSt17integral_constantIbLb0EE;2A?(0,2742):_ZZN9__gnu_cxx6__stoaIxxwJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkExSt17integral_constantIbLb1EE;2A?;;
+_Save_errno:Tt(0,2811)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2812)=#(0,2811),(0,29),(0,2813)=*(0,2811),(0,29);:_ZZN9__gnu_cxx6__stoaIyywJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2812):_ZZN9__gnu_cxx6__stoaIyywJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2814)=#(0,2811),(0,29),(0,2813),(0,29);:_ZZN9__gnu_cxx6__stoaIyywJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2814):_ZZN9__gnu_cxx6__stoaIyywJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2815)=s1_S_chk::(0,2749):_ZZN9__gnu_cxx6__stoaIyywJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEySt17integral_constantIbLb0EE;2A?(0,2750):_ZZN9__gnu_cxx6__stoaIyywJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEySt17integral_constantIbLb1EE;2A?;;
+_Save_errno:Tt(0,2816)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2817)=#(0,2816),(0,29),(0,2818)=*(0,2816),(0,29);:_ZZN9__gnu_cxx6__stoaIffwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2817):_ZZN9__gnu_cxx6__stoaIffwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2819)=#(0,2816),(0,29),(0,2818),(0,29);:_ZZN9__gnu_cxx6__stoaIffwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2819):_ZZN9__gnu_cxx6__stoaIffwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2820)=s1_S_chk::(0,2757):_ZZN9__gnu_cxx6__stoaIffwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE;2A?(0,2758):_ZZN9__gnu_cxx6__stoaIffwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb1EE;2A?;;
+_Save_errno:Tt(0,2821)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2822)=#(0,2821),(0,29),(0,2823)=*(0,2821),(0,29);:_ZZN9__gnu_cxx6__stoaIddwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2822):_ZZN9__gnu_cxx6__stoaIddwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2824)=#(0,2821),(0,29),(0,2823),(0,29);:_ZZN9__gnu_cxx6__stoaIddwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2824):_ZZN9__gnu_cxx6__stoaIddwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2825)=s1_S_chk::(0,2765):_ZZN9__gnu_cxx6__stoaIddwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEdSt17integral_constantIbLb0EE;2A?(0,2766):_ZZN9__gnu_cxx6__stoaIddwJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEdSt17integral_constantIbLb1EE;2A?;;
+_Save_errno:Tt(0,2826)=s4_M_errno:(0,15),0,32;__ct_base ::(0,2827)=#(0,2826),(0,29),(0,2828)=*(0,2826),(0,29);:_ZZN9__gnu_cxx6__stoaIeewJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC2Ev;2A.;__ct_comp ::(0,2827):_ZZN9__gnu_cxx6__stoaIeewJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoC1Ev;2A.;__dt_base ::(0,2829)=#(0,2826),(0,29),(0,2828),(0,29);:_ZZN9__gnu_cxx6__stoaIeewJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD2Ev;2A.;__dt_comp ::(0,2829):_ZZN9__gnu_cxx6__stoaIeewJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN11_Save_errnoD1Ev;2A.;;
+_Range_chk:Tt(0,2830)=s1_S_chk::(0,2773):_ZZN9__gnu_cxx6__stoaIeewJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEeSt17integral_constantIbLb0EE;2A?(0,2774):_ZZN9__gnu_cxx6__stoaIeewJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PmS9_EN10_Range_chk6_S_chkEeSt17integral_constantIbLb1EE;2A?;;
+iterator_traits:Tt(0,2831)=s1;
+remove_reference:Tt(0,2832)=s1;
+remove_reference:Tt(0,2833)=s1;
+remove_reference:Tt(0,2834)=s1;
+iterator_traits:Tt(0,2835)=s1;
+__normal_iterator:Tt(0,1007)=s8_M_current:/1(0,74),0,64;__ct_base ::(0,2836)=#(0,1007),(0,29),(0,2837)=*(0,1007),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev;2A.;__ct_comp ::(0,2836):_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev;2A.;__ct_base ::(0,2838)=#(0,1007),(0,29),(0,2837),(0,2531),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS2_;2A.;__ct_comp ::(0,2838):_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS2_;2A.;operator*::(0,2839)=#(0,1007),(0,2840)=(0,2841)=(0,731),(0,2842)=*(0,2843)=k(0,1007),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv;2B.;operator->::(0,2844)=#(0,1007),(0,2845)=(0,2846)=(0,74),(0,2842),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEptEv;2B.;operator++::(0,2847)=#(0,1007),(0,2848)=&(0,1007),(0,2837),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv;2A.(0,2849)=#(0,1007),(0,1007),(0,2837),(0,15),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEi;2A.;operator--::(0,2847):_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEmmEv;2A.(0,2849):_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEmmEi;2A.;operator[]::(0,2850)=#(0,1007),(0,2840),(0,2842),(0,2851)=(0,2852)=(0,38),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEixEl;2B.;operator+=::(0,2853)=#(0,1007),(0,2848),(0,2837),(0,2851),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEpLEl;2A.;operator+::(0,2854)=#(0,1007),(0,1007),(0,2842),(0,2851),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEplEl;2B.;operator-=::(0,2853):_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEmIEl;2A.;operator-::(0,2854):_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEmiEl;2B.;base::(0,2855)=#(0,1007),(0,2531),(0,2842),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv;2B.;;
+remove_reference:Tt(0,2856)=s1;
+remove_volatile:Tt(0,2857)=s1;
+remove_const:Tt(0,2858)=s1;
+remove_cv:Tt(0,2859)=s1;
+__is_void_helper:Tt(0,2860)=s1!1,020,(0,174);;
+is_void:Tt(0,2861)=s1!1,020,(0,174);;
+conditional:Tt(0,2862)=s1;
+pointer_traits:Tt(0,2863)=s1pointer_to::(0,2864)=f(0,2865)=(0,561):_ZNSt14pointer_traitsIPcE10pointer_toERc;2A?;;
+__is_void_helper:Tt(0,2866)=s1!1,020,(0,174);;
+is_void:Tt(0,2867)=s1!1,020,(0,174);;
+conditional:Tt(0,2868)=s1;
+pointer_traits:Tt(0,2869)=s1pointer_to::(0,2870)=f(0,2871)=(0,754):_ZNSt14pointer_traitsIPwE10pointer_toERw;2A?;;
+__is_integer::._10:t(0,2872)=e__value:0,;
+__is_integer:Tt(0,2873)=s1;
+basic_string::_Integral:t(0,2874)=(0,2875)=(0,360)
+__is_integer::._10:t(0,2876)=e__value:0,;
+__is_integer:Tt(0,2877)=s1;
+basic_string::_Integral:t(0,2878)=(0,2879)=(0,360)
+__is_void_helper:Tt(0,2880)=s1!1,020,(0,174);;
+is_void:Tt(0,2881)=s1!1,020,(0,174);;
+conditional:Tt(0,2882)=s1;
+pointer_traits:Tt(0,2883)=s1pointer_to::(0,2884)=f(0,2885)=(0,1449):_ZNSt14pointer_traitsIPDsE10pointer_toERDs;2A?;;
+__is_integer::._10:t(0,2886)=e__value:0,;
+__is_integer:Tt(0,2887)=s1;
+basic_string::_Integral:t(0,2888)=(0,2889)=(0,360)
+__is_void_helper:Tt(0,2890)=s1!1,020,(0,174);;
+is_void:Tt(0,2891)=s1!1,020,(0,174);;
+conditional:Tt(0,2892)=s1;
+pointer_traits:Tt(0,2893)=s1pointer_to::(0,2894)=f(0,2895)=(0,1666):_ZNSt14pointer_traitsIPDiE10pointer_toERDi;2A?;;
+__is_integer::._10:t(0,2896)=e__value:0,;
+__is_integer:Tt(0,2897)=s1;
+basic_string::_Integral:t(0,2898)=(0,2899)=(0,360)
+__is_integer::._10:t(0,2900)=e__value:0,;
+__is_integer:Tt(0,2901)=s1;
+basic_string::_Integral:t(0,2902)=(0,2903)=(0,360)
+remove_volatile:Tt(0,2904)=s1;
+remove_const:Tt(0,2905)=s1;
+remove_cv:Tt(0,2906)=s1;
+is_void:Tt(0,2907)=s1!1,020,(0,174);;
+conditional:Tt(0,2908)=s1;
+pointer_traits:Tt(0,2909)=s1pointer_to::(0,2910)=f(0,2911)=(0,74):_ZNSt14pointer_traitsIPKcE10pointer_toERS0_;2A?;;
+__is_integer::._10:t(0,2912)=e__value:0,;
+__is_integer:Tt(0,2913)=s1;
+basic_string::_Integral:t(0,2914)=(0,2915)=(0,360)
+remove_volatile:Tt(0,2916)=s1;
+remove_const:Tt(0,2917)=s1;
+remove_cv:Tt(0,2918)=s1;
+is_void:Tt(0,2919)=s1!1,020,(0,174);;
+conditional:Tt(0,2920)=s1;
+pointer_traits:Tt(0,2921)=s1pointer_to::(0,2922)=f(0,2923)=(0,760):_ZNSt14pointer_traitsIPKwE10pointer_toERS0_;2A?;;
+basic_string::_Tag:t(0,2924)=(0,2925)=(0,445)
+iterator_traits:Tt(0,2926)=s1;
+basic_string::_Tag:t(0,2927)=(0,2928)=(0,445)
+iterator_traits:Tt(0,2929)=s1;
+basic_string::_Tag:t(0,2930)=(0,2931)=(0,445)
+remove_volatile:Tt(0,2932)=s1;
+remove_const:Tt(0,2933)=s1;
+remove_cv:Tt(0,2934)=s1;
+is_void:Tt(0,2935)=s1!1,020,(0,174);;
+conditional:Tt(0,2936)=s1;
+pointer_traits:Tt(0,2937)=s1pointer_to::(0,2938)=f(0,2939)=(0,1455):_ZNSt14pointer_traitsIPKDsE10pointer_toERS0_;2A?;;
+iterator_traits:Tt(0,2940)=s1;
+basic_string::_Tag:t(0,2941)=(0,2942)=(0,445)
+remove_volatile:Tt(0,2943)=s1;
+remove_const:Tt(0,2944)=s1;
+remove_cv:Tt(0,2945)=s1;
+is_void:Tt(0,2946)=s1!1,020,(0,174);;
+conditional:Tt(0,2947)=s1;
+pointer_traits:Tt(0,2948)=s1pointer_to::(0,2949)=f(0,2950)=(0,1672):_ZNSt14pointer_traitsIPKDiE10pointer_toERS0_;2A?;;
+_Vector_base::_Tr:t(0,2951)=(0,2553)
+basic_string::_Tag:t(0,2952)=(0,2953)=(0,445)
+basic_string::_Tag:t(0,2954)=(0,2955)=(0,445)
+__normal_iterator:Tt(0,1004)=s8_M_current:/1(0,561),0,64;__ct_base ::(0,2956)=#(0,1004),(0,29),(0,2957)=*(0,1004),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev;2A.;__ct_comp ::(0,2956):_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev;2A.;__ct_base ::(0,2958)=#(0,1004),(0,29),(0,2957),(0,2959)=&(0,2960)=k(0,561),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS1_;2A.;__ct_comp ::(0,2958):_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS1_;2A.;operator*::(0,2961)=#(0,1004),(0,2962)=(0,2963)=(0,727),(0,2964)=*(0,2965)=k(0,1004),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv;2B.;operator->::(0,2966)=#(0,1004),(0,2967)=(0,2968)=(0,561),(0,2964),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEptEv;2B.;operator++::(0,2969)=#(0,1004),(0,2970)=&(0,1004),(0,2957),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv;2A.(0,2971)=#(0,1004),(0,1004),(0,2957),(0,15),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEi;2A.;operator--::(0,2969):_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEmmEv;2A.(0,2971):_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEmmEi;2A.;operator[]::(0,2972)=#(0,1004),(0,2962),(0,2964),(0,2973)=(0,2974)=(0,38),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEixEl;2B.;operator+=::(0,2975)=#(0,1004),(0,2970),(0,2957),(0,2973),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEpLEl;2A.;operator+::(0,2976)=#(0,1004),(0,1004),(0,2964),(0,2973),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEplEl;2B.;operator-=::(0,2975):_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEmIEl;2A.;operator-::(0,2976):_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEmiEl;2B.;base::(0,2977)=#(0,1004),(0,2959),(0,2964),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv;2B.;;
+__normal_iterator:Tt(0,1217)=s8_M_current:/1(0,760),0,64;__ct_base ::(0,2978)=#(0,1217),(0,29),(0,2979)=*(0,1217),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEC2Ev;2A.;__ct_comp ::(0,2978):_ZN9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEC1Ev;2A.;__ct_base ::(0,2980)=#(0,1217),(0,29),(0,2979),(0,2981)=&(0,2982)=k(0,760),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEC2ERKS2_;2A.;__ct_comp ::(0,2980):_ZN9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEC1ERKS2_;2A.;operator*::(0,2983)=#(0,1217),(0,2984)=(0,2985)=(0,763),(0,2986)=*(0,2987)=k(0,1217),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEdeEv;2B.;operator->::(0,2988)=#(0,1217),(0,2989)=(0,2990)=(0,760),(0,2986),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEptEv;2B.;operator++::(0,2991)=#(0,1217),(0,2992)=&(0,1217),(0,2979),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEppEv;2A.(0,2993)=#(0,1217),(0,1217),(0,2979),(0,15),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEppEi;2A.;operator--::(0,2991):_ZN9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEmmEv;2A.(0,2993):_ZN9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEmmEi;2A.;operator[]::(0,2994)=#(0,1217),(0,2984),(0,2986),(0,2995)=(0,2996)=(0,38),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEixEl;2B.;operator+=::(0,2997)=#(0,1217),(0,2992),(0,2979),(0,2995),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEpLEl;2A.;operator+::(0,2998)=#(0,1217),(0,1217),(0,2986),(0,2995),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEplEl;2B.;operator-=::(0,2997):_ZN9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEmIEl;2A.;operator-::(0,2998):_ZNK9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEmiEl;2B.;base::(0,2999)=#(0,1217),(0,2981),(0,2986),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEE4baseEv;2B.;;
+__normal_iterator:Tt(0,1214)=s8_M_current:/1(0,754),0,64;__ct_base ::(0,3000)=#(0,1214),(0,29),(0,3001)=*(0,1214),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEC2Ev;2A.;__ct_comp ::(0,3000):_ZN9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEC1Ev;2A.;__ct_base ::(0,3002)=#(0,1214),(0,29),(0,3001),(0,3003)=&(0,3004)=k(0,754),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEC2ERKS1_;2A.;__ct_comp ::(0,3002):_ZN9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEC1ERKS1_;2A.;operator*::(0,3005)=#(0,1214),(0,3006)=(0,3007)=(0,757),(0,3008)=*(0,3009)=k(0,1214),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEdeEv;2B.;operator->::(0,3010)=#(0,1214),(0,3011)=(0,3012)=(0,754),(0,3008),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEptEv;2B.;operator++::(0,3013)=#(0,1214),(0,3014)=&(0,1214),(0,3001),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEppEv;2A.(0,3015)=#(0,1214),(0,1214),(0,3001),(0,15),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEppEi;2A.;operator--::(0,3013):_ZN9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEmmEv;2A.(0,3015):_ZN9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEmmEi;2A.;operator[]::(0,3016)=#(0,1214),(0,3006),(0,3008),(0,3017)=(0,3018)=(0,38),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEixEl;2B.;operator+=::(0,3019)=#(0,1214),(0,3014),(0,3001),(0,3017),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEpLEl;2A.;operator+::(0,3020)=#(0,1214),(0,1214),(0,3008),(0,3017),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEplEl;2B.;operator-=::(0,3019):_ZN9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEmIEl;2A.;operator-::(0,3020):_ZNK9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEmiEl;2B.;base::(0,3021)=#(0,1214),(0,3003),(0,3008),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPwNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEE4baseEv;2B.;;
+__normal_iterator:Tt(0,1564)=s8_M_current:/1(0,1455),0,64;__ct_base ::(0,3022)=#(0,1564),(0,29),(0,3023)=*(0,1564),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEC2Ev;2A.;__ct_comp ::(0,3022):_ZN9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEC1Ev;2A.;__ct_base ::(0,3024)=#(0,1564),(0,29),(0,3023),(0,3025)=&(0,3026)=k(0,1455),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEC2ERKS2_;2A.;__ct_comp ::(0,3024):_ZN9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEC1ERKS2_;2A.;operator*::(0,3027)=#(0,1564),(0,3028)=(0,3029)=(0,1458),(0,3030)=*(0,3031)=k(0,1564),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEdeEv;2B.;operator->::(0,3032)=#(0,1564),(0,3033)=(0,3034)=(0,1455),(0,3030),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEptEv;2B.;operator++::(0,3035)=#(0,1564),(0,3036)=&(0,1564),(0,3023),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEppEv;2A.(0,3037)=#(0,1564),(0,1564),(0,3023),(0,15),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEppEi;2A.;operator--::(0,3035):_ZN9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEmmEv;2A.(0,3037):_ZN9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEmmEi;2A.;operator[]::(0,3038)=#(0,1564),(0,3028),(0,3030),(0,3039)=(0,3040)=(0,38),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEixEl;2B.;operator+=::(0,3041)=#(0,1564),(0,3036),(0,3023),(0,3039),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEpLEl;2A.;operator+::(0,3042)=#(0,1564),(0,1564),(0,3030),(0,3039),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEplEl;2B.;operator-=::(0,3041):_ZN9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEmIEl;2A.;operator-::(0,3042):_ZNK9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEmiEl;2B.;base::(0,3043)=#(0,1564),(0,3025),(0,3030),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEE4baseEv;2B.;;
+iterator_traits:Tt(0,3044)=s1;
+__normal_iterator:Tt(0,1561)=s8_M_current:/1(0,1449),0,64;__ct_base ::(0,3045)=#(0,1561),(0,29),(0,3046)=*(0,1561),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEC2Ev;2A.;__ct_comp ::(0,3045):_ZN9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEC1Ev;2A.;__ct_base ::(0,3047)=#(0,1561),(0,29),(0,3046),(0,3048)=&(0,3049)=k(0,1449),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEC2ERKS1_;2A.;__ct_comp ::(0,3047):_ZN9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEC1ERKS1_;2A.;operator*::(0,3050)=#(0,1561),(0,3051)=(0,3052)=(0,1452),(0,3053)=*(0,3054)=k(0,1561),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEdeEv;2B.;operator->::(0,3055)=#(0,1561),(0,3056)=(0,3057)=(0,1449),(0,3053),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEptEv;2B.;operator++::(0,3058)=#(0,1561),(0,3059)=&(0,1561),(0,3046),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEppEv;2A.(0,3060)=#(0,1561),(0,1561),(0,3046),(0,15),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEppEi;2A.;operator--::(0,3058):_ZN9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEmmEv;2A.(0,3060):_ZN9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEmmEi;2A.;operator[]::(0,3061)=#(0,1561),(0,3051),(0,3053),(0,3062)=(0,3063)=(0,38),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEixEl;2B.;operator+=::(0,3064)=#(0,1561),(0,3059),(0,3046),(0,3062),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEpLEl;2A.;operator+::(0,3065)=#(0,1561),(0,1561),(0,3053),(0,3062),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEplEl;2B.;operator-=::(0,3064):_ZN9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEmIEl;2A.;operator-::(0,3065):_ZNK9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEEmiEl;2B.;base::(0,3066)=#(0,1561),(0,3048),(0,3053),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPDsNSt7__cxx1112basic_stringIDsSt11char_traitsIDsESaIDsEEEE4baseEv;2B.;;
+__normal_iterator:Tt(0,1781)=s8_M_current:/1(0,1672),0,64;__ct_base ::(0,3067)=#(0,1781),(0,29),(0,3068)=*(0,1781),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEC2Ev;2A.;__ct_comp ::(0,3067):_ZN9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEC1Ev;2A.;__ct_base ::(0,3069)=#(0,1781),(0,29),(0,3068),(0,3070)=&(0,3071)=k(0,1672),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEC2ERKS2_;2A.;__ct_comp ::(0,3069):_ZN9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEC1ERKS2_;2A.;operator*::(0,3072)=#(0,1781),(0,3073)=(0,3074)=(0,1675),(0,3075)=*(0,3076)=k(0,1781),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEdeEv;2B.;operator->::(0,3077)=#(0,1781),(0,3078)=(0,3079)=(0,1672),(0,3075),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEptEv;2B.;operator++::(0,3080)=#(0,1781),(0,3081)=&(0,1781),(0,3068),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEppEv;2A.(0,3082)=#(0,1781),(0,1781),(0,3068),(0,15),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEppEi;2A.;operator--::(0,3080):_ZN9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEmmEv;2A.(0,3082):_ZN9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEmmEi;2A.;operator[]::(0,3083)=#(0,1781),(0,3073),(0,3075),(0,3084)=(0,3085)=(0,38),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEixEl;2B.;operator+=::(0,3086)=#(0,1781),(0,3081),(0,3068),(0,3084),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEpLEl;2A.;operator+::(0,3087)=#(0,1781),(0,1781),(0,3075),(0,3084),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEplEl;2B.;operator-=::(0,3086):_ZN9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEmIEl;2A.;operator-::(0,3087):_ZNK9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEmiEl;2B.;base::(0,3088)=#(0,1781),(0,3070),(0,3075),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPKDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEE4baseEv;2B.;;
+iterator_traits:Tt(0,3089)=s1;
+__normal_iterator:Tt(0,1778)=s8_M_current:/1(0,1666),0,64;__ct_base ::(0,3090)=#(0,1778),(0,29),(0,3091)=*(0,1778),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEC2Ev;2A.;__ct_comp ::(0,3090):_ZN9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEC1Ev;2A.;__ct_base ::(0,3092)=#(0,1778),(0,29),(0,3091),(0,3093)=&(0,3094)=k(0,1666),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEC2ERKS1_;2A.;__ct_comp ::(0,3092):_ZN9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEC1ERKS1_;2A.;operator*::(0,3095)=#(0,1778),(0,3096)=(0,3097)=(0,1669),(0,3098)=*(0,3099)=k(0,1778),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEdeEv;2B.;operator->::(0,3100)=#(0,1778),(0,3101)=(0,3102)=(0,1666),(0,3098),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEptEv;2B.;operator++::(0,3103)=#(0,1778),(0,3104)=&(0,1778),(0,3091),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEppEv;2A.(0,3105)=#(0,1778),(0,1778),(0,3091),(0,15),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEppEi;2A.;operator--::(0,3103):_ZN9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEmmEv;2A.(0,3105):_ZN9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEmmEi;2A.;operator[]::(0,3106)=#(0,1778),(0,3096),(0,3098),(0,3107)=(0,3108)=(0,38),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEixEl;2B.;operator+=::(0,3109)=#(0,1778),(0,3104),(0,3091),(0,3107),(0,29);:_ZN9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEpLEl;2A.;operator+::(0,3110)=#(0,1778),(0,1778),(0,3098),(0,3107),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEplEl;2B.;operator-=::(0,3109):_ZN9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEmIEl;2A.;operator-::(0,3110):_ZNK9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEEmiEl;2B.;base::(0,3111)=#(0,1778),(0,3093),(0,3098),(0,29);:_ZNK9__gnu_cxx17__normal_iteratorIPDiNSt7__cxx1112basic_stringIDiSt11char_traitsIDiESaIDiEEEE4baseEv;2B.;;
+_Vector_base::_Tr:t(0,3112)=(0,2553)
+iterator_traits:Tt(0,3113)=s1;
+_ValueType:t(0,3114)=(0,3115)=(0,74)
+is_function:Tt(0,3116)=s1!1,020,(0,174);;
+conditional:Tt(0,3117)=s1;
+is_lvalue_reference:Tt(0,3118)=s1!1,020,(0,174);;
+conditional:Tt(0,3119)=s1;
+is_rvalue_reference:Tt(0,3120)=s1!1,020,(0,174);;
+__or_:Tt(0,3121)=s1!1,020,(0,3120);;
+is_reference:Tt(0,3122)=s1!1,020,(0,174);;
+conditional:Tt(0,3123)=s1;
+__is_void_helper:Tt(0,3124)=s1!1,020,(0,174);;
+is_void:Tt(0,3125)=s1!1,020,(0,174);;
+__or_:Tt(0,3126)=s1!1,020,(0,3125);;
+__or_:Tt(0,3127)=s1!1,020,(0,3126);;
+__not_:Tt(0,3128)=s1!1,020,(0,172);;
+is_object:Tt(0,3129)=s1!1,020,(0,172);;
+conditional:Tt(0,3130)=s1;
+__or_:Tt(0,3131)=s1!1,020,(0,3129);;
+__is_referenceable:Tt(0,3132)=s1!1,020,(0,172);;
+is_assignable:Tt(0,3133)=s1!1,020,(0,172);;
+__is_copy_assignable_impl:Tt(0,3134)=s1!1,020,(0,3133);;
+is_copy_assignable:Tt(0,3135)=s1!1,020,(0,3134);;
+__uninitialized_default_n_1::_ValueType:t(0,3136)=(0,3115)
+is_function:Tt(0,3137)=s1!1,020,(0,174);;
+conditional:Tt(0,3138)=s1;
+is_lvalue_reference:Tt(0,3139)=s1!1,020,(0,174);;
+conditional:Tt(0,3140)=s1;
+is_rvalue_reference:Tt(0,3141)=s1!1,020,(0,174);;
+__or_:Tt(0,3142)=s1!1,020,(0,3141);;
+is_reference:Tt(0,3143)=s1!1,020,(0,174);;
+conditional:Tt(0,3144)=s1;
+remove_volatile:Tt(0,3145)=s1;
+remove_const:Tt(0,3146)=s1;
+remove_cv:Tt(0,3147)=s1;
+__is_void_helper:Tt(0,3148)=s1!1,020,(0,174);;
+is_void:Tt(0,3149)=s1!1,020,(0,174);;
+__or_:Tt(0,3150)=s1!1,020,(0,3149);;
+__or_:Tt(0,3151)=s1!1,020,(0,3150);;
+__not_:Tt(0,3152)=s1!1,020,(0,172);;
+is_object:Tt(0,3153)=s1!1,020,(0,172);;
+conditional:Tt(0,3154)=s1;
+__or_:Tt(0,3155)=s1!1,020,(0,3153);;
+__is_referenceable:Tt(0,3156)=s1!1,020,(0,172);;
+is_constructible:Tt(0,3157)=s1!1,020,(0,172);;
+conditional:Tt(0,3158)=s1;
+__is_nt_constructible_impl:Tt(0,3159)=s1!1,020,(0,172);;
+__and_:Tt(0,3160)=s1!1,020,(0,3159);;
+is_nothrow_constructible:Tt(0,3161)=s1!1,020,(0,3160);;
+__is_nothrow_copy_constructible_impl:Tt(0,3162)=s1!1,020,(0,3161);;
+is_nothrow_copy_constructible:Tt(0,3163)=s1!1,020,(0,3162);;
+__is_byte::._37:t(0,3164)=e__value:0,;
+__is_byte:Tt(0,3165)=s1;
+__enable_if:Tt(0,3166)=s1;
+__is_floating::._28:t(0,3167)=e__value:0,;
+__is_floating:Tt(0,3168)=s1;
+__traitor::._5:t(0,3169)=e__value:0,;
+__truth_type:Tt(0,3170)=s1;
+__traitor:Tt(0,3171)=s1;
+__is_arithmetic:Tt(0,3172)=s1!1,020,(0,3171);;
+__is_pointer::._33:t(0,3173)=e__value:1,;
+__is_pointer:Tt(0,3174)=s1;
+__traitor::._5:t(0,3175)=e__value:1,;
+__traitor:Tt(0,3176)=s1;
+__is_scalar:Tt(0,3177)=s1!1,020,(0,3176);;
+__enable_if:Tt(0,3178)=s1;
+H:Tt(0,3179)=s64!2,12-192,(0,3180)=xsE:;12-256,(0,3181)=xsF:;_vptr.H:(0,3182)=*(0,34),0,64;h_data:(0,15),64,32;__ct_base ::(0,3183)=#(0,3179),(0,29),(0,3184)=*(0,3179),(0,3185)=*(0,734),(0,3186)=&(0,3187)=k(0,3179),(0,29);:_ZN19VirtualMemberAccess1HC2ERKS0_;2A.;__ct_comp ::(0,3188)=#(0,3179),(0,29),(0,3184),(0,3186),(0,29);:_ZN19VirtualMemberAccess1HC1ERKS0_;2A.;__ct_base ::(0,3189)=#(0,3179),(0,29),(0,3184),(0,3185),(0,29);:_ZN19VirtualMemberAccess1HC2Ev;2A.;__ct_comp ::(0,3190)=#(0,3179),(0,29),(0,3184),(0,29);:_ZN19VirtualMemberAccess1HC1Ev;2A.;__dt_base ::(0,3191)=#(0,3179),(0,29),(0,3184),(0,3185),(0,29);:_ZN19VirtualMemberAccess1HD2Ev;2A.;__dt_comp ::(0,3192)=#(0,3179),(0,29),(0,3184),(0,29);:_ZN19VirtualMemberAccess1HD1Ev;2A*0;(0,3179);;__dt_del ::(0,3192):_ZN19VirtualMemberAccess1HD0Ev;2A*1;(0,3179);;access::(0,3193)=#(0,3179),(0,15),(0,3184),(0,29);:_ZN19VirtualMemberAccess1H6accessEv;2A*2;(0,3179);;;~%(0,3179);
+G:Tt(0,3194)=s48!2,020,(0,3180);02128,(0,3181);g_data:(0,15),224,32;__ct_base ::(0,3195)=#(0,3194),(0,29),(0,3196)=*(0,3194),(0,3185),(0,3197)=&(0,3198)=k(0,3194),(0,29);:_ZN19VirtualMemberAccess1GC2ERKS0_;2A.;__ct_comp ::(0,3199)=#(0,3194),(0,29),(0,3196),(0,3197),(0,29);:_ZN19VirtualMemberAccess1GC1ERKS0_;2A.;__ct_base ::(0,3200)=#(0,3194),(0,29),(0,3196),(0,3185),(0,29);:_ZN19VirtualMemberAccess1GC2Ev;2A.;__ct_comp ::(0,3201)=#(0,3194),(0,29),(0,3196),(0,29);:_ZN19VirtualMemberAccess1GC1Ev;2A.;__dt_base ::(0,3202)=#(0,3194),(0,29),(0,3196),(0,3185),(0,29);:_ZN19VirtualMemberAccess1GD2Ev;2A.;__dt_comp ::(0,3203)=#(0,3194),(0,29),(0,3196),(0,29);:_ZN19VirtualMemberAccess1GD1Ev;2A*0;(0,3194);;__dt_del ::(0,3203):_ZN19VirtualMemberAccess1GD0Ev;2A*1;(0,3194);;access::(0,3204)=#(0,3194),(0,15),(0,3196),(0,29);:_ZN19VirtualMemberAccess1G6accessEv;2A*3;(0,3194);;;~%(0,3205)=xsAbstractA:;
+F:Tt(0,3181)=s32!1,12-192,(0,3205);_vptr.F:(0,3182),0,64;f_data:(0,15),64,32;__ct_base ::(0,3206)=#(0,3181),(0,29),(0,3207)=*(0,3181),(0,3185),(0,3208)=&(0,3209)=k(0,3181),(0,29);:_ZN19VirtualMemberAccess1FC2ERKS0_;2A.;__ct_comp ::(0,3210)=#(0,3181),(0,29),(0,3207),(0,3208),(0,29);:_ZN19VirtualMemberAccess1FC1ERKS0_;2A.;__ct_base ::(0,3211)=#(0,3181),(0,29),(0,3207),(0,3185),(0,29);:_ZN19VirtualMemberAccess1FC2Ev;2A.;__ct_comp ::(0,3212)=#(0,3181),(0,29),(0,3207),(0,29);:_ZN19VirtualMemberAccess1FC1Ev;2A.;__dt_base ::(0,3213)=#(0,3181),(0,29),(0,3207),(0,3185),(0,29);:_ZN19VirtualMemberAccess1FD2Ev;2A.;__dt_comp ::(0,3214)=#(0,3181),(0,29),(0,3207),(0,29);:_ZN19VirtualMemberAccess1FD1Ev;2A*0;(0,3181);;__dt_del ::(0,3214):_ZN19VirtualMemberAccess1FD0Ev;2A*1;(0,3181);;abstract_a_foo::(0,3212):_ZN19VirtualMemberAccess1F14abstract_a_fooEv;2A*2;(0,3181);;access::(0,3215)=#(0,3181),(0,15),(0,3207),(0,29);:_ZN19VirtualMemberAccess1F6accessEv;2A*3;(0,3181);;;~%(0,3181);
+E:Tt(0,3180)=s16!1,020,(0,3205);e_data:(0,15),96,32;__ct_base ::(0,3216)=#(0,3180),(0,29),(0,3217)=*(0,3180),(0,3218)=&(0,3219)=k(0,3180),(0,29);:_ZN19VirtualMemberAccess1EC2ERKS0_;2A.;__ct_comp ::(0,3216):_ZN19VirtualMemberAccess1EC1ERKS0_;2A.;__ct_base ::(0,3220)=#(0,3180),(0,29),(0,3217),(0,29);:_ZN19VirtualMemberAccess1EC2Ev;2A.;__ct_comp ::(0,3220):_ZN19VirtualMemberAccess1EC1Ev;2A.;__dt_base ::(0,3221)=#(0,3180),(0,29),(0,3217),(0,29);:_ZN19VirtualMemberAccess1ED2Ev;2A.;__dt_comp ::(0,3221):_ZN19VirtualMemberAccess1ED1Ev;2A*0;(0,3180);;__dt_del ::(0,3221):_ZN19VirtualMemberAccess1ED0Ev;2A*1;(0,3180);;abstract_a_foo::(0,3220):_ZN19VirtualMemberAccess1E14abstract_a_fooEv;2A*2;(0,3180);;access::(0,3222)=#(0,3180),(0,15),(0,3217),(0,29);:_ZN19VirtualMemberAccess1E6accessEv;2A*3;(0,3180);;;~%(0,3205);
+D:Tt(0,3223)=s48!2,020,(0,3224)=xsB:;02128,(0,3225)=xsC:;d_data:(0,15),224,32;__ct_base ::(0,3226)=#(0,3223),(0,29),(0,3227)=*(0,3223),(0,3185),(0,3228)=&(0,3229)=k(0,3223),(0,29);:_ZN19VirtualMemberAccess1DC2ERKS0_;2A.;__ct_comp ::(0,3230)=#(0,3223),(0,29),(0,3227),(0,3228),(0,29);:_ZN19VirtualMemberAccess1DC1ERKS0_;2A.;__ct_base ::(0,3231)=#(0,3223),(0,29),(0,3227),(0,3185),(0,29);:_ZN19VirtualMemberAccess1DC2Ev;2A.;__ct_comp ::(0,3232)=#(0,3223),(0,29),(0,3227),(0,29);:_ZN19VirtualMemberAccess1DC1Ev;2A.;__dt_base ::(0,3233)=#(0,3223),(0,29),(0,3227),(0,3185),(0,29);:_ZN19VirtualMemberAccess1DD2Ev;2A.;__dt_comp ::(0,3234)=#(0,3223),(0,29),(0,3227),(0,29);:_ZN19VirtualMemberAccess1DD1Ev;2A*0;(0,3223);;__dt_del ::(0,3234):_ZN19VirtualMemberAccess1DD0Ev;2A*1;(0,3223);;access::(0,3235)=#(0,3223),(0,15),(0,3227),(0,29);:_ZN19VirtualMemberAccess1D6accessEv;2A*2;(0,3223);;;~%(0,3224);
+C:Tt(0,3225)=s32!1,12-192,(0,3236)=xsA:;_vptr.C:(0,3182),0,64;c_data:(0,15),64,32;__ct_base ::(0,3237)=#(0,3225),(0,29),(0,3238)=*(0,3225),(0,3185),(0,3239)=&(0,3240)=k(0,3225),(0,29);:_ZN19VirtualMemberAccess1CC2ERKS0_;2A.;__ct_comp ::(0,3241)=#(0,3225),(0,29),(0,3238),(0,3239),(0,29);:_ZN19VirtualMemberAccess1CC1ERKS0_;2A.;__ct_base ::(0,3242)=#(0,3225),(0,29),(0,3238),(0,3185),(0,29);:_ZN19VirtualMemberAccess1CC2Ev;2A.;__ct_comp ::(0,3243)=#(0,3225),(0,29),(0,3238),(0,29);:_ZN19VirtualMemberAccess1CC1Ev;2A.;__dt_base ::(0,3244)=#(0,3225),(0,29),(0,3238),(0,3185),(0,29);:_ZN19VirtualMemberAccess1CD2Ev;2A.;__dt_comp ::(0,3245)=#(0,3225),(0,29),(0,3238),(0,29);:_ZN19VirtualMemberAccess1CD1Ev;2A*0;(0,3225);;__dt_del ::(0,3245):_ZN19VirtualMemberAccess1CD0Ev;2A*1;(0,3225);;access::(0,3246)=#(0,3225),(0,15),(0,3238),(0,29);:_ZN19VirtualMemberAccess1C6accessEv;2A*2;(0,3225);;;~%(0,3225);
+B:Tt(0,3224)=s32!1,12-192,(0,3236);_vptr.B:(0,3182),0,64;b_data:(0,15),64,32;__ct_base ::(0,3247)=#(0,3224),(0,29),(0,3248)=*(0,3224),(0,3185),(0,3249)=&(0,3250)=k(0,3224),(0,29);:_ZN19VirtualMemberAccess1BC2ERKS0_;2A.;__ct_comp ::(0,3251)=#(0,3224),(0,29),(0,3248),(0,3249),(0,29);:_ZN19VirtualMemberAccess1BC1ERKS0_;2A.;__ct_base ::(0,3252)=#(0,3224),(0,29),(0,3248),(0,3185),(0,29);:_ZN19VirtualMemberAccess1BC2Ev;2A.;__ct_comp ::(0,3253)=#(0,3224),(0,29),(0,3248),(0,29);:_ZN19VirtualMemberAccess1BC1Ev;2A.;__dt_base ::(0,3254)=#(0,3224),(0,29),(0,3248),(0,3185),(0,29);:_ZN19VirtualMemberAccess1BD2Ev;2A.;__dt_comp ::(0,3255)=#(0,3224),(0,29),(0,3248),(0,29);:_ZN19VirtualMemberAccess1BD1Ev;2A*0;(0,3224);;__dt_del ::(0,3255):_ZN19VirtualMemberAccess1BD0Ev;2A*1;(0,3224);;access::(0,3256)=#(0,3224),(0,15),(0,3248),(0,29);:_ZN19VirtualMemberAccess1B6accessEv;2A*2;(0,3224);;;~%(0,3224);
+A:Tt(0,3236)=s16_vptr.A:(0,3182),0,64;a_data:(0,15),64,32;__ct_base ::(0,3257)=#(0,3236),(0,29),(0,3258)=*(0,3236),(0,3259)=&(0,3260)=k(0,3236),(0,29);:_ZN19VirtualMemberAccess1AC2ERKS0_;2A.;__ct_comp ::(0,3257):_ZN19VirtualMemberAccess1AC1ERKS0_;2A.;__ct_base ::(0,3261)=#(0,3236),(0,29),(0,3258),(0,29);:_ZN19VirtualMemberAccess1AC2Ev;2A.;__ct_comp ::(0,3261):_ZN19VirtualMemberAccess1AC1Ev;2A.;__dt_base ::(0,3262)=#(0,3236),(0,29),(0,3258),(0,29);:_ZN19VirtualMemberAccess1AD2Ev;2A.;__dt_comp ::(0,3262):_ZN19VirtualMemberAccess1AD1Ev;2A*0;(0,3236);;__dt_del ::(0,3262):_ZN19VirtualMemberAccess1AD0Ev;2A*1;(0,3236);;access::(0,3263)=#(0,3236),(0,15),(0,3258),(0,29);:_ZN19VirtualMemberAccess1A6accessEv;2A*2;(0,3236);;;~%(0,3236);
+AbstractA:Tt(0,3205)=s16_vptr.AbstractA:(0,3182),0,64;abstract_a_data:(0,15),64,32;__ct_base ::(0,3264)=#(0,3205),(0,29),(0,3265)=*(0,3205),(0,3266)=&(0,3267)=k(0,3205),(0,29);:_ZN19VirtualMemberAccess9AbstractAC2ERKS0_;2A.;__ct_comp ::(0,3264):_ZN19VirtualMemberAccess9AbstractAC1ERKS0_;2A.;__ct_base ::(0,3268)=#(0,3205),(0,29),(0,3265),(0,29);:_ZN19VirtualMemberAccess9AbstractAC2Ev;1A.;__ct_comp ::(0,3268):_ZN19VirtualMemberAccess9AbstractAC1Ev;1A.;__dt_base ::(0,3269)=#(0,3205),(0,29),(0,3265),(0,29);:_ZN19VirtualMemberAccess9AbstractAD2Ev;1A.;__dt_comp ::(0,3269):_ZN19VirtualMemberAccess9AbstractAD1Ev;1A*0;(0,3205);;__dt_del ::(0,3269):_ZN19VirtualMemberAccess9AbstractAD0Ev;1A*1;(0,3205);;abstract_a_foo::(0,3268):_ZN19VirtualMemberAccess9AbstractA14abstract_a_fooEv;2A*2;(0,3205);;access::(0,3270)=#(0,3205),(0,15),(0,3265),(0,29);:_ZN19VirtualMemberAccess9AbstractA6accessEv;2A*3;(0,3205);;;~%(0,3205);
+E:Tt(0,3271)=s8!1,12-192,(0,2499);_vptr.E:(0,3182),0,64;__ct_base ::(0,3272)=#(0,3271),(0,29),(0,3273)=*(0,3271),(0,3185),(0,3274)=&(0,3271),(0,29);:_ZN9NoMembers1EC2EOS0_;2A.;__ct_comp ::(0,3275)=#(0,3271),(0,29),(0,3273),(0,3274),(0,29);:_ZN9NoMembers1EC1EOS0_;2A.;__ct_base ::(0,3276)=#(0,3271),(0,29),(0,3273),(0,3185),(0,3277)=&(0,3278)=k(0,3271),(0,29);:_ZN9NoMembers1EC2ERKS0_;2A.;__ct_comp ::(0,3279)=#(0,3271),(0,29),(0,3273),(0,3277),(0,29);:_ZN9NoMembers1EC1ERKS0_;2A.;__ct_base ::(0,3280)=#(0,3271),(0,29),(0,3273),(0,3185),(0,29);:_ZN9NoMembers1EC2Ev;2A.;__ct_comp ::(0,3281)=#(0,3271),(0,29),(0,3273),(0,29);:_ZN9NoMembers1EC1Ev;2A.;;~%(0,3271);
+D:Tt(0,3282)=s8!2,12-192,(0,2489);12-256,(0,2494);_vptr.D:(0,3182),0,64;__ct_base ::(0,3283)=#(0,3282),(0,29),(0,3284)=*(0,3282),(0,3185),(0,3285)=&(0,3286)=k(0,3282),(0,29);:_ZN9NoMembers1DC2ERKS0_;2A.;__ct_comp ::(0,3287)=#(0,3282),(0,29),(0,3284),(0,3285),(0,29);:_ZN9NoMembers1DC1ERKS0_;2A.;__ct_base ::(0,3288)=#(0,3282),(0,29),(0,3284),(0,3185),(0,29);:_ZN9NoMembers1DC2Ev;2A.;__ct_comp ::(0,3289)=#(0,3282),(0,29),(0,3284),(0,29);:_ZN9NoMembers1DC1Ev;2A.;__dt_base ::(0,3290)=#(0,3282),(0,29),(0,3284),(0,3185),(0,29);:_ZN9NoMembers1DD2Ev;2A.;__dt_comp ::(0,3291)=#(0,3282),(0,29),(0,3284),(0,29);:_ZN9NoMembers1DD1Ev;2A.;offset_of::(0,3292)=#(0,3282),(0,142),(0,3284),(0,2476),(0,29);:_ZN9NoMembers1D9offset_ofERi;2A.;;~%(0,3282);
+D:Tt(0,3293)=s24!1,020,(0,3294)=xsB:;d_data:(0,15),96,32;__ct_base ::(0,3295)=#(0,3293),(0,29),(0,3296)=*(0,3293),(0,3185),(0,3297)=&(0,3298)=k(0,3293),(0,29);:_ZN18NoVirtualFunctions1DC2ERKS0_;2A.;__ct_comp ::(0,3299)=#(0,3293),(0,29),(0,3296),(0,3297),(0,29);:_ZN18NoVirtualFunctions1DC1ERKS0_;2A.;__ct_base ::(0,3300)=#(0,3293),(0,29),(0,3296),(0,3185),(0,29);:_ZN18NoVirtualFunctions1DC2Ev;2A.;__ct_comp ::(0,3301)=#(0,3293),(0,29),(0,3296),(0,29);:_ZN18NoVirtualFunctions1DC1Ev;2A.;__ct_base ::(0,3302)=#(0,3293),(0,29),(0,3296),(0,3185),(0,15),(0,29);:_ZN18NoVirtualFunctions1DC2Ei;2A.;__ct_comp ::(0,3303)=#(0,3293),(0,29),(0,3296),(0,15),(0,29);:_ZN18NoVirtualFunctions1DC1Ei;2A.;__dt_base ::(0,3304)=#(0,3293),(0,29),(0,3296),(0,3185),(0,29);:_ZN18NoVirtualFunctions1DD2Ev;2A.;__dt_comp ::(0,3305)=#(0,3293),(0,29),(0,3296),(0,29);:_ZN18NoVirtualFunctions1DD1Ev;2A.;getData::(0,3306)=#(0,3293),(0,15),(0,3296),(0,29);:_ZN18NoVirtualFunctions1D7getDataEv;2A.;setData::(0,3303):_ZN18NoVirtualFunctions1D7setDataEi;2A.;offset_of::(0,3307)=#(0,3293),(0,142),(0,3296),(0,2476),(0,29);:_ZN18NoVirtualFunctions1D9offset_ofERi;2A.;;~%(0,3294);
+C:Tt(0,3308)=s32!1,12-192,(0,3294);_vptr.C:(0,3182),0,64;c_data:(0,15),64,32;__ct_base ::(0,3309)=#(0,3308),(0,29),(0,3310)=*(0,3308),(0,3185),(0,3311)=&(0,3312)=k(0,3308),(0,29);:_ZN18NoVirtualFunctions1CC2ERKS0_;2A.;__ct_comp ::(0,3313)=#(0,3308),(0,29),(0,3310),(0,3311),(0,29);:_ZN18NoVirtualFunctions1CC1ERKS0_;2A.;__ct_base ::(0,3314)=#(0,3308),(0,29),(0,3310),(0,3185),(0,29);:_ZN18NoVirtualFunctions1CC2Ev;2A.;__ct_comp ::(0,3315)=#(0,3308),(0,29),(0,3310),(0,29);:_ZN18NoVirtualFunctions1CC1Ev;2A.;__ct_base ::(0,3316)=#(0,3308),(0,29),(0,3310),(0,3185),(0,15),(0,29);:_ZN18NoVirtualFunctions1CC2Ei;2A.;__ct_comp ::(0,3317)=#(0,3308),(0,29),(0,3310),(0,15),(0,29);:_ZN18NoVirtualFunctions1CC1Ei;2A.;__dt_base ::(0,3318)=#(0,3308),(0,29),(0,3310),(0,3185),(0,29);:_ZN18NoVirtualFunctions1CD2Ev;2A.;__dt_comp ::(0,3319)=#(0,3308),(0,29),(0,3310),(0,29);:_ZN18NoVirtualFunctions1CD1Ev;2A.;getData::(0,3320)=#(0,3308),(0,15),(0,3310),(0,29);:_ZN18NoVirtualFunctions1C7getDataEv;2A.;setData::(0,3317):_ZN18NoVirtualFunctions1C7setDataEi;2A.;offset_of::(0,3321)=#(0,3308),(0,142),(0,3310),(0,2476),(0,29);:_ZN18NoVirtualFunctions1C9offset_ofERi;2A.;;~%(0,3308);
+B:Tt(0,3294)=s16!1,12-192,(0,2469);_vptr.B:(0,3182),0,64;b_data:(0,15),64,32;__ct_base ::(0,3322)=#(0,3294),(0,29),(0,3323)=*(0,3294),(0,3185),(0,3324)=&(0,3325)=k(0,3294),(0,29);:_ZN18NoVirtualFunctions1BC2ERKS0_;2A.;__ct_comp ::(0,3326)=#(0,3294),(0,29),(0,3323),(0,3324),(0,29);:_ZN18NoVirtualFunctions1BC1ERKS0_;2A.;__ct_base ::(0,3327)=#(0,3294),(0,29),(0,3323),(0,3185),(0,29);:_ZN18NoVirtualFunctions1BC2Ev;2A.;__ct_comp ::(0,3328)=#(0,3294),(0,29),(0,3323),(0,29);:_ZN18NoVirtualFunctions1BC1Ev;2A.;__ct_base ::(0,3329)=#(0,3294),(0,29),(0,3323),(0,3185),(0,15),(0,29);:_ZN18NoVirtualFunctions1BC2Ei;2A.;__ct_comp ::(0,3330)=#(0,3294),(0,29),(0,3323),(0,15),(0,29);:_ZN18NoVirtualFunctions1BC1Ei;2A.;__dt_base ::(0,3331)=#(0,3294),(0,29),(0,3323),(0,3185),(0,29);:_ZN18NoVirtualFunctions1BD2Ev;2A.;__dt_comp ::(0,3332)=#(0,3294),(0,29),(0,3323),(0,29);:_ZN18NoVirtualFunctions1BD1Ev;2A.;getData::(0,3333)=#(0,3294),(0,15),(0,3323),(0,29);:_ZN18NoVirtualFunctions1B7getDataEv;2A.;setData::(0,3330):_ZN18NoVirtualFunctions1B7setDataEi;2A.;offset_of::(0,3334)=#(0,3294),(0,142),(0,3323),(0,2476),(0,29);:_ZN18NoVirtualFunctions1B9offset_ofERi;2A.;;~%(0,3294);
+I:Tt(0,3335)=s56!2,020,(0,3336)=xsG:;02128,(0,3337)=xsH:;i_data:(0,15),256,32;__ct_base ::(0,3338)=#(0,3335),(0,29),(0,3339)=*(0,3335),(0,3185),(0,3340)=&(0,3341)=k(0,3335),(0,29);:_ZN19AbstractInheritance1IC2ERKS0_;2A.;__ct_comp ::(0,3342)=#(0,3335),(0,29),(0,3339),(0,3340),(0,29);:_ZN19AbstractInheritance1IC1ERKS0_;2A.;__ct_base ::(0,3343)=#(0,3335),(0,29),(0,3339),(0,3185),(0,15),(0,29);:_ZN19AbstractInheritance1IC2Ei;2A.;__ct_comp ::(0,3344)=#(0,3335),(0,29),(0,3339),(0,15),(0,29);:_ZN19AbstractInheritance1IC1Ei;2A.;__dt_base ::(0,3345)=#(0,3335),(0,29),(0,3339),(0,3185),(0,29);:_ZN19AbstractInheritance1ID2Ev;2A.;__dt_comp ::(0,3346)=#(0,3335),(0,29),(0,3339),(0,29);:_ZN19AbstractInheritance1ID1Ev;2A*0;(0,3335);;__dt_del ::(0,3346):_ZN19AbstractInheritance1ID0Ev;2A*1;(0,3335);;i_foo::(0,3347)=#(0,3335),(0,29),(0,3339),(0,29);:_ZN19AbstractInheritance1I5i_fooEv;2A*6;(0,3335);;getSize::(0,3348)=#(0,3335),(0,55),(0,3339),(0,29);:_ZN19AbstractInheritance1I7getSizeEv;2A*5;(0,3335);;getName::(0,3349)=#(0,3335),(0,40),(0,3339),(0,29);:_ZN19AbstractInheritance1I7getNameB5cxx11Ev;2A*4;(0,3335);;getParentName::(0,3349):_ZN19AbstractInheritance1I13getParentNameB5cxx11Ev;2A*3;(0,3335);;offset_of::(0,3350)=#(0,3335),(0,142),(0,3339),(0,2476),(0,29);:_ZN19AbstractInheritance1I9offset_ofERi;2A.;print::(0,3351)=#(0,3335),(0,3352)=&(0,92),(0,3339),(0,3352),(0,29);:_ZN19AbstractInheritance1I5printERSo;2A.;;~%(0,3336);
+H:Tt(0,3337)=s16!1,020,(0,3353)=xsF:;h_data:(0,15),96,32;__ct_base ::(0,3354)=#(0,3337),(0,29),(0,3355)=*(0,3337),(0,3356)=&(0,3357)=k(0,3337),(0,29);:_ZN19AbstractInheritance1HC2ERKS0_;2A.;__ct_comp ::(0,3354):_ZN19AbstractInheritance1HC1ERKS0_;2A.;__ct_base ::(0,3358)=#(0,3337),(0,29),(0,3355),(0,15),(0,29);:_ZN19AbstractInheritance1HC2Ei;2A.;__ct_comp ::(0,3358):_ZN19AbstractInheritance1HC1Ei;2A.;__dt_base ::(0,3359)=#(0,3337),(0,29),(0,3355),(0,29);:_ZN19AbstractInheritance1HD2Ev;2A.;__dt_comp ::(0,3359):_ZN19AbstractInheritance1HD1Ev;2A*0;(0,3337);;__dt_del ::(0,3359):_ZN19AbstractInheritance1HD0Ev;2A*1;(0,3337);;h_foo::(0,3360)=#(0,3337),(0,29),(0,3355),(0,29);:_ZN19AbstractInheritance1H5h_fooEv;2A*7;(0,3337);;getParentName::(0,3361)=#(0,3337),(0,40),(0,3355),(0,29);:_ZN19AbstractInheritance1H13getParentNameB5cxx11Ev;2A*6;(0,3337);;getName::(0,3361):_ZN19AbstractInheritance1H7getNameB5cxx11Ev;2A*3;(0,3337);;getSize::(0,3362)=#(0,3337),(0,55),(0,3355),(0,29);:_ZN19AbstractInheritance1H7getSizeEv;2A*5;(0,3337);;offset_of::(0,3363)=#(0,3337),(0,142),(0,3355),(0,2476),(0,29);:_ZN19AbstractInheritance1H9offset_ofERi;2A.;;~%(0,3353);
+G:Tt(0,3336)=s32!1,12-192,(0,3353);_vptr.G:(0,3182),0,64;g_data:(0,15),64,32;__ct_base ::(0,3364)=#(0,3336),(0,29),(0,3365)=*(0,3336),(0,3185),(0,3366)=&(0,3367)=k(0,3336),(0,29);:_ZN19AbstractInheritance1GC2ERKS0_;2A.;__ct_comp ::(0,3368)=#(0,3336),(0,29),(0,3365),(0,3366),(0,29);:_ZN19AbstractInheritance1GC1ERKS0_;2A.;__ct_base ::(0,3369)=#(0,3336),(0,29),(0,3365),(0,3185),(0,15),(0,29);:_ZN19AbstractInheritance1GC2Ei;2A.;__ct_comp ::(0,3370)=#(0,3336),(0,29),(0,3365),(0,15),(0,29);:_ZN19AbstractInheritance1GC1Ei;2A.;__dt_base ::(0,3371)=#(0,3336),(0,29),(0,3365),(0,3185),(0,29);:_ZN19AbstractInheritance1GD2Ev;2A.;__dt_comp ::(0,3372)=#(0,3336),(0,29),(0,3365),(0,29);:_ZN19AbstractInheritance1GD1Ev;2A*0;(0,3336);;__dt_del ::(0,3372):_ZN19AbstractInheritance1GD0Ev;2A*1;(0,3336);;g_foo::(0,3373)=#(0,3336),(0,29),(0,3365),(0,29);:_ZN19AbstractInheritance1G5g_fooEv;2A*2;(0,3336);;getParentName::(0,3374)=#(0,3336),(0,40),(0,3365),(0,29);:_ZN19AbstractInheritance1G13getParentNameB5cxx11Ev;2A*3;(0,3336);;getName::(0,3374):_ZN19AbstractInheritance1G7getNameB5cxx11Ev;2A*4;(0,3336);;getSize::(0,3375)=#(0,3336),(0,55),(0,3365),(0,29);:_ZN19AbstractInheritance1G7getSizeEv;2A*5;(0,3336);;offset_of::(0,3376)=#(0,3336),(0,142),(0,3365),(0,2476),(0,29);:_ZN19AbstractInheritance1G9offset_ofERi;2A.;;~%(0,3336);
+F:Tt(0,3353)=s16_vptr.F:(0,3182),0,64;f_data:(0,15),64,32;__ct_base ::(0,3377)=#(0,3353),(0,29),(0,3378)=*(0,3353),(0,3379)=&(0,3380)=k(0,3353),(0,29);:_ZN19AbstractInheritance1FC2ERKS0_;2A.;__ct_comp ::(0,3377):_ZN19AbstractInheritance1FC1ERKS0_;2A.;__ct_base ::(0,3381)=#(0,3353),(0,29),(0,3378),(0,15),(0,29);:_ZN19AbstractInheritance1FC2Ei;1A.;__ct_comp ::(0,3381):_ZN19AbstractInheritance1FC1Ei;1A.;__ct_base ::(0,3382)=#(0,3353),(0,29),(0,3378),(0,29);:_ZN19AbstractInheritance1FC2Ev;1A.;__ct_comp ::(0,3382):_ZN19AbstractInheritance1FC1Ev;1A.;__dt_base ::(0,3383)=#(0,3353),(0,29),(0,3378),(0,29);:_ZN19AbstractInheritance1FD2Ev;1A.;__dt_comp ::(0,3383):_ZN19AbstractInheritance1FD1Ev;1A*0;(0,3353);;__dt_del ::(0,3383):_ZN19AbstractInheritance1FD0Ev;1A*1;(0,3353);;f_foo::(0,3382):_ZN19AbstractInheritance1F5f_fooEv;2A*2;(0,3353);;getName::(0,3384)=#(0,3353),(0,40),(0,3378),(0,29);:_ZN19AbstractInheritance1F7getNameB5cxx11Ev;2A*3;(0,3353);;getData::(0,3385)=#(0,3353),(0,15),(0,3378),(0,29);:_ZN19AbstractInheritance1F7getDataEv;2A*4;(0,3353);;getSize::(0,3386)=#(0,3353),(0,55),(0,3378),(0,29);:_ZN19AbstractInheritance1F7getSizeEv;2A*5;(0,3353);;getParentName::(0,3384):_ZN19AbstractInheritance1F13getParentNameB5cxx11Ev;2A*6;(0,3353);;offset_of::(0,3387)=#(0,3353),(0,142),(0,3378),(0,2476),(0,29);:_ZN19AbstractInheritance1F9offset_ofERi;2A.;print::(0,3388)=#(0,3353),(0,3352),(0,3378),(0,3352),(0,29);:_ZN19AbstractInheritance1F5printERSo;2A.;;~%(0,3353);
+V:Tt(0,3389)=s88!4,020,(0,3390)=xsZ:;02128,(0,3391)=xsY:;02256,(0,3392)=xsX:;02384,(0,3393)=xsA:;v_data:(0,15),512,32;__ct_base ::(0,3394)=#(0,3389),(0,29),(0,3395)=*(0,3389),(0,3185),(0,3396)=&(0,3397)=k(0,3389),(0,29);:_ZN16LargeInheritance1VC2ERKS0_;2A.;__ct_comp ::(0,3398)=#(0,3389),(0,29),(0,3395),(0,3396),(0,29);:_ZN16LargeInheritance1VC1ERKS0_;2A.;__ct_base ::(0,3399)=#(0,3389),(0,29),(0,3395),(0,3185),(0,29);:_ZN16LargeInheritance1VC2Ev;2A.;__ct_comp ::(0,3400)=#(0,3389),(0,29),(0,3395),(0,29);:_ZN16LargeInheritance1VC1Ev;2A.;__dt_base ::(0,3399):_ZN16LargeInheritance1VD2Ev;2A.;__dt_comp ::(0,3400):_ZN16LargeInheritance1VD1Ev;2A*0;(0,3389);;__dt_del ::(0,3400):_ZN16LargeInheritance1VD0Ev;2A*1;(0,3389);;v_foo::(0,3401)=#(0,3389),(0,29),(0,3395),(0,29);:_ZN16LargeInheritance1V5v_fooEv;2A*5;(0,3389);;z_foo::(0,3401):_ZN16LargeInheritance1V5z_fooEv;2A*2;(0,3389);;y_foo::(0,3401):_ZN16LargeInheritance1V5y_fooEv;2A*6;(0,3389);;x_foo::(0,3401):_ZN16LargeInheritance1V5x_fooEv;2A*7;(0,3389);;a_foo::(0,3401):_ZN16LargeInheritance1V5a_fooEv;2A*8;(0,3389);;set_v_data::(0,3402)=#(0,3389),(0,29),(0,3395),(0,15),(0,29);:_ZN16LargeInheritance1V10set_v_dataEi;2A*9;(0,3389);;get_v_data::(0,3403)=#(0,3389),(0,15),(0,3395),(0,29);:_ZN16LargeInheritance1V10get_v_dataEv;2A*10;(0,3389);;offset_of::(0,3404)=#(0,3389),(0,142),(0,3395),(0,2476),(0,29);:_ZN16LargeInheritance1V9offset_ofERi;2A.;;~%(0,3390);
+W:Tt(0,3405)=s112!6,12-256,(0,3406)=xsB:;12-320,(0,3393);020,(0,3391);12-384,(0,3407)=xsC:;02128,(0,3390);02256,(0,3392);w_data:(0,15),352,32;__ct_base ::(0,3408)=#(0,3405),(0,29),(0,3409)=*(0,3405),(0,3185),(0,3410)=&(0,3411)=k(0,3405),(0,29);:_ZN16LargeInheritance1WC2ERKS0_;2A.;__ct_comp ::(0,3412)=#(0,3405),(0,29),(0,3409),(0,3410),(0,29);:_ZN16LargeInheritance1WC1ERKS0_;2A.;__ct_base ::(0,3413)=#(0,3405),(0,29),(0,3409),(0,3185),(0,29);:_ZN16LargeInheritance1WC2Ev;2A.;__ct_comp ::(0,3414)=#(0,3405),(0,29),(0,3409),(0,29);:_ZN16LargeInheritance1WC1Ev;2A.;__dt_base ::(0,3413):_ZN16LargeInheritance1WD2Ev;2A.;__dt_comp ::(0,3414):_ZN16LargeInheritance1WD1Ev;2A*0;(0,3405);;__dt_del ::(0,3414):_ZN16LargeInheritance1WD0Ev;2A*1;(0,3405);;w_foo::(0,3415)=#(0,3405),(0,29),(0,3409),(0,29);:_ZN16LargeInheritance1W5w_fooEv;2A*5;(0,3405);;z_foo::(0,3415):_ZN16LargeInheritance1W5z_fooEv;2A*6;(0,3405);;set_w_data::(0,3416)=#(0,3405),(0,29),(0,3409),(0,15),(0,29);:_ZN16LargeInheritance1W10set_w_dataEi;2A*7;(0,3405);;get_w_data::(0,3417)=#(0,3405),(0,15),(0,3409),(0,29);:_ZN16LargeInheritance1W10get_w_dataEv;2A*8;(0,3405);;offset_of::(0,3418)=#(0,3405),(0,142),(0,3409),(0,2476),(0,29);:_ZN16LargeInheritance1W9offset_ofERi;2A.;;~%(0,3391);
+X:Tt(0,3392)=s16_vptr.X:(0,3182),0,64;x_data:(0,15),64,32;__ct_base ::(0,3419)=#(0,3392),(0,29),(0,3420)=*(0,3392),(0,3421)=&(0,3422)=k(0,3392),(0,29);:_ZN16LargeInheritance1XC2ERKS0_;2A.;__ct_comp ::(0,3419):_ZN16LargeInheritance1XC1ERKS0_;2A.;__ct_base ::(0,3423)=#(0,3392),(0,29),(0,3420),(0,29);:_ZN16LargeInheritance1XC2Ev;2A.;__ct_comp ::(0,3423):_ZN16LargeInheritance1XC1Ev;2A.;__dt_base ::(0,3423):_ZN16LargeInheritance1XD2Ev;2A.;__dt_comp ::(0,3423):_ZN16LargeInheritance1XD1Ev;2A*0;(0,3392);;__dt_del ::(0,3423):_ZN16LargeInheritance1XD0Ev;2A*1;(0,3392);;x_foo::(0,3424)=#(0,3392),(0,29),(0,3420),(0,29);:_ZN16LargeInheritance1X5x_fooEv;2A*2;(0,3392);;set_x_data::(0,3425)=#(0,3392),(0,29),(0,3420),(0,15),(0,29);:_ZN16LargeInheritance1X10set_x_dataEi;2A*3;(0,3392);;get_x_data::(0,3426)=#(0,3392),(0,15),(0,3420),(0,29);:_ZN16LargeInheritance1X10get_x_dataEv;2A*4;(0,3392);;offset_of::(0,3427)=#(0,3392),(0,142),(0,3420),(0,2476),(0,29);:_ZN16LargeInheritance1X9offset_ofERi;2A.;;~%(0,3392);
+Y:Tt(0,3391)=s32!1,12-192,(0,3428)=xsU:;_vptr.Y:(0,3182),0,64;y_data:(0,15),64,32;__ct_base ::(0,3429)=#(0,3391),(0,29),(0,3430)=*(0,3391),(0,3185),(0,3431)=&(0,3432)=k(0,3391),(0,29);:_ZN16LargeInheritance1YC2ERKS0_;2A.;__ct_comp ::(0,3433)=#(0,3391),(0,29),(0,3430),(0,3431),(0,29);:_ZN16LargeInheritance1YC1ERKS0_;2A.;__ct_base ::(0,3434)=#(0,3391),(0,29),(0,3430),(0,3185),(0,29);:_ZN16LargeInheritance1YC2Ev;2A.;__ct_comp ::(0,3435)=#(0,3391),(0,29),(0,3430),(0,29);:_ZN16LargeInheritance1YC1Ev;2A.;__dt_base ::(0,3434):_ZN16LargeInheritance1YD2Ev;2A.;__dt_comp ::(0,3435):_ZN16LargeInheritance1YD1Ev;2A*0;(0,3391);;__dt_del ::(0,3435):_ZN16LargeInheritance1YD0Ev;2A*1;(0,3391);;y_foo::(0,3436)=#(0,3391),(0,29),(0,3430),(0,29);:_ZN16LargeInheritance1Y5y_fooEv;2A*2;(0,3391);;set_y_data::(0,3437)=#(0,3391),(0,29),(0,3430),(0,15),(0,29);:_ZN16LargeInheritance1Y10set_y_dataEi;2A*3;(0,3391);;get_y_data::(0,3438)=#(0,3391),(0,15),(0,3430),(0,29);:_ZN16LargeInheritance1Y10get_y_dataEv;2A*4;(0,3391);;offset_of::(0,3439)=#(0,3391),(0,142),(0,3430),(0,2476),(0,29);:_ZN16LargeInheritance1Y9offset_ofERi;2A.;;~%(0,3391);
+U:Tt(0,3428)=s16_vptr.U:(0,3182),0,64;y_data:(0,15),64,32;__ct_base ::(0,3440)=#(0,3428),(0,29),(0,3441)=*(0,3428),(0,3442)=&(0,3443)=k(0,3428),(0,29);:_ZN16LargeInheritance1UC2ERKS0_;2A.;__ct_comp ::(0,3440):_ZN16LargeInheritance1UC1ERKS0_;2A.;__ct_base ::(0,3444)=#(0,3428),(0,29),(0,3441),(0,29);:_ZN16LargeInheritance1UC2Ev;2A.;__ct_comp ::(0,3444):_ZN16LargeInheritance1UC1Ev;2A.;__dt_base ::(0,3444):_ZN16LargeInheritance1UD2Ev;2A.;__dt_comp ::(0,3444):_ZN16LargeInheritance1UD1Ev;2A*0;(0,3428);;__dt_del ::(0,3444):_ZN16LargeInheritance1UD0Ev;2A*1;(0,3428);;y_foo::(0,3445)=#(0,3428),(0,29),(0,3441),(0,29);:_ZN16LargeInheritance1U5y_fooEv;2A*2;(0,3428);;set_y_data::(0,3446)=#(0,3428),(0,29),(0,3441),(0,15),(0,29);:_ZN16LargeInheritance1U10set_y_dataEi;2A*3;(0,3428);;get_y_data::(0,3447)=#(0,3428),(0,15),(0,3441),(0,29);:_ZN16LargeInheritance1U10get_y_dataEv;2A*4;(0,3428);;offset_of::(0,3448)=#(0,3428),(0,142),(0,3441),(0,2476),(0,29);:_ZN16LargeInheritance1U9offset_ofERi;2A.;;~%(0,3428);
+Z:Tt(0,3390)=s16_vptr.Z:(0,3182),0,64;z_data:(0,15),64,32;__ct_base ::(0,3449)=#(0,3390),(0,29),(0,3450)=*(0,3390),(0,3451)=&(0,3452)=k(0,3390),(0,29);:_ZN16LargeInheritance1ZC2ERKS0_;2A.;__ct_comp ::(0,3449):_ZN16LargeInheritance1ZC1ERKS0_;2A.;__ct_base ::(0,3453)=#(0,3390),(0,29),(0,3450),(0,29);:_ZN16LargeInheritance1ZC2Ev;2A.;__ct_comp ::(0,3453):_ZN16LargeInheritance1ZC1Ev;2A.;__dt_base ::(0,3453):_ZN16LargeInheritance1ZD2Ev;2A.;__dt_comp ::(0,3453):_ZN16LargeInheritance1ZD1Ev;2A*0;(0,3390);;__dt_del ::(0,3453):_ZN16LargeInheritance1ZD0Ev;2A*1;(0,3390);;z_foo::(0,3454)=#(0,3390),(0,29),(0,3450),(0,29);:_ZN16LargeInheritance1Z5z_fooEv;2A*2;(0,3390);;set_z_data::(0,3455)=#(0,3390),(0,29),(0,3450),(0,15),(0,29);:_ZN16LargeInheritance1Z10set_z_dataEi;2A*3;(0,3390);;get_z_data::(0,3456)=#(0,3390),(0,15),(0,3450),(0,29);:_ZN16LargeInheritance1Z10get_z_dataEv;2A*4;(0,3390);;offset_of::(0,3457)=#(0,3390),(0,142),(0,3450),(0,2476),(0,29);:_ZN16LargeInheritance1Z9offset_ofERi;2A.;;~%(0,3390);
+D:Tt(0,3458)=s48!2,020,(0,3406);02128,(0,3407);d_data:(0,15),224,32;__ct_base ::(0,3459)=#(0,3458),(0,29),(0,3460)=*(0,3458),(0,3185),(0,3461)=&(0,3462)=k(0,3458),(0,29);:_ZN16LargeInheritance1DC2ERKS0_;2A.;__ct_comp ::(0,3463)=#(0,3458),(0,29),(0,3460),(0,3461),(0,29);:_ZN16LargeInheritance1DC1ERKS0_;2A.;__ct_base ::(0,3464)=#(0,3458),(0,29),(0,3460),(0,3185),(0,29);:_ZN16LargeInheritance1DC2Ev;2A.;__ct_comp ::(0,3465)=#(0,3458),(0,29),(0,3460),(0,29);:_ZN16LargeInheritance1DC1Ev;2A.;__dt_base ::(0,3464):_ZN16LargeInheritance1DD2Ev;2A.;__dt_comp ::(0,3465):_ZN16LargeInheritance1DD1Ev;2A*0;(0,3458);;__dt_del ::(0,3465):_ZN16LargeInheritance1DD0Ev;2A*1;(0,3458);;d_foo::(0,3466)=#(0,3458),(0,29),(0,3460),(0,29);:_ZN16LargeInheritance1D5d_fooEv;2A*5;(0,3458);;set_d_data::(0,3467)=#(0,3458),(0,29),(0,3460),(0,15),(0,29);:_ZN16LargeInheritance1D10set_d_dataEi;2A*6;(0,3458);;get_d_data::(0,3468)=#(0,3458),(0,15),(0,3460),(0,29);:_ZN16LargeInheritance1D10get_d_dataEv;2A*7;(0,3458);;offset_of::(0,3469)=#(0,3458),(0,142),(0,3460),(0,2476),(0,29);:_ZN16LargeInheritance1D9offset_ofERi;2A.;;~%(0,3406);
+C:Tt(0,3407)=s32!1,12-192,(0,3393);_vptr.C:(0,3182),0,64;c_data:(0,15),64,32;__ct_base ::(0,3470)=#(0,3407),(0,29),(0,3471)=*(0,3407),(0,3185),(0,3472)=&(0,3473)=k(0,3407),(0,29);:_ZN16LargeInheritance1CC2ERKS0_;2A.;__ct_comp ::(0,3474)=#(0,3407),(0,29),(0,3471),(0,3472),(0,29);:_ZN16LargeInheritance1CC1ERKS0_;2A.;__ct_base ::(0,3475)=#(0,3407),(0,29),(0,3471),(0,3185),(0,29);:_ZN16LargeInheritance1CC2Ev;2A.;__ct_comp ::(0,3476)=#(0,3407),(0,29),(0,3471),(0,29);:_ZN16LargeInheritance1CC1Ev;2A.;__dt_base ::(0,3475):_ZN16LargeInheritance1CD2Ev;2A.;__dt_comp ::(0,3476):_ZN16LargeInheritance1CD1Ev;2A*0;(0,3407);;__dt_del ::(0,3476):_ZN16LargeInheritance1CD0Ev;2A*1;(0,3407);;c_foo::(0,3477)=#(0,3407),(0,29),(0,3471),(0,29);:_ZN16LargeInheritance1C5c_fooEv;2A*2;(0,3407);;set_c_data::(0,3478)=#(0,3407),(0,29),(0,3471),(0,15),(0,29);:_ZN16LargeInheritance1C10set_c_dataEi;2A*3;(0,3407);;get_c_data::(0,3479)=#(0,3407),(0,15),(0,3471),(0,29);:_ZN16LargeInheritance1C10get_c_dataEv;2A*4;(0,3407);;offset_of::(0,3480)=#(0,3407),(0,142),(0,3471),(0,2476),(0,29);:_ZN16LargeInheritance1C9offset_ofERi;2A.;;~%(0,3407);
+B:Tt(0,3406)=s32!1,12-192,(0,3393);_vptr.B:(0,3182),0,64;b_data:(0,15),64,32;__ct_base ::(0,3481)=#(0,3406),(0,29),(0,3482)=*(0,3406),(0,3185),(0,3483)=&(0,3484)=k(0,3406),(0,29);:_ZN16LargeInheritance1BC2ERKS0_;2A.;__ct_comp ::(0,3485)=#(0,3406),(0,29),(0,3482),(0,3483),(0,29);:_ZN16LargeInheritance1BC1ERKS0_;2A.;__ct_base ::(0,3486)=#(0,3406),(0,29),(0,3482),(0,3185),(0,29);:_ZN16LargeInheritance1BC2Ev;2A.;__ct_comp ::(0,3487)=#(0,3406),(0,29),(0,3482),(0,29);:_ZN16LargeInheritance1BC1Ev;2A.;__dt_base ::(0,3486):_ZN16LargeInheritance1BD2Ev;2A.;__dt_comp ::(0,3487):_ZN16LargeInheritance1BD1Ev;2A*0;(0,3406);;__dt_del ::(0,3487):_ZN16LargeInheritance1BD0Ev;2A*1;(0,3406);;b_foo::(0,3488)=#(0,3406),(0,29),(0,3482),(0,29);:_ZN16LargeInheritance1B5b_fooEv;2A*2;(0,3406);;set_b_data::(0,3489)=#(0,3406),(0,29),(0,3482),(0,15),(0,29);:_ZN16LargeInheritance1B10set_b_dataEi;2A*3;(0,3406);;get_b_data::(0,3490)=#(0,3406),(0,15),(0,3482),(0,29);:_ZN16LargeInheritance1B10get_b_dataEv;2A*4;(0,3406);;offset_of::(0,3491)=#(0,3406),(0,142),(0,3482),(0,2476),(0,29);:_ZN16LargeInheritance1B9offset_ofERi;2A.;;~%(0,3406);
+A:Tt(0,3393)=s16_vptr.A:(0,3182),0,64;a_data:(0,15),64,32;hidden_a_data:/0(0,15),96,32;__ct_base ::(0,3492)=#(0,3393),(0,29),(0,3493)=*(0,3393),(0,3494)=&(0,3495)=k(0,3393),(0,29);:_ZN16LargeInheritance1AC2ERKS0_;2A.;__ct_comp ::(0,3492):_ZN16LargeInheritance1AC1ERKS0_;2A.;__ct_base ::(0,3496)=#(0,3393),(0,29),(0,3493),(0,29);:_ZN16LargeInheritance1AC2Ev;2A.;__ct_comp ::(0,3496):_ZN16LargeInheritance1AC1Ev;2A.;__dt_base ::(0,3496):_ZN16LargeInheritance1AD2Ev;2A.;__dt_comp ::(0,3496):_ZN16LargeInheritance1AD1Ev;2A*0;(0,3393);;__dt_del ::(0,3496):_ZN16LargeInheritance1AD0Ev;2A*1;(0,3393);;a_foo::(0,3497)=#(0,3393),(0,29),(0,3493),(0,29);:_ZN16LargeInheritance1A5a_fooEv;2A*2;(0,3393);;set_a_data::(0,3498)=#(0,3393),(0,29),(0,3493),(0,15),(0,29);:_ZN16LargeInheritance1A10set_a_dataEi;2A*3;(0,3393);;get_a_data::(0,3499)=#(0,3393),(0,15),(0,3493),(0,29);:_ZN16LargeInheritance1A10get_a_dataEv;2A*4;(0,3393);;offset_of::(0,3500)=#(0,3393),(0,142),(0,3493),(0,2476),(0,29);:_ZN16LargeInheritance1A9offset_ofERi;2A.;;~%(0,3393);
+D:Tt(0,3501)=s56!2,020,(0,3502)=xsB:;02128,(0,3503)=xsC:;d_data:(0,15),288,32;__ct_base ::(0,3504)=#(0,3501),(0,29),(0,3505)=*(0,3501),(0,3185),(0,3506)=&(0,3507)=k(0,3501),(0,29);:_ZN10NonDiamond1DC2ERKS0_;2A.;__ct_comp ::(0,3508)=#(0,3501),(0,29),(0,3505),(0,3506),(0,29);:_ZN10NonDiamond1DC1ERKS0_;2A.;__ct_base ::(0,3509)=#(0,3501),(0,29),(0,3505),(0,3185),(0,29);:_ZN10NonDiamond1DC2Ev;2A.;__ct_comp ::(0,3510)=#(0,3501),(0,29),(0,3505),(0,29);:_ZN10NonDiamond1DC1Ev;2A.;__dt_base ::(0,3509):_ZN10NonDiamond1DD2Ev;2A.;__dt_comp ::(0,3510):_ZN10NonDiamond1DD1Ev;2A*0;(0,3501);;__dt_del ::(0,3510):_ZN10NonDiamond1DD0Ev;2A*1;(0,3501);;d_foo::(0,3511)=#(0,3501),(0,29),(0,3505),(0,29);:_ZN10NonDiamond1D5d_fooEv;2A*5;(0,3501);;set_d_data::(0,3512)=#(0,3501),(0,29),(0,3505),(0,15),(0,29);:_ZN10NonDiamond1D10set_d_dataEi;2A*6;(0,3501);;get_d_data::(0,3513)=#(0,3501),(0,15),(0,3505),(0,29);:_ZN10NonDiamond1D10get_d_dataEv;2A*7;(0,3501);;offset_of::(0,3514)=#(0,3501),(0,142),(0,3505),(0,2476),(0,29);:_ZN10NonDiamond1D9offset_ofERi;2A.;;~%(0,3502);
+C:Tt(0,3503)=s24!1,020,(0,3515)=xsA:;c_data:(0,15),128,32;__ct_base ::(0,3516)=#(0,3503),(0,29),(0,3517)=*(0,3503),(0,3518)=&(0,3519)=k(0,3503),(0,29);:_ZN10NonDiamond1CC2ERKS0_;2A.;__ct_comp ::(0,3516):_ZN10NonDiamond1CC1ERKS0_;2A.;__ct_base ::(0,3520)=#(0,3503),(0,29),(0,3517),(0,29);:_ZN10NonDiamond1CC2Ev;2A.;__ct_comp ::(0,3520):_ZN10NonDiamond1CC1Ev;2A.;__dt_base ::(0,3520):_ZN10NonDiamond1CD2Ev;2A.;__dt_comp ::(0,3520):_ZN10NonDiamond1CD1Ev;2A*0;(0,3503);;__dt_del ::(0,3520):_ZN10NonDiamond1CD0Ev;2A*1;(0,3503);;c_foo::(0,3521)=#(0,3503),(0,29),(0,3517),(0,29);:_ZN10NonDiamond1C5c_fooEv;2A*5;(0,3503);;set_c_data::(0,3522)=#(0,3503),(0,29),(0,3517),(0,15),(0,29);:_ZN10NonDiamond1C10set_c_dataEi;2A*6;(0,3503);;get_c_data::(0,3523)=#(0,3503),(0,15),(0,3517),(0,29);:_ZN10NonDiamond1C10get_c_dataEv;2A*7;(0,3503);;offset_of::(0,3524)=#(0,3503),(0,142),(0,3517),(0,2476),(0,29);:_ZN10NonDiamond1C9offset_ofERi;2A.;;~%(0,3515);
+B:Tt(0,3502)=s32!1,12-192,(0,3515);_vptr.B:(0,3182),0,64;b_data:(0,15),64,32;__ct_base ::(0,3525)=#(0,3502),(0,29),(0,3526)=*(0,3502),(0,3185),(0,3527)=&(0,3528)=k(0,3502),(0,29);:_ZN10NonDiamond1BC2ERKS0_;2A.;__ct_comp ::(0,3529)=#(0,3502),(0,29),(0,3526),(0,3527),(0,29);:_ZN10NonDiamond1BC1ERKS0_;2A.;__ct_base ::(0,3530)=#(0,3502),(0,29),(0,3526),(0,3185),(0,29);:_ZN10NonDiamond1BC2Ev;2A.;__ct_comp ::(0,3531)=#(0,3502),(0,29),(0,3526),(0,29);:_ZN10NonDiamond1BC1Ev;2A.;__dt_base ::(0,3530):_ZN10NonDiamond1BD2Ev;2A.;__dt_comp ::(0,3531):_ZN10NonDiamond1BD1Ev;2A*0;(0,3502);;__dt_del ::(0,3531):_ZN10NonDiamond1BD0Ev;2A*1;(0,3502);;b_foo::(0,3532)=#(0,3502),(0,29),(0,3526),(0,29);:_ZN10NonDiamond1B5b_fooEv;2A*2;(0,3502);;set_b_data::(0,3533)=#(0,3502),(0,29),(0,3526),(0,15),(0,29);:_ZN10NonDiamond1B10set_b_dataEi;2A*3;(0,3502);;get_b_data::(0,3534)=#(0,3502),(0,15),(0,3526),(0,29);:_ZN10NonDiamond1B10get_b_dataEv;2A*4;(0,3502);;offset_of::(0,3535)=#(0,3502),(0,142),(0,3526),(0,2476),(0,29);:_ZN10NonDiamond1B9offset_ofERi;2A.;;~%(0,3502);
+A:Tt(0,3515)=s16_vptr.A:(0,3182),0,64;a_data:(0,15),64,32;hidden_a_data:/0(0,15),96,32;__ct_base ::(0,3536)=#(0,3515),(0,29),(0,3537)=*(0,3515),(0,3538)=&(0,3539)=k(0,3515),(0,29);:_ZN10NonDiamond1AC2ERKS0_;2A.;__ct_comp ::(0,3536):_ZN10NonDiamond1AC1ERKS0_;2A.;__ct_base ::(0,3540)=#(0,3515),(0,29),(0,3537),(0,29);:_ZN10NonDiamond1AC2Ev;2A.;__ct_comp ::(0,3540):_ZN10NonDiamond1AC1Ev;2A.;__dt_base ::(0,3540):_ZN10NonDiamond1AD2Ev;2A.;__dt_comp ::(0,3540):_ZN10NonDiamond1AD1Ev;2A*0;(0,3515);;__dt_del ::(0,3540):_ZN10NonDiamond1AD0Ev;2A*1;(0,3515);;a_foo::(0,3541)=#(0,3515),(0,29),(0,3537),(0,29);:_ZN10NonDiamond1A5a_fooEv;2A*2;(0,3515);;set_a_data::(0,3542)=#(0,3515),(0,29),(0,3537),(0,15),(0,29);:_ZN10NonDiamond1A10set_a_dataEi;2A*3;(0,3515);;get_a_data::(0,3543)=#(0,3515),(0,15),(0,3537),(0,29);:_ZN10NonDiamond1A10get_a_dataEv;2A*4;(0,3515);;offset_of::(0,3544)=#(0,3515),(0,142),(0,3537),(0,2476),(0,29);:_ZN10NonDiamond1A9offset_ofERi;2A.;;~%(0,3515);
+D:Tt(0,3545)=s48!2,020,(0,3546)=xsB:;02128,(0,3547)=xsC:;d_data:(0,15),224,32;__ct_base ::(0,3548)=#(0,3545),(0,29),(0,3549)=*(0,3545),(0,3185),(0,3550)=&(0,3551)=k(0,3545),(0,29);:_ZN7Diamond1DC2ERKS0_;2A.;__ct_comp ::(0,3552)=#(0,3545),(0,29),(0,3549),(0,3550),(0,29);:_ZN7Diamond1DC1ERKS0_;2A.;__ct_base ::(0,3553)=#(0,3545),(0,29),(0,3549),(0,3185),(0,29);:_ZN7Diamond1DC2Ev;2A.;__ct_comp ::(0,3554)=#(0,3545),(0,29),(0,3549),(0,29);:_ZN7Diamond1DC1Ev;2A.;__dt_base ::(0,3553):_ZN7Diamond1DD2Ev;2A.;__dt_comp ::(0,3554):_ZN7Diamond1DD1Ev;2A*0;(0,3545);;__dt_del ::(0,3554):_ZN7Diamond1DD0Ev;2A*1;(0,3545);;d_foo::(0,3555)=#(0,3545),(0,29),(0,3549),(0,29);:_ZN7Diamond1D5d_fooEv;2A*5;(0,3545);;set_d_data::(0,3556)=#(0,3545),(0,29),(0,3549),(0,15),(0,29);:_ZN7Diamond1D10set_d_dataEi;2A*6;(0,3545);;get_d_data::(0,3557)=#(0,3545),(0,15),(0,3549),(0,29);:_ZN7Diamond1D10get_d_dataEv;2A*7;(0,3545);;offset_of::(0,3558)=#(0,3545),(0,142),(0,3549),(0,2476),(0,29);:_ZN7Diamond1D9offset_ofERi;2A.;;~%(0,3546);
+C:Tt(0,3547)=s32!1,12-192,(0,3559)=xsA:;_vptr.C:(0,3182),0,64;c_data:(0,15),64,32;__ct_base ::(0,3560)=#(0,3547),(0,29),(0,3561)=*(0,3547),(0,3185),(0,3562)=&(0,3563)=k(0,3547),(0,29);:_ZN7Diamond1CC2ERKS0_;2A.;__ct_comp ::(0,3564)=#(0,3547),(0,29),(0,3561),(0,3562),(0,29);:_ZN7Diamond1CC1ERKS0_;2A.;__ct_base ::(0,3565)=#(0,3547),(0,29),(0,3561),(0,3185),(0,29);:_ZN7Diamond1CC2Ev;2A.;__ct_comp ::(0,3566)=#(0,3547),(0,29),(0,3561),(0,29);:_ZN7Diamond1CC1Ev;2A.;__dt_base ::(0,3565):_ZN7Diamond1CD2Ev;2A.;__dt_comp ::(0,3566):_ZN7Diamond1CD1Ev;2A*0;(0,3547);;__dt_del ::(0,3566):_ZN7Diamond1CD0Ev;2A*1;(0,3547);;c_foo::(0,3567)=#(0,3547),(0,29),(0,3561),(0,29);:_ZN7Diamond1C5c_fooEv;2A*2;(0,3547);;set_c_data::(0,3568)=#(0,3547),(0,29),(0,3561),(0,15),(0,29);:_ZN7Diamond1C10set_c_dataEi;2A*3;(0,3547);;get_c_data::(0,3569)=#(0,3547),(0,15),(0,3561),(0,29);:_ZN7Diamond1C10get_c_dataEv;2A*4;(0,3547);;offset_of::(0,3570)=#(0,3547),(0,142),(0,3561),(0,2476),(0,29);:_ZN7Diamond1C9offset_ofERi;2A.;;~%(0,3547);
+B:Tt(0,3546)=s32!1,12-192,(0,3559);_vptr.B:(0,3182),0,64;b_data:(0,15),64,32;__ct_base ::(0,3571)=#(0,3546),(0,29),(0,3572)=*(0,3546),(0,3185),(0,3573)=&(0,3574)=k(0,3546),(0,29);:_ZN7Diamond1BC2ERKS0_;2A.;__ct_comp ::(0,3575)=#(0,3546),(0,29),(0,3572),(0,3573),(0,29);:_ZN7Diamond1BC1ERKS0_;2A.;__ct_base ::(0,3576)=#(0,3546),(0,29),(0,3572),(0,3185),(0,29);:_ZN7Diamond1BC2Ev;2A.;__ct_comp ::(0,3577)=#(0,3546),(0,29),(0,3572),(0,29);:_ZN7Diamond1BC1Ev;2A.;__dt_base ::(0,3576):_ZN7Diamond1BD2Ev;2A.;__dt_comp ::(0,3577):_ZN7Diamond1BD1Ev;2A*0;(0,3546);;__dt_del ::(0,3577):_ZN7Diamond1BD0Ev;2A*1;(0,3546);;b_foo::(0,3578)=#(0,3546),(0,29),(0,3572),(0,29);:_ZN7Diamond1B5b_fooEv;2A*2;(0,3546);;set_b_data::(0,3579)=#(0,3546),(0,29),(0,3572),(0,15),(0,29);:_ZN7Diamond1B10set_b_dataEi;2A*3;(0,3546);;get_b_data::(0,3580)=#(0,3546),(0,15),(0,3572),(0,29);:_ZN7Diamond1B10get_b_dataEv;2A*4;(0,3546);;offset_of::(0,3581)=#(0,3546),(0,142),(0,3572),(0,2476),(0,29);:_ZN7Diamond1B9offset_ofERi;2A.;;~%(0,3546);
+A:Tt(0,3559)=s16_vptr.A:(0,3182),0,64;a_data:(0,15),64,32;hidden_a_data:/0(0,15),96,32;__ct_base ::(0,3582)=#(0,3559),(0,29),(0,3583)=*(0,3559),(0,3584)=&(0,3585)=k(0,3559),(0,29);:_ZN7Diamond1AC2ERKS0_;2A.;__ct_comp ::(0,3582):_ZN7Diamond1AC1ERKS0_;2A.;__ct_base ::(0,3586)=#(0,3559),(0,29),(0,3583),(0,29);:_ZN7Diamond1AC2Ev;2A.;__ct_comp ::(0,3586):_ZN7Diamond1AC1Ev;2A.;__dt_base ::(0,3586):_ZN7Diamond1AD2Ev;2A.;__dt_comp ::(0,3586):_ZN7Diamond1AD1Ev;2A*0;(0,3559);;__dt_del ::(0,3586):_ZN7Diamond1AD0Ev;2A*1;(0,3559);;a_foo::(0,3587)=#(0,3559),(0,29),(0,3583),(0,29);:_ZN7Diamond1A5a_fooEv;2A*2;(0,3559);;set_a_data::(0,3588)=#(0,3559),(0,29),(0,3583),(0,15),(0,29);:_ZN7Diamond1A10set_a_dataEi;2A*3;(0,3559);;get_a_data::(0,3589)=#(0,3559),(0,15),(0,3583),(0,29);:_ZN7Diamond1A10get_a_dataEv;2A*4;(0,3559);;offset_of::(0,3590)=#(0,3559),(0,142),(0,3583),(0,2476),(0,29);:_ZN7Diamond1A9offset_ofERi;2A.;;~%(0,3559);
+axG
+_ZNKSt9type_info4nameEv:F(0,74)
+this:p(0,3591)=k(0,168)
\ No newline at end of file
-- 
2.45.1

