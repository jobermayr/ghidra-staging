From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kkots <okknots@gmail.com>
Date: Mon, 15 Jul 2024 06:14:54 +0300
Subject: [PATCH] 6718: decompiler: fix loops with shifted structure offset

added fix to shifted structure offset for when the offset is checked by <

added fix to shifted structure offset for when offset into struct is specified outside the loop
---
 .../src/decompile/cpp/blockaction.cc          |   1 +
 .../cpp/include/ghidra/ruleaction.hh          |   3 +
 .../src/decompile/cpp/ruleaction.cc           | 206 ++++++++++++++++++
 3 files changed, 210 insertions(+)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc
index 56626bf593..584ff2023b 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc
@@ -2076,6 +2076,7 @@ void ConditionalJoin::setupMultiequals(void)
     Varnode *outvn = data.newUniqueOut(vn1->getSize(),multi);
     data.opSetInput(multi,vn1,0);
     data.opSetInput(multi,vn2,1);
+    outvn->updateType(vn1->getType(), false, false);  // protect work done by RulePtrArith from being undone by RulePtraddUndo
     (*iter).second = outvn;
     data.opInsertEnd(multi,joinblock);
   }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/ruleaction.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/ruleaction.hh
index fcd5b43915..8b946d1f3f 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/ruleaction.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/ruleaction.hh
@@ -61,6 +61,7 @@ class AddTreeState {
   PcodeOp *distributeOp;	///< A CPUI_INT_MULT op that needs to be distributed
   uint8 multsum;		///< Sum of multiple constants
   uint8 nonmultsum;		///< Sum of non-multiple constants
+  vector<Varnode*> multiequalsToInspect;  ///< CPUI_MULTIEQUALs that might potentially lead to discovering the constant multiple being used
   bool preventDistribution;	///< Do not distribute "multiply by constant" operation
   bool isDistributeUsed;	///< Are terms produced by distributing used
   bool isSubtype;		///< Is there a sub-type (using CPUI_PTRSUB)
@@ -76,6 +77,8 @@ class AddTreeState {
   bool buildDegenerate(void);		///< Transform ADD into degenerate PTRADD
   void buildTree(void);			///< Build the transformed ADD tree
   void clear(void);			///< Reset for a new ADD tree traversal
+  bool inspectMultiequals(void);        ///< Check all potential CPUI_MULTIEQUALs in an attempt to transform the expression and find the multiple
+  intb greatestCommonDivisor(intb val1, intb val2);  ///< Euclid's algorithm for finding the greatest common divisor of two integers
 public:
   AddTreeState(Funcdata &d,PcodeOp *op,int4 slot);	///< Construct given root of ADD tree and pointer
   bool apply(void);		///< Attempt to transform the pointer expression
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
index b0670fa8b9..fe2358f111 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
@@ -5793,6 +5793,7 @@ void AddTreeState::clear(void)
   multiple.clear();
   coeff.clear();
   nonmult.clear();
+  multiequalsToInspect.clear();
   correct = 0;
   offset = 0;
   valid = true;
@@ -6011,6 +6012,8 @@ bool AddTreeState::checkTerm(Varnode *vn,uint8 treeCoeff)
     }
     if (def->code() == CPUI_INT_MULT)	// Check for constant coeff indicating size
       return checkMultTerm(vn, def, treeCoeff);
+    if (treeCoeff == 1 && def->code() == CPUI_MULTIEQUAL)
+      multiequalsToInspect.push_back(vn);
   }
   else if (vn->isFree()) {
     valid = false;
@@ -6056,6 +6059,203 @@ bool AddTreeState::spanAddTree(PcodeOp *op,uint8 treeCoeff)
   return false;		// At least one of the sides contains multiples
 }
 
+intb AddTreeState::greatestCommonDivisor(intb val1, intb val2) {
+  intb op1multiplier = val1;
+  if (val1 < 0) val1 = -val1;
+  if (val2 < 0) val2 = -val2;
+  if (val1 != 0 && val2 != 0) {
+    while (val2 != val1) {  // greatest common divisor: euclid's algorithm
+      if (val2 > val1) {
+        val2 -= val1;
+      } else {
+        val1 -= val2;
+      }
+    }
+    return val2;
+  } else if (val1 != 0) {
+    return val1;
+  } else if (val2 != 0) {
+    return val2;
+  } else {
+    return -1;
+  }
+}
+
+// \brief Modify surrounding expressions in an attempt to recover the multiple
+//
+// For situations like this:
+// int sliding_offset = 0;  // or any constant divisible by element_size
+// // or int sliding_offset = something * element_size;
+// do {
+//   ... *(pointer_to_element + sliding_offset + optional_member_offset) ...
+//   sliding_offset += element_size;
+//   // or
+//   sliding_offset -= element_size;
+// } while (true);
+// , where element_size is the size of element pointed to by pointer_to_element
+//
+// It modifies expressions which set or write the sliding_offset variable
+// by dividing their constant by element_size, and applying * element_size
+// (multiplication by element_size) to all places where the sliding_offset is used instead.
+// This makes RulePtrArith more likely to recognize that the CPUI_INT_ADD expression
+// is actually a CPUI_PTRADD.
+// \return \b true if successful, \b false otherwise
+bool AddTreeState::inspectMultiequals(void) {
+  vector<Varnode *>::iterator iter;
+  for (iter = multiequalsToInspect.begin(); iter != multiequalsToInspect.end(); ++iter) {
+    Varnode *vn = *iter;
+    if (!vn->isWritten()) continue;
+    PcodeOp *op = vn->getDef();
+    if (op->code() != CPUI_MULTIEQUAL) continue;
+    if (op->numInput() != 2) continue;
+    Varnode *in1 = op->getIn(0);
+    if (!in1->isWritten() || in1->loneDescend() != op) continue;
+    PcodeOp *op1 = in1->getDef();
+    int4 op1Size = 0;
+    intb op1Val = 0;
+    int op1ReplacementSlot = 0;
+    if (op1->code() == CPUI_INT_MULT) {
+      Varnode *multTerm = op1->getIn(0);
+      if (multTerm->isFree()) continue;
+      Varnode *multConst = op1->getIn(1);
+      if (!multConst->isConstant()) continue;
+      uintb multval = multConst->getOffset() & ptrmask;
+      intb multsval = sign_extend(multval, in1->getSize() * 8 - 1);
+      op1Val = multsval;
+      op1ReplacementSlot = 1;
+      op1Size = multConst->getSize();
+    } else if (op1->code() == CPUI_COPY) {
+      Varnode *assignmentConst = op1->getIn(0);
+      if (!assignmentConst->isConstant() || op1->numInput() != 1) continue;
+      uintb assignval = assignmentConst->getOffset() & ptrmask;
+      intb assignsval = sign_extend(assignval, in1->getSize() * 8 - 1);
+      op1Val = assignsval;
+      op1ReplacementSlot = 0;
+      op1Size = assignmentConst->getSize();
+    } else {
+      continue;
+    }
+    Varnode *in2 = op->getIn(1);
+    if (!in2->isWritten()) continue;
+    bool failed = false;
+    int4 comparisonsvalSize;
+    intb comparisonsval;
+    PcodeOp* comparisonOp = nullptr;
+    list<PcodeOp *>::const_iterator in2Desc;
+    for (in2Desc = in2->beginDescend(); in2Desc != in2->endDescend(); ++in2Desc) {
+      PcodeOp* desc = *in2Desc;
+      if (desc == op) {
+        continue;
+      }
+      if (desc->code() != CPUI_INT_SLESS && desc->code() != CPUI_INT_SLESSEQUAL) {
+        failed = true;
+        break;
+      }
+      if (comparisonOp == nullptr) {
+	comparisonOp = desc;
+	if (comparisonOp->numInput() != 2) {
+	  failed = true;
+	  break;
+	}
+	const Varnode* comparisonOperand = comparisonOp->getIn(1);
+	if (!comparisonOperand->isConstant()) {
+	  failed = true;
+	  break;
+	}
+	comparisonsvalSize = comparisonOperand->getSize();
+	uintb comparisonval = comparisonOperand->getOffset() & ptrmask;
+        comparisonsval = sign_extend(comparisonval, comparisonOperand->getSize() * 8 - 1);
+      } else {
+        failed = true;
+        break;
+      }
+    }
+    if (failed) continue;
+    PcodeOp *op2 = in2->getDef();
+    if (op2->code() != CPUI_INT_ADD) continue;
+    Varnode *addTerm = op2->getIn(0);
+    if (addTerm != vn) continue;
+    Varnode *addConst = op2->getIn(1);
+    if (!addConst->isConstant()) continue;
+    uintb addval = addConst->getOffset() & ptrmask;
+    intb addsval = sign_extend(addval, in2->getSize() * 8 - 1);
+    bool needDistributeCopy = false;
+    if (op1->code() == CPUI_COPY
+        && (size == 0 && op1Val != 0 || op1Val % size != 0)
+        && (baseType->getMetatype() == TYPE_STRUCT
+          || baseType->getMetatype() == TYPE_SPACEBASE)) {
+      // if the constant in CPUI_COPY is an offset to a member of the struct,
+      // -needDistributeCopy- being true will mean we want to duplicate that constant
+      // into all mentions of the -vn- and in the original CPUI_COPY replace it with 0
+      nonmultsum = op1Val;
+      biggestNonMultCoeff = 0;
+      nonmult.push_back(op1ReplacementSlot != -1 ? op1->getIn(op1ReplacementSlot) : op1->getOut());
+      calcSubtype();
+      needDistributeCopy = (valid && isSubtype);
+    }
+    Varnode *newConstForOp1;
+    intb extra = 0;
+    if (needDistributeCopy) {
+      extra = op1Val;
+      newConstForOp1 = data.newConstant(op1Size, 0);
+      data.opSetInput(op1, newConstForOp1, op1ReplacementSlot);
+      if (comparisonOp != nullptr) {
+        const Varnode* comparisonOperand = comparisonOp->getIn(1);
+        data.opSetInput(comparisonOp,
+          data.newConstant(comparisonOperand->getSize(), (uintb)(comparisonsval - op1Val) & ptrmask), 1);
+        comparisonsval -= op1Val;
+      }
+      op1Val = 0;
+    } else if (op1Val % size != 0 || addsval % size != 0) continue;  // the value in CPUI_COPY is either not the offset into the struct or op1 is not a CPUI_COPY
+    intb multiplier = greatestCommonDivisor(op1Val, addsval);
+    if (comparisonOp != nullptr && !needDistributeCopy) {
+      multiplier = greatestCommonDivisor(multiplier, comparisonsval);
+    }
+    if (multiplier != 1) {
+      Varnode *newConstForOp1 = data.newConstant(op1Size, (op1Val / multiplier) & ptrmask);
+      data.opSetInput(op1, newConstForOp1, op1ReplacementSlot);
+      Varnode *newConstForAdd = data.newConstant(addConst->getSize(), (addsval / multiplier) & ptrmask);
+      data.opSetInput(op2, newConstForAdd, 1);
+    }
+    list<PcodeOp *>::const_iterator descendListIter;
+    vector<PcodeOp *> descendants;
+    for (descendListIter = vn->beginDescend(); descendListIter != vn->endDescend(); ++descendListIter) {
+      descendants.push_back(*descendListIter);
+    }
+    vector<PcodeOp *>::const_iterator descendIter;
+    for (descendIter = descendants.begin(); descendIter != descendants.end(); ++descendIter) {
+      PcodeOp *desc = *descendIter;
+      if (desc == op1 || desc == op2 || desc->code() == CPUI_INDIRECT) continue;
+      int4 inSlot = desc->getSlot(vn);
+      PcodeOp *newMultOp = nullptr;
+      Varnode* nodeToAdd;
+      if (multiplier != 1) {
+        newMultOp = data.newOpBefore(desc, CPUI_INT_MULT, vn, data.newConstant(addConst->getSize(), multiplier & ptrmask));
+        nodeToAdd = newMultOp->getOut();
+      } else {
+        nodeToAdd = vn;
+      }
+      if (extra != 0) {
+        newMultOp = data.newOpBefore(desc, CPUI_INT_ADD, nodeToAdd, data.newConstant(op1Size, (uintb)extra & ptrmask));
+      }
+      if (newMultOp != nullptr) {
+        data.opSetInput(desc, newMultOp->getOut(), inSlot);
+      }
+    }
+    if (comparisonOp != nullptr) {
+      const Varnode* comparisonOperand = comparisonOp->getIn(1);
+      uintb comparisonval = comparisonOperand->getOffset() & ptrmask;
+      intb comparisonsval = sign_extend(comparisonval, comparisonOperand->getSize() * 8 - 1);
+      if (multiplier != 1) {
+        data.opSetInput(comparisonOp,
+	  data.newConstant(comparisonOperand->getSize(), (uintb)(comparisonsval / multiplier) & ptrmask), 1);
+      }
+    }
+    return true;
+  }
+  return false;
+}
+
 /// Make final calcultions to determine if a pointer to a sub data-type of the base
 /// data-type is being calculated, which will result in a CPUI_PTRSUB being generated.
 void AddTreeState::calcSubtype(void)
@@ -6236,6 +6436,12 @@ bool AddTreeState::apply(void)
     return buildDegenerate();
   spanAddTree(baseOp,1);
   if (!valid) return false;		// Were there any show stoppers
+  if (multiple.empty() && !multiequalsToInspect.empty() && size != 0) {
+    if (inspectMultiequals()) {
+      clear();
+      spanAddTree(baseOp,1);
+    }
+  }
   if (distributeOp != (PcodeOp *)0 && !isDistributeUsed) {
     clear();
     preventDistribution = true;
-- 
2.45.1

