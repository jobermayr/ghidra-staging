From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mike Hunhoff <mehunhoff@google.com>
Date: Thu, 17 Aug 2023 17:04:06 -0600
Subject: [PATCH] 5672: fix RegExMemSearcherAlgorithm search limiting

---
 .../memory/RegExMemSearcherAlgorithm.java     | 10 ++++++
 .../util/search/RegExMemSearcherTaskTest.java | 33 ++++++++++++++++++-
 2 files changed, 42 insertions(+), 1 deletion(-)

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/util/search/memory/RegExMemSearcherAlgorithm.java b/Ghidra/Features/Base/src/main/java/ghidra/util/search/memory/RegExMemSearcherAlgorithm.java
index c9a0f41c0..217557b97 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/util/search/memory/RegExMemSearcherAlgorithm.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/util/search/memory/RegExMemSearcherAlgorithm.java
@@ -68,11 +68,16 @@ public class RegExMemSearcherAlgorithm implements MemorySearchAlgorithm {
 		else {
 			AddressRangeIterator rangeIterator = searchSet.getAddressRanges();
 			int progress = 0;
+			int searchLimit = searchInfo.getSearchLimit();
 			while (rangeIterator.hasNext()) {
 				AddressRange range = rangeIterator.next();
 				searchAddressSet(new AddressSet(range), accumulator, monitor, progress);
 				progress += (int) range.getLength();
 				monitor.setProgress(progress);
+
+				if (accumulator.size() >= searchLimit) {
+					return;
+				}
 			}
 		}
 	}
@@ -85,8 +90,13 @@ public class RegExMemSearcherAlgorithm implements MemorySearchAlgorithm {
 			return;
 		}
 		List<AddressSet> sets = breakSetsByMemoryBlock(addressSet);
+		int searchLimit = searchInfo.getSearchLimit();
 		for (AddressSet set : sets) {
 			searchSubAddressSet(set, accumulator, monitor, progressCount);
+
+			if (accumulator.size() >= searchLimit) {
+				return;
+			}
 		}
 	}
 
diff --git a/Ghidra/Features/Base/src/test.slow/java/ghidra/util/search/RegExMemSearcherTaskTest.java b/Ghidra/Features/Base/src/test.slow/java/ghidra/util/search/RegExMemSearcherTaskTest.java
index 6c92e1161..8202c9f1b 100644
--- a/Ghidra/Features/Base/src/test.slow/java/ghidra/util/search/RegExMemSearcherTaskTest.java
+++ b/Ghidra/Features/Base/src/test.slow/java/ghidra/util/search/RegExMemSearcherTaskTest.java
@@ -35,7 +35,14 @@ public class RegExMemSearcherTaskTest extends AbstractGhidraHeadlessIntegrationT
 	private Program buildProgram() throws Exception {
 		ProgramBuilder builder = new ProgramBuilder("TestX86", ProgramBuilder._X86);
 		builder.createMemory(".text", Long.toHexString(0x1001000), 0x100);
+		builder.createMemory(".text1", Long.toHexString(0x1002000), 0x100);
+		return builder.getProgram();
+	}
 
+	private Program buildLargeProgram() throws Exception {
+		ProgramBuilder builder = new ProgramBuilder("TestX86", ProgramBuilder._X86);
+		builder.createMemory(".text", Long.toHexString(0x1001000), Integer.MAX_VALUE);
+		builder.createMemory(".text1", Long.toHexString(0x1001000 + Integer.MAX_VALUE), 0x100);
 		return builder.getProgram();
 	}
 
@@ -50,7 +57,31 @@ public class RegExMemSearcherTaskTest extends AbstractGhidraHeadlessIntegrationT
 		AddressSetView addrs = p.getMemory().getLoadedAndInitializedAddressSet();
 
 		RegExMemSearcherAlgorithm searcher =
-			new RegExMemSearcherAlgorithm(searchInfo, addrs, p, true);
+			new RegExMemSearcherAlgorithm(searchInfo, addrs, p, false);
+
+		ListAccumulator<MemSearchResult> accumulator = new ListAccumulator<>();
+		searcher.search(accumulator, TaskMonitor.DUMMY);
+		List<MemSearchResult> results = accumulator.asList();
+
+		assertEquals(max, results.size());
+
+		assertEquals(0x1001000, results.get(0).getAddress().getOffset());
+		assertEquals(0x1001001, results.get(1).getAddress().getOffset());
+		assertEquals(0x1001002, results.get(2).getAddress().getOffset());
+	}
+
+	@Test
+	public void testFindMatchesWithinMatchesLargeProgram() throws Exception {
+
+		Program p = buildLargeProgram();
+		String regex = "\\x00\\x00\\x00\\x00";
+		RegExSearchData searchData = new RegExSearchData(regex);
+		int max = 50;
+		SearchInfo searchInfo = new SearchInfo(searchData, max, false, true, 1, false, null);
+		AddressSetView addrs = p.getMemory().getLoadedAndInitializedAddressSet();
+
+		RegExMemSearcherAlgorithm searcher =
+			new RegExMemSearcherAlgorithm(searchInfo, addrs, p, false);
 
 		ListAccumulator<MemSearchResult> accumulator = new ListAccumulator<>();
 		searcher.search(accumulator, TaskMonitor.DUMMY);
-- 
2.41.0

