From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kkots <okknots@gmail.com>
Date: Fri, 12 Jul 2024 22:58:43 +0300
Subject: [PATCH] 6715: fix functions that return double in decompiler

---
 .../Decompiler/src/decompile/cpp/ghidra_translate.cc | 12 ++++++++++++
 .../decompile/cpp/include/ghidra/ghidra_translate.hh |  5 +++++
 .../src/decompile/cpp/include/ghidra/translate.hh    |  6 +++---
 3 files changed, 20 insertions(+), 3 deletions(-)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/ghidra_translate.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/ghidra_translate.cc
index 8c09f7ecb7..a8df90bd62 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/ghidra_translate.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/ghidra_translate.cc
@@ -156,4 +156,16 @@ void GhidraTranslate::decode(Decoder &decoder)
   decoder.closeElement(elemId);
 }
 
+void GhidraTranslate::renormalizeJoinAddress(Address &addr,int4 size) {
+  glb->renormalizeJoinAddress(addr,size);
+}
+
+JoinRecord* GhidraTranslate::findAddJoin(const vector<VarnodeData> &pieces,uint4 logicalsize) {
+  return glb->findAddJoin(pieces,logicalsize);
+}
+
+JoinRecord* GhidraTranslate::findJoin(uintb offset) const {
+  return glb->findJoin(offset);
+}
+
 } // End namespace ghidra
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/ghidra_translate.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/ghidra_translate.hh
index 75c20e39e4..b98024242c 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/ghidra_translate.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/ghidra_translate.hh
@@ -53,6 +53,11 @@ public:
     throw LowlevelError("Cannot currently get instruction length through this interface"); }
   virtual int4 printAssembly(AssemblyEmit &emit,const Address &baseaddr) const {
     throw LowlevelError("Cannot dump assembly through this interface"); }
+  virtual JoinRecord *findAddJoin(const vector<VarnodeData> &pieces,uint4 logicalsize); ///< Get (or create) JoinRecord for \e pieces
+  virtual JoinRecord *findJoin(uintb offset) const; ///< Find JoinRecord for \e offset in the join space
+
+  /// \brief Make sure a possibly offset \e join address has a proper JoinRecord
+  virtual void renormalizeJoinAddress(Address &addr,int4 size);
 };
 
 } // End namespace ghidra
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/translate.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/translate.hh
index 913c2cbc85..59b7586d2d 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/translate.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/include/ghidra/translate.hh
@@ -267,8 +267,8 @@ public:
   int4 numSpaces(void) const; ///< Get the number of address spaces for this processor
   AddrSpace *getSpace(int4 i) const; ///< Get an address space via its index
   AddrSpace *getNextSpaceInOrder(AddrSpace *spc) const; ///< Get the next \e contiguous address space
-  JoinRecord *findAddJoin(const vector<VarnodeData> &pieces,uint4 logicalsize); ///< Get (or create) JoinRecord for \e pieces
-  JoinRecord *findJoin(uintb offset) const; ///< Find JoinRecord for \e offset in the join space
+  virtual JoinRecord *findAddJoin(const vector<VarnodeData> &pieces,uint4 logicalsize); ///< Get (or create) JoinRecord for \e pieces
+  virtual JoinRecord *findJoin(uintb offset) const; ///< Find JoinRecord for \e offset in the join space
   void setDeadcodeDelay(AddrSpace *spc,int4 delaydelta); ///< Set the deadcodedelay for a specific space
   void truncateSpace(const TruncationTag &tag);	///< Mark a space as truncated from its original size
 
@@ -279,7 +279,7 @@ public:
   Address constructJoinAddress(const Translate *translate,const Address &hiaddr,int4 hisz,const Address &loaddr,int4 losz);
 
   /// \brief Make sure a possibly offset \e join address has a proper JoinRecord
-  void renormalizeJoinAddress(Address &addr,int4 size);
+  virtual void renormalizeJoinAddress(Address &addr,int4 size);
 
   /// \brief Parse a string with just an \e address \e space name and a hex offset
   Address parseAddressSimple(const string &val);
-- 
2.45.1

