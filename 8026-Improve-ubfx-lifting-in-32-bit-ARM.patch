From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: jonathanzetier <207571460+jonathanzetier@users.noreply.github.com>
Date: Sat, 19 Apr 2025 07:57:11 -0700
Subject: [PATCH] 8026: Improve ubfx lifting in 32-bit ARM

Make ubfx instructions indentation consistent

Simplify UBFX instructions in 32-bit ARM
---
 .../ARM/data/languages/ARMTHUMBinstructions.sinc       | 10 +++-------
 .../Processors/ARM/data/languages/ARMinstructions.sinc | 10 +++-------
 2 files changed, 6 insertions(+), 14 deletions(-)

diff --git a/Ghidra/Processors/ARM/data/languages/ARMTHUMBinstructions.sinc b/Ghidra/Processors/ARM/data/languages/ARMTHUMBinstructions.sinc
index 1b645b2529..a9577dcfd3 100644
--- a/Ghidra/Processors/ARM/data/languages/ARMTHUMBinstructions.sinc
+++ b/Ghidra/Processors/ARM/data/languages/ARMTHUMBinstructions.sinc
@@ -11285,13 +11285,9 @@ Pcrel: [pc,Rm0003]  is Rm0003 & thc0404=1 & pc
 
 :ubfx^ItCond Rd0811,Rn0003,thLsbImm,thWidthMinus1	is TMode=1 & ItCond & op4=0xf3c & Rn0003; thc1515=0 & Rd0811 & thLsbImm & thc0505=0 & thWidthMinus1
 {
-   build ItCond;
-	build thLsbImm;
-	build thWidthMinus1;
-	shift:4 = 31 - (thLsbImm + thWidthMinus1); # thMsbImm represents widthMinus1
-	Rd0811 = Rn0003 << shift;
-	shift = 31 - thWidthMinus1; # msbImm represents widthMinus1
-	Rd0811 = Rd0811 >> shift;
+  build ItCond;
+  tmpmask:4 = ((1:4 << (1 + thWidthMinus1)) - 1);
+  Rd0811 = (Rn0003 >> thLsbImm) & tmpmask;
 }
 
 :udiv^ItCond   Rd0811,Rn0003,Rm0003    is TMode=1 & ItCond & op4=0xfbb & Rn0003; op12=0xf & Rd0811 & thc0407=0xf & Rm0003
diff --git a/Ghidra/Processors/ARM/data/languages/ARMinstructions.sinc b/Ghidra/Processors/ARM/data/languages/ARMinstructions.sinc
index 443f12a7aa..f5cb5d0b43 100644
--- a/Ghidra/Processors/ARM/data/languages/ARMinstructions.sinc
+++ b/Ghidra/Processors/ARM/data/languages/ARMinstructions.sinc
@@ -13384,13 +13384,9 @@ armEndianNess: "BE" is c0031=0xf1010200 { export 1:1; }
 
 :ubfx^COND Rd,Rm,lsbImm,widthMinus1	is $(AMODE) & ARMcond=1 & COND & c2127=0x3f & widthMinus1 & Rd & lsbImm & c0406=5 & Rm
 {
-	build COND;
-	build lsbImm;
-	build widthMinus1;
-	shift:4 = 31 - (lsbImm + widthMinus1);
-	Rd = Rm << shift;
-	shift = 31 - widthMinus1;
-	Rd = Rd >> shift;
+  build COND;
+  tmpmask:4 = ((1:4 << (1 + widthMinus1)) - 1);
+  Rd = (Rm >> lsbImm) & tmpmask;
 }
 
 @endif # VERSION_6T2
-- 
2.45.1

