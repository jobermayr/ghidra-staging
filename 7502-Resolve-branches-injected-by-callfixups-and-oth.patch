From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Chris Feger <christopherfeger@yahoo.com>
Date: Fri, 14 Feb 2025 00:24:24 -0500
Subject: [PATCH] 7502: Resolve branches injected by callfixups and other
 injections

---
 .../Decompiler/src/decompile/cpp/flow.cc      | 56 ++++++++++---------
 1 file changed, 29 insertions(+), 27 deletions(-)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/flow.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/flow.cc
index 2e465aaf82..ff1273abfb 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/flow.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/flow.cc
@@ -776,36 +776,38 @@ void FlowInfo::generateOps(void)
   int4 notreachcnt = 0;
   clearProperties();
   addrlist.push_back(data.getAddress());
-  while(!addrlist.empty())	// Recovering as much as possible except jumptables
-    fallthru();
-  if (hasInject())
-    injectPcode();
   do {
-    while(!tablelist.empty()) {	// For each jumptable found
-      vector<JumpTable *> newTables;
-      recoverJumpTables(newTables, notreached);
-      tablelist.clear();
-      for(int4 i=0;i<newTables.size();++i) {
-	JumpTable *jt = newTables[i];
-	if (jt == (JumpTable *)0) continue;
-
-	int4 num = jt->numEntries();
-	for(int4 i=0;i<num;++i)
-	  newAddress(jt->getIndirectOp(),jt->getAddressByIndex(i));
-	while(!addrlist.empty())	// Try to fill in as much more as possible
-	  fallthru();
-      }
-    }
-    
-    checkContainedCall();	// Check for PIC constructions
-    checkMultistageJumptables();
-    while(notreachcnt < notreached.size()) {
-      tablelist.push_back(notreached[notreachcnt]);
-      notreachcnt += 1;
-    }
+    while(!addrlist.empty())	// Recovering as much as possible except jumptables
+      fallthru();
     if (hasInject())
       injectPcode();
-  } while(!tablelist.empty());	// Inlining or multistage may have added new indirect branches
+    do {
+      while(!tablelist.empty()) {	// For each jumptable found
+        vector<JumpTable *> newTables;
+        recoverJumpTables(newTables, notreached);
+        tablelist.clear();
+        for(int4 i=0;i<newTables.size();++i) {
+	  JumpTable *jt = newTables[i];
+	  if (jt == (JumpTable *)0) continue;
+
+	  int4 num = jt->numEntries();
+	  for(int4 i=0;i<num;++i)
+	    newAddress(jt->getIndirectOp(),jt->getAddressByIndex(i));
+	  while(!addrlist.empty())	// Try to fill in as much more as possible
+	    fallthru();
+        }
+      }
+
+      checkContainedCall();	// Check for PIC constructions
+      checkMultistageJumptables();
+      while(notreachcnt < notreached.size()) {
+        tablelist.push_back(notreached[notreachcnt]);
+        notreachcnt += 1;
+      }
+      if (hasInject())
+        injectPcode();
+    } while(!tablelist.empty());	// Inlining or multistage may have added new indirect branches
+  } while(!addrlist.empty());	// Injections may have added branches
 }
 
 void FlowInfo::generateBlocks(void)
-- 
2.45.1

