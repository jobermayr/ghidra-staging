From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: "Paramjot (PJ) Oberoi" <60081609+pjsoberoi@users.noreply.github.com>
Date: Sat, 7 Oct 2023 21:16:13 -0400
Subject: [PATCH] 5870: 6502: Emulator vs Units Tests Results (Opcodes
 0x00-0x40)

Fix for flags, BRK

6502 Fixes: Flags, stack, ADDR16, JSR, and PLP

6502: Fix popSR(), pushSR(), BRK, CPX, CPY, and RTI

6502: Fixes for PHA, PLA, RTI, RTS. Partial fix for ADC/SBC

6502: Fix JMP

6502: Typo in comment

6502: Fixes for ADC
Overflow flag is still incorrect
---
 .../Processors/6502/data/languages/6502.sinc  | 284 ++++++++++++------
 .../6502/data/languages/melps740.slaspec      |   4 +-
 2 files changed, 190 insertions(+), 98 deletions(-)

diff --git a/Ghidra/Processors/6502/data/languages/6502.sinc b/Ghidra/Processors/6502/data/languages/6502.sinc
index 9154c59e0b..33a1df2506 100644
--- a/Ghidra/Processors/6502/data/languages/6502.sinc
+++ b/Ghidra/Processors/6502/data/languages/6502.sinc
@@ -9,11 +9,18 @@ define space register type=register_space size=1;
 define register offset=0x00  size=1 [ A X Y P ];
 define register offset=0x20 size=2  [ PC      SP   ];
 define register offset=0x20 size=1  [ PCL PCH S SH ];
+
+# P Status Flags
+@define N_FLAG  "P[7,1]" # Negative
+@define V_FLAG  "P[6,1]" # Overflow
 @ifdef MITSUBISHI_MELPS740
-define register offset=0x30 size=1 [ N V T B D I Z C ];	# status bits
-@else
-define register offset=0x30 size=1 [ N V B D I Z C ];	# status bits
+@define T_FLAG  "P[5,1]" # Constant
 @endif
+@define B_FLAG  "P[4,1]" # Break
+@define D_FLAG  "P[3,1]" # Decimal
+@define I_FLAG  "P[2,1]" # Interrupt
+@define Z_FLAG  "P[1,1]" # Zero
+@define C_FLAG  "P[0,1]" # Carry
 
 #TOKENS
 
@@ -37,49 +44,118 @@ define token data (16)
 # PLP and RTI ignore b5 (unused) and b4 (B flag) as neither bit has storage on chip
 # and only exist in stack data.
 macro popSR() {
-	SP = SP + 1;
-	local ccr = *:1 SP;
-	N = ccr[7,1];
-	V = ccr[6,1];
+	S = S + 1;
+	local temp:2 = zext(S) + 0x0100;
+	local ccr = *:1 temp;
+	$(N_FLAG) = ccr[7,1];
+	$(V_FLAG) = ccr[6,1];
 @ifdef MITSUBISHI_MELPS740
-	T = ccr[5,1];
+	$(T_FLAG) = 1; # Constant flag always set to 1 in pop
 @endif
-	B = ccr[4,1];   # consider commenting out this B assignment
-	D = ccr[3,1];
-	I = ccr[2,1];
-	Z = ccr[1,1];
-	C = ccr[0,1];
+	$(B_FLAG) = 0; # Break flag always to 0 in pop
+	$(D_FLAG) = ccr[3,1];
+	$(I_FLAG) = ccr[2,1];
+	$(Z_FLAG) = ccr[1,1];
+	$(C_FLAG) = ccr[0,1];
 }
 
 macro pushSR() {
+	local temp:2 = zext(S) + 0x0100;
 	local ccr:1 = 0xff;  # Break (B) flag and bit 5 set to 1
-	ccr[7,1] = N;
-	ccr[6,1] = V;
+	ccr[7,1] = $(N_FLAG);
+	ccr[6,1] = $(V_FLAG);
 @ifdef MITSUBISHI_MELPS740
-	ccr[5,1] = T;
+	ccr[5,1] = 1; # Constant flag always set to 1 in push
 @endif
-	# ccr[4,1] = B;  # always set B flag to 1
-	ccr[3,1] = D;
-	ccr[2,1] = I;
-	ccr[1,1] = Z;
-	ccr[0,1] = C;
-	*:1 (SP) = ccr;
+	ccr[4,1] = 1; # Break flag always set to 1 in push
+	ccr[3,1] = $(D_FLAG);
+	ccr[2,1] = $(I_FLAG);
+	ccr[1,1] = $(Z_FLAG);
+	ccr[0,1] = $(C_FLAG);
+	*:1 (temp) = ccr;
 	SP = SP -1;
 }
 
+macro stackPush(value) {
+	local temp:2 = zext(S) + 0x0100;
+	*:1 (temp) = value:1 & 0xff;
+	S = S - 1;
+}
+
+macro stackPop(value) {
+	S = S + 1;
+	local temp:2 = zext(S) + 0x0100;
+	value = *:1 (temp);
+}
+
 macro resultFlags(value) {
-	Z = (value == 0);
-	N = (value s< 0);
+	$(Z_FLAG) = (value == 0);
+	$(N_FLAG) = (value s< 0);
 }
 
 macro adc(op1) {
-    local result:2 = zext(A) + zext(op1) + zext(C);
-    resultFlags(result:1);
-    V = (~(A ^ op1) & (A ^ result:1) & 0x80) != 0;
-    C = (result & 0x100) != 0;
-    A = result:1;
+
+	local result:2 = zext(A) + zext(op1) + zext($(C_FLAG));
+
+	if($(D_FLAG) == 0) goto <NOT_DECIMAL>;
+#<DECIMAL>
+
+	local AL;
+	local AH;
+
+	AL = (A & 0x0F) + (op1 & 0x0F) + $(C_FLAG); # 10
+	AH = (A >> 4) + (op1 >> 4) + (AL > 15); # 20
+
+	local add_6_al = (AL > 9);
+	AL = AL + zext(add_6_al * 6); # AL = 16
+	result = result + zext(add_6_al * 6);
+
+	$(Z_FLAG) = ((A + op1 + $(C_FLAG)) & 0xFF) == 0;
+	$(N_FLAG) = (AH & 0x8) != 0;
+
+	# TODO: the overflow is incorrect
+	$(V_FLAG) = !(((A ^ op1) & 0x80) && ((A ^ (result:1)) & 0x80));
+
+	local add_6_ah = (AH > 9);
+	AH = AH + zext(add_6_ah * 6); # 26
+	#Y = AH;
+
+	$(C_FLAG) = (AH > 15);
+	A = ((AH << 4) | AL);
+	#Y = AL;
+	goto <END>;
+
+<NOT_DECIMAL>
+
+	$(Z_FLAG) = (result:1 & 0xFF) == 0;
+
+	$(N_FLAG) = (result & 0x80) != 0;
+	$(V_FLAG) = (~(A ^ op1) & (A ^ result:1) & 0x80) != 0;
+	$(C_FLAG) = (result & 0xFF00) != 0;
+	A = (result:1 & 0xFF);
+<END>
 }
 
+# reads two bytes from the specified address
+# if the address straddles a page boundary
+# Concrete example:
+# * JMP ($A0FD) constructs target address as low byte = $A0FD's value and high byte = $A0FF's value, however...
+# * JMP ($A0FF) constructs target address as low byte = $A0FF's value and high byte = $A000's value.
+macro read_page_safe(addr, value) {
+
+    local addr_high:1 = addr(1);
+    local addr_low:1 = addr(0);
+    local temp_addr:2 = (zext(addr_high) << 8) | zext(addr_low);
+
+    local result_low:1 = *:1 temp_addr;
+
+    addr_low = addr_low + 1;
+    temp_addr = (zext(addr_high) << 8) | zext(addr_low);
+    local result_high:1 = *:1 temp_addr;
+
+    value = (zext(result_high) << 8) | zext(result_low);
+
+}
 
 ################################################################
 # Pseudo Instructions
@@ -104,26 +180,26 @@ OP1: imm16,X    is bbb=7 & X; imm16		{ tmp:2 = imm16 + zext(X); export *:1 tmp;
 OP1: imm16,Y    is bbb=6 & Y; imm16		{ tmp:2 = imm16 + zext(Y); export *:1 tmp; }
 # Indirect X
 OP1: (imm8,X)   is bbb=0 & X; imm8		{
-    # When the first (low) byte of address to load is 0xff,
-    # the second (high) byte to load is at 0x0000, not 0x0100
-    addr8_lo:1 = imm8 + X;
-    addr8_hi:1 = addr8_lo + 1;
-    addr16_lo:2 = zext(addr8_lo);
-    addr16_hi:2 = zext(addr8_hi);
-    tmp:2 = zext(*:1 addr16_hi) << 8 | zext(*:1 addr16_lo);
-    export *:1 tmp;
+	# When the first (low) byte of address to load is 0xff,
+	# the second (high) byte to load is at 0x0000, not 0x0100
+	addr8_lo:1 = imm8 + X;
+	addr8_hi:1 = addr8_lo + 1;
+	addr16_lo:2 = zext(addr8_lo);
+	addr16_hi:2 = zext(addr8_hi);
+	tmp:2 = zext(*:1 addr16_hi) << 8 | zext(*:1 addr16_lo);
+	export *:1 tmp;
 }
 # Indirect Y
 OP1: (imm8),Y   is bbb=4 & Y; imm8		{
-    # When the first (low) byte of address to load is 0xff,
-    # the second (high) byte to load is at 0x0000, not 0x0100
-    addr8_lo:1 = imm8;
-    addr8_hi:1 = addr8_lo + 1;
-    addr16_lo:2 = zext(addr8_lo);
-    addr16_hi:2 = zext(addr8_hi);
-    tmp:2 = zext(*:1 addr16_hi) << 8 | zext(*:1 addr16_lo);
-    tmp = tmp + zext(Y);
-    export *:1 tmp;
+	# When the first (low) byte of address to load is 0xff,
+	# the second (high) byte to load is at 0x0000, not 0x0100
+	addr8_lo:1 = imm8;
+	addr8_hi:1 = addr8_lo + 1;
+	addr16_lo:2 = zext(addr8_lo);
+	addr16_hi:2 = zext(addr8_hi);
+	tmp:2 = zext(*:1 addr16_hi) << 8 | zext(*:1 addr16_lo);
+	tmp = tmp + zext(Y);
+	export *:1 tmp;
 }
 
 # Immediate
@@ -147,7 +223,7 @@ OP2LD: imm16,Y  is bbb=7 & Y; imm16		{ tmp:2 = imm16 + zext(Y); export *:1 tmp;
 
 
 ADDR8:  imm8    is imm8		{ export *:1 imm8; }
-ADDR16: imm16   is imm16   	{ export *:1 imm16; }
+ADDR16: imm16   is imm16   	{ export *:2 imm16; }
 @if 6502_VERSION == "CMOS"
 ADDRI:  (imm16)   is imm16    { tmp:2 = imm16; export *:2 tmp; }
 @else
@@ -182,7 +258,7 @@ ADDRI:  (imm16)   is imm16    {
 :ASL OP2     is (op=0x06 | op=0x0A | op=0x0E | op=0x16 | op=0x1E) ... & OP2
 {
 	local tmp = OP2;
-	C = tmp >> 7;
+	$(C_FLAG) = tmp >> 7;
 	tmp = tmp << 1;
 	OP2 = tmp;
 	resultFlags(tmp);
@@ -190,80 +266,81 @@ ADDRI:  (imm16)   is imm16    {
 
 :BCC  REL			is op=0x90; REL
 {
-	if (C == 0) goto REL;
+	if ($(C_FLAG) == 0) goto REL;
 }
 
 :BCS  REL			is op=0xB0; REL
 {
-	if (C) goto REL;
+	if ($(C_FLAG)) goto REL;
 }
 
 :BEQ  REL			is op=0xF0; REL
 {
-	if (Z) goto REL;
+	if ($(Z_FLAG)) goto REL;
 }
 
 :BIT OP2     is (op=0x24 | op=0x2C) ... & OP2
 {
-	N = (OP2 & 0x80) == 0x80;
-	V = (OP2 & 0x40) == 0x40;
+	$(N_FLAG) = (OP2 & 0x80) == 0x80;
+	$(V_FLAG) = (OP2 & 0x40) == 0x40;
 	local value = A & OP2;
-	Z = (value == 0);
+	$(Z_FLAG) = (value == 0);
 }
 
 :BMI  REL			is op=0x30; REL
 {
-	if (N) goto REL;
+	if ($(N_FLAG)) goto REL;
 }
 
 :BNE  REL			is op=0xD0; REL
 {
-	if (Z == 0) goto REL;
+	if ($(Z_FLAG) == 0) goto REL;
 }
 
 :BPL  REL			is op=0x10; REL
 {
-	if (N == 0) goto REL;
+	if ($(N_FLAG) == 0) goto REL;
 }
 
 :BRK   is op=0x00
 {
-	*:2 (SP - 1) = inst_next;
-	SP = SP - 2;
+	local temp:2 = inst_next + 1;
+	stackPush((temp >> 8) & 0xFF);
+	stackPush(temp & 0xFF);
 	pushSR();
-	I = 1;
+	$(I_FLAG) = 1;
 	local target:2 = 0xFFFE;
 	goto [*:2 target];
 }
 
 :BVC  REL			is op=0x50; REL
 {
-	if (V == 0) goto REL;
+	if ($(V_FLAG) == 0) goto REL;
 }
 
 :BVS  REL			is op=0x70; REL
 {
-	if (V) goto REL;
+	if ($(V_FLAG)) goto REL;
 }
 
 :CLC     is op=0x18
 {
-	C = 0;
+	$(C_FLAG) = 0;
 }
 
 :CLD     is op=0xD8
 {
-	D = 0;
+	$(D_FLAG) = 0;
 }
 
 :CLI     is op=0x58
 {
-	I = 0;
+	$(I_FLAG) = 0;
 }
 
 :CLV     is op=0xB8
 {
-	V = 0;
+	$(V_FLAG) = 0;
 }
 
 :CMP OP1     is (cc=1 & aaa=6) ... & OP1
@@ -271,7 +348,7 @@ ADDRI:  (imm16)   is imm16    {
 	local op1 = OP1;
 	local tmp = A - op1;
 	resultFlags(tmp);
-	C = (A >= op1);
+	$(C_FLAG) = (A >= op1);
 }
 
 :CPX OP2     is (op=0xE0 | op=0xE4 | op=0xEC) ... & OP2
@@ -279,7 +356,7 @@ ADDRI:  (imm16)   is imm16    {
 	local op1 = OP2;
 	local tmp = X - op1;
 	resultFlags(tmp);
-	C = (X >= op1);
+	$(C_FLAG) = (X >= op1);
 }
 
 :CPY OP2     is (op=0xC0 | op=0xC4 | op=0xCC) ... & OP2
@@ -287,7 +364,7 @@ ADDRI:  (imm16)   is imm16    {
 	local op1 = OP2;
 	local tmp = Y - op1;
 	resultFlags(tmp);
-	C = (Y >= op1);
+	$(C_FLAG) = (Y >= op1);
 }
 
 :DEC OP2     is (op=0xC6 | op=0xCE | op=0xD6 | op=0xDE) ... & OP2
@@ -341,17 +418,20 @@ ADDRI:  (imm16)   is imm16    {
 	goto ADDR16;
 }
 
-:JMP ADDRI     is (op=0x6c); ADDRI
+:JMP imm16     is (op=0x6c); imm16
 {
-	goto [ADDRI];
+	local addr:2 = imm16;
+	local dest:2 = 0;
+
+	read_page_safe(addr, dest);
+	goto [dest];
 }
 
 :JSR   ADDR16    is op=0x20; ADDR16
 {
-	# Value stored is actually the address before the location the program
-	# will eventually return to. Thus, the effective return address is PC + 1.
-	*:2 (SP-1) = inst_next - 1;
-	SP=SP-2;
+	local temp:2 = inst_next - 1;
+	stackPush((temp >> 8) & 0xFF);
+	stackPush(temp & 0xFF);
 	call ADDR16;
 }
 
@@ -376,11 +456,11 @@ ADDRI:  (imm16)   is imm16    {
 :LSR OP2     is (op=0x46 | op=0x4A | op=0x4E | op=0x56 | op=0x5E) ... & OP2
 {
 	local tmp = OP2;
-	C = tmp & 1;
+	$(C_FLAG) = tmp & 1;
 	tmp = tmp >> 1;
 	OP2 = tmp;
-	Z = (tmp == 0);
-	N = 0;
+	$(Z_FLAG) = (tmp == 0);
+	$(N_FLAG) = 0;
 }
 
 :NOP     is op=0xEA
@@ -400,27 +480,31 @@ ADDRI:  (imm16)   is imm16    {
 
 :PLP     is op=0x28
 {
-	popSR();
+	stackPop(P);
+	$(B_FLAG) = 0;
+@ifdef MITSUBISHI_MELPS740
+	$(T_FLAG) = 1;
+@endif
 }
 
 :PHA     is op=0x48
 {
 	*:1 (SP) = A;
-	SP = SP - 1;
+	S = S - 1;
 }
 
 :PLA     is op=0x68
 {
-	SP = SP + 1;
+	S = S + 1;
 	A = *:1 (SP);
 	resultFlags(A);
 }
 
 :ROL OP2     is (op=0x26 | op=0x2A | op=0x2E | op=0x36 | op=0x3E) ... & OP2
 {
-	local tmpC = C;
+	local tmpC = $(C_FLAG);
 	local op2 = OP2;
-	C = op2 >> 7;
+	$(C_FLAG) = op2 >> 7;
 	local result = op2 << 1;
 	result = result | tmpC;
 	OP2 = result;
@@ -429,9 +513,9 @@ ADDRI:  (imm16)   is imm16    {
 
 :ROR OP2     is (op=0x66 | op=0x6A | op=0x6E | op=0x76 | op=0x7E) ... & OP2
 {
-	local tmpC = C << 7;
+	local tmpC = $(C_FLAG) << 7;
 	local tmp = OP2;
-	C = tmp & 1;
+	$(C_FLAG) = tmp & 1;
 	tmp = tmp >> 1;
 	tmp = tmp | tmpC;
 	OP2 = tmp;
@@ -442,20 +526,28 @@ ADDRI:  (imm16)   is imm16    {
 {
 	popSR();
 
-    SP = SP+1;
-	tmp:2 = *:2 SP;
-	SP = SP+1;
+	S = S + 1;
+	local temp:2 = zext(S) + 0x0100;
+	local dest:2 = zext(*:1 temp);
+	S = S + 1;
+	temp = zext(S) + 0x0100;
+	dest = dest + (zext(*:1 temp) << 8);
 
-	return [tmp];
+	return [dest];
 }
 
 :RTS      is op=0x60
 {
-	SP = SP+1;
-	tmp:2 = *:2 SP;
-	SP = SP+1;
+	S = S + 1;
+	local temp:2 = zext(S) + 0x0100;
+	local dest:2 = zext(*:1 temp);
+	S = S + 1;
+	temp = zext(S) + 0x0100;
+	dest = dest + (zext(*:1 temp) << 8);
+
+	dest = dest + 1;
 
-	return [tmp + 1];
+	return [dest];
 }
 
 :SBC OP1     is (cc=1 & aaa=7) ... & OP1
@@ -465,17 +557,17 @@ ADDRI:  (imm16)   is imm16    {
 
 :SEC     is op=0x38
 {
-	C = 1;
+	$(C_FLAG) = 1;
 }
 
 :SED     is op=0xF8
 {
-	D = 1;
+	$(D_FLAG) = 1;
 }
 
 :SEI     is op=0x78
 {
-	I = 1;
+	$(I_FLAG) = 1;
 }
 
 :STA OP1     is (cc=1 & aaa=4) ... & OP1
diff --git a/Ghidra/Processors/6502/data/languages/melps740.slaspec b/Ghidra/Processors/6502/data/languages/melps740.slaspec
index 135d6e5cc7..e6db520cf2 100644
--- a/Ghidra/Processors/6502/data/languages/melps740.slaspec
+++ b/Ghidra/Processors/6502/data/languages/melps740.slaspec
@@ -108,7 +108,7 @@ define pcodeop __cpu_stop;
 # CLT => Clear T status bit
 :CLT                            is (op=0x12)
 {
-    T = 0;
+    $(T_FLAG) = 0;
 }
 
 # COM $zz  => Complement value in memory location (1's complement, bitwise invert, XOR 0xFF)
@@ -217,7 +217,7 @@ specOff: "\\"^reloc             is imm8 [ reloc = 0xff00 + imm8; ] { export *:2
 # SET  => set T status bit
 :SET                            is (op=0x32)
 {
-    T = 1;
+    $(T_FLAG) = 1;
 }
 
 # STP  => Stop?
-- 
2.44.0

