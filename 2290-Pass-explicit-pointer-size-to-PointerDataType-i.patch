From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Florian Magin <fmagin@users.noreply.github.com>
Date: Sun, 20 Sep 2020 00:16:14 +0200
Subject: [PATCH] 2290: Pass explicit pointer size to PointerDataType in ObjC2
 structure generation

Pass explicit pointer size to PointerDataType
---
 .../format/objc2/ObjectiveC2_Category.java    | 14 +++++------
 .../bin/format/objc2/ObjectiveC2_Class.java   |  8 +++---
 .../bin/format/objc2/ObjectiveC2_ClassRW.java | 10 ++++----
 .../objc2/ObjectiveC2_InstanceVariable.java   | 12 ++++-----
 .../objc2/ObjectiveC2_MessageReference.java   |  4 +--
 .../bin/format/objc2/ObjectiveC2_Method.java  |  6 ++---
 .../format/objc2/ObjectiveC2_Property.java    |  4 +--
 .../format/objc2/ObjectiveC2_Protocol.java    | 14 +++++------
 .../objc2/ObjectiveC2_ProtocolList.java       |  2 +-
 ...ObjectiveC2_DecompilerMessageAnalyzer.java | 25 +++++++++++--------
 10 files changed, 51 insertions(+), 48 deletions(-)

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Category.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Category.java
index f7dc4877cb..f4c0ad4aea 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Category.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Category.java
@@ -153,19 +153,19 @@ public class ObjectiveC2_Category implements StructConverter {
 
 		Structure struct = new StructureDataType(buffer.toString(), 0);
 
-		struct.add(new PointerDataType(STRING), _state.pointerSize, "name", null);
+		struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "name", null);
 
 		if (cls == null) {
-			struct.add(new PointerDataType(VOID), _state.pointerSize, "cls", null);
+			struct.add(new PointerDataType(VOID, _state.pointerSize), _state.pointerSize, "cls", null);
 		}
 		else {
-			struct.add(new PointerDataType(cls.toDataType()), _state.pointerSize, "cls", null);
+			struct.add(new PointerDataType(cls.toDataType(), _state.pointerSize), _state.pointerSize, "cls", null);
 		}
 
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),         _state.pointerSize, "instanceMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),         _state.pointerSize, "classMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_ProtocolList.toGenericDataType(_state)), _state.pointerSize, "protocols", null);
-		struct.add(new PointerDataType(ObjectiveC2_PropertyList.toGenericDataType()),       _state.pointerSize, "instanceProperties", null);
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize), _state.pointerSize, "instanceMethods", null);
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize), _state.pointerSize, "classMethods", null);
+		struct.add(new PointerDataType(ObjectiveC2_ProtocolList.toGenericDataType(_state), _state.pointerSize), _state.pointerSize, "protocols", null);
+		struct.add(new PointerDataType(ObjectiveC2_PropertyList.toGenericDataType(), _state.pointerSize), _state.pointerSize, "instanceProperties", null);
 
 		struct.setCategoryPath(ObjectiveC2_Constants.CATEGORY_PATH);
 		return struct;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Class.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Class.java
index f51ef59801..16987fd87f 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Class.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Class.java
@@ -194,17 +194,17 @@ public class ObjectiveC2_Class implements StructConverter {
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		Structure struct = new StructureDataType(NAME, 0);
 
-		struct.add(new PointerDataType(struct), _state.pointerSize, "isa", null);
-		struct.add(new PointerDataType(struct), _state.pointerSize, "superclass", null);
+		struct.add(new PointerDataType(struct, _state.pointerSize), _state.pointerSize, "isa", null);
+		struct.add(new PointerDataType(struct, _state.pointerSize), _state.pointerSize, "superclass", null);
 		struct.add(cache.toDataType(), "cache", null);
 		struct.add(vtable.toDataType(), "vtable", null);
 
 		if (data == null) {
 			ObjectiveC2_ClassRW fakeData = new ObjectiveC2_ClassRW();
-			struct.add(new PointerDataType(fakeData.toDataType()), _state.pointerSize, "data", null);
+			struct.add(new PointerDataType(fakeData.toDataType(), _state.pointerSize), _state.pointerSize, "data", null);
 		}
 		else {
-			struct.add(new PointerDataType(data.toDataType()), _state.pointerSize, "data", null);
+			struct.add(new PointerDataType(data.toDataType(), _state.pointerSize), _state.pointerSize, "data", null);
 		}
 
 		struct.setCategoryPath(ObjectiveC2_Constants.CATEGORY_PATH);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ClassRW.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ClassRW.java
index 2c2c4d48fb..0c4e652150 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ClassRW.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ClassRW.java
@@ -176,10 +176,10 @@ public class ObjectiveC2_ClassRW implements StructConverter {
 			struct.add(QWORD, "instanceSize", null);
 		}
 
-		struct.add(new PointerDataType(ASCII),                                                _state.pointerSize, "name", null);
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),           _state.pointerSize, "baseMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_ProtocolList.toGenericDataType(_state)),   _state.pointerSize, "baseProtocols", null);
-		struct.add(new PointerDataType(ObjectiveC2_InstanceVariableList.toGenericDataType()), _state.pointerSize, "ivars", null);
+		struct.add(new PointerDataType(ASCII, _state.pointerSize), _state.pointerSize, "name", null);
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize), _state.pointerSize, "baseMethods", null);
+		struct.add(new PointerDataType(ObjectiveC2_ProtocolList.toGenericDataType(_state), _state.pointerSize), _state.pointerSize, "baseProtocols", null);
+		struct.add(new PointerDataType(ObjectiveC2_InstanceVariableList.toGenericDataType(), _state.pointerSize), _state.pointerSize, "ivars", null);
 
 		if (_state.is32bit) {
 			struct.add(DWORD, "weakIvarLayout", null);
@@ -188,7 +188,7 @@ public class ObjectiveC2_ClassRW implements StructConverter {
 			struct.add(QWORD, "weakIvarLayout", null);
 		}
 
-		struct.add(new PointerDataType(ObjectiveC2_PropertyList.toGenericDataType()), _state.pointerSize, "baseProperties", null);
+		struct.add(new PointerDataType(ObjectiveC2_PropertyList.toGenericDataType(), _state.pointerSize), _state.pointerSize, "baseProperties", null);
 
 		struct.setCategoryPath(ObjectiveC2_Constants.CATEGORY_PATH);
 		return struct;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_InstanceVariable.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_InstanceVariable.java
index e64d819817..bd7cfc8b6e 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_InstanceVariable.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_InstanceVariable.java
@@ -83,14 +83,14 @@ public class ObjectiveC2_InstanceVariable implements StructConverter {
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		Structure struct = new StructureDataType("ivar_t", 0);
 		if (_state.is32bit) {
-			struct.add(new PointerDataType(DWORD), _state.pointerSize, "offset", null);
-			struct.add(new PointerDataType(STRING), _state.pointerSize, "name", null);
-			struct.add(new PointerDataType(STRING), _state.pointerSize, "type", null);
+			struct.add(new PointerDataType(DWORD, _state.pointerSize), _state.pointerSize, "offset", null);
+			struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "name", null);
+			struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "type", null);
 		}
 		else {
-			struct.add(new PointerDataType(QWORD), _state.pointerSize, "offset", null);
-			struct.add(new PointerDataType(STRING), _state.pointerSize, "name", null);
-			struct.add(new PointerDataType(STRING), _state.pointerSize, "type", null);
+			struct.add(new PointerDataType(QWORD, _state.pointerSize), _state.pointerSize, "offset", null);
+			struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "name", null);
+			struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "type", null);
 		}
 		struct.add(DWORD, "alignment", null);
 		struct.add(DWORD, "size", null);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_MessageReference.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_MessageReference.java
index 2c6e16a3d6..7d9f614040 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_MessageReference.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_MessageReference.java
@@ -63,8 +63,8 @@ public class ObjectiveC2_MessageReference implements StructConverter {
 
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		Structure struct = new StructureDataType(NAME, 0);
-		struct.add(new PointerDataType(VOID),  _state.pointerSize, "imp", null);
-		struct.add(new PointerDataType(ASCII), _state.pointerSize, "sel", null);
+		struct.add(new PointerDataType(VOID, _state.pointerSize), _state.pointerSize, "imp", null);
+		struct.add(new PointerDataType(ASCII, _state.pointerSize), _state.pointerSize, "sel", null);
 		return struct;
 	}
 }
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Method.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Method.java
index 91a6980a36..3869f8573a 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Method.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Method.java
@@ -116,9 +116,9 @@ public class ObjectiveC2_Method extends ObjectiveC_Method {
 			struct.add(new PointerTypedef(null, VOID, 4, null, REL), "imp", comment);
 		}
 		else {
-			struct.add(new PointerDataType(STRING), _state.pointerSize, "name", null);
-			struct.add(new PointerDataType(STRING), _state.pointerSize, "types", null);
-			struct.add(new PointerDataType(VOID), _state.pointerSize, "imp", null);
+			struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "name", null);
+			struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "types", null);
+			struct.add(new PointerDataType(VOID, _state.pointerSize), _state.pointerSize, "imp", null);
 		}
 		struct.setCategoryPath(ObjectiveC2_Constants.CATEGORY_PATH);
 		return struct;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Property.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Property.java
index 5fd786d334..e03d1d269d 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Property.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Property.java
@@ -52,8 +52,8 @@ public class ObjectiveC2_Property implements StructConverter {
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		Structure struct = new StructureDataType("objc_property", 0);
 
-		struct.add(new PointerDataType(ASCII), _state.pointerSize, "name", null);
-		struct.add(new PointerDataType(ASCII), _state.pointerSize, "name", null);
+		struct.add(new PointerDataType(ASCII, _state.pointerSize), _state.pointerSize, "name", null);
+		struct.add(new PointerDataType(ASCII, _state.pointerSize), _state.pointerSize, "name", null);
 
 		struct.setCategoryPath(ObjectiveC2_Constants.CATEGORY_PATH);
 		return struct;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Protocol.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Protocol.java
index bd23e9edbf..8048a7e4eb 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Protocol.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Protocol.java
@@ -191,18 +191,18 @@ public class ObjectiveC2_Protocol implements StructConverter {
 			struct.add(QWORD, "isa", null);
 		}
 
-		struct.add(new PointerDataType(STRING), _state.pointerSize, "name", null);
-		struct.add(new PointerDataType(ObjectiveC2_ProtocolList.toGenericDataType(_state)),
+		struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "name", null);
+		struct.add(new PointerDataType(ObjectiveC2_ProtocolList.toGenericDataType(_state), _state.pointerSize),
 			_state.pointerSize, "protocols", null);
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize),
 			_state.pointerSize, "instanceMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize),
 			_state.pointerSize, "classMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize),
 			_state.pointerSize, "optionalInstanceMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize),
 			_state.pointerSize, "optionalClassMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_PropertyList.toGenericDataType()),
+		struct.add(new PointerDataType(ObjectiveC2_PropertyList.toGenericDataType(), _state.pointerSize),
 			_state.pointerSize, "instanceProperties", null);
 
 		if (_state.is32bit) {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ProtocolList.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ProtocolList.java
index c29dcef40a..31329f50bd 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ProtocolList.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ProtocolList.java
@@ -89,7 +89,7 @@ public class ObjectiveC2_ProtocolList implements StructConverter {
 
 		for (int i = 0 ; i < protocols.size() ; ++i) {
 			DataType dataType = protocols.get(i).toDataType();
-			struct.add(new PointerDataType(dataType), _state.pointerSize, "protocol"+i, null);
+			struct.add(new PointerDataType(dataType, _state.pointerSize), _state.pointerSize, "protocol"+i, null);
 		}
 
 		struct.setCategoryPath(ObjectiveC2_Constants.CATEGORY_PATH);
diff --git a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/analysis/ObjectiveC2_DecompilerMessageAnalyzer.java b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/analysis/ObjectiveC2_DecompilerMessageAnalyzer.java
index 9cbe37e861..47c36135bd 100644
--- a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/analysis/ObjectiveC2_DecompilerMessageAnalyzer.java
+++ b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/analysis/ObjectiveC2_DecompilerMessageAnalyzer.java
@@ -488,37 +488,40 @@ public class ObjectiveC2_DecompilerMessageAnalyzer extends AbstractAnalyzer {
 
 	private String getNameFromData(Program program, Varnode input, boolean isClass,
 			boolean isMethod, Address address, Data nameData) {
-		long offset;
-		String name;
 		if (!nameData.isDefined()) {
-			name = getLabelFromUndefinedData(program, address);
+			return getLabelFromUndefinedData(program, address);
 		}
 		else {
 			Object dataValue = nameData.getValue();
 			if (dataValue instanceof String) {
-				name = (String) dataValue;
+				String name = (String) dataValue;
 				if (!isClass && !isMethod) {
-					name = "\"" + name + "\"";
+					return "\"" + name + "\"";
+				}
+				else {
+					return name;
 				}
 			}
 			else if (dataValue instanceof Address) {
-				offset = ((Address) dataValue).getOffset();
+				long offset = ((Address) dataValue).getOffset();
 				if (offset == address.getOffset()) {
 					// Self-referencing pointer
-					name = null;
+					return null;
 				}
 				else {
-					name = getNameFromOffset(program, offset, input, isClass, isMethod);
+					return getNameFromOffset(program, offset, input, isClass, isMethod);
 				}
 			}
 			else {
-				name = getClassName(program, address);
+				String name = getClassName(program, address);
 				if (name == null) {
-					name = getValueAtAddress(program, address);
+					return getValueAtAddress(program, address);
+				}
+				else {
+					return name;
 				}
 			}
 		}
-		return name;
 	}
 
 	private String getDataName(Program program, Address address) {
-- 
2.43.0

