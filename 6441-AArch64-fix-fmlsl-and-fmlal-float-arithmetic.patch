From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Sleigh-InSPECtor <sleighinspector@outlook.com>
Date: Fri, 19 Apr 2024 00:57:28 +0930
Subject: [PATCH] 6441: AArch64: fix fmlsl and fmlal float arithmetic

AA64: fix fmlsl and fmlal float arithmetic
---
 .../AARCH64/data/languages/AARCH64neon.sinc   | 126 +++++++++---------
 1 file changed, 63 insertions(+), 63 deletions(-)

diff --git a/Ghidra/Processors/AARCH64/data/languages/AARCH64neon.sinc b/Ghidra/Processors/AARCH64/data/languages/AARCH64neon.sinc
index b73058f7d2..f063193923 100644
--- a/Ghidra/Processors/AARCH64/data/languages/AARCH64neon.sinc
+++ b/Ghidra/Processors/AARCH64/data/languages/AARCH64neon.sinc
@@ -8505,9 +8505,9 @@ is b_31=0 & b_30=0 & b_2329=0b0011111 & b_22=0 & b_1215=0b0000 & b_10=0 & Re_VPR
 	# simd resize TMPD3 = float2float(TMPS2) (lane size 2 to 4)
 	TMPD3[0,32] = float2float(TMPS2[0,16]);
 	TMPD3[32,32] = float2float(TMPS2[16,16]);
-	# simd infix Rd_VPR64.2S = Rd_VPR64.2S + TMPD3 on lane size 4
-	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] + TMPD3[0,32];
-	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] + TMPD3[32,32];
+	# simd infix Rd_VPR64.2S = Rd_VPR64.2S f+ TMPD3 on lane size 4
+	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] f+ TMPD3[0,32];
+	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] f+ TMPD3[32,32];
 	zext_zd(Zd); # zero upper 24 bytes of Zd
 }
 
@@ -8534,11 +8534,11 @@ is b_31=0 & b_30=1 & b_2329=0b0011111 & b_22=0 & b_1215=0b0000 & b_10=0 & Re_VPR
 	TMPQ3[32,32] = float2float(TMPD2[16,16]);
 	TMPQ3[64,32] = float2float(TMPD2[32,16]);
 	TMPQ3[96,32] = float2float(TMPD2[48,16]);
-	# simd infix Rd_VPR128.4S = Rd_VPR128.4S + TMPQ3 on lane size 4
-	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] + TMPQ3[0,32];
-	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] + TMPQ3[32,32];
-	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] + TMPQ3[64,32];
-	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] + TMPQ3[96,32];
+	# simd infix Rd_VPR128.4S = Rd_VPR128.4S f+ TMPQ3 on lane size 4
+	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] f+ TMPQ3[0,32];
+	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] f+ TMPQ3[32,32];
+	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] f+ TMPQ3[64,32];
+	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] f+ TMPQ3[96,32];
 	zext_zq(Zd); # zero upper 16 bytes of Zd
 }
 
@@ -8561,9 +8561,9 @@ is b_31=0 & b_30=0 & b_2329=0b1011111 & b_22=0 & b_1215=0b1000 & b_10=0 & Re_VPR
 	# simd resize TMPD3 = float2float(TMPS2) (lane size 2 to 4)
 	TMPD3[0,32] = float2float(TMPS2[0,16]);
 	TMPD3[32,32] = float2float(TMPS2[16,16]);
-	# simd infix Rd_VPR64.2S = Rd_VPR64.2S + TMPD3 on lane size 4
-	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] + TMPD3[0,32];
-	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] + TMPD3[32,32];
+	# simd infix Rd_VPR64.2S = Rd_VPR64.2S f+ TMPD3 on lane size 4
+	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] f+ TMPD3[0,32];
+	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] f+ TMPD3[32,32];
 	zext_zd(Zd); # zero upper 24 bytes of Zd
 }
 
@@ -8590,11 +8590,11 @@ is b_31=0 & b_30=1 & b_2329=0b1011111 & b_22=0 & b_1215=0b1000 & b_10=0 & Re_VPR
 	TMPQ3[32,32] = float2float(TMPD2[16,16]);
 	TMPQ3[64,32] = float2float(TMPD2[32,16]);
 	TMPQ3[96,32] = float2float(TMPD2[48,16]);
-	# simd infix Rd_VPR128.4S = Rd_VPR128.4S + TMPQ3 on lane size 4
-	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] + TMPQ3[0,32];
-	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] + TMPQ3[32,32];
-	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] + TMPQ3[64,32];
-	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] + TMPQ3[96,32];
+	# simd infix Rd_VPR128.4S = Rd_VPR128.4S f+ TMPQ3 on lane size 4
+	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] f+ TMPQ3[0,32];
+	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] f+ TMPQ3[32,32];
+	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] f+ TMPQ3[64,32];
+	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] f+ TMPQ3[96,32];
 	zext_zq(Zd); # zero upper 16 bytes of Zd
 }
 
@@ -8616,9 +8616,9 @@ is b_31=0 & b_30=0 & b_2329=0b0011100 & b_22=0 & b_21=1 & b_1015=0b111011 & Rd_V
 	# simd resize TMPD4 = float2float(TMPS3) (lane size 2 to 4)
 	TMPD4[0,32] = float2float(TMPS3[0,16]);
 	TMPD4[32,32] = float2float(TMPS3[16,16]);
-	# simd infix Rd_VPR64.2S = Rd_VPR64.2S + TMPD4 on lane size 4
-	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] + TMPD4[0,32];
-	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] + TMPD4[32,32];
+	# simd infix Rd_VPR64.2S = Rd_VPR64.2S f+ TMPD4 on lane size 4
+	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] f+ TMPD4[0,32];
+	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] f+ TMPD4[32,32];
 	zext_zd(Zd); # zero upper 24 bytes of Zd
 }
 
@@ -8644,11 +8644,11 @@ is b_31=0 & b_30=1 & b_2329=0b0011100 & b_22=0 & b_21=1 & b_1015=0b111011 & Rd_V
 	TMPQ4[32,32] = float2float(TMPD3[16,16]);
 	TMPQ4[64,32] = float2float(TMPD3[32,16]);
 	TMPQ4[96,32] = float2float(TMPD3[48,16]);
-	# simd infix Rd_VPR128.4S = Rd_VPR128.4S + TMPQ4 on lane size 4
-	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] + TMPQ4[0,32];
-	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] + TMPQ4[32,32];
-	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] + TMPQ4[64,32];
-	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] + TMPQ4[96,32];
+	# simd infix Rd_VPR128.4S = Rd_VPR128.4S f+ TMPQ4 on lane size 4
+	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] f+ TMPQ4[0,32];
+	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] f+ TMPQ4[32,32];
+	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] f+ TMPQ4[64,32];
+	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] f+ TMPQ4[96,32];
 	zext_zq(Zd); # zero upper 16 bytes of Zd
 }
 
@@ -8670,9 +8670,9 @@ is b_31=0 & b_30=0 & b_2329=0b1011100 & b_22=0 & b_21=1 & b_1015=0b110011 & Rd_V
 	# simd resize TMPD4 = float2float(TMPS3) (lane size 2 to 4)
 	TMPD4[0,32] = float2float(TMPS3[0,16]);
 	TMPD4[32,32] = float2float(TMPS3[16,16]);
-	# simd infix Rd_VPR64.2S = Rd_VPR64.2S + TMPD4 on lane size 4
-	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] + TMPD4[0,32];
-	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] + TMPD4[32,32];
+	# simd infix Rd_VPR64.2S = Rd_VPR64.2S f+ TMPD4 on lane size 4
+	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] f+ TMPD4[0,32];
+	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] f+ TMPD4[32,32];
 	zext_zd(Zd); # zero upper 24 bytes of Zd
 }
 
@@ -8697,11 +8697,11 @@ is b_31=0 & b_30=1 & b_2329=0b1011100 & b_22=0 & b_21=1 & b_1015=0b110011 & Rd_V
 	TMPQ3[32,32] = float2float(TMPD2[16,16]);
 	TMPQ3[64,32] = float2float(TMPD2[32,16]);
 	TMPQ3[96,32] = float2float(TMPD2[48,16]);
-	# simd infix Rd_VPR128.4S = Rd_VPR128.4S + TMPQ3 on lane size 4
-	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] + TMPQ3[0,32];
-	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] + TMPQ3[32,32];
-	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] + TMPQ3[64,32];
-	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] + TMPQ3[96,32];
+	# simd infix Rd_VPR128.4S = Rd_VPR128.4S f+ TMPQ3 on lane size 4
+	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] f+ TMPQ3[0,32];
+	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] f+ TMPQ3[32,32];
+	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] f+ TMPQ3[64,32];
+	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] f+ TMPQ3[96,32];
 	zext_zq(Zd); # zero upper 16 bytes of Zd
 }
 
@@ -8995,9 +8995,9 @@ is b_31=0 & b_30=0 & b_2329=0b0011111 & b_22=0 & b_1215=0b0100 & b_10=0 & Re_VPR
 	# simd resize TMPD3 = float2float(TMPS2) (lane size 2 to 4)
 	TMPD3[0,32] = float2float(TMPS2[0,16]);
 	TMPD3[32,32] = float2float(TMPS2[16,16]);
-	# simd infix Rd_VPR64.2S = Rd_VPR64.2S - TMPD3 on lane size 4
-	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] - TMPD3[0,32];
-	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] - TMPD3[32,32];
+	# simd infix Rd_VPR64.2S = Rd_VPR64.2S f- TMPD3 on lane size 4
+	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] f- TMPD3[0,32];
+	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] f- TMPD3[32,32];
 	zext_zd(Zd); # zero upper 24 bytes of Zd
 }
 
@@ -9025,10 +9025,10 @@ is b_31=0 & b_30=1 & b_2329=0b0011111 & b_22=0 & b_1215=0b0100 & b_10=0 & Re_VPR
 	TMPQ3[64,32] = float2float(TMPD2[32,16]);
 	TMPQ3[96,32] = float2float(TMPD2[48,16]);
 	# simd infix Rd_VPR128.4S = Rd_VPR128.4S - TMPQ3 on lane size 4
-	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] - TMPQ3[0,32];
-	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] - TMPQ3[32,32];
-	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] - TMPQ3[64,32];
-	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] - TMPQ3[96,32];
+	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] f- TMPQ3[0,32];
+	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] f- TMPQ3[32,32];
+	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] f- TMPQ3[64,32];
+	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] f- TMPQ3[96,32];
 	zext_zq(Zd); # zero upper 16 bytes of Zd
 }
 
@@ -9051,9 +9051,9 @@ is b_31=0 & b_30=0 & b_2329=0b1011111 & b_22=0 & b_1215=0b1100 & b_10=0 & Re_VPR
 	# simd resize TMPD3 = float2float(TMPS2) (lane size 2 to 4)
 	TMPD3[0,32] = float2float(TMPS2[0,16]);
 	TMPD3[32,32] = float2float(TMPS2[16,16]);
-	# simd infix Rd_VPR64.2S = Rd_VPR64.2S - TMPD3 on lane size 4
-	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] - TMPD3[0,32];
-	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] - TMPD3[32,32];
+	# simd infix Rd_VPR64.2S = Rd_VPR64.2S f- TMPD3 on lane size 4
+	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] f- TMPD3[0,32];
+	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] f- TMPD3[32,32];
 	zext_zd(Zd); # zero upper 24 bytes of Zd
 }
 
@@ -9080,11 +9080,11 @@ is b_31=0 & b_30=1 & b_2329=0b1011111 & b_22=0 & b_1215=0b1100 & b_10=0 & Re_VPR
 	TMPQ3[32,32] = float2float(TMPD2[16,16]);
 	TMPQ3[64,32] = float2float(TMPD2[32,16]);
 	TMPQ3[96,32] = float2float(TMPD2[48,16]);
-	# simd infix Rd_VPR128.4S = Rd_VPR128.4S - TMPQ3 on lane size 4
-	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] - TMPQ3[0,32];
-	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] - TMPQ3[32,32];
-	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] - TMPQ3[64,32];
-	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] - TMPQ3[96,32];
+	# simd infix Rd_VPR128.4S = Rd_VPR128.4S f- TMPQ3 on lane size 4
+	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] f- TMPQ3[0,32];
+	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] f- TMPQ3[32,32];
+	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] f- TMPQ3[64,32];
+	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] f- TMPQ3[96,32];
 	zext_zq(Zd); # zero upper 16 bytes of Zd
 }
 
@@ -9106,9 +9106,9 @@ is b_31=0 & b_30=0 & b_2329=0b0011101 & b_22=0 & b_21=1 & b_1015=0b111011 & Rd_V
 	# simd resize TMPD4 = float2float(TMPS3) (lane size 2 to 4)
 	TMPD4[0,32] = float2float(TMPS3[0,16]);
 	TMPD4[32,32] = float2float(TMPS3[16,16]);
-	# simd infix Rd_VPR64.2S = Rd_VPR64.2S - TMPD4 on lane size 4
-	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] - TMPD4[0,32];
-	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] - TMPD4[32,32];
+	# simd infix Rd_VPR64.2S = Rd_VPR64.2S f- TMPD4 on lane size 4
+	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] f- TMPD4[0,32];
+	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] f- TMPD4[32,32];
 	zext_zd(Zd); # zero upper 24 bytes of Zd
 }
 
@@ -9134,11 +9134,11 @@ is b_31=0 & b_30=1 & b_2329=0b0011101 & b_22=0 & b_21=1 & b_1015=0b111011 & Rd_V
 	TMPQ4[32,32] = float2float(TMPD3[16,16]);
 	TMPQ4[64,32] = float2float(TMPD3[32,16]);
 	TMPQ4[96,32] = float2float(TMPD3[48,16]);
-	# simd infix Rd_VPR128.4S = Rd_VPR128.4S - TMPQ4 on lane size 4
-	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] - TMPQ4[0,32];
-	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] - TMPQ4[32,32];
-	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] - TMPQ4[64,32];
-	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] - TMPQ4[96,32];
+	# simd infix Rd_VPR128.4S = Rd_VPR128.4S f- TMPQ4 on lane size 4
+	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] f- TMPQ4[0,32];
+	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] f- TMPQ4[32,32];
+	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] f- TMPQ4[64,32];
+	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] f- TMPQ4[96,32];
 	zext_zq(Zd); # zero upper 16 bytes of Zd
 }
 
@@ -9160,9 +9160,9 @@ is b_31=0 & b_30=0 & b_2329=0b1011101 & b_22=0 & b_21=1 & b_1015=0b110011 & Rd_V
 	# simd resize TMPD4 = float2float(TMPS3) (lane size 2 to 4)
 	TMPD4[0,32] = float2float(TMPS3[0,16]);
 	TMPD4[32,32] = float2float(TMPS3[16,16]);
-	# simd infix Rd_VPR64.2S = Rd_VPR64.2S - TMPD4 on lane size 4
-	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] - TMPD4[0,32];
-	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] - TMPD4[32,32];
+	# simd infix Rd_VPR64.2S = Rd_VPR64.2S f- TMPD4 on lane size 4
+	Rd_VPR64.2S[0,32] = Rd_VPR64.2S[0,32] f- TMPD4[0,32];
+	Rd_VPR64.2S[32,32] = Rd_VPR64.2S[32,32] f- TMPD4[32,32];
 	zext_zd(Zd); # zero upper 24 bytes of Zd
 }
 
@@ -9187,11 +9187,11 @@ is b_31=0 & b_30=1 & b_2329=0b1011101 & b_22=0 & b_21=1 & b_1015=0b110011 & Rd_V
 	TMPQ3[32,32] = float2float(TMPD2[16,16]);
 	TMPQ3[64,32] = float2float(TMPD2[32,16]);
 	TMPQ3[96,32] = float2float(TMPD2[48,16]);
-	# simd infix Rd_VPR128.4S = Rd_VPR128.4S - TMPQ3 on lane size 4
-	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] - TMPQ3[0,32];
-	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] - TMPQ3[32,32];
-	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] - TMPQ3[64,32];
-	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] - TMPQ3[96,32];
+	# simd infix Rd_VPR128.4S = Rd_VPR128.4S f- TMPQ3 on lane size 4
+	Rd_VPR128.4S[0,32] = Rd_VPR128.4S[0,32] f- TMPQ3[0,32];
+	Rd_VPR128.4S[32,32] = Rd_VPR128.4S[32,32] f- TMPQ3[32,32];
+	Rd_VPR128.4S[64,32] = Rd_VPR128.4S[64,32] f- TMPQ3[64,32];
+	Rd_VPR128.4S[96,32] = Rd_VPR128.4S[96,32] f- TMPQ3[96,32];
 	zext_zq(Zd); # zero upper 16 bytes of Zd
 }
 
-- 
2.45.1

