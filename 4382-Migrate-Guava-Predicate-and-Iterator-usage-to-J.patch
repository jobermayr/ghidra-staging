From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Wiz <95232096+GameCubeGBA@users.noreply.github.com>
Date: Mon, 27 Jun 2022 14:08:37 -0400
Subject: [PATCH] 4382: Migrate Guava Predicate and Iterator usage to Java's
 API Predicate and Iterator usage

There is no need to rely on Google's implementation of predicates since Java has them.

Sadly, for now, we cannot do the same with Function because the JUNG library depends on Google's version.

Move from Iterators to Java streams.
---
 .../DBTraceProgramViewBookmarkManager.java    |  6 ++-
 .../trace/util/WrappingFunctionIterator.java  |  6 ++-
 .../database/spatial/RStarTreeMapTest.java    | 15 +++++++
 .../compositeeditor/BitFieldEditorPanel.java  | 13 +++---
 .../graph/layout/DNLEdgeLabelRenderer.java    |  9 ++--
 .../graph/graphs/FilteringVisualGraph.java    | 41 +++++++------------
 .../ghidra/graph/job/FilterVerticesJob.java   | 11 +++--
 .../graph/viewer/edge/VisualEdgeRenderer.java |  8 ++--
 .../database/data/DataTypeSettingsDB.java     | 13 +++---
 9 files changed, 63 insertions(+), 59 deletions(-)

diff --git a/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/program/DBTraceProgramViewBookmarkManager.java b/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/program/DBTraceProgramViewBookmarkManager.java
index 4adf6d5c6a..a5250c2b9e 100644
--- a/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/program/DBTraceProgramViewBookmarkManager.java
+++ b/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/program/DBTraceProgramViewBookmarkManager.java
@@ -18,6 +18,8 @@ package ghidra.trace.database.program;
 import java.awt.Color;
 import java.util.*;
 import java.util.function.Predicate;
+import java.util.stream.Stream;
+import java.util.stream.StreamSupport;
 
 import javax.swing.Icon;
 
@@ -292,7 +294,9 @@ public class DBTraceProgramViewBookmarkManager implements TraceProgramViewBookma
 	@SuppressWarnings("unchecked")
 	protected static <T, U extends T> Iterator<T> filteredIterator(Iterator<U> it,
 			Predicate<? super U> predicate) {
-		return (Iterator<T>) IteratorUtils.filteredIterator(it, e -> predicate.test(e));
+		Iterable<U> iterable = () -> it;
+		Stream<U> filterStream = StreamSupport.stream(iterable.spliterator(), false);
+		return (Iterator<T>) filterStream.filter(e -> predicate.test(e)).iterator();
 	}
 
 	@Override
diff --git a/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/util/WrappingFunctionIterator.java b/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/util/WrappingFunctionIterator.java
index 553cce6f4c..85c83de8b8 100644
--- a/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/util/WrappingFunctionIterator.java
+++ b/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/util/WrappingFunctionIterator.java
@@ -17,6 +17,8 @@ package ghidra.trace.util;
 
 import java.util.Iterator;
 import java.util.function.Predicate;
+import java.util.stream.Stream;
+import java.util.stream.StreamSupport;
 
 import org.apache.commons.collections4.IteratorUtils;
 
@@ -32,7 +34,9 @@ public class WrappingFunctionIterator implements FunctionIterator {
 
 	public <T extends Function> WrappingFunctionIterator(Iterator<T> it,
 			Predicate<? super T> filter) {
-		this.it = IteratorUtils.filteredIterator(it, e -> filter.test(e));
+		Iterable<T> iterable = () -> it;
+		Stream<T> filterStream = StreamSupport.stream(iterable.spliterator(), false);
+		this.it = filterStream.filter(filter).iterator();
 	}
 
 	@Override
diff --git a/Ghidra/Debug/ProposedUtils/src/test/java/ghidra/util/database/spatial/RStarTreeMapTest.java b/Ghidra/Debug/ProposedUtils/src/test/java/ghidra/util/database/spatial/RStarTreeMapTest.java
index 94b92afbb9..ebaf71e2b6 100644
--- a/Ghidra/Debug/ProposedUtils/src/test/java/ghidra/util/database/spatial/RStarTreeMapTest.java
+++ b/Ghidra/Debug/ProposedUtils/src/test/java/ghidra/util/database/spatial/RStarTreeMapTest.java
@@ -28,6 +28,8 @@ import java.util.*;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Consumer;
+import java.util.stream.Stream;
+import java.util.stream.StreamSupport;
 
 import javax.swing.JFrame;
 import javax.swing.JPanel;
@@ -724,6 +726,9 @@ public class RStarTreeMapTest {
 
 	@Test
 	public void testQueryIntersecting() {
+		Iterable<IntRect> it = ()-> allRects(range);
+		Stream<IntRect> filterStream = StreamSupport.stream(it.spliterator(), false);
+
 		List<IntRect> expected = new ArrayList<>();
 		IteratorUtils.filteredIterator(allRects(range), queryRect::intersects)
 				.forEachRemaining(expected::add);
@@ -738,6 +743,9 @@ public class RStarTreeMapTest {
 
 	@Test
 	public void testQueryEnclosing() {
+		Iterable<IntRect> it = ()-> allRects(range);
+		Stream<IntRect> filterStream = StreamSupport.stream(it.spliterator(), false);
+
 		List<IntRect> expected = new ArrayList<>();
 		IteratorUtils.filteredIterator(allRects(range), queryRect::enclosedBy)
 				.forEachRemaining(expected::add);
@@ -752,6 +760,9 @@ public class RStarTreeMapTest {
 
 	@Test
 	public void testQueryEnclosed() {
+		Iterable<IntRect> it = ()-> allRects(range);
+		Stream<IntRect> filterStream = StreamSupport.stream(it.spliterator(), false);
+
 		List<IntRect> expected = new ArrayList<>();
 		IteratorUtils.filteredIterator(allRects(range), queryRect::encloses)
 				.forEachRemaining(expected::add);
@@ -766,8 +777,12 @@ public class RStarTreeMapTest {
 
 	@Test
 	public void testQueryIntersectionAndIntersection() {
+		Iterable<IntRect> it = ()-> allRects(range);
+		Stream<IntRect> filterStream = StreamSupport.stream(it.spliterator(), false);
+
 		IntRect queryRect1 = rect(1, 1, 12, 13);
 		IntRect queryRect2 = rect(4, 4, 12, 13);
+
 		List<IntRect> expected = new ArrayList<>();
 		IteratorUtils
 				.filteredIterator(allRects(range),
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/BitFieldEditorPanel.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/BitFieldEditorPanel.java
index 859c73e76f..1eb57d2a9f 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/BitFieldEditorPanel.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/BitFieldEditorPanel.java
@@ -17,13 +17,12 @@ package ghidra.app.plugin.core.compositeeditor;
 
 import java.awt.*;
 import java.awt.event.*;
+import java.util.function.Predicate;
 
 import javax.swing.*;
 import javax.swing.event.CellEditorListener;
 import javax.swing.event.ChangeEvent;
 
-import com.google.common.base.Predicate;
-
 import docking.ActionContext;
 import docking.DefaultActionContext;
 import docking.widgets.DropDownSelectionTextField;
@@ -77,8 +76,6 @@ public class BitFieldEditorPanel extends JPanel {
 
 	private GDLabel statusTextField;
 
-	private BitSelectionHandler bitSelectionHandler;
-
 	private boolean updating = false;
 
 	BitFieldEditorPanel(Composite composite, DataTypeManagerService dtmService,
@@ -450,7 +447,7 @@ public class BitFieldEditorPanel extends JPanel {
 		placementComponent.setFont(UIManager.getFont("TextField.font"));
 		placementComponent.addMouseWheelListener(e -> bitSizeInput.mouseWheelMoved(e));
 
-		bitSelectionHandler = new BitSelectionHandler();
+		BitSelectionHandler bitSelectionHandler = new BitSelectionHandler();
 		placementComponent.addMouseListener(bitSelectionHandler);
 		placementComponent.addMouseMotionListener(bitSelectionHandler);
 
@@ -490,7 +487,7 @@ public class BitFieldEditorPanel extends JPanel {
 		}
 		if (isValid) {
 			DataType dt = dtChoiceEditor.getCellEditorValueAsDataType();
-			if (!dataTypeValidator.apply(baseDataType)) {
+			if (!dataTypeValidator.test(baseDataType)) {
 				setStatus("Valid bitfield base datatype entry required");
 				isValid = false;
 			}
@@ -500,7 +497,7 @@ public class BitFieldEditorPanel extends JPanel {
 			}
 		}
 		else {
-			dataTypeValidator.apply(null); // affects button enablement
+			dataTypeValidator.test(null); // affects button enablement
 		}
 		return isValid;
 	}
@@ -573,7 +570,7 @@ public class BitFieldEditorPanel extends JPanel {
 		updating = true;
 		try {
 			baseDataType = initialBaseDataType;
-			dataTypeValidator.apply(baseDataType);
+			dataTypeValidator.test(baseDataType);
 			dtChoiceEditor.setCellEditorValue(initialBaseDataType);
 			fieldNameTextField.setText(initialFieldName);
 			fieldCommentTextField.setText(initialComment);
diff --git a/Ghidra/Features/FunctionGraphDecompilerExtension/src/main/java/ghidra/app/plugin/core/functiongraph/graph/layout/DNLEdgeLabelRenderer.java b/Ghidra/Features/FunctionGraphDecompilerExtension/src/main/java/ghidra/app/plugin/core/functiongraph/graph/layout/DNLEdgeLabelRenderer.java
index 1675135060..76e7edb696 100644
--- a/Ghidra/Features/FunctionGraphDecompilerExtension/src/main/java/ghidra/app/plugin/core/functiongraph/graph/layout/DNLEdgeLabelRenderer.java
+++ b/Ghidra/Features/FunctionGraphDecompilerExtension/src/main/java/ghidra/app/plugin/core/functiongraph/graph/layout/DNLEdgeLabelRenderer.java
@@ -19,8 +19,7 @@ import java.awt.*;
 import java.awt.geom.AffineTransform;
 import java.awt.geom.Point2D;
 import java.util.List;
-
-import com.google.common.base.Predicate;
+import java.util.function.Predicate;
 
 import edu.uci.ics.jung.algorithms.layout.Layout;
 import edu.uci.ics.jung.graph.Graph;
@@ -67,9 +66,9 @@ class DNLEdgeLabelRenderer<V extends FGVertex, E extends FGEdge>
 		V startv = endpoints.getFirst();
 		V endv = endpoints.getSecond();
 
-		Predicate<Context<Graph<V, E>, V>> includeVertex = rc.getVertexIncludePredicate();
-		if (!includeVertex.apply(Context.getInstance(jungGraph, startv)) ||
-			!includeVertex.apply(Context.getInstance(jungGraph, endv))) {
+		Predicate<Context<Graph<V, E>, V>> includeVertex = rc.getVertexIncludePredicate()::apply;
+		if (!includeVertex.test(Context.getInstance(jungGraph, startv)) ||
+			!includeVertex.test(Context.getInstance(jungGraph, endv))) {
 			return;
 		}
 
diff --git a/Ghidra/Framework/Graph/src/main/java/ghidra/graph/graphs/FilteringVisualGraph.java b/Ghidra/Framework/Graph/src/main/java/ghidra/graph/graphs/FilteringVisualGraph.java
index d35087c79b..d529fe189f 100644
--- a/Ghidra/Framework/Graph/src/main/java/ghidra/graph/graphs/FilteringVisualGraph.java
+++ b/Ghidra/Framework/Graph/src/main/java/ghidra/graph/graphs/FilteringVisualGraph.java
@@ -18,9 +18,8 @@ package ghidra.graph.graphs;
 import static util.CollectionUtils.asList;
 
 import java.util.*;
-
-import com.google.common.base.Predicate;
-import com.google.common.collect.Iterators;
+import java.util.stream.Stream;
+import java.util.stream.StreamSupport;
 
 import edu.uci.ics.jung.graph.util.EdgeType;
 import edu.uci.ics.jung.graph.util.Pair;
@@ -52,7 +51,7 @@ import utility.function.Callback;
  * allows this class to know when to update this graph, based upon whether or not data has
  * been filtered.   Implementation of this is achieved by using a flag.  Currently, this flag
  * is thread-safe.  If this graph is to be multi-threaded (such as if changes are to be 
- * made by multiple threads, then this update flag will have to be revisited to ensure thread
+ * made by multiple threads), then this update flag will have to be revisited to ensure thread
  * visibility. 
  *
  * @param <V> the vertex type
@@ -71,7 +70,6 @@ public abstract class FilteringVisualGraph<V extends VisualVertex, E extends Vis
 	private int internalCallCount;
 
 	public void filterVertices(Collection<V> toFilter) {
-
 		for (V v : toFilter) {
 			removeVertexFromView(v);
 		}
@@ -113,21 +111,19 @@ public abstract class FilteringVisualGraph<V extends VisualVertex, E extends Vis
 	}
 
 	public Iterator<V> getFilteredVertices() {
-
 		// a vertex is 'filtered' if it is in the complete graph, but not in the current graph
-		Predicate<? super V> isFiltered = v -> {
-			return !containsVertex(v) && completeGraph.containsVertex(v);
-		};
-		return Iterators.filter(getAllVertices(), isFiltered);
+		Iterable<V> iterable = () -> getAllVertices();
+		Stream<V> filterStream = StreamSupport.stream(iterable.spliterator(), false);
+
+		return filterStream.filter(v ->!containsVertex(v) && completeGraph.containsVertex(v)).iterator();
 	}
 
 	public Iterator<E> getFilteredEdges() {
-
 		// an edge is 'filtered' if it is in the complete graph, but not in the current graph
-		Predicate<? super E> isFiltered = e -> {
-			return !containsEdge(e) && completeGraph.containsEdge(e);
-		};
-		return Iterators.filter(getAllEdges(), isFiltered);
+		Iterable<E> iterable = () -> getAllEdges();
+		Stream<E> filterStream = StreamSupport.stream(iterable.spliterator(), false);
+
+		return filterStream.filter(e ->!containsEdge(e) && completeGraph.containsEdge(e)).iterator();
 	}
 
 	public Iterator<V> getUnfilteredVertices() {
@@ -199,16 +195,12 @@ public abstract class FilteringVisualGraph<V extends VisualVertex, E extends Vis
 
 	private void restoreAllVertices() {
 		Collection<V> allVertices = completeGraph.getVertices();
-		performInternalUpdate(() -> {
-			allVertices.forEach(v -> addVertex(v));
-		});
+		performInternalUpdate(() -> allVertices.forEach(v -> addVertex(v)));
 	}
 
 	private void restoreAllEdges() {
 		Collection<E> allEdges = completeGraph.getEdges();
-		performInternalUpdate(() -> {
-			allEdges.forEach(e -> addEdge(e));
-		});
+		performInternalUpdate(() -> allEdges.forEach(e -> addEdge(e)));
 	}
 
 	private void maybeRestoreVertices(Collection<V> toRestore) {
@@ -241,7 +233,6 @@ public abstract class FilteringVisualGraph<V extends VisualVertex, E extends Vis
 	}
 
 	private void maybeRestoreRelatedEdges(Collection<V> toUnfilter) {
-
 		for (V v : toUnfilter) {
 
 			Collection<E> vertexEdges = completeGraph.getIncidentEdges(v);
@@ -371,7 +362,7 @@ public abstract class FilteringVisualGraph<V extends VisualVertex, E extends Vis
 	public boolean removeEdge(E e) {
 		boolean removed = super.removeEdge(e);
 
-		List<E> asList = Arrays.asList(e);
+		List<E> asList = Collections.singletonList(e);
 		if (removed) {
 			fireEdgesRemoved(asList);
 		}
@@ -387,9 +378,7 @@ public abstract class FilteringVisualGraph<V extends VisualVertex, E extends Vis
 
 		super.removeEdges(toRemove);
 
-		maybePerformRemove(() -> {
-			completeGraph.removeEdges(toRemove);
-		});
+		maybePerformRemove(() -> completeGraph.removeEdges(toRemove));
 
 		fireEdgesRemoved(toRemove);
 	}
diff --git a/Ghidra/Framework/Graph/src/main/java/ghidra/graph/job/FilterVerticesJob.java b/Ghidra/Framework/Graph/src/main/java/ghidra/graph/job/FilterVerticesJob.java
index 3c056aef92..0fa43edd2f 100644
--- a/Ghidra/Framework/Graph/src/main/java/ghidra/graph/job/FilterVerticesJob.java
+++ b/Ghidra/Framework/Graph/src/main/java/ghidra/graph/job/FilterVerticesJob.java
@@ -21,9 +21,8 @@ import java.util.Iterator;
 import java.util.Set;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
-
-import com.google.common.collect.Iterators;
-import com.google.common.collect.UnmodifiableIterator;
+import java.util.stream.Stream;
+import java.util.stream.StreamSupport;
 
 import ghidra.graph.graphs.FilteringVisualGraph;
 import ghidra.graph.viewer.*;
@@ -119,9 +118,9 @@ public class FilterVerticesJob<V extends VisualVertex, E extends VisualEdge<V>>
 	}
 
 	private Set<V> findCurrentVerticesFailingTheFilter(Set<V> validVertices) {
-
-		UnmodifiableIterator<V> nonMatchingIterator =
-			Iterators.filter(filterGraph.getUnfilteredVertices(), v -> !validVertices.contains(v));
+		Iterable<V> isFilter = () -> filterGraph.getUnfilteredVertices();
+		Stream<V> filterStream = StreamSupport.stream(isFilter.spliterator(), false);
+		Iterator<V> nonMatchingIterator = filterStream.filter(v -> !validVertices.contains(v)).iterator();
 		Set<V> nonMatching = asSet(nonMatchingIterator);
 		return nonMatching;
 	}
diff --git a/Ghidra/Framework/Graph/src/main/java/ghidra/graph/viewer/edge/VisualEdgeRenderer.java b/Ghidra/Framework/Graph/src/main/java/ghidra/graph/viewer/edge/VisualEdgeRenderer.java
index a339a20779..f69dc20d59 100644
--- a/Ghidra/Framework/Graph/src/main/java/ghidra/graph/viewer/edge/VisualEdgeRenderer.java
+++ b/Ghidra/Framework/Graph/src/main/java/ghidra/graph/viewer/edge/VisualEdgeRenderer.java
@@ -19,11 +19,11 @@ import java.awt.*;
 import java.awt.geom.AffineTransform;
 import java.awt.geom.Point2D;
 import java.util.Objects;
+import java.util.function.Predicate;
 
 import javax.swing.JComponent;
 
 import com.google.common.base.Function;
-import com.google.common.base.Predicate;
 
 import edu.uci.ics.jung.algorithms.layout.Layout;
 import edu.uci.ics.jung.graph.Graph;
@@ -343,8 +343,8 @@ public abstract class VisualEdgeRenderer<V extends VisualVertex, E extends Visua
 		//
 		// Arrow Head
 		//
-		Predicate<Context<Graph<V, E>, E>> predicate = rc.getEdgeArrowPredicate();
-		boolean drawArrow = predicate.apply(context);
+		Predicate<Context<Graph<V, E>, E>> predicate = rc.getEdgeArrowPredicate()::apply;
+		boolean drawArrow = predicate.test(context);
 		if (!drawArrow) {
 			g.setPaint(oldPaint);
 			return;
@@ -499,7 +499,7 @@ public abstract class VisualEdgeRenderer<V extends VisualVertex, E extends Visua
 	 */
 	public Shape getFullShape(RenderContext<V, E> rc, Layout<V, E> layout, V vertex) {
 		Function<? super V, Shape> vertexShaper = rc.getVertexShapeTransformer();
-		Shape shape = null;
+		Shape shape;
 		if (vertexShaper instanceof VisualGraphVertexShapeTransformer) {
 			@SuppressWarnings("unchecked")
 			VisualGraphVertexShapeTransformer<V> vgShaper =
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/DataTypeSettingsDB.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/DataTypeSettingsDB.java
index 66ec95c242..5d9796085d 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/DataTypeSettingsDB.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/DataTypeSettingsDB.java
@@ -15,7 +15,7 @@
  */
 package ghidra.program.database.data;
 
-import com.google.common.base.Predicate;
+import java.util.function.Predicate;
 
 import ghidra.docking.settings.*;
 import ghidra.program.model.data.*;
@@ -82,11 +82,8 @@ class DataTypeSettingsDB implements Settings {
 		if (locked) {
 			return false;
 		}
-		if (allowedSettingPredicate != null &&
-			!allowedSettingPredicate.apply(settingsDefinition.getStorageKey())) {
-			return false;
-		}
-		return true;
+		return allowedSettingPredicate == null ||
+				allowedSettingPredicate.test(settingsDefinition.getStorageKey());
 	}
 
 	@Override
@@ -113,7 +110,7 @@ class DataTypeSettingsDB implements Settings {
 			return false;
 		}
 		if (name != null && allowedSettingPredicate != null &&
-			!allowedSettingPredicate.apply(name)) {
+			!allowedSettingPredicate.test(name)) {
 			Msg.warn(this, "Ignored disallowed setting '" + name + "'");
 			return false;
 		}
@@ -207,7 +204,7 @@ class DataTypeSettingsDB implements Settings {
 	@Override
 	public void setValue(String name, Object value) {
 		if (value instanceof Long) {
-			setLong(name, ((Long) value).longValue());
+			setLong(name, (Long) value);
 		}
 		else if (value instanceof String) {
 			setString(name, (String) value);
-- 
2.44.0

