From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E3=81=8B=E3=81=84=E3=81=A0?= <kaida@cyberkaida.gg>
Date: Sat, 4 Feb 2023 11:39:21 +0900
Subject: [PATCH] 4957: Fix Frida debugger agent executableJar build

Fix Frida debugger agent executableJar build
- Add missing shell script for executable jar target
- Add exclude for duplicate files, fixes issue with help
Note the linkages in the Frida README
Use env to locate bash in Frida executable Jar
On macOS bash is in a different path
WIP: Update build gradle to strip signed files
Fix typo in Frida build notes
Add signature strip set to Frida gradle script
Note the location of the example compiler invocation for Frida
---
 Ghidra/Debug/Debugger-agent-frida/FridaNotes.txt         | 6 +++++-
 Ghidra/Debug/Debugger-agent-frida/certification.manifest | 1 +
 Ghidra/Debug/Debugger-agent-frida/unsign_jar.sh          | 4 ++++
 gradle/debugger/hasExecutableJar.gradle                  | 2 ++
 gradle/debugger/hasNodepJar.gradle                       | 2 +-
 5 files changed, 13 insertions(+), 2 deletions(-)
 create mode 100755 Ghidra/Debug/Debugger-agent-frida/unsign_jar.sh

diff --git a/Ghidra/Debug/Debugger-agent-frida/FridaNotes.txt b/Ghidra/Debug/Debugger-agent-frida/FridaNotes.txt
index 50ad5712d6..10eb8fcb21 100644
--- a/Ghidra/Debug/Debugger-agent-frida/FridaNotes.txt
+++ b/Ghidra/Debug/Debugger-agent-frida/FridaNotes.txt
@@ -12,7 +12,11 @@ Ghidra needs a dynamically-loadable version of libfrida-core.a which you can gen
 	cp ghidra_wrapper.c into the directory with libfrida-core.a and frida-core.h (distro or DEVKIT)
 	g++ -shared ghidra_wrapper.c ./libfrida-core.a -o libfrida-core.so
 
-Libfrida-core.so should then be added to the jna.library.path or put someplace like /usr/lib/x86_64-linux-gnu, where it will get picked up by Native.load().
+On macOS you will need to also link Objective-C, libresolv and the AppKit and Foundation frameworks:
+	clang++ -lobjc -lresolv -framework Foundation -framework AppKit -shared ghidra_wrapper.c ./libfrida-core.a -o libfrida-core.so
+An example compiler invocation is available in the example from the Frida devkit at the top of the example C file.
+
+Libfrida-core.so should then be added to the jni.library.path or put someplace like /usr/lib/x86_64-linux-gnu, where it will get picked up by Native.load().
 
 - Frida Functionality
 	The most interesting bits of Frida are available as "methods" from the Objects Tree.  For instance, if you select a function and hit "M", you will get a dialog with available methods.  Selecting, for example, "intercept" will bring up a second dialog with the relevant parameters.  For many of these, you will want to provide your own Javascript "on" functions, e.g. onEnter for the Interceptor. Stalking is available on Threads and the individual thread entries. Scan, protect, and watch functions are available on Memory. You can also redirect the output to GhidraScript, although this relies on a bit of a hack.  If your Javascript "Name" parameter is something like "interpreter", prepend "interpreter<=" to the output from your Javascript, and the results will be passed to both the console and the script.
diff --git a/Ghidra/Debug/Debugger-agent-frida/certification.manifest b/Ghidra/Debug/Debugger-agent-frida/certification.manifest
index 5f713628fb..3b64c4c230 100644
--- a/Ghidra/Debug/Debugger-agent-frida/certification.manifest
+++ b/Ghidra/Debug/Debugger-agent-frida/certification.manifest
@@ -4,6 +4,7 @@
 FridaNotes.txt||GHIDRA||||END|
 Module.manifest||GHIDRA||||END|
 build.gradle||GHIDRA||||END|
+unsign_jar.sh||GHIDRA||||END|
 data/scripts/onAccess.js||GHIDRA||||END|
 data/scripts/onAccessExt.js||GHIDRA||||END|
 data/scripts/onCallSummary.js||GHIDRA||||END|
diff --git a/Ghidra/Debug/Debugger-agent-frida/unsign_jar.sh b/Ghidra/Debug/Debugger-agent-frida/unsign_jar.sh
new file mode 100755
index 0000000000..0dcf78d925
--- /dev/null
+++ b/Ghidra/Debug/Debugger-agent-frida/unsign_jar.sh
@@ -0,0 +1,4 @@
+#!/usr/bin/env bash
+set -e
+echo "Removing signature files from ${1}"
+zip ${1} -d $(unzip -l Debugger-agent-frida-nodep.jar| grep '.SF$' | awk '{ print $4}')
diff --git a/gradle/debugger/hasExecutableJar.gradle b/gradle/debugger/hasExecutableJar.gradle
index bca8f24fde..9f92675e0a 100644
--- a/gradle/debugger/hasExecutableJar.gradle
+++ b/gradle/debugger/hasExecutableJar.gradle
@@ -20,6 +20,7 @@ task executableJar {
 	ext.execsh = file("src/main/sh/execjar.sh")
 	ext.jarfile = file(nodepJar.archivePath)
 	ext.outjar = file("${buildDir}/bin/run")
+	ext.unsign_jar = file("unsign_jar.sh")
 	dependsOn(nodepJar)
 	inputs.file { execsh }
 	inputs.file { jarfile }
@@ -35,6 +36,7 @@ task executableJar {
 			}
 		}
 		exec {
+			commandLine(ext.unsign_jar, outjar)
 			commandLine("chmod", "+x", outjar)
 		}
 	}
diff --git a/gradle/debugger/hasNodepJar.gradle b/gradle/debugger/hasNodepJar.gradle
index edaea71ad1..682018bb90 100644
--- a/gradle/debugger/hasNodepJar.gradle
+++ b/gradle/debugger/hasNodepJar.gradle
@@ -53,7 +53,7 @@ task nodepJar(type: Jar) {
 	inputs.file(file(jar.archivePath))
 	dependsOn(configureNodepJar)
 	dependsOn(jar)
-
+	duplicatesStrategy = 'exclude'
 	archiveAppendix = 'nodep'
 
 	from(zipTree(jar.archivePath))
-- 
2.45.0

