From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: sad-dev <55233728+sad-dev@users.noreply.github.com>
Date: Tue, 18 Jun 2024 16:28:01 +0800
Subject: [PATCH] 6650: Parallel decompiler/disassembler performance

Remove (useless?) cache of lastContext from ContextCache

SleighLanguage: Use more performant ConcurrentHashMap

HighFunction: store entryPoint/entryAddrSpace

Unfortunately fetching entrypoint hits the database lock. As this is invariant for the HighFunction, cache these results instead.
---
 .../processors/sleigh/ContextCache.java       | 10 +-------
 .../processors/sleigh/SleighLanguage.java     | 23 +++++++++----------
 .../program/model/pcode/HighFunction.java     | 16 ++++++++-----
 3 files changed, 22 insertions(+), 27 deletions(-)

diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/ContextCache.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/ContextCache.java
index d437e8e40f..71d833cc4f 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/ContextCache.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/ContextCache.java
@@ -26,9 +26,6 @@ public class ContextCache {
 	private int context_size = 0;
 	private Register contextBaseRegister = null;
 
-	private BigInteger lastContextValue;
-	private int[] lastContextWords;
-
 	public ContextCache() {
 	}
 
@@ -57,10 +54,7 @@ public class ContextCache {
 		}
 	}
 
-	private synchronized int[] getWords(BigInteger value) {
-		if (value.equals(lastContextValue)) {
-			return lastContextWords;
-		}
+	private int[] getWords(BigInteger value) {
 
 		int[] words = new int[context_size];
 		byte[] bytes = value.toByteArray();
@@ -73,8 +67,6 @@ public class ContextCache {
 			}
 			words[i] = word;
 		}
-		lastContextValue = value;
-		lastContextWords = words;
 		return words;
 	}
 
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/SleighLanguage.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/SleighLanguage.java
index 9d777e90b1..0e810c2b1f 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/SleighLanguage.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/SleighLanguage.java
@@ -20,6 +20,7 @@ import static ghidra.pcode.utils.SlaFormat.*;
 import java.io.*;
 import java.math.BigInteger;
 import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.Map.Entry;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -88,7 +89,7 @@ public class SleighLanguage implements Language {
 	/**
 	 * Cached instruction prototypes
 	 */
-	private LinkedHashMap<Integer, SleighInstructionPrototype> instructProtoMap;
+	private ConcurrentHashMap<Integer, SleighInstructionPrototype> instructProtoMap;
 	private DecisionNode root = null;
 	/**
 	 * table of AddressSpaces
@@ -148,7 +149,7 @@ public class SleighLanguage implements Language {
 		buildVolatileSymbolAddresses();
 		xrefRegisters();
 
-		instructProtoMap = new LinkedHashMap<>();
+		instructProtoMap = new ConcurrentHashMap<>();
 
 		initParallelHelper();
 	}
@@ -378,16 +379,14 @@ public class SleighLanguage implements Language {
 				newProto.cacheInfo(buf, context, true);
 			}
 
-			synchronized (instructProtoMap) {
-				res = instructProtoMap.get(hashcode);
-				if (res == null) { // We have a prototype we have never seen
-					// before, build it fully
-					instructProtoMap.put(hashcode, newProto);
-					res = newProto;
-				}
-				if (inDelaySlot && res.hasDelaySlots()) {
-					throw new NestedDelaySlotException();
-				}
+			res = instructProtoMap.get(hashcode);
+			if (res == null) { // We have a prototype we have never seen
+				// before, build it fully
+				instructProtoMap.put(hashcode, newProto);
+				res = newProto;
+			}
+			if (inDelaySlot && res.hasDelaySlots()) {
+				throw new NestedDelaySlotException();
 			}
 		}
 		catch (MemoryAccessException e) {
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/HighFunction.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/HighFunction.java
index ea569a49c6..1f0068159d 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/HighFunction.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/HighFunction.java
@@ -50,6 +50,8 @@ public class HighFunction extends PcodeSyntaxTree {
 	private GlobalSymbolMap globalSymbols;
 	private List<JumpTable> jumpTables;
 	private List<DataTypeSymbol> protoOverrides;
+	private Address entryPoint;
+	private AddressSpace entryAddrSpace;
 
 	/**
 	 * @param function  function associated with the higher level function abstraction.
@@ -64,6 +66,8 @@ public class HighFunction extends PcodeSyntaxTree {
 		this.language = language;
 		this.compilerSpec = compilerSpec;
 		AddressSpace stackSpace = function.getProgram().getAddressFactory().getStackSpace();
+		entryPoint = function.getEntryPoint();
+		entryAddrSpace = entryPoint.getAddressSpace();
 		localSymbols = new LocalSymbolMap(this, stackSpace);
 		globalSymbols = new GlobalSymbolMap(this);
 		proto = new FunctionPrototype(localSymbols, function);
@@ -87,7 +91,7 @@ public class HighFunction extends PcodeSyntaxTree {
 		if (func instanceof FunctionDB) {
 			return func.getSymbol().getID();
 		}
-		return func.getProgram().getSymbolTable().getDynamicSymbolID(func.getEntryPoint());
+		return func.getProgram().getSymbolTable().getDynamicSymbolID(entryPoint);
 	}
 
 	/**
@@ -255,7 +259,7 @@ public class HighFunction extends PcodeSyntaxTree {
 			}
 			if (subel == ELEM_ADDR.id()) {
 				Address addr = AddressXML.decode(decoder);
-				if (!func.getEntryPoint().equals(addr)) {
+				if (!entryPoint.equals(addr)) {
 					throw new DecoderException("Mismatched address in function tag");
 				}
 			}
@@ -300,7 +304,7 @@ public class HighFunction extends PcodeSyntaxTree {
 	private void decodeJumpTableList(Decoder decoder) throws DecoderException {
 		int el = decoder.openElement(ELEM_JUMPTABLELIST);
 		while (decoder.peekElement() != 0) {
-			JumpTable table = new JumpTable(func.getEntryPoint().getAddressSpace());
+			JumpTable table = new JumpTable(entryAddrSpace);
 			table.decode(decoder);
 			if (!table.isEmpty()) {
 				if (jumpTables == null) {
@@ -318,10 +322,10 @@ public class HighFunction extends PcodeSyntaxTree {
 			pcaddr = rep.getPCAddress();
 			if (pcaddr == Address.NO_ADDRESS) {
 				try {
-					pcaddr = func.getEntryPoint().add(-1);
+					pcaddr = entryPoint.add(-1);
 				}
 				catch (AddressOutOfBoundsException e) {
-					pcaddr = func.getEntryPoint();
+					pcaddr = entryPoint;
 				}
 			}
 		}
@@ -446,7 +450,7 @@ public class HighFunction extends PcodeSyntaxTree {
 			encoder.writeBool(ATTRIB_NORETURN, true);
 		}
 		if (entryPoint == null) {
-			AddressXML.encode(encoder, func.getEntryPoint());
+			AddressXML.encode(encoder, this.entryPoint);
 		}
 		else {
 			AddressXML.encode(encoder, entryPoint);		// Address is forced on XML
-- 
2.45.1

