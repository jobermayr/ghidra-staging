From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Andrew Strelsky <ajs222@njit.edu>
Date: Tue, 27 Jul 2021 20:43:36 -0400
Subject: [PATCH] 3271: Remove unnecessary nullptr checks

The C++ language GUARANTEES that delete will do nothing if given null
---
 .../Decompiler/src/decompile/cpp/action.cc    | 17 ++---
 .../src/decompile/cpp/architecture.cc         | 54 ++++++----------
 .../Decompiler/src/decompile/cpp/block.cc     |  6 +-
 .../src/decompile/cpp/blockaction.cc          |  8 +--
 .../Decompiler/src/decompile/cpp/comment.cc   | 12 ++--
 .../Decompiler/src/decompile/cpp/context.hh   |  2 +-
 .../Decompiler/src/decompile/cpp/cpool.hh     |  2 +-
 .../Decompiler/src/decompile/cpp/database.cc  | 28 +++------
 .../Decompiler/src/decompile/cpp/emulate.cc   |  8 +--
 .../src/decompile/cpp/emulateutil.cc          |  8 +--
 .../Decompiler/src/decompile/cpp/fspec.cc     | 63 ++++++-------------
 .../Decompiler/src/decompile/cpp/funcdata.hh  |  2 +-
 .../src/decompile/cpp/ghidra_process.cc       | 14 ++---
 .../Decompiler/src/decompile/cpp/grammar.cc   | 41 +++++-------
 .../Decompiler/src/decompile/cpp/grammar.y    | 41 +++++-------
 .../src/decompile/cpp/ifacedecomp.cc          | 15 ++---
 .../src/decompile/cpp/inject_sleigh.cc        | 14 ++---
 .../Decompiler/src/decompile/cpp/interface.cc | 36 ++++-------
 .../Decompiler/src/decompile/cpp/jumptable.cc | 47 +++++---------
 .../Decompiler/src/decompile/cpp/loadimage.cc |  5 +-
 .../src/decompile/cpp/loadimage_bfd.cc        |  6 +-
 .../Decompiler/src/decompile/cpp/memstate.cc  |  6 +-
 .../Decompiler/src/decompile/cpp/op.cc        | 14 ++---
 .../Decompiler/src/decompile/cpp/options.cc   |  5 +-
 .../Decompiler/src/decompile/cpp/override.cc  |  6 +-
 .../src/decompile/cpp/pcodecompile.cc         |  3 +-
 .../src/decompile/cpp/pcodeinject.cc          |  5 +-
 .../src/decompile/cpp/pcodeinject.hh          |  2 +-
 .../src/decompile/cpp/pcodeparse.cc           | 24 +++----
 .../Decompiler/src/decompile/cpp/pcodeparse.y | 18 ++----
 .../Decompiler/src/decompile/cpp/printjava.cc |  3 +-
 .../src/decompile/cpp/printlanguage.cc        |  3 +-
 .../src/decompile/cpp/rulecompile.cc          | 16 ++---
 .../Decompiler/src/decompile/cpp/semantics.cc | 22 +++----
 .../Decompiler/src/decompile/cpp/sleigh.cc    |  3 +-
 .../src/decompile/cpp/slghpattern.cc          | 12 ++--
 .../src/decompile/cpp/slghpattern.hh          |  4 +-
 .../src/decompile/cpp/slghsymbol.cc           | 49 ++++++---------
 .../src/decompile/cpp/slghsymbol.hh           |  2 +-
 .../Decompiler/src/decompile/cpp/transform.cc |  5 +-
 .../Decompiler/src/decompile/cpp/translate.cc |  9 +--
 .../Decompiler/src/decompile/cpp/type.cc      | 12 ++--
 .../Decompiler/src/decompile/cpp/typeop.cc    |  3 +-
 .../Decompiler/src/decompile/cpp/unify.cc     |  9 +--
 .../Decompiler/src/decompile/cpp/userop.cc    |  9 +--
 .../Decompiler/src/decompile/cpp/varmap.cc    |  5 +-
 .../Decompiler/src/decompile/cpp/varnode.cc   | 18 ++----
 .../Decompiler/src/decompile/cpp/xml.cc       | 15 ++---
 .../Decompiler/src/decompile/cpp/xml.y        | 15 ++---
 49 files changed, 257 insertions(+), 469 deletions(-)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/action.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/action.cc
index 9a4e2e26d..4031b6c87 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/action.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/action.cc
@@ -364,10 +364,8 @@ int4 Action::perform(Funcdata &data)
 ActionGroup::~ActionGroup(void)
 
 {
-  vector<Action *>::iterator iter;
-  
-  for(iter=list.begin();iter!=list.end();++iter)
-    delete *iter;
+  for(auto *it : list)
+    delete it;
 }
 
 /// To be used only during the construction of \b this ActionGroup. This routine
@@ -728,10 +726,8 @@ bool Rule::checkActionBreak(void)
 ActionPool::~ActionPool(void)
 
 {
-  vector<Rule *>::iterator iter;
-
-  for(iter=allrules.begin();iter!=allrules.end();++iter)
-    delete *iter;
+  for(auto *it : allrules)
+    delete it;
 }
 
 /// This method should only be invoked during construction of this ActionPool
@@ -976,9 +972,8 @@ const char ActionDatabase::universalname[] = "universal";
 ActionDatabase::~ActionDatabase(void)
 
 {
-  map<string,Action *>::iterator iter;
-  for(iter = actionmap.begin();iter!=actionmap.end();++iter)
-    delete (*iter).second;
+  for(auto &it : actionmap)
+    delete it.second;
 }
 
 /// Clear out (possibly altered) root Actions. Reset the default groups.
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/architecture.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/architecture.cc
index f03793f01..c23692987 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/architecture.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/architecture.cc
@@ -184,46 +184,30 @@ Architecture::Architecture(void)
 Architecture::~Architecture(void)
 
 {				// Delete anything that was allocated
-  vector<TypeOp *>::iterator iter;
-  TypeOp *t_op;
-
-  for(iter=inst.begin();iter!=inst.end();++iter) {
-    t_op = *iter;
-    if (t_op != (TypeOp *)0)
-      delete t_op;
-  }
-  for(int4 i=0;i<extra_pool_rules.size();++i)
-    delete extra_pool_rules[i];
-
-  if (symboltab != (Database *)0)
-    delete symboltab;
-  for(int4 i=0;i<(int4)printlist.size();++i)
-    delete printlist[i];
+  for(TypeOp *op : inst)
+    delete op;
+  for(Rule *rule : extra_pool_rules)
+    delete rule;
+
+  delete symboltab;
+  for(PrintLanguage *lang : printlist)
+    delete lang;
   delete options;
 #ifdef CPUI_STATISTICS
   delete stats;
 #endif
 
-  map<string,ProtoModel *>::const_iterator piter;
-  for(piter=protoModels.begin();piter!=protoModels.end();++piter)
-    delete (*piter).second;
-
-  if (types != (TypeFactory *)0)
-    delete types;
-  if (translate != (Translate *)0)
-    delete translate;
-  if (loader != (LoadImage *)0)
-    delete loader;
-  if (pcodeinjectlib != (PcodeInjectLibrary *)0)
-    delete pcodeinjectlib;
-  if (commentdb != (CommentDatabase *)0)
-    delete commentdb;
-  if (stringManager != (StringManager *)0)
-    delete stringManager;
-  if (cpool != (ConstantPool *)0)
-    delete cpool;
-  if (context != (ContextDatabase *)0)
-    delete context;
+  for(auto &model : protoModels)
+    delete model.second;
+
+  delete types;
+  delete translate;
+  delete loader;
+  delete pcodeinjectlib;
+  delete commentdb;
+  delete stringManager;
+  delete cpool;
+  delete context;
 }
 
 /// The Architecture maintains the set of prototype models that can
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/block.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/block.cc
index 4e968beea..b633c4b07 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/block.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/block.cc
@@ -1197,10 +1197,8 @@ void BlockGraph::markCopyBlock(FlowBlock *bl,uint4 fl)
 void BlockGraph::clear(void)
 
 {
-  vector<FlowBlock *>::iterator iter;
-
-  for(iter=list.begin();iter!=list.end();++iter)
-    delete *iter;
+  for(auto *it : list)
+    delete it;
   list.clear();
 }
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc
index adbc3c712..0afc3cdac 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc
@@ -571,8 +571,8 @@ TraceDAG::BranchPoint::BranchPoint(BlockTrace *parenttrace)
 TraceDAG::BranchPoint::~BranchPoint(void)
 
 {
-  for(int4 i=0;i<paths.size();++i)
-    delete paths[i];
+  for(auto *path : paths)
+    delete path;
 }
 
 /// \param t is the parent BranchPoint
@@ -953,8 +953,8 @@ TraceDAG::TraceDAG(list<FloatingEdge> &lg)
 TraceDAG::~TraceDAG(void)
 
 {
-  for(int4 i=0;i<branchlist.size();++i)
-    delete branchlist[i];
+  for(auto *branch : branchlist)
+    delete branch;
 }
 
 /// Given the registered root FlowBlocks, create the initial (virtual) BranchPoint
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/comment.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/comment.cc
index d9d2000e5..c381aa27a 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/comment.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/comment.cc
@@ -139,19 +139,15 @@ CommentDatabaseInternal::CommentDatabaseInternal(void)
 CommentDatabaseInternal::~CommentDatabaseInternal(void)
 
 {
-  CommentSet::iterator iter;
-
-  for(iter=commentset.begin();iter!=commentset.end();++iter)
-    delete *iter;
+  for(auto *it : commentset)
+    delete it;
 }
 
 void CommentDatabaseInternal::clear(void)
 
 {
-  CommentSet::iterator iter;
-
-  for(iter=commentset.begin();iter!=commentset.end();++iter)
-    delete *iter;
+  for(auto *it : commentset)
+    delete it;
   commentset.clear();
 }
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/context.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/context.hh
index 79fbe1eff..531643349 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/context.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/context.hh
@@ -96,7 +96,7 @@ private:
   int4 delayslot;		// delayslot depth
 public:
   ParserContext(ContextCache *ccache,Translate *trans);
-  ~ParserContext(void) { if (context != (uintm *)0) delete [] context; }
+  ~ParserContext(void) { delete [] context; }
   uint1 *getBuffer(void) { return buf; }
   void initialize(int4 maxstate,int4 maxparam,AddrSpace *spc);
   int4 getParserState(void) const { return parsestate; }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/cpool.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/cpool.hh
index f3fedca4b..4afb6aa5e 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/cpool.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/cpool.hh
@@ -81,7 +81,7 @@ private:
   int4 byteDataLen;	///< The number of bytes in the data for a string literal
 public:
   CPoolRecord(void) { type = (Datatype *)0; byteData = (uint1 *)0; }		///< Construct an empty record
-  ~CPoolRecord(void) { if (byteData != (uint1 *)0) delete [] byteData; }	///< Destructor
+  ~CPoolRecord(void) { delete [] byteData; }	///< Destructor
   uint4 getTag(void) const { return tag; }					///< Get the type of record
   const string &getToken(void) const { return token; }				///< Get name of method or data-type
   const uint1 *getByteData(void) const { return byteData; }			///< Get pointer to string literal data
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/database.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/database.cc
index 55446161e..bba4cf427 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/database.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/database.cc
@@ -549,9 +549,10 @@ FunctionSymbol::FunctionSymbol(Scope *sc,int4 size)
   buildType();
 }
 
-FunctionSymbol::~FunctionSymbol(void) {
-  if (fd != (Funcdata *)0)
-    delete fd;
+FunctionSymbol::~FunctionSymbol(void)
+
+{
+  delete fd;
 }
 
 Funcdata *FunctionSymbol::getFunction(void)
@@ -1182,11 +1183,8 @@ SymbolEntry *Scope::addMap(SymbolEntry &entry)
 Scope::~Scope(void)
 
 {
-  ScopeMap::iterator iter = children.begin();
-  while(iter != children.end()) {
-    delete (*iter).second;
-    ++iter;
-  }
+  for (auto &it : children)
+    delete it.second;
 }
 
 /// Starting from \b this Scope, look for a Symbol with the given name.
@@ -1962,16 +1960,10 @@ ScopeInternal::ScopeInternal(uint8 id,const string &nm,Architecture *g, Scope *o
 ScopeInternal::~ScopeInternal(void)
 
 {
-  vector<EntryMap *>::iterator iter1;
-
-  for(iter1=maptable.begin();iter1!=maptable.end();++iter1)
-    if ((*iter1) != (EntryMap *)0)
-      delete *iter1;
-
-  SymbolNameTree::iterator iter2;
-
-  for(iter2=nametree.begin();iter2!=nametree.end();++iter2)
-    delete *iter2;
+  for(auto *it : maptable)
+    delete it;
+  for(auto *it : nametree)
+    delete it;
 }
 
 void ScopeInternal::clear(void)
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/emulate.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/emulate.cc
index cbb0522f3..3a9026aab 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/emulate.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/emulate.cc
@@ -341,10 +341,10 @@ EmulatePcodeCache::EmulatePcodeCache(Translate *t,MemoryState *s,BreakTable *b)
 void EmulatePcodeCache::clearCache(void)
 
 {
-  for(int4 i=0;i<opcache.size();++i)
-    delete opcache[i];
-  for(int4 i=0;i<varcache.size();++i)
-    delete varcache[i];
+  for(auto *op : opcache)
+    delete op;
+  for(auto *var : varcache)
+    delete var;
   opcache.clear();
   varcache.clear();
 }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/emulateutil.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/emulateutil.cc
index 73fcfec97..eaf01b119 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/emulateutil.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/emulateutil.cc
@@ -295,10 +295,10 @@ void EmulateSnippet::fallthruOp(void)
 EmulateSnippet::~EmulateSnippet(void)
 
 {
-  for(int4 i=0;i<opList.size();++i)
-    delete opList[i];
-  for(int4 i=0;i<varList.size();++i)
-    delete varList[i];
+  for(auto *op : opList)
+    delete op;
+  for(auto *var : varList)
+    delete var;
 }
 
 /// \brief Provide the caller with an emitter for building the p-code snippet
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.cc
index c6485f360..ed7d204da 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.cc
@@ -583,11 +583,8 @@ ParamListStandard::ParamListStandard(const ParamListStandard &op2)
 ParamListStandard::~ParamListStandard(void)
 
 {
-  for(int4 i=0;i<resolverMap.size();++i) {
-    ParamEntryResolver *resolver = resolverMap[i];
-    if (resolver != (ParamEntryResolver *)0)
-      delete resolver;
-  }
+  for(auto *resolver : resolverMap)
+    delete resolver;
 }
 
 /// Find the (first) entry containing the given memory range
@@ -2198,10 +2195,8 @@ ProtoModel::ProtoModel(const string &nm,const ProtoModel &op2)
 ProtoModel::~ProtoModel(void)
 
 {
-  if (input != (ParamList *)0)
-    delete input;
-  if (output != (ParamList *)0)
-    delete output;
+  delete input;
+  delete output;
 }
 
 /// Test whether one ProtoModel can substituted for another during FuncCallSpecs::deindirect
@@ -2935,13 +2930,9 @@ ProtoStoreSymbol::ProtoStoreSymbol(Scope *sc,const Address &usepoint)
 ProtoStoreSymbol::~ProtoStoreSymbol(void)
 
 {
-  for(int4 i=0;i<inparam.size();++i) {
-    ProtoParameter *param = inparam[i];
-    if (param != (ProtoParameter *)0)
-      delete param;
-  }
-  if (outparam != (ProtoParameter *)0)
-    delete outparam;
+  for(auto *param : inparam)
+    delete param;
+  delete outparam;
 }
 
 /// Retrieve the specified ProtoParameter object, making sure it is a ParameterSymbol.
@@ -2957,8 +2948,7 @@ ParameterSymbol *ProtoStoreSymbol::getSymbolBacked(int4 i)
   ParameterSymbol *res = dynamic_cast<ParameterSymbol *>(inparam[i]);
   if (res != (ParameterSymbol *)0)
     return res;
-  if (inparam[i] != (ProtoParameter *)0)
-    delete inparam[i];
+  delete inparam[i];
   res = new ParameterSymbol();
   inparam[i] = res;
   return res;
@@ -3058,8 +3048,7 @@ ProtoParameter *ProtoStoreSymbol::getInput(int4 i)
 ProtoParameter *ProtoStoreSymbol::setOutput(const ParameterPieces &piece)
 
 {
-  if (outparam != (ProtoParameter *)0)
-    delete outparam;
+  delete outparam;
   outparam = new ParameterBasic("",piece.addr,piece.type,piece.flags);
   return outparam;
 }
@@ -3119,13 +3108,9 @@ ProtoStoreInternal::ProtoStoreInternal(Datatype *vt)
 ProtoStoreInternal::~ProtoStoreInternal(void)
 
 {
-  if (outparam != (ProtoParameter *)0)
-    delete outparam;
-  for(int4 i=0;i<inparam.size();++i) {
-    ProtoParameter *param = inparam[i];
-    if (param != (ProtoParameter *)0)
-      delete param;
-  }
+  delete outparam;
+  for(auto *param : inparam)
+    delete param;
 }
 
 ProtoParameter *ProtoStoreInternal::setInput(int4 i,const string &nm,const ParameterPieces &pieces)
@@ -3133,8 +3118,7 @@ ProtoParameter *ProtoStoreInternal::setInput(int4 i,const string &nm,const Param
 {
   while(inparam.size() <= i)
     inparam.push_back((ProtoParameter *)0);
-  if (inparam[i] != (ProtoParameter *)0)
-    delete inparam[i];
+  delete inparam[i];
   inparam[i] = new ParameterBasic(nm,pieces.addr,pieces.type,pieces.flags);
   return inparam[i];
 }
@@ -3144,8 +3128,7 @@ void ProtoStoreInternal::clearInput(int4 i)
 {
   int4 sz = inparam.size();
   if (i>=sz) return;
-  if (inparam[i] != (ProtoParameter *)0)
-    delete inparam[i];
+  delete inparam[i];
   inparam[i] = (ProtoParameter *)0;
   for(int4 j=i+1;j<sz;++j) {	// Renumber parameters with index > i
     inparam[j-1] = inparam[j];
@@ -3158,10 +3141,8 @@ void ProtoStoreInternal::clearInput(int4 i)
 void ProtoStoreInternal::clearAllInputs(void)
 
 {
-  for(int4 i=0;i<inparam.size();++i) {
-    if (inparam[i] != (ProtoParameter *)0)
-      delete inparam[i];
-  }
+  for(auto *param : inparam)
+    delete param;
   inparam.clear();
 }
 
@@ -3182,8 +3163,7 @@ ProtoParameter *ProtoStoreInternal::getInput(int4 i)
 ProtoParameter *ProtoStoreInternal::setOutput(const ParameterPieces &piece)
 
 {
-  if (outparam != (ProtoParameter *)0)
-    delete outparam;
+  delete outparam;
   outparam = new ParameterBasic("",piece.addr,piece.type,piece.flags);
   return outparam;
 }
@@ -3191,8 +3171,7 @@ ProtoParameter *ProtoStoreInternal::setOutput(const ParameterPieces &piece)
 void ProtoStoreInternal::clearOutput(void)
 
 {
-  if (outparam != (ProtoParameter *)0)
-    delete outparam;
+  delete outparam;
   outparam = new ParameterBasic(voidtype);
 }
 
@@ -3590,8 +3569,7 @@ void FuncProto::copy(const FuncProto &op2)
   model = op2.model;
   extrapop = op2.extrapop;
   flags = op2.flags;
-  if (store != (ProtoStore *)0)
-    delete store;
+  delete store;
   if (op2.store != (ProtoStore *)0)
     store = op2.store->clone();
   else
@@ -3703,8 +3681,7 @@ void FuncProto::setInternal(ProtoModel *m,Datatype *vt)
 FuncProto::~FuncProto(void)
 
 {
-  if (store != (ProtoStore *)0)
-    delete store;
+  delete store;
 }
 
 bool FuncProto::isInputLocked(void) const
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata.hh
index c9a777b37..51b38acc0 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata.hh
@@ -408,7 +408,7 @@ public:
   void initActiveOutput(void);					///< Initialize \e return prototype recovery analysis
   /// \brief Clear any analysis of the function's \e return prototype
   void clearActiveOutput(void) {
-    if (activeoutput != (ParamActive *)0) delete activeoutput;
+    delete activeoutput;
     activeoutput = (ParamActive *)0;
   }
   ParamActive *getActiveOutput(void) const { return activeoutput; }	///< Get the \e return prototype recovery object
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/ghidra_process.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/ghidra_process.cc
index 9ec678837..36cab1ede 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/ghidra_process.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/ghidra_process.cc
@@ -232,10 +232,8 @@ void DeregisterProgram::rawAction(void)
 
 {
 #ifdef __REMOTE_SOCKET__
-    if (ghidra_dcp != (IfaceStatus *)0)
-      delete ghidra_dcp;
-    if (remote != (RemoteSocket *)0)
-      delete remote;
+    delete ghidra_dcp;
+    delete remote;
     ghidra_dcp = (IfaceStatus *)0;
     remote = (RemoteSocket *)0;
 #endif
@@ -428,8 +426,7 @@ void SetOptions::loadParameters(void)
 SetOptions::~SetOptions(void)
 
 {
-  if (decoder != (Decoder *)0)
-    delete decoder;
+  delete decoder;
 }
 
 void SetOptions::rawAction(void)
@@ -488,9 +485,8 @@ int4 GhidraCapability::readCommand(istream &sin,ostream &out)
 void GhidraCapability::shutDown(void)
 
 {
-  map<string,GhidraCommand *>::iterator iter;
-  for(iter=commandmap.begin();iter!=commandmap.end();++iter)
-    delete (*iter).second;
+  for(auto &it : commandmap)
+    delete it.second;
 }
 
 void GhidraDecompCapability::initialize(void)
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/grammar.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/grammar.cc
index dffee43ab..88b2e7fa9 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/grammar.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/grammar.cc
@@ -2693,45 +2693,36 @@ Datatype *CParse::oldEnum(const string &ident)
 void CParse::clearAllocation(void)
 
 {
-  list<TypeDeclarator *>::iterator iter1;
-
-  for(iter1=typedec_alloc.begin();iter1!=typedec_alloc.end();++iter1)
-    delete *iter1;
+  for(auto *it : typedec_alloc)
+    delete it;
   typedec_alloc.clear();
 
-  list<TypeSpecifiers *>::iterator iter2;
-  for(iter2=typespec_alloc.begin();iter2!=typespec_alloc.end();++iter2)
-    delete *iter2;
+  for(auto *it : typespec_alloc)
+    delete it;
   typespec_alloc.clear();
 
-  list<vector<uint4> *>::iterator iter3;
-  for(iter3=vecuint4_alloc.begin();iter3!=vecuint4_alloc.end();++iter3)
-    delete *iter3;
+  for(auto *it : vecuint4_alloc)
+    delete it;
   vecuint4_alloc.clear();
 
-  list<vector<TypeDeclarator *> *>::iterator iter4;
-  for(iter4=vecdec_alloc.begin();iter4!=vecdec_alloc.end();++iter4)
-    delete *iter4;
+  for(auto *it : vecdec_alloc)
+    delete it;
   vecdec_alloc.clear();
 
-  list<string *>::iterator iter5;
-  for(iter5=string_alloc.begin();iter5!=string_alloc.end();++iter5)
-    delete *iter5;
+  for(auto *it : string_alloc)
+    delete it;
   string_alloc.clear();
 
-  list<uintb *>::iterator iter6;
-  for(iter6=num_alloc.begin();iter6!=num_alloc.end();++iter6)
-    delete *iter6;
+  for(auto *it : num_alloc)
+    delete it;
   num_alloc.clear();
 
-  list<Enumerator *>::iterator iter7;
-  for(iter7=enum_alloc.begin();iter7!=enum_alloc.end();++iter7)
-    delete *iter7;
+  for(auto *it : enum_alloc)
+    delete it;
   enum_alloc.clear();
 
-  list<vector<Enumerator *> *>::iterator iter8;
-  for(iter8=vecenum_alloc.begin();iter8!=vecenum_alloc.end();++iter8)
-    delete *iter8;
+  for(auto *it : vecenum_alloc)
+    delete it;
   vecenum_alloc.clear();
 }
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/grammar.y b/Ghidra/Features/Decompiler/src/decompile/cpp/grammar.y
index c740c426f..78cf10750 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/grammar.y
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/grammar.y
@@ -1150,45 +1150,36 @@ Datatype *CParse::oldEnum(const string &ident)
 void CParse::clearAllocation(void)
 
 {
-  list<TypeDeclarator *>::iterator iter1;
-
-  for(iter1=typedec_alloc.begin();iter1!=typedec_alloc.end();++iter1)
-    delete *iter1;
+  for(auto *it : typedec_alloc)
+    delete it;
   typedec_alloc.clear();
 
-  list<TypeSpecifiers *>::iterator iter2;
-  for(iter2=typespec_alloc.begin();iter2!=typespec_alloc.end();++iter2)
-    delete *iter2;
+  for(auto *it : typespec_alloc)
+    delete it;
   typespec_alloc.clear();
 
-  list<vector<uint4> *>::iterator iter3;
-  for(iter3=vecuint4_alloc.begin();iter3!=vecuint4_alloc.end();++iter3)
-    delete *iter3;
+  for(auto *it : vecuint4_alloc)
+    delete it;
   vecuint4_alloc.clear();
 
-  list<vector<TypeDeclarator *> *>::iterator iter4;
-  for(iter4=vecdec_alloc.begin();iter4!=vecdec_alloc.end();++iter4)
-    delete *iter4;
+  for(auto *it : vecdec_alloc)
+    delete it;
   vecdec_alloc.clear();
 
-  list<string *>::iterator iter5;
-  for(iter5=string_alloc.begin();iter5!=string_alloc.end();++iter5)
-    delete *iter5;
+  for(auto *it : string_alloc)
+    delete it;
   string_alloc.clear();
 
-  list<uintb *>::iterator iter6;
-  for(iter6=num_alloc.begin();iter6!=num_alloc.end();++iter6)
-    delete *iter6;
+  for(auto *it : num_alloc)
+    delete it;
   num_alloc.clear();
 
-  list<Enumerator *>::iterator iter7;
-  for(iter7=enum_alloc.begin();iter7!=enum_alloc.end();++iter7)
-    delete *iter7;
+  for(auto *it : enum_alloc)
+    delete it;
   enum_alloc.clear();
 
-  list<vector<Enumerator *> *>::iterator iter8;
-  for(iter8=vecenum_alloc.begin();iter8!=vecenum_alloc.end();++iter8)
-    delete *iter8;
+  for(auto *it : vecenum_alloc)
+    delete it;
   vecenum_alloc.clear();
 }
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/ifacedecomp.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/ifacedecomp.cc
index b9e20446b..4f6850f08 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/ifacedecomp.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/ifacedecomp.cc
@@ -237,20 +237,16 @@ IfaceDecompData::IfaceDecompData(void)
 IfaceDecompData::~IfaceDecompData(void)
 
 {
-  if (cgraph != (CallGraph *)0)
-    delete cgraph;
-  if (conf != (Architecture *)0)
-    delete conf;
-  if (testCollection != (FunctionTestCollection *)0)
-    delete testCollection;
+  delete cgraph;
+  delete conf;
+  delete testCollection;
 // fd will get deleted with Database
 }
 
 void IfaceDecompData::allocateCallGraph(void)
 
 {
-  if (cgraph != (CallGraph *)0)
-    delete cgraph;
+  delete cgraph;
   cgraph = new CallGraph(conf);
 }
 
@@ -270,8 +266,7 @@ void IfaceDecompData::abortFunction(ostream &s)
 void IfaceDecompData::clearArchitecture(void)
 
 {
-  if (conf != (Architecture *)0)
-    delete conf;
+  delete conf;
   conf = (Architecture *)0;
   fd = (Funcdata *)0;
 }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/inject_sleigh.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/inject_sleigh.cc
index cc8ed87b8..639bae38d 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/inject_sleigh.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/inject_sleigh.cc
@@ -22,15 +22,13 @@ namespace ghidra {
 InjectContextSleigh::~InjectContextSleigh(void)
 
 {
-  if (pos != (ParserContext *)0)
-    delete pos;
+  delete pos;
 }
 
 InjectPayloadSleigh::~InjectPayloadSleigh(void)
 
 {
-  if (tpl != (ConstructTpl *)0)
-    delete tpl;
+  delete tpl;
 }
 
 InjectPayloadSleigh::InjectPayloadSleigh(const string &src,const string &nm,int4 tp)
@@ -203,8 +201,7 @@ ExecutablePcodeSleigh::ExecutablePcodeSleigh(Architecture *g,const string &src,c
 ExecutablePcodeSleigh::~ExecutablePcodeSleigh(void)
 
 {
-  if (tpl != (ConstructTpl *)0)
-    delete tpl;
+  delete tpl;
 }
 
 void ExecutablePcodeSleigh::inject(InjectContext &context,PcodeEmit &emit) const
@@ -253,9 +250,8 @@ void ExecutablePcodeSleigh::printTemplate(ostream &s) const
 InjectPayloadDynamic::~InjectPayloadDynamic(void)
 
 {
-  map<Address,Document *>::iterator iter;
-  for(iter=addrMap.begin();iter!=addrMap.end();++iter)
-    delete (*iter).second;
+  for(auto &it : addrMap)
+    delete it.second;
 }
 
 void InjectPayloadDynamic::decodeEntry(Decoder &decoder)
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/interface.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/interface.cc
index 85f5f91df..d0764370c 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/interface.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/interface.cc
@@ -57,23 +57,14 @@ RemoteSocket::RemoteSocket(void)
 void RemoteSocket::close(void)
 
 {
-  if (inStream != (istream *)0) {
-    delete inStream;
-    inStream = (istream *)0;
-  }
-  if (outStream != (ostream *)0) {
-    delete outStream;
-    outStream = (ostream *)0;
-  }
-  if (inbuf != (basic_filebuf<char> *)0) {
-    // Destroying the buffer should automatically close the socket
-    delete inbuf;
-    inbuf = (basic_filebuf<char> *)0;
-  }
-  if (outbuf != (basic_filebuf<char> *)0) {
-    delete outbuf;
-    outbuf = (basic_filebuf<char> *)0;
-  }
+  delete inStream;
+  inStream = (istream *)0;
+  delete outStream;
+  outStream = (ostream *)0;
+  delete inbuf;
+  inbuf = (basic_filebuf<char> *)0;
+  delete outbuf;
+  outbuf = (basic_filebuf<char> *)0;
   isOpen = false;
 }
 
@@ -256,18 +247,14 @@ void IfaceStatus::wordsToString(string &res,const vector<string> &list)
 IfaceStatus::~IfaceStatus(void)
 
 {
-  if (optr != fileoptr) {
-    ((ofstream *)fileoptr)->close();
+  if (optr != fileoptr)
     delete fileoptr;
-  }
   while(!promptstack.empty())
     popScript();
   for(int4 i=0;i<comlist.size();++i)
     delete comlist[i];
-  map<string,IfaceData *>::const_iterator iter;
-  for(iter=datamap.begin();iter!=datamap.end();++iter)
-    if ((*iter).second != (IfaceData *)0)
-      delete (*iter).second;
+  for(auto &it : datamap)
+    delete it.second;
 }
 
 /// \brief Register a command with this interface
@@ -598,7 +585,6 @@ void IfcClosefile::execute(istream &s)
 {
   if (status->optr == status->fileoptr)
     throw IfaceExecutionError("No file open");
-  ((ofstream *)status->fileoptr)->close();
   delete status->fileoptr;
   status->fileoptr = status->optr;
 }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/jumptable.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/jumptable.cc
index c07aea723..3087885c3 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/jumptable.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/jumptable.cc
@@ -1403,8 +1403,7 @@ bool JumpBasic::foldInOneGuard(Funcdata *fd,GuardRecord &guard,JumpTable *jump)
 JumpBasic::~JumpBasic(void)
 
 {
-  if (jrange != (JumpValuesRange *)0)
-    delete jrange;
+  delete jrange;
 }
 
 bool JumpBasic::recoverModel(Funcdata *fd,PcodeOp *indop,uint4 matchsize,uint4 maxtablesize)
@@ -1611,10 +1610,8 @@ JumpModel *JumpBasic::clone(JumpTable *jt) const
 void JumpBasic::clear(void)
 
 {
-  if (jrange != (JumpValuesRange *)0) {
-    delete jrange;
-    jrange = (JumpValuesRange *)0;
-  }
+  delete jrange;
+  jrange = (JumpValuesRange *)0;
   pathMeld.clear();
   selectguards.clear();
   normalvn = (Varnode *)0;
@@ -2379,10 +2376,8 @@ JumpTable::JumpTable(const JumpTable *op2)
 JumpTable::~JumpTable(void)
 
 {
-  if (jmodel != (JumpModel *)0)
-    delete jmodel;
-  if (origmodel != (JumpModel *)0)
-    delete origmodel;
+  delete jmodel;
+  delete origmodel;
 }
 
 /// \brief Return the number of address table entries that target the given basic-block
@@ -2420,8 +2415,7 @@ bool JumpTable::isOverride(void) const
 void JumpTable::setOverride(const vector<Address> &addrtable,const Address &naddr,uintb h,uintb sv)
 
 {
-  if (jmodel != (JumpModel *)0)
-    delete jmodel;
+  delete jmodel;
 
   JumpBasicOverride *override;
   jmodel = override = new JumpBasicOverride(this);
@@ -2602,8 +2596,7 @@ void JumpTable::recoverAddresses(Funcdata *fd)
 void JumpTable::recoverMultistage(Funcdata *fd)
 
 {
-  if (origmodel != (JumpModel *)0)
-    delete origmodel;
+  delete origmodel;
   origmodel = jmodel;
   jmodel = (JumpModel *)0;
   
@@ -2614,26 +2607,21 @@ void JumpTable::recoverMultistage(Funcdata *fd)
     recoverAddresses(fd);
   }
   catch(JumptableThunkError &err) {
-    if (jmodel != (JumpModel *)0)
-      delete jmodel;
+    delete jmodel;
     jmodel = origmodel;
     origmodel = (JumpModel *)0;
     addresstable = oldaddresstable;
     fd->warning("Second-stage recovery error",indirect->getAddr());
   }
   catch(LowlevelError &err) {
-    if (jmodel != (JumpModel *)0)
-      delete jmodel;
+    delete jmodel;
     jmodel = origmodel;
     origmodel = (JumpModel *)0;
     addresstable = oldaddresstable;
     fd->warning("Second-stage recovery error",indirect->getAddr());
   }
   recoverystage = 2;
-  if (origmodel != (JumpModel *)0) { // Keep the new model if it was created successfully
-    delete origmodel;
-    origmodel = (JumpModel *)0;
-  }
+  delete origmodel;
 }
 
 /// This is run assuming the address table has already been recovered, via recoverAddresses() in another
@@ -2651,8 +2639,7 @@ bool JumpTable::recoverLabels(Funcdata *fd)
 
   // Unless the model is an override, move model (created on a flow copy) so we can create a current instance
   if (jmodel != (JumpModel *)0) {
-    if (origmodel != (JumpModel *)0)
-      delete origmodel;
+    delete origmodel;
     if (!jmodel->isOverride()) {
       origmodel = jmodel;
       jmodel = (JumpModel *)0;
@@ -2685,10 +2672,8 @@ bool JumpTable::recoverLabels(Funcdata *fd)
     trivialSwitchOver();
     jmodel->buildLabels(fd,addresstable,label,origmodel);
   }
-  if (origmodel != (JumpModel *)0) {
-    delete origmodel;
-    origmodel = (JumpModel *)0;
-  }
+  delete origmodel;
+  origmodel = (JumpModel *)0;
   return multistagerestart;
 }
 
@@ -2697,10 +2682,8 @@ bool JumpTable::recoverLabels(Funcdata *fd)
 void JumpTable::clear(void)
 
 {
-  if (origmodel != (JumpModel *)0) {
-    delete origmodel;
-    origmodel = (JumpModel *)0;
-  }
+  delete origmodel;
+  origmodel = (JumpModel *)0;
   if (jmodel->isOverride())
     jmodel->clear();
   else {
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/loadimage.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/loadimage.cc
index 87bcb5de8..d17dc5729 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/loadimage.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/loadimage.cc
@@ -48,10 +48,7 @@ RawLoadImage::RawLoadImage(const string &f) : LoadImage(f)
 RawLoadImage::~RawLoadImage(void)
 
 {
-  if (thefile != (ifstream *)0) {
-    thefile->close();
-    delete thefile;
-  }
+  delete thefile;
 }
 
 /// The file is opened and its size immediately recovered.
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/loadimage_bfd.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/loadimage_bfd.cc
index 477c17e81..085c9089e 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/loadimage_bfd.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/loadimage_bfd.cc
@@ -41,8 +41,7 @@ LoadImageBfd::LoadImageBfd(const string &f,const string &t) : LoadImage(f)
 LoadImageBfd::~LoadImageBfd(void)
 
 {
-  if (symbol_table != (asymbol **)0)
-    delete [] symbol_table;
+  delete [] symbol_table;
   if (thebfd != (bfd *) 0)
     close();
   delete [] buffer;
@@ -276,8 +275,7 @@ bool LoadImageBfd::getNextSection(LoadImageSection &record) const
 void LoadImageBfd::closeSymbols(void) const
 
 {
-  if (symbol_table != (asymbol **)0)
-    delete [] symbol_table;
+  delete [] symbol_table;
   symbol_table = (asymbol **)0;
   number_of_symbols = 0;
   cursymbol = 0;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/memstate.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/memstate.cc
index 874909f0d..03f4c6d16 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/memstate.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/memstate.cc
@@ -539,10 +539,8 @@ MemoryPageOverlay::MemoryPageOverlay(AddrSpace *spc,int4 ws,int4 ps,MemoryBank *
 MemoryPageOverlay::~MemoryPageOverlay(void)
 
 {
-  map<uintb,uint1 *>::iterator iter;
-
-  for(iter=page.begin();iter!=page.end();++iter)
-    delete [] (*iter).second;
+  for(auto &it : page)
+    delete [] it.second;
 }
 
 /// Write the value into the hashtable, using \b addr as a key.
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/op.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/op.cc
index 0e3decc80..d417f1cc5 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/op.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/op.cc
@@ -1159,14 +1159,12 @@ list<PcodeOp *>::const_iterator PcodeOpBank::end(OpCode opc) const
 void PcodeOpBank::clear(void)
 
 {
-  list<PcodeOp *>::iterator iter;
-
-  for(iter=alivelist.begin();iter!=alivelist.end();++iter)
-    delete *iter;
-  for(iter=deadlist.begin();iter!=deadlist.end();++iter)
-    delete *iter;
-  for(iter=deadandgone.begin();iter!=deadandgone.end();++iter)
-    delete *iter;
+  for(auto *it : alivelist)
+    delete it;
+  for(auto *it : deadlist)
+    delete it;
+  for(auto *it : deadandgone)
+    delete it;
   optree.clear();
   alivelist.clear();
   deadlist.clear();
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/options.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/options.cc
index 8d293ffcb..062446757 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/options.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/options.cc
@@ -135,9 +135,8 @@ OptionDatabase::OptionDatabase(Architecture *g)
 OptionDatabase::~OptionDatabase(void)
 
 {
-  map<uint4,ArchOption *>::iterator iter;
-  for(iter=optionmap.begin();iter!=optionmap.end();++iter)
-    delete (*iter).second;
+  for(auto &it : optionmap)
+    delete it.second;
 }
 
 /// Perform an \e option \e command directly, given its id and optional parameters
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/override.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/override.cc
index f6fd0f552..b01f7c4e4 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/override.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/override.cc
@@ -29,10 +29,8 @@ ElementId ELEM_PROTOOVERRIDE = ElementId("protooverride",224);
 void Override::clear(void)
 
 {
-  map<Address,FuncProto *>::iterator iter;
-
-  for(iter=protoover.begin();iter!=protoover.end();++iter)
-    delete (*iter).second;
+  for(auto &it : protoover)
+    delete it.second;
 
   forcegoto.clear();
   deadcodedelay.clear();
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodecompile.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodecompile.cc
index ca9d71ab9..e5d159bb5 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodecompile.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodecompile.cc
@@ -46,8 +46,7 @@ ExprTree::ExprTree(OpTpl *op)
 ExprTree::~ExprTree(void)
 
 {
-  if (outvn != (VarnodeTpl *)0)
-    delete outvn;
+  delete outvn;
   if (ops != (vector<OpTpl *> *)0) {
     for(int4 i=0;i<ops->size();++i)
       delete (*ops)[i];
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeinject.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeinject.cc
index f32232022..bdb4bca19 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeinject.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeinject.cc
@@ -208,9 +208,8 @@ uintb ExecutablePcode::evaluate(const vector<uintb> &input)
 PcodeInjectLibrary::~PcodeInjectLibrary(void)
 
 {
-  vector<InjectPayload *>::iterator iter;
-  for(iter=injection.begin();iter!=injection.end();++iter)
-    delete *iter;
+  for(auto *it : injection)
+    delete it;
 }
 
 /// \brief Map a \e call-fixup name to a payload id
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeinject.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeinject.hh
index f123ac769..fd0c0b9ae 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeinject.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeinject.hh
@@ -167,7 +167,7 @@ class ExecutablePcode : public InjectPayload {
   void build(void);			///< Initialize the Emulate object with the snippet p-code
 public:
   ExecutablePcode(Architecture *g,const string &src,const string &nm);	///< Constructor
-  virtual ~ExecutablePcode(void) { if (emitter != (PcodeEmit *)0) delete emitter; }
+  virtual ~ExecutablePcode(void) { delete emitter; }
   virtual string getSource(void) const { return source; }
   uintb evaluate(const vector<uintb> &input);		///< Evaluate the snippet on the given inputs
 };
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.cc
index 1dd2e132e..136d42435 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.cc
@@ -1586,19 +1586,19 @@ yydestruct (const char *yymsg,
         break;
 
     case YYSYMBOL_jumpdest: /* jumpdest  */
-            { if (((*yyvaluep).varnode) != (VarnodeTpl *)0) delete ((*yyvaluep).varnode); }
+            { delete ((*yyvaluep).varnode); }
         break;
 
     case YYSYMBOL_varnode: /* varnode  */
-            { if (((*yyvaluep).varnode) != (VarnodeTpl *)0) delete ((*yyvaluep).varnode); }
+            { delete ((*yyvaluep).varnode); }
         break;
 
     case YYSYMBOL_integervarnode: /* integervarnode  */
-            { if (((*yyvaluep).varnode) != (VarnodeTpl *)0) delete ((*yyvaluep).varnode); }
+            { delete ((*yyvaluep).varnode); }
         break;
 
     case YYSYMBOL_lhsvarnode: /* lhsvarnode  */
-            { if (((*yyvaluep).varnode) != (VarnodeTpl *)0) delete ((*yyvaluep).varnode); }
+            { delete ((*yyvaluep).varnode); }
         break;
 
     case YYSYMBOL_paramlist: /* paramlist  */
@@ -2978,10 +2978,8 @@ void PcodeSnippet::clear(void)
       tree.erase(tmpiter);
     }
   }
-  if (result != (ConstructTpl *)0) {
-    delete result;
-    result = (ConstructTpl *)0;
-  }
+  delete result;
+  result = (ConstructTpl *)0;
   // tempbase = 0;
   errorcount = 0;
   firsterror.clear();
@@ -3012,13 +3010,9 @@ PcodeSnippet::PcodeSnippet(const SleighBase *slgh)
 PcodeSnippet::~PcodeSnippet(void)
 
 {
-  SymbolTree::iterator iter;
-  for(iter=tree.begin();iter!=tree.end();++iter)
-    delete *iter;		// Free ALL temporary symbols
-  if (result != (ConstructTpl *)0) {
-    delete result;
-    result = (ConstructTpl *)0;
-  }
+  for(auto *it : tree)
+    delete it;		// Free ALL temporary symbols
+  delete result;
 }
 
 void PcodeSnippet::reportError(const Location *loc, const string &msg)
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.y b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.y
index 78bc4ada8..11b058a94 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.y
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/pcodeparse.y
@@ -106,7 +106,7 @@ extern int pcodeerror(const char *str );
 %destructor { delete $$; } rtlmid
 %destructor { if ($$ != (vector<OpTpl *> *)0) { for(int4 i=0;i<$$->size();++i) delete (*$$)[i]; delete $$;} } statement
 %destructor { delete $$; } expr
-%destructor { if ($$ != (VarnodeTpl *)0) delete $$; } varnode integervarnode lhsvarnode jumpdest
+%destructor { delete $$; } varnode integervarnode lhsvarnode jumpdest
 %destructor { delete $$; } sizedstar
 
 %%
@@ -681,10 +681,8 @@ void PcodeSnippet::clear(void)
       tree.erase(tmpiter);
     }
   }
-  if (result != (ConstructTpl *)0) {
-    delete result;
-    result = (ConstructTpl *)0;
-  }
+  delete result;
+  result = (ConstructTpl *)0;
   // tempbase = 0;
   errorcount = 0;
   firsterror.clear();
@@ -715,13 +713,9 @@ PcodeSnippet::PcodeSnippet(const SleighBase *slgh)
 PcodeSnippet::~PcodeSnippet(void)
 
 {
-  SymbolTree::iterator iter;
-  for(iter=tree.begin();iter!=tree.end();++iter)
-    delete *iter;		// Free ALL temporary symbols
-  if (result != (ConstructTpl *)0) {
-    delete result;
-    result = (ConstructTpl *)0;
-  }
+  for(auto *it : tree)
+    delete it;		// Free ALL temporary symbols
+  delete result;
 }
 
 void PcodeSnippet::reportError(const Location *loc, const string &msg)
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printjava.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/printjava.cc
index f50d80d49..770852f7a 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printjava.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printjava.cc
@@ -41,8 +41,7 @@ PrintJava::PrintJava(Architecture *glb,const string &nm) : PrintC(glb,nm)
 {
   resetDefaultsPrintJava();
   nullToken = "null";			// Java standard lower-case 'null'
-  if (castStrategy != (CastStrategy *)0)
-    delete castStrategy;
+  delete castStrategy;
 
   castStrategy = new CastStrategyJava();
 }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.cc
index 1f2782c65..34210f05f 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.cc
@@ -76,8 +76,7 @@ PrintLanguage::~PrintLanguage(void)
 
 {
   delete emit;
-  if (castStrategy != (CastStrategy *)0)
-    delete castStrategy;
+  delete castStrategy;
 }
 
 /// \param val is the number of characters
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/rulecompile.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/rulecompile.cc
index fe8a41301..aac52605a 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/rulecompile.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/rulecompile.cc
@@ -404,13 +404,9 @@ RuleCompile::RuleCompile(void)
 RuleCompile::~RuleCompile(void)
 
 {
-  if (finalrule != (ConstraintGroup *)0)
-    delete finalrule;
-  for(int4 i=0;i<inst.size();++i) {
-    OpBehavior *t_op = inst[i];
-    if (t_op != (OpBehavior *)0)
-      delete t_op;
-  }
+  delete finalrule;
+  for(auto *op : inst) {
+    delete op;
 }
 
 void RuleCompile::ruleError(const char *s)
@@ -773,10 +769,8 @@ void RuleCompile::run(istream &s,bool debug)
     return;
   }
   errors = 0;
-  if (finalrule != (ConstraintGroup *)0) {
-    delete finalrule;
-    finalrule = (ConstraintGroup *)0;
-  }
+  delete finalrule;
+  finalrule = (ConstraintGroup *)0;
   lexer.initialize(s);
 
   rulecompile = this;		// Setup the global pointer
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/semantics.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/semantics.cc
index 2e3531ea2..ad4ee88a1 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/semantics.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/semantics.cc
@@ -671,11 +671,9 @@ void HandleTpl::restoreXml(const Element *el,const AddrSpaceManager *manage)
 OpTpl::~OpTpl(void)
 
 {				// An OpTpl owns its varnode_tpls
-  if (output != (VarnodeTpl *)0)
-    delete output;
-  vector<VarnodeTpl *>::iterator iter;
-  for(iter=input.begin();iter!=input.end();++iter)
-    delete *iter;
+  delete output;
+  for(auto *it : input)
+    delete it;
 }
 
 bool OpTpl::isZeroSize(void) const
@@ -748,11 +746,9 @@ void OpTpl::restoreXml(const Element *el,const AddrSpaceManager *manage)
 ConstructTpl::~ConstructTpl(void)
 
 {				// Constructor owns its ops and handles
-  vector<OpTpl *>::iterator oiter;
-  for(oiter=vec.begin();oiter!=vec.end();++oiter)
-    delete *oiter;
-  if (result != (HandleTpl *)0)
-    delete result;
+  for(auto *it : vec)
+    delete it;
+  delete result;
 }
 
 bool ConstructTpl::addOp(OpTpl *ot)
@@ -848,8 +844,7 @@ void ConstructTpl::setInput(VarnodeTpl *vn,int4 index,int4 slot)
   OpTpl *op = vec[index];
   VarnodeTpl *oldvn = op->getIn(slot);
   op->setInput(vn,slot);
-  if (oldvn != (VarnodeTpl *)0)
-    delete oldvn;
+  delete oldvn;
 }
 
 void ConstructTpl::setOutput(VarnodeTpl *vn,int4 index)
@@ -859,8 +854,7 @@ void ConstructTpl::setOutput(VarnodeTpl *vn,int4 index)
   OpTpl *op = vec[index];
   VarnodeTpl *oldvn = op->getOut();
   op->setOutput(vn);
-  if (oldvn != (VarnodeTpl *)0)
-    delete oldvn;
+  delete oldvn;
 }
 
 void ConstructTpl::deleteOps(const vector<int4> &indices)
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/sleigh.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/sleigh.cc
index 965fbd41e..4a4edff77 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/sleigh.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/sleigh.cc
@@ -525,8 +525,7 @@ void Sleigh::clearForDelete(void)
 
 {
   delete cache;
-  if (discache != (DisassemblyCache *)0)
-    delete discache;
+  delete discache;
 }
 
 Sleigh::~Sleigh(void)
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpattern.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpattern.cc
index 755af9682..7388f6103 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpattern.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpattern.cc
@@ -694,10 +694,8 @@ void ContextPattern::restoreXml(const Element *el)
 CombinePattern::~CombinePattern(void)
 
 {
-  if (context != (ContextPattern *)0)
-    delete context;
-  if (instr != (InstructionPattern *)0)
-    delete instr;
+  delete context;
+  delete instr;
 }
 
 bool CombinePattern::isMatch(ParserWalker &walker) const
@@ -845,10 +843,8 @@ OrPattern::OrPattern(const vector<DisjointPattern *> &list)
 OrPattern::~OrPattern(void)
 
 {
-  vector<DisjointPattern *>::iterator iter;
-
-  for(iter=orlist.begin();iter!=orlist.end();++iter)
-    delete *iter;
+  for(auto *it : orlist)
+    delete it;
 }
 
 void OrPattern::shiftInstruction(int4 sa)
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpattern.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpattern.hh
index 8d2f8d437..071781854 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpattern.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpattern.hh
@@ -90,7 +90,7 @@ public:
   InstructionPattern(PatternBlock *mv) { maskvalue = mv; }
   InstructionPattern(bool tf) { maskvalue = new PatternBlock(tf); }
   PatternBlock *getBlock(void) { return maskvalue; }
-  virtual ~InstructionPattern(void) { if (maskvalue != (PatternBlock *)0) delete maskvalue; }
+  virtual ~InstructionPattern(void) { delete maskvalue; }
   virtual Pattern *simplifyClone(void) const { return new InstructionPattern(maskvalue->clone()); }
   virtual void shiftInstruction(int4 sa) { maskvalue->shift(sa); }
   virtual Pattern *doOr(const Pattern *b,int4 sa) const;
@@ -111,7 +111,7 @@ public:
   ContextPattern(void) { maskvalue = (PatternBlock *)0; } // For use with restoreXml
   ContextPattern(PatternBlock *mv) { maskvalue = mv; }
   PatternBlock *getBlock(void) { return maskvalue; }
-  virtual ~ContextPattern(void) { if (maskvalue != (PatternBlock *)0) delete maskvalue; }
+  virtual ~ContextPattern(void) { delete maskvalue; }
   virtual Pattern *simplifyClone(void) const { return new ContextPattern(maskvalue->clone()); }
   virtual void shiftInstruction(int4 sa) { }  // do nothing
   virtual Pattern *doOr(const Pattern *b,int4 sa) const;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.cc
index b308e1b71..892f81d99 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.cc
@@ -47,12 +47,10 @@ SleighSymbol *SymbolScope::findSymbol(const string &nm) const
 SymbolTable::~SymbolTable(void)
 
 {
-  vector<SymbolScope *>::iterator iter;
-  for(iter=table.begin();iter!=table.end();++iter)
-    delete *iter;
-  vector<SleighSymbol *>::iterator siter;
-  for(siter=symbollist.begin();siter!=symbollist.end();++siter)
-    delete *siter;
+  for(auto *it : table)
+    delete it;
+  for(auto *it : symbollist)
+    delete it;
 }
 
 void SymbolTable::addScope(void)
@@ -1458,20 +1456,14 @@ Constructor::Constructor(SubtableSymbol *p)
 Constructor::~Constructor(void)
 
 {
-  if (pattern != (TokenPattern *)0)
-    delete pattern;
+  delete pattern;
   if (pateq != (PatternEquation *)0)
     PatternEquation::release(pateq);
-  if (templ != (ConstructTpl *)0)
-    delete templ;
-  for(int4 i=0;i<namedtempl.size();++i) {
-    ConstructTpl *ntpl = namedtempl[i];
-    if (ntpl != (ConstructTpl *)0)
-      delete ntpl;
-  }
-  vector<ContextChange *>::iterator iter;
-  for(iter=context.begin();iter!=context.end();++iter)
-    delete *iter;
+  delete templ;
+  for(auto *it : namedtempl)
+    delete it;
+  for(auto *it : context)
+    delete it;
 }
 
 void Constructor::addInvisibleOperand(OperandSymbol *sym)
@@ -1961,13 +1953,10 @@ SubtableSymbol::SubtableSymbol(const string &nm) : TripleSymbol(nm)
 SubtableSymbol::~SubtableSymbol(void)
 
 {
-  if (pattern != (TokenPattern *)0)
-    delete pattern;
-  if (decisiontree != (DecisionNode *)0)
-    delete decisiontree;
-  vector<Constructor *>::iterator iter;
-  for(iter=construct.begin();iter!=construct.end();++iter)
-    delete *iter;
+  delete pattern;
+  delete decisiontree;
+  for(auto *it : construct)
+    delete it;
 }
 
 void SubtableSymbol::collectLocalValues(vector<uintb> &results) const
@@ -2117,12 +2106,10 @@ DecisionNode::DecisionNode(DecisionNode *p)
 DecisionNode::~DecisionNode(void)
 
 {				// We own sub nodes
-  vector<DecisionNode *>::iterator iter;
-  for(iter=children.begin();iter!=children.end();++iter)
-    delete *iter;
-  vector<pair<DisjointPattern *,Constructor *> >::iterator piter;
-  for(piter=list.begin();piter!=list.end();++piter)
-    delete (*piter).first;	// Delete the patterns
+  for(auto *it : children)
+    delete it;
+  for(auto &it : list)
+    delete it.first;	// Delete the patterns
 }
 
 void DecisionNode::addConstructorPair(const DisjointPattern *pat,Constructor *ct)
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.hh
index 2fc1e1921..007702898 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghsymbol.hh
@@ -623,7 +623,7 @@ public:
   void addOperand(OperandSymbol *sym) { operands.push_back(sym); }
   int4 getNumOperands(void) const { return operands.size(); }
   OperandSymbol *getOperand(int4 i) const { return operands[i]; }
-  virtual ~MacroSymbol(void) { if (construct != (ConstructTpl *)0) delete construct; }
+  virtual ~MacroSymbol(void) { delete construct; }
   virtual symbol_type getType(void) const { return macro_symbol; }
 };
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/transform.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/transform.cc
index 009aa79cb..41e4f16ad 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/transform.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/transform.cc
@@ -336,9 +336,8 @@ bool LanedRegister::decode(Decoder &decoder)
 TransformManager::~TransformManager(void)
 
 {
-  map<int4,TransformVar *>::iterator iter;
-  for(iter=pieceMap.begin();iter!=pieceMap.end();++iter) {
-    delete [] (*iter).second;
+  for(auto &it : pieceMap) {
+    delete [] it.second;
   }
 }
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/translate.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/translate.cc
index 1675ad354..42160b9e2 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/translate.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/translate.cc
@@ -438,8 +438,7 @@ void AddrSpaceManager::insertResolver(AddrSpace *spc,AddressResolver *rsolv)
   int4 ind = spc->getIndex();
   while(resolvelist.size() <= ind)
     resolvelist.push_back((AddressResolver *)0);
-  if (resolvelist[ind] != (AddressResolver *)0)
-    delete resolvelist[ind];
+  delete resolvelist[ind];
   resolvelist[ind] = rsolv;
 }
 
@@ -466,10 +465,8 @@ AddrSpaceManager::~AddrSpaceManager(void)
     else
       delete spc;
   }
-  for(int4 i=0;i<resolvelist.size();++i) {
-    if (resolvelist[i] != (AddressResolver *)0)
-      delete resolvelist[i];
-  }
+  for(int4 i=0;i<resolvelist.size();++i)
+    delete resolvelist[i];
   for(int4 i=0;i<splitlist.size();++i)
     delete splitlist[i];	// Delete any join records
 }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/type.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/type.cc
index 6f96e4e7c..d2dc75ff4 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/type.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/type.cc
@@ -2363,8 +2363,7 @@ void TypeCode::setPrototype(TypeFactory *tfact,ProtoModel *model,
 {
   factory = tfact;
   flags |= variable_length;
-  if (proto != (FuncProto *)0)
-    delete proto;
+  delete proto;
   proto = new FuncProto();
   proto->setInternal(model,voidtype);
   vector<Datatype *> typelist;
@@ -2421,8 +2420,7 @@ TypeCode::TypeCode(void) : Datatype(1,TYPE_CODE)
 TypeCode::~TypeCode(void)
 
 {
-  if (proto != (FuncProto *)0)
-    delete proto;
+  delete proto;
 }
 
 void TypeCode::printRaw(ostream &s) const
@@ -2893,10 +2891,8 @@ void TypeFactory::cacheCoreTypes(void)
 void TypeFactory::clear(void)
 
 {
-  DatatypeSet::iterator iter;
-
-  for(iter=tree.begin();iter!=tree.end();++iter)
-    delete *iter;
+  for(auto *it : tree)
+    delete it;
   tree.clear();
   nametree.clear();
   clearCache();
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/typeop.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/typeop.cc
index b3efbd76c..935e721f6 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/typeop.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/typeop.cc
@@ -163,8 +163,7 @@ TypeOp::TypeOp(TypeFactory *t,OpCode opc,const string &n)
 TypeOp::~TypeOp(void)
 
 {
-  if (behave != (OpBehavior *)0)
-    delete behave;
+  delete behave;
 }
 
 /// \return \b true if the ordering of the inputs does not affect the output
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/unify.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/unify.cc
index 3c2f67dc8..da8849fef 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/unify.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/unify.cc
@@ -248,8 +248,7 @@ ConstantExpression::~ConstantExpression(void)
 
 {
   delete expr1;
-  if (expr2 != (RHSConstant *)0)
-    delete expr2;
+  delete expr2;
 }
 
 RHSConstant *ConstantExpression::clone(void)
@@ -419,8 +418,7 @@ ConstraintVarConst::~ConstraintVarConst(void)
 
 {
   delete expr;
-  if (exprsz != (RHSConstant *)0)
-    delete exprsz;
+  delete exprsz;
 }
 
 UnifyConstraint *ConstraintVarConst::clone(void) const
@@ -1352,8 +1350,7 @@ ConstraintSetInputConstVal::~ConstraintSetInputConstVal(void)
 {
   delete val;
   delete slot;
-  if (exprsz != (RHSConstant *)0)
-    delete exprsz;
+  delete exprsz;
 }
 
 UnifyConstraint *ConstraintSetInputConstVal::clone(void) const
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/userop.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/userop.cc
index f83e8cb29..92d233e3b 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/userop.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/userop.cc
@@ -283,13 +283,8 @@ UserOpManage::UserOpManage(void)
 UserOpManage::~UserOpManage(void)
 
 {
-  vector<UserPcodeOp *>::iterator iter;
-
-  for(iter=useroplist.begin();iter!=useroplist.end();++iter) {
-    UserPcodeOp *userop = *iter;
-    if (userop != (UserPcodeOp *)0)
-      delete userop;
-  }
+  for(auto *op : useroplist)
+    delete op;
 }
 
 /// Every user defined p-code op is initially assigned an UnspecializedPcodeOp description,
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/varmap.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/varmap.cc
index 0ac915aa4..e749dca71 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/varmap.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/varmap.cc
@@ -812,9 +812,8 @@ MapState::MapState(AddrSpace *spc,const RangeList &rn,
 MapState::~MapState(void)
 
 {
-  vector<RangeHint *>::iterator riter;
-  for(riter=maplist.begin();riter!=maplist.end();++riter)
-    delete *riter;
+  for(auto *it : maplist)
+    delete it;
 }
 
 /// A specific range of bytes is described for the hint, given a starting offset and other information.
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/varnode.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/varnode.cc
index aa7c9399c..8d0f4a53b 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/varnode.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/varnode.cc
@@ -244,10 +244,8 @@ void Varnode::updateCover(void) const
 void Varnode::clearCover(void) const
 
 {
-  if (cover != (Cover *)0) {
-    delete cover;
-    cover = (Cover *)0;
-  }
+  delete cover;
+  cover = (Cover *)0;
 }
 
 /// Initialize a new Cover and set dirty bit so that updateCover will rebuild
@@ -255,8 +253,7 @@ void Varnode::calcCover(void) const
 
 {
   if (hasCover()) {
-    if (cover != (Cover *)0)
-      delete cover;
+    delete cover;
     cover = new Cover;
     setFlags(Varnode::coverdirty);
   }
@@ -598,8 +595,7 @@ Varnode::Varnode(int4 s,const Address &m,Datatype *dt)
 Varnode::~Varnode(void)
 
 {
-  if (cover != (Cover *)0)
-    delete cover;
+  delete cover;
   if (high != (HighVariable *)0) {
     high->remove(this);
     if (high->isUnattached())
@@ -1135,10 +1131,8 @@ VarnodeBank::VarnodeBank(AddrSpaceManager *m)
 void VarnodeBank::clear(void)
 
 {
-  VarnodeLocSet::iterator iter;
-
-  for(iter=loc_tree.begin();iter!=loc_tree.end();++iter)
-    delete *iter;
+  for(auto *it : loc_tree)
+    delete it;
 
   loc_tree.clear();
   def_tree.clear();
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/xml.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/xml.cc
index c7245b8f3..34e8e051a 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/xml.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/xml.cc
@@ -1903,8 +1903,7 @@ XmlScan::~XmlScan(void)
 void XmlScan::clearlvalue(void)
 
 {
-  if (lvalue != (string *)0)
-    delete lvalue;
+  delete lvalue;
 }
 
 int4 XmlScan::scanSingle(void)
@@ -2226,10 +2225,8 @@ void TreeHandler::characters(const char *text,int4 start,int4 length)
 Element::~Element(void)
 
 {
-  List::iterator iter;
-  
-  for(iter=children.begin();iter!=children.end();++iter)
-    delete *iter;
+  for(auto *it : children)
+    delete it;
 }
 
 const string &Element::getAttributeValue(const string &nm) const
@@ -2244,10 +2241,8 @@ const string &Element::getAttributeValue(const string &nm) const
 DocumentStorage::~DocumentStorage(void)
 
 {
-  for(int4 i=0;i<doclist.size();++i) {
-    if (doclist[i] != (Document *)0)
-      delete doclist[i];
-  }
+  for(int4 i=0;i<doclist.size();++i)
+    delete doclist[i];
 }
 
 Document *DocumentStorage::parseDocument(istream &s)
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/xml.y b/Ghidra/Features/Decompiler/src/decompile/cpp/xml.y
index 73d6082ff..8e03e495d 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/xml.y
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/xml.y
@@ -250,8 +250,7 @@ XmlScan::~XmlScan(void)
 void XmlScan::clearlvalue(void)
 
 {
-  if (lvalue != (string *)0)
-    delete lvalue;
+  delete lvalue;
 }
 
 int4 XmlScan::scanSingle(void)
@@ -573,10 +572,8 @@ void TreeHandler::characters(const char *text,int4 start,int4 length)
 Element::~Element(void)
 
 {
-  List::iterator iter;
-  
-  for(iter=children.begin();iter!=children.end();++iter)
-    delete *iter;
+  for(auto *it : children)
+    delete it;
 }
 
 const string &Element::getAttributeValue(const string &nm) const
@@ -591,10 +588,8 @@ const string &Element::getAttributeValue(const string &nm) const
 DocumentStorage::~DocumentStorage(void)
 
 {
-  for(int4 i=0;i<doclist.size();++i) {
-    if (doclist[i] != (Document *)0)
-      delete doclist[i];
-  }
+  for(int4 i=0;i<doclist.size();++i)
+    delete doclist[i];
 }
 
 Document *DocumentStorage::parseDocument(istream &s)
-- 
2.41.0

