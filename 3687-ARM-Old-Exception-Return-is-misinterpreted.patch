From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Andreas Werner <kernel@andy89.org>
Date: Mon, 29 Nov 2021 11:10:44 +0100
Subject: [PATCH] 3687: ARM: Old Exception Return is misinterpreted

The old (ARMv4 - ARMv6) exception return is misinterpreted as Jump in Ghidra.
According to ARM Instruction Set Specification `SUBS pc, <Rn>, #<const>` is always exception return.
The appearance in normal User or System space code is very unlikely, because the behavior is UNPREDICTABLE.
The side effect of all ALU Operation (AND, EOR, SUB, RSB, ADD, ADC, SBC, RSC, ORR, MOV, BIC, MVN)
with destination register PC is updating the Status Register (CPSR) with the content of the Saved
Status Register(SPSR). Therefor all ALU Operation with destination register PC shall be handled as
return not as Jump. This behavior was remove in ARMv8 64 Bit Code(AArch64) and still present in
ARMv8 32 Bit Code(AArch32) for compatible to older ARM Code.
---
 .../ARM/data/languages/ARMinstructions.sinc   | 108 ++++++++++--------
 1 file changed, 59 insertions(+), 49 deletions(-)

diff --git a/Ghidra/Processors/ARM/data/languages/ARMinstructions.sinc b/Ghidra/Processors/ARM/data/languages/ARMinstructions.sinc
index 27457984e..cbdf3ea6e 100644
--- a/Ghidra/Processors/ARM/data/languages/ARMinstructions.sinc
+++ b/Ghidra/Processors/ARM/data/languages/ARMinstructions.sinc
@@ -1951,8 +1951,9 @@ macro sub_with_carry_flags(op1, op2){
   dest:4 = rn + shift1 + zext(CY);
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :adc^COND^SBIT_CZNO pc,rn,shift2 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=5 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift2
@@ -1964,8 +1965,9 @@ macro sub_with_carry_flags(op1, op2){
   dest:4 = rn + shift2 + zext(CY);
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :adc^COND^SBIT_CZNO pc,rn,shift3 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=5 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift3
@@ -1977,8 +1979,9 @@ macro sub_with_carry_flags(op1, op2){
   dest:4 = rn + shift3 + zext(CY);
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 ArmPCRelImmed12: reloff		is U23=1 & immed & rotate
@@ -2054,8 +2057,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   dest:4 = rn + shift1;
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :add^COND^SBIT_CZNO pc,rn,shift2 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=4 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift2
@@ -2067,8 +2071,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   dest:4 = rn + shift2;
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :add^COND^SBIT_CZNO pc,rn,shift3 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=4 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift3
@@ -2080,8 +2085,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   dest:4 = rn + shift3;
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :and^COND^SBIT_CZNO Rd,rn,shift1	is $(AMODE) & ARMcond=1 & COND & c2124=0 & SBIT_CZNO & rn & Rd & c2627=0 & shift1
@@ -2126,8 +2132,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   logicflags();
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :and^COND^SBIT_CZNO pc,rn,shift2 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=0 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift2
@@ -2139,8 +2146,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   logicflags();
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :and^COND^SBIT_CZNO pc,rn,shift3 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=0 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift3
@@ -2152,8 +2160,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   logicflags();
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 # must match first! before conditional goto
@@ -2235,8 +2244,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   logicflags();
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :bic^COND^SBIT_CZNO pc,rn,shift2 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=14 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift2
@@ -2248,8 +2258,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   logicflags();
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :bic^COND^SBIT_CZNO pc,rn,shift3 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=14 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift3
@@ -2261,8 +2272,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   logicflags();
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 # bl used as a PIC instruction to get at current PC in lr
@@ -2650,8 +2662,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   logicflags();
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :eor^COND^SBIT_CZNO pc,rn,shift2 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=1 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift2
@@ -2663,8 +2676,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   logicflags();
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :eor^COND^SBIT_CZNO pc,rn,shift3 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=1 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift3
@@ -2676,8 +2690,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   logicflags();
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 @if defined(VERSION_7)
@@ -3518,8 +3533,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   resultflags(tmp);
   logicflags();
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(tmp);
-  goto [pc];
+  return [pc];
 }
 
 :mov^COND^SBIT_CZNO pc,shift2 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=13 & SBIT_CZNO & c1619=0 & Rd=15 & c2627=0 & shift2
@@ -3531,8 +3547,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   resultflags(tmp);
   logicflags();
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(tmp);
-  goto [pc];
+  return [pc];
 }
 :mov^COND^SBIT_CZNO pc,shift2 	is $(AMODE) &  LRset=1 & pc & COND & ARMcond=1 & c2124=13 & SBIT_CZNO & c1619=0 & Rd=15 & c2627=0 & shift2
 {
@@ -3543,8 +3560,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   resultflags(tmp);
   logicflags();
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(tmp);
-  call [pc];
+  return [pc];
 }
 
 :mov^COND^SBIT_CZNO pc,shift3 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=13 & SBIT_CZNO & c1619=0 & Rd=15 & c2627=0 & shift3
@@ -3556,8 +3574,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   resultflags(tmp);
   logicflags();
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(tmp);
-  goto [pc];
+  return [pc];
 }
 
 :mov lr,rm 		is $(AMODE) & ARMcond=0 & cond=15 & c2527=0 & S20=0 & c2124=13 & c1619=0 & rm & Rm2=15 & sftimm=0 & c0406=0 & Rd=14 & lr
@@ -4309,7 +4328,7 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   resultflags(dest);
   build SBIT_CZNO;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :orr^COND^SBIT_CZNO pc,rn,shift2 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=12 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift2
@@ -4321,8 +4340,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   logicflags();
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :orr^COND^SBIT_CZNO pc,rn,shift3 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=12 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift3
@@ -4334,8 +4354,9 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
   logicflags();
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 @if defined(VERSION_6)
@@ -4650,8 +4671,9 @@ macro BitReverse_arm(val) {
   dest:4 = shift1-rn;
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :rsb^COND^SBIT_CZNO pc,rn,shift2 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=3 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift2
@@ -4663,8 +4685,9 @@ macro BitReverse_arm(val) {
   dest:4 = shift2-rn;
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :rsb^COND^SBIT_CZNO pc,rn,shift3 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=3 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift3
@@ -4676,8 +4699,9 @@ macro BitReverse_arm(val) {
   dest:4 = shift3-rn;
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :rsc^COND^SBIT_CZNO Rd,rn,shift1	is $(AMODE) & ARMcond=1 & COND & c2124=7 & SBIT_CZNO & rn & Rd & c2627=0 & shift1
@@ -4722,8 +4746,9 @@ macro BitReverse_arm(val) {
   local dest:4=shift1-(rn+zext(!CY));
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :rsc^COND^SBIT_CZNO pc,rn,shift2 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=7 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift2
@@ -4735,8 +4760,9 @@ macro BitReverse_arm(val) {
   local dest:4=shift2-(rn + zext(!CY));
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 :rsc^COND^SBIT_CZNO pc,rn,shift3 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=7 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift3
@@ -4748,8 +4774,9 @@ macro BitReverse_arm(val) {
   local dest:4=shift3-(rn + zext(!CY));
   resultflags(dest);
   build SBIT_CZNO;
+  cpsr = spsr;
   ALUWritePC(dest);
-  goto [pc];
+  return [pc];
 }
 
 @if defined(VERSION_6)
@@ -5607,21 +5634,6 @@ armEndianNess: "BE" is c0031=0xf1010200 { export 1:1; }
 }
 
 :sub^COND^SBIT_CZNO pc,rn,shift1 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=2 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift1
-{
-  build COND;
-  build rn;
-  build shift1;
-  subflags(rn,shift1);
-  dest:4 = rn-shift1;
-  resultflags(dest);
-  build SBIT_CZNO;
-  cpsr = spsr;
-  SetThumbMode( ((cpsr >> 5) & 1) != 0 );
-  pc = dest;
-  goto [pc];
-}
-
-:sub^COND^SBIT_CZNO pc,rn,shift1 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=2 & SBIT_CZNO & rn & Rd=15 & Rn=14 & I25=1 & immed=0 & rotate=0 & c2627=0 & shift1
 {
   build COND;
   build rn;
@@ -5645,9 +5657,8 @@ armEndianNess: "BE" is c0031=0xf1010200 { export 1:1; }
   resultflags(dest);
   build SBIT_CZNO;
   cpsr = spsr;
-  SetThumbMode( ((cpsr >> 5) & 1) != 0 );
-  pc = dest;
-  goto [pc];
+  ALUWritePC(dest);
+  return [pc];
 }
 
 :sub^COND^SBIT_CZNO pc,rn,shift3 	is $(AMODE) & pc & ARMcond=1 & COND & c2124=2 & SBIT_CZNO & rn & Rd=15 & c2627=0 & shift3
@@ -5660,9 +5671,8 @@ armEndianNess: "BE" is c0031=0xf1010200 { export 1:1; }
   resultflags(dest);
   build SBIT_CZNO;
   cpsr = spsr;
-  SetThumbMode( ((cpsr >> 5) & 1) != 0 );
-  pc = dest;
-  goto [pc];
+  ALUWritePC(dest);
+  return [pc];
 }
 
 :swi^COND immed24 		is $(AMODE) & ARMcond=1 & COND & c2427=15 & immed24
-- 
2.43.0

