From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Philip Pemberton <philpem@philpem.me.uk>
Date: Fri, 17 Feb 2023 00:47:36 +0000
Subject: [PATCH] 5012: Feature/CPU: Add support for Mitsubishi MELPS-740 (6502
 variant)

Start adding support for Mitsubishi MELPS-740

The MELPS-740 family is a 6502 variant with some extra instructions and
addressing modes.

The "T" flag (use memory in X register instead of ACC) is not yet
implemented (only the flag has been added).

Divide and multiply similarly are not implemented.

The new indirect jump and JSR instructions need testing.

Add MELPS-740 SFRs (generic ones)

MELPS-740: Improve "JSR Special Page" instruction

Output syntax now matches Mitsubishi definition more closely, including
backslash prefix.
Note that the address will still be shown with C++ semantics e.g.
0xFF12, not 6502 semantics e.g. $FF12.
---
 Ghidra/Processors/6502/certification.manifest |   2 +
 .../Processors/6502/data/languages/6502.ldefs |  19 +-
 .../6502/data/languages/6502.slaspec          |  10 +
 .../6502/data/languages/melps740.pspec        |  44 ++++
 .../6502/data/languages/melps740.slaspec      | 244 ++++++++++++++++++
 5 files changed, 316 insertions(+), 3 deletions(-)
 create mode 100644 Ghidra/Processors/6502/data/languages/melps740.pspec
 create mode 100644 Ghidra/Processors/6502/data/languages/melps740.slaspec

diff --git a/Ghidra/Processors/6502/certification.manifest b/Ghidra/Processors/6502/certification.manifest
index 3070490891..a01413d0a1 100644
--- a/Ghidra/Processors/6502/certification.manifest
+++ b/Ghidra/Processors/6502/certification.manifest
@@ -5,5 +5,7 @@ data/languages/6502.ldefs||GHIDRA||||END|
 data/languages/6502.pspec||GHIDRA||||END|
 data/languages/6502.slaspec||GHIDRA||||END|
 data/languages/65c02.slaspec||GHIDRA||||END|
+data/languages/melps740.pspec||GHIDRA||||END|
+data/languages/melps740.slaspec||GHIDRA||||END|
 data/manuals/6502.idx||GHIDRA||||END|
 data/manuals/65c02.idx||GHIDRA||||END|
diff --git a/Ghidra/Processors/6502/data/languages/6502.ldefs b/Ghidra/Processors/6502/data/languages/6502.ldefs
index bd51b553ae..9e6127bd93 100644
--- a/Ghidra/Processors/6502/data/languages/6502.ldefs
+++ b/Ghidra/Processors/6502/data/languages/6502.ldefs
@@ -11,7 +11,7 @@
             processorspec="6502.pspec"
             manualindexfile="../manuals/6502.idx"
             id="6502:LE:16:default">
-    <description>6502 Microcontroller Family</description>
+    <description>6502 Microprocessor Family</description>
     <compiler name="default" spec="6502.cspec" id="default"/>
     <external_name tool="IDA-PRO" name="m6502"/>
   </language>
@@ -25,9 +25,22 @@
             processorspec="6502.pspec"
             manualindexfile="../manuals/65c02.idx"
             id="65C02:LE:16:default">
-    <description>65C02 Microcontroller Family</description>
+    <description>65C02 Microprocessor Family</description>
+    <compiler name="default" spec="6502.cspec" id="default"/>
+	<external_name tool="IDA-PRO" name="m65c02"/>
+  </language>
+
+  <language processor="MELPS740"
+            endian="little"
+            size="16"
+            variant="default"
+            version="1.0"
+            slafile="melps740.sla"
+            processorspec="melps740.pspec"
+            manualindexfile="../manuals/65c02.idx"
+            id="MELPS740:LE:16:default">
+    <description>Mitsubishi MELPS-740 Microprocessor Family</description>
     <compiler name="default" spec="6502.cspec" id="default"/>
 	<external_name tool="IDA-PRO" name="m65c02"/>
   </language>
-  
 </language_definitions>
diff --git a/Ghidra/Processors/6502/data/languages/6502.slaspec b/Ghidra/Processors/6502/data/languages/6502.slaspec
index 9105179cfd..d22f4785ea 100644
--- a/Ghidra/Processors/6502/data/languages/6502.slaspec
+++ b/Ghidra/Processors/6502/data/languages/6502.slaspec
@@ -9,7 +9,11 @@ define space register type=register_space size=1;
 define register offset=0x00  size=1 [ A X Y P ];
 define register offset=0x20 size=2  [ PC      SP   ];
 define register offset=0x20 size=1  [ PCL PCH S SH ];
+@ifdef MITSUBISHI_MELPS740
+define register offset=0x30 size=1 [ N V T B D I Z C ];	# status bits
+@else
 define register offset=0x30 size=1 [ N V B D I Z C ];	# status bits
+@endif
 
 #TOKENS
 
@@ -37,6 +41,9 @@ macro popSR() {
 	local ccr = *:1 SP;
 	N = ccr[7,1];
 	V = ccr[6,1];
+@ifdef MITSUBISHI_MELPS740
+	T = ccr[5,1];
+@endif
 	B = ccr[4,1];   # consider commenting out this B assignment
 	D = ccr[3,1];
 	I = ccr[2,1];
@@ -48,6 +55,9 @@ macro pushSR() {
 	local ccr:1 = 0xff;
 	ccr[7,1] = N;
 	ccr[6,1] = V;
+@ifdef MITSUBISHI_MELPS740
+	ccr[5,1] = T;
+@endif
 	# ccr[4,1] = B;  # always set B flag to 1
 	ccr[3,1] = D;
 	ccr[2,1] = I;
diff --git a/Ghidra/Processors/6502/data/languages/melps740.pspec b/Ghidra/Processors/6502/data/languages/melps740.pspec
new file mode 100644
index 0000000000..d7c9dc31ab
--- /dev/null
+++ b/Ghidra/Processors/6502/data/languages/melps740.pspec
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<processor_spec>
+  <programcounter register="PC"/>
+
+  <default_symbols>
+    <!-- Special function registers -->
+    <symbol name="SFR_P0"      address="E0"/>
+    <symbol name="SFR_P0DDR"   address="E1"/>
+    <symbol name="SFR_P1"      address="E2"/>
+    <symbol name="SFR_P1DDR"   address="E3"/>
+    <symbol name="SFR_P2"      address="E4"/>
+    <symbol name="SFR_P2DDR"   address="E5"/>
+    <symbol name="SFR_P3"      address="E8"/>
+    <symbol name="SFR_P3DDR"   address="E9"/>
+    <symbol name="SFR_P4"      address="EA"/>
+    <symbol name="SFR_P4DDR"   address="EB"/>
+    <symbol name="SFR_P5"      address="EC"/>
+    <symbol name="SFR_P6"      address="EE"/>
+    <symbol name="SFR_SIOMODE" address="F6"/>
+    <symbol name="SFR_SIOREG"  address="F7"/>
+    <symbol name="SFR_T1T2PRE" address="F9"/>
+    <symbol name="SFR_TMR1"    address="FA"/>
+    <symbol name="SFR_TMR2"    address="FB"/>
+    <symbol name="SFR_TXPRE"   address="FC"/>
+    <symbol name="SFR_TMRX"    address="FD"/>
+    <symbol name="SFR_INTCON"  address="FE"/>
+    <symbol name="SFR_TMRCON"  address="FF"/>
+
+    <!-- Interrupt vectors -->
+    <symbol name="V_INT2" address="FFF4" entry="true" type="code_ptr"/>
+    <symbol name="V_SIO_TIMER2" address="FFF6" entry="true" type="code_ptr"/>
+    <symbol name="V_TIMER1" address="FFF8" entry="true" type="code_ptr"/>
+    <symbol name="V_TIMERX" address="FFFA" entry="true" type="code_ptr"/>
+    <symbol name="V_INT1" address="FFFC" entry="true" type="code_ptr"/>
+    <symbol name="V_RESET" address="FFFE" entry="true" type="code_ptr"/>
+  </default_symbols>
+
+  <default_memory_blocks>
+    <memory_block name="ZERO_PAGE" start_address="0x0000" length="0x00E0" initialized="false"/>
+    <memory_block name="SFR" start_address="0x00E0" length="0x020" initialized="false"/>
+    <memory_block name="STACK" start_address="0x0100" length="0x0100" initialized="false"/>
+  </default_memory_blocks>
+</processor_spec>
diff --git a/Ghidra/Processors/6502/data/languages/melps740.slaspec b/Ghidra/Processors/6502/data/languages/melps740.slaspec
new file mode 100644
index 0000000000..135d6e5cc7
--- /dev/null
+++ b/Ghidra/Processors/6502/data/languages/melps740.slaspec
@@ -0,0 +1,244 @@
+@define MITSUBISHI_MELPS740
+@include "6502.slaspec"
+
+
+################################################################
+# Tokens
+################################################################
+
+define token bitopbyte (8)
+    bitop           = (0,7)
+
+    action          = (4,4)
+    bitindex        = (5,7) dec
+    optype          = (0,3)
+;
+
+define token testopbyte (8)
+    top             = (0, 7)
+    taaa            = (5, 7)
+    td              = (4, 4)
+    tbb             = (2, 3)
+    tcc             = (0, 1)
+;
+
+
+################################################################
+# Pseudo Instructions
+################################################################
+
+define pcodeop __cpu_fst;
+define pcodeop __cpu_wit_or_slw;
+define pcodeop __cpu_stop;
+
+
+################################################################
+# Instructions
+################################################################
+
+# NOTE:
+#  T Flag: Notes 1, 2, 3.
+#    Affects ADC, AND, CMP, EOR, LDA, ORA
+#    M(X) zpaddr is accessed instead of ACC
+#
+#  Notes 5,6,7,8:
+#   5. Only M50740A, 50740ASP, M50741, M50752, M50757, M50758
+#        FST, SLW
+#
+#   6. NOT  "     "  "      "  "    "  "    "  "    "  "    "
+#        WIT
+#
+#   7. NOT  M50752, M50757, M50758
+#        STP
+#
+#   8. Special types only e.g. M37450
+#        MUL, DIV
+#
+
+# BBC i, A, rel  => Branch if Bit Clear
+:BBC "#"bitindex, A, REL        is (action=1 & optype=0x3) & A & bitindex ; REL {
+    local jump = (A & (1 << bitindex)) == 0;
+    if (jump) goto REL;
+}
+
+# BBC i, zz, rel  => Branch if Bit Clear
+:BBC "#"bitindex, imm8, REL     is (action=1 & optype=0x7) & bitindex ; imm8 ; REL {
+    local ptr:2 = imm8;
+    local value:1 = *:1 ptr;
+    local jump = (value & (1 << bitindex)) == 0;
+    if (jump) goto REL;
+}
+
+# BBS i, A, rel  => Branch if Bit Set
+:BBS "#"bitindex, A, REL        is (action=0 & optype=0x3) & A & bitindex ; REL {
+    local jump = (A & (1 << bitindex)) != 0;
+    if (jump) goto REL;
+}
+
+# BBS i, zz, rel  => Branch if Bit Set
+:BBS "#"bitindex, imm8, REL     is (action=0 & optype=0x7) & bitindex ; imm8 ; REL {
+    local ptr:2 = imm8;
+    local value:1 = *:1 ptr;
+    local jump = (value & (1 << bitindex)) != 0;
+    if (jump) goto REL;
+}
+
+# BRA rel  => Unconditional branch
+:BRA  REL                       is op=0x80; REL
+{
+    goto REL;
+}
+
+# CLB i, A  => Clear bits in accumulator
+:CLB "#"bitindex, A             is (action=1 & optype=0xb) & A & bitindex
+{
+    local result = A & ~(1 << bitindex);
+    A = result;
+}
+
+# CLB i, $zz  => Clear bits in zeropage memory
+:CLB "#"bitindex, imm8          is (action=1 & optype=0xf) & bitindex ; imm8
+{
+    local ptr:2 = imm8;
+    local value:1 = *:1 ptr;
+    value = value & ~(1 << bitindex);
+    *:1 ptr = value;
+}
+
+# CLT => Clear T status bit
+:CLT                            is (op=0x12)
+{
+    T = 0;
+}
+
+# COM $zz  => Complement value in memory location (1's complement, bitwise invert, XOR 0xFF)
+:COM imm8                       is (op=0x44); imm8
+{
+    local ptr:2 = imm8;
+    local tmp:1 = *:1 ptr;
+    tmp = tmp ^ 0xFF;
+    *:1 ptr = tmp;
+    resultFlags(tmp);
+}
+
+# DEC A  => Decrement A. As per 65C02 but with different opcode.
+:DEC A                          is (op=0x1A) & A
+{
+    local tmp = A - 1;
+    A = tmp;
+    resultFlags(tmp);
+}
+
+
+# TODO: DIV $zz,X   => Divide -- note 8, special only eg M37450
+
+
+# FST  => Connect XOUTf with internal oscillator
+:FST                            is (op=0xE2)
+{
+    # FST - not implemented
+    __cpu_fst();
+}
+
+# INC A:  Increment A. As per 65C02 but with different opcode.
+:INC A                          is (op=0x3A) & A
+{
+    local tmp = A + 1;
+    A = tmp;
+    resultFlags(A);
+}
+
+
+# TESTME: JMP ($zz)  => Jump to indirect zeropage address
+:JMP (imm8)                     is (op=0xB2) ; imm8
+{
+    local ptr:2 = imm8;
+    local addr:2 = *:2 ptr;
+    goto [addr];
+}
+
+# TESTME: JSR ($zz)  => Jump subroutine at indirect zeropage address
+:JSR (imm8)                     is (op=0x02) ; imm8
+{
+    local ptr:2 = imm8;
+    local addr:2 = *:2 ptr;
+    *:2 (SP-1) = inst_next;
+    SP=SP-2;
+    call [addr];
+}
+
+# TESTME: JSR \$hhii  => Jump subroutine at special page offset ii
+
+specOff: "\\"^reloc             is imm8 [ reloc = 0xff00 + imm8; ] { export *:2 reloc; }
+
+:JSR specOff                    is op=0x22; specOff
+{
+    local addr:2 = specOff;
+    *:2 (SP-1) = inst_next;
+    SP=SP-2;
+    call [addr];
+}
+
+# LDM #$imm, $zpmemaddr   => Load immediate to memory
+:LDM "#"imm8, ADDR8             is (op=0x3C) ; imm8 ; ADDR8
+{
+    ADDR8 = imm8;
+}
+
+
+# TODO: MUL $zz,X		note 8, special only eg M37450
+
+
+# RRF $xx  => Swap nibbles in memory location
+:RRF imm8                       is (op=0x82) ; imm8
+{
+    local ptr:2 = imm8;
+    local value:1 = *:1 ptr;
+    local tmp = ((value & 0xF0) >> 4) | ((value & 0x0F) << 4);
+    *:1 ptr = tmp;
+}
+
+# SEB i, A  => Set bit in accumulator
+:SEB "#"bitindex, A             is (action=0 & optype=0xb) & A & bitindex
+{
+    local result = A | (1 << bitindex);
+    A = result;
+}
+
+# SEB i, $zz  => Set bit in zeropage memory
+:SEB "#"bitindex, imm8          is (action=0 & optype=0xf) & bitindex ; imm8
+{
+    local ptr:2 = imm8;
+    local value:1 = *:1 ptr;
+    value = value | (1 << bitindex);
+    *:1 ptr = value;
+}
+
+# SET  => set T status bit
+:SET                            is (op=0x32)
+{
+    T = 1;
+}
+
+# STP  => Stop?
+:STP                            is (op=0x42)
+{
+    # Stop - not implemented
+    __cpu_stop();
+}
+
+# TST $ZZ  => Compare memory location with zero
+:TST imm8                       is (op=0x64) ; imm8
+{
+    local ptr:2 = imm8;
+    local value:1 = *:1 ptr;
+    local tmp = 0 - value;
+    resultFlags(tmp);
+}
+
+# WIT or SLW  => Wait for interrupt? or Disconnect XOUTf from internal oscillator
+:WIT_SLW                        is (op=0xC2)
+{
+    # WIT or SLW - not implemented
+    __cpu_wit_or_slw();
+}
-- 
2.44.0

